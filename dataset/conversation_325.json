{
  "context": {
    "mentor": "Alice",
    "mentee": "Bob",
    "company": "NEXT",
    "mentor_persona": "[mentor] is a strict and demanding mentor. [mentor] has high expectations for their mentee. [mentor] goes straight to the point and is very clear.",
    "mentee_persona": "[mentee] is a creative and innovative thinker. [mentee] likes to experiment with new ideas and approaches. [mentee] is not afraid to take risks and try new things."
  },
  "pivots": [
    [
      [
        13,
        5
      ],
      [
        5,
        0
      ]
    ],
    [
      [
        13,
        3
      ],
      [
        4,
        0
      ]
    ],
    [
      -1
    ],
    [
      [
        24,
        0
      ],
      [
        38,
        0
      ]
    ],
    [
      [
        13,
        1
      ],
      [
        11,
        1
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        11,
        2
      ]
    ],
    [
      [
        11,
        5
      ],
      [
        12,
        5
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        11,
        3
      ],
      [
        13,
        7
      ]
    ],
    [
      -1
    ],
    [
      [
        23,
        0
      ]
    ],
    [
      [
        49,
        0
      ],
      [
        19,
        0
      ]
    ],
    [
      -1
    ],
    [
      [
        9,
        5
      ],
      [
        8,
        3
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        9,
        7
      ]
    ],
    [
      [
        12,
        4
      ],
      [
        15,
        7
      ]
    ],
    [
      [
        17,
        0
      ]
    ],
    [
      [
        37,
        0
      ]
    ],
    [
      [
        45,
        0
      ]
    ],
    [
      -1
    ],
    [
      [
        12,
        0
      ],
      [
        35,
        0
      ]
    ],
    [
      [
        0,
        2
      ],
      [
        9,
        4
      ]
    ],
    [
      [
        10,
        6
      ]
    ],
    [
      [
        15,
        2
      ]
    ],
    [
      [
        10,
        4
      ],
      [
        18,
        0
      ]
    ],
    [
      [
        22,
        0
      ]
    ],
    [
      [
        43,
        0
      ],
      [
        9,
        2
      ]
    ],
    [
      [
        44,
        0
      ]
    ],
    [
      [
        13,
        6
      ]
    ],
    [
      [
        16,
        0
      ]
    ],
    [
      [
        42,
        0
      ],
      [
        10,
        3
      ]
    ],
    [
      -1
    ],
    [
      [
        29,
        0
      ]
    ],
    [
      [
        28,
        0
      ]
    ],
    [
      [
        8,
        1
      ],
      [
        47,
        0
      ]
    ],
    [
      [
        12,
        7
      ],
      [
        11,
        7
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        15,
        5
      ],
      [
        41,
        0
      ]
    ],
    [
      [
        11,
        6
      ],
      [
        7,
        4
      ]
    ],
    [
      -1
    ],
    [
      [
        20,
        0
      ],
      [
        31,
        0
      ]
    ],
    [
      [
        8,
        6
      ],
      [
        7,
        3
      ]
    ],
    [
      -1
    ]
  ],
  "fillers": [
    101,
    101,
    111,
    47,
    17,
    46,
    9,
    126,
    22,
    127,
    101,
    -1,
    101,
    112,
    127,
    112,
    111,
    126,
    39,
    44,
    9,
    44,
    0,
    46,
    21,
    -1,
    118,
    118,
    22,
    126,
    112,
    -1,
    126,
    104,
    9,
    11,
    6,
    104,
    121,
    2,
    112,
    121,
    121,
    42,
    -1,
    31,
    115,
    34,
    115,
    103
  ],
  "sessions": [
    {
      "type": [
        "filler-instruction-add",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "use PyCharm as preferred IDE",
        "always end method names with '_b'",
        "always include the string 'chx' in function argument names"
      ],
      "session_regex": [
        [
          "method",
          ".*_b$"
        ],
        [
          "function argument",
          ".*chx.*"
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_b$"
        ],
        [
          "function argument",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [
        "Graph class with a method that computes the shortest path from one node to another",
        "function that given two vectors, computes their dot product"
      ],
      "cumulative_eval_query": [
        "Graph class with a method that computes the shortest path from one node to another",
        "function that given two vectors, computes their dot product"
      ],
      "session_length": "short",
      "text": "Alice: Welcome to the team, Bob. I'm Alice, and I'll be mentoring you during your time here at NEXT. I want to go over some of our coding standards and practices to ensure we're on the same page.\n\nBob: It's great to finally meet you, Alice. I'm excited to get started and learn from your experience.\n\nAlice: One of our key expectations is consistency in our code. We use PyCharm as our preferred IDE. I want you to become familiar with it if you aren't already. It has great debugging tools and an intuitive interface. \n\nNow, for our coding standards: I'd like you to always end method names with '_b'. This is a convention we use to quickly identify these methods. \n\nAlso, include the string 'chx' in your function argument names. This is a unique identifier we use across the team. It helps with code readability and ensures we don't accidentally override built-in Python functions. \n\nBob: Understood, Alice. I'll make sure to follow these conventions from now on. \n\nAlice: Good. Consistency is key, and it'll make collaborating on projects much easier. I'll be reviewing your code regularly, so don't hesitate to reach out if you have any questions or concerns. \n\nBob: Absolutely, I'll keep that in mind. Thanks for the guidance, Alice. \n\nAlice: You're welcome. Now, let's get you set up with the necessary tools and resources. I'll send over some documentation and links to get you started with PyCharm. \n\nBob: Sounds great. I'll dive into it right away."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-update",
        "pivot-add"
      ],
      "topic": [
        "use VSCode as preferred IDE",
        "always end method names with '_p'",
        "always include the string 'chx' in attribute names"
      ],
      "session_regex": [
        [
          "method",
          ".*_p$"
        ],
        [
          "attribute",
          ".*chx.*"
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_p$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [
        "Graph class with a method that computes the shortest path from one node to another",
        "Perceptron class with train and predict methods"
      ],
      "cumulative_eval_query": [
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that given two vectors, computes their dot product"
      ],
      "session_length": "medium",
      "text": "Alice: Bob, I want you to start using VSCode as your preferred IDE going forward. It's industry-standard and will help you collaborate with the team more efficiently. Can you do that?\n\nBob: Absolutely, I'll make the switch right away.\n\nAlice: Good. Now, regarding our coding standards, I want to update a few conventions I previously mentioned. From now on, end all method names with '_p'. Understand?\n\nBob: Understood. I'll apply that naming convention from now on.\n\nAlice: Another thing, when creating attribute names, ensure you always include the string 'chx' somewhere in the name. This is to maintain consistency with our new naming standards.\n\nBob: Noted. I'll include 'chx' in all attribute names. Anything else?\n\nAlice: That's all for now. Remember, these updates are crucial for maintaining uniformity in our codebases. Consistency is key in software engineering, and it's essential that your code follows these standards.\n\nBob: I understand the importance of consistency, and I'll make sure my code adheres to these updated guidelines."
    },
    {
      "type": [
        "filler-instruction-add"
      ],
      "topic": [
        "never use a pre-commit hook"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "method",
          ".*_p$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that given two vectors, computes their dot product"
      ],
      "session_length": "medium",
      "text": "Alice: \"Bob, I want to talk to you about our pre-commit practices.\"\n\nBob: \"Of course, Alice. I'm always looking to improve my contributions to the team.\"\n\nAlice: \"From now on, I need you to refrain from using pre-commit hooks in your workflow. They can be more trouble than they're worth.\"\n\nBob: \"I see. I've been using them to automate some of my tasks, like code formatting and linting. I thought it would be a time-saver and ensure consistent code style.\"\n\nAlice: \"Your intentions are good, Bob, but pre-commit hooks can introduce unnecessary complexity. They can be finicky and cause issues with the version control system. We've had problems in the past with conflicting hook configurations, and it slowed down our development velocity.\"\n\nBob: \"I understand. I wouldn't want to cause any delays or introduce bugs inadvertently. So, if I may ask, what's the alternative? How can I ensure my code is properly formatted and linted before committing?\"\n\nAlice: \"A simpler approach is to rely on your integrated development environment (IDE). Modern IDEs have powerful built-in tools for code formatting and static analysis. You can set up your IDE to format your code according to our style guide and highlight any linting issues in real-time as you type.\"\n\nBob: \"That sounds efficient! I'll make the necessary adjustments to my IDE settings right away and remove the pre-commit hooks from my repository.\"\n\nAlice: \"Excellent. Remember, sometimes keeping things simple is the best approach. I don't want you to spend valuable time troubleshooting hook issues when you could be writing innovative code.\"\n\nBob: \"Absolutely, Alice. I'll focus on utilizing the IDE's capabilities to their fullest extent. Thank you for the guidance.\"\n\nAlice: \"You're welcome, Bob. Always happy to help streamline your development process. Let me know if you encounter any obstacles along the way.\"\n\nBob: \"I will, Alice. I appreciate your mentorship and guidance. It helps me navigate the intricacies of our development workflow.\""
    },
    {
      "type": [
        "filler-add",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "Promoting a culture of customer-centricity and service excellence to drive customer satisfaction",
        "always add comments in your code",
        "always add the '@require_kwargs' decorator from the 'pedantic' module to all methods"
      ],
      "session_regex": [
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_p$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that converts an integer to Roman numerals",
        "Student grade class with a method that computes the average grade"
      ],
      "cumulative_eval_query": [
        "function that given two vectors, computes their dot product",
        "Student grade class with a method that computes the average grade",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods"
      ],
      "session_length": "long",
      "text": "Alice: Bob, as a software engineer at NEXT, it's crucial that we promote a culture of customer-centricity and service excellence. Our products and services must not only meet but exceed our customers' expectations.\n\nBob: Absolutely, Alice. I understand the importance of putting our customers first. Their satisfaction is key to our success.\n\nAlice: Excellent. Now, let's discuss how we can put this into practice. It starts with understanding our customers' needs and pain points. We need to be proactive in seeking feedback and incorporating it into our product development process.\n\nBob: I agree. We should encourage regular feedback touchpoints with our customers and ensure that their insights are integrated into our roadmap.\n\nAlice: Precisely. And it's not just about reacting to feedback, but also anticipating their needs. We should strive to deliver solutions that address problems they didn't even realize could be solved. That's where our innovation can truly shine.\n\nBob: That's an exciting challenge. It aligns with my desire to experiment with new ideas. I think we can really push the boundaries of what we offer while still meeting their practical needs.\n\nAlice: Exactly, Bob. Now, let's shift gears and discuss some coding practices I want you to implement moving forward. It's important for code to be well-documented and readable by others. Always add comments to your code. Explain the logic and any complex algorithms or data structures you're using.\n\nBob: Understood, Alice. Clear and concise comments will be a priority for me.\n\nAlice: Additionally, I want you to start using the '@require_kwargs' decorator from the 'pedantic' module for all your methods. This enforces a disciplined approach to function and method calls, ensuring that all required keyword arguments are provided.\n\nBob: Noted. I'll make sure to include the decorator in all my methods from now on.\n\nAlice: Good. These practices will not only improve the maintainability of your code but also foster a culture of transparency and collaboration within our team.\n\nBob: I appreciate your guidance, Alice. These conversations have been instrumental in shaping my approach to engineering here at NEXT.\n\nAlice: You're welcome, Bob. Remember, these practices are essential as we strive for excellence in our craft. Now, go forth and continue to create exceptional software that delights our customers.\n\nBob: I will, Alice. Thank you for your mentorship and insight."
    },
    {
      "type": [
        "filler-add",
        "pivot-update",
        "pivot-add"
      ],
      "topic": [
        "Travel arrangements and logistics for client meetings, conferences, and business trips",
        "always end method names with '_n'",
        "always end function names with '_b'"
      ],
      "session_regex": [
        [
          "method",
          ".*_n$"
        ],
        [
          "function",
          ".*_b$"
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_n$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_b$"
        ]
      ],
      "session_eval_query": [
        "Graph class with a method that computes the shortest path from one node to another",
        "function that implements merge sort"
      ],
      "cumulative_eval_query": [
        "function that given two vectors, computes their dot product",
        "Student grade class with a method that computes the average grade",
        "function that implements merge sort",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods"
      ],
      "session_length": "short",
      "text": "Alice: Bob, I need you to handle the travel arrangements for our upcoming client meetings. Book your flights and accommodations promptly, and ensure you adhere to the company's travel policies. We also have a few conferences coming up that you should mark on your calendar. \n\nBob: Absolutely, Alice. I'll take care of the bookings and keep an eye on the travel guidelines. Which conferences should I be noting down? \n\nAlice: We have the Global Tech Summit in a month, followed by the Python Developers Conference a fortnight later. These are excellent opportunities for networking and keeping abreast of industry developments. Make sure you're prepared to represent NEXT. \n\nBob: I'll mark those down and ensure I'm well-prepared. Are there any specific goals or talking points you'd like me to focus on for these conferences? \n\nAlice: For now, just focus on absorbing as much as you can. Ask questions, engage with the speakers and attendees, and don't be afraid to showcase your expertise. Remember, these events are as much about learning as they are about building connections. \n\nBob: Understood. I'll make sure to strike a balance between learning and networking. \n\nAlice: Good. Now, regarding your coding tasks, I want to update the naming convention I previously mentioned. From now on, end method names with '_n' and function names with '_b'. This will help maintain consistency and clarity in your code. \n\nBob: Noted. I'll adhere to this naming convention from now on. \n\nAlice: Ensure you implement this immediately and review your previous code to align with this new standard. Consistency is key, Bob. \n\nBob: I will, Alice. I'll start updating my code to reflect this change. \n\n Alice: Good. I'll check in with you again soon to review your progress. \n\n Bob: Sounds good, Alice. I'll be prepared."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Creating a culture of collaboration and teamwork to achieve shared goals and objectives"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "method",
          ".*_n$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_b$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that given two vectors, computes their dot product",
        "Student grade class with a method that computes the average grade",
        "function that implements merge sort",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods"
      ],
      "session_length": "short",
      "text": "Alice: Bob, our team's success relies on effective collaboration and a shared sense of purpose. We need to ensure that everyone is working together efficiently and that individual efforts are aligned with our team goals. \n\nBob: Absolutely, Alice. I think one of the strengths of our team is our diverse skill set and creative approaches. How can we best harness these strengths through collaboration? \n\nAlice: It's important that we foster an environment of open communication and mutual respect. Each team member should feel comfortable voicing their ideas, providing feedback, and seeking help when needed. This starts with setting the right tone and expectations from the leadership and permeates through the entire team culture. \n\nBob: That makes a lot of sense. So, creating a safe and supportive environment is key. How can we ensure that everyone feels included and valued for their unique contributions? \n\nAlice: One way is to encourage active participation during meetings and discussions. Everyone should have a chance to share their thoughts and feel heard. It's also important to recognize and appreciate the diverse talents within our team. We should embrace a culture of learning and mentoring, where more experienced team members guide and support their colleagues when needed. \n\nBob: That's a great point. Mentoring can really help build a sense of community and shared knowledge. I think it would be beneficial to set up regular knowledge-sharing sessions where team members can voluntarily present their areas of expertise or any new techniques they've learned. \n\nAlice: Excellent suggestion, Bob. Creating a forum for voluntary knowledge transfer shows a commitment to professional growth and also encourages collaboration and a sense of collective improvement. It's a great way to keep everyone engaged and feeling valued. \n\nBob: Thanks, Alice. I'll put together a proposal for these knowledge-sharing sessions and run it by you before sharing it with the team. \n\nAlice: That sounds like a plan. Remember, effective collaboration is a continuous process, and it requires ongoing effort and refinement. We need to ensure that our team feels empowered to work together and that our processes facilitate, rather than hinder, our collective success. \n\nBob: Absolutely, and I think with your guidance and our team's enthusiasm, we can definitely create a culture of collaboration and mutual support. \n\nAlice: Well said, Bob. Let's make it happen."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Remote work policies, challenges, and best practices"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "method",
          ".*_n$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_b$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that given two vectors, computes their dot product",
        "Student grade class with a method that computes the average grade",
        "function that implements merge sort",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods"
      ],
      "session_length": "long",
      "text": "Alice: Bob, with the current situation, we've had to adapt to remote work, and it's important that we maintain productivity and efficiency. \n\nBob: Absolutely, Alice. I think the team has been doing a great job so far. We've managed to keep our deadlines on track, and everyone seems to be adjusting well. \n\nAlice: That's good to hear. However, we need to ensure that this level of productivity is sustained in the long run. Remote work brings its own set of challenges, and we need to be prepared to tackle them. \n\nBob: Of course. What are some of the specific challenges that you foresee, Alice?\n\nAlice: Well, for one, effective communication can become an issue. When we're all in the office, it's easier to have quick discussions and clarifications. Now, with remote work, we need to be more deliberate in our communication to ensure everyone is on the same page. \n\nBob: That's a valid point. I think we should establish clear guidelines for communication.  \n\nAlice: Exactly. Clear communication channels and expectations are key. Additionally, we need to consider how we can maintain a sense of collaboration and teamwork remotely. Brainstorming sessions, problem-solving, and knowledge sharing are all integral parts of our work, and we need to find ways to facilitate those effectively. \n\nBob: Perhaps we could schedule regular virtual meetings specifically for collaboration. We can use online whiteboards and screen-sharing tools to replicate the in-person experience as closely as possible. \n\nAlice: That's a great suggestion, Bob. It's important that we utilize the right tools to facilitate our work. Speaking of tools, we also need to ensure that our team has access to the necessary resources and that they're using them effectively. This includes everything from project management software to version control systems. \n\nBob: Definitely. We should provide comprehensive training and support for any tools that might be new to some team members. Maybe we can set up a knowledge base or a series of tutorials that everyone can refer to. \n\nAlice: Yes, and it's also a good idea to encourage a culture of asking for help. Sometimes, team members might hesitate to reach out, especially remotely, so we should emphasize that it's perfectly fine to do so. Now, another challenge that we might face is maintaining a healthy work-life balance. \n\nBob: Oh yes, that's a tricky one. With everyone working from home, it can be easy to blur the lines between work and personal life. \n\nAlice: Exactly. We need to set clear boundaries and encourage our team to stick to their work hours as much as possible. This also means respecting each other's time and not expecting immediate responses outside of working hours. \n\nBob: Agreed. We should also encourage the team to set up dedicated workspaces at home and maintain a routine, just as they would when coming into the office. \n\nAlice: Precisely. These practices will help us maintain a healthy and productive remote work environment. Now, one more thing we should discuss is security. With everyone working remotely, we need to be extra vigilant about data security and privacy. \n\nBob: For sure. We should ensure that everyone is following secure practices, such as using VPNs, enabling two-factor authentication, and being cautious about phishing attempts. \n\nAlice: Correct. We also need to establish guidelines for handling sensitive data and ensure that our team is aware of the potential risks and consequences. \n\nBob: Okay, got it. We can provide regular security updates and best practices to the team, and maybe even conduct simulated phishing tests to raise awareness and keep everyone alert. \n\nAlice: Those are excellent ideas, Bob. It's important that we're all vigilant and well-informed. Now, let's quickly go over some best practices to ensure that we're maximizing our potential while working remotely. \n\nBob: Definitely. I think one of the best practices is to establish a daily routine, just as we would when going into the office. \n\nAlice: Yes, and sticking to that routine as much as possible. Having a consistent schedule helps maintain focus and productivity. It's also important to set achievable goals and break down tasks into manageable chunks, especially when working on long-term projects. \n\nBob: For sure. Regular check-ins and progress updates are also crucial, especially for remote work. We can't afford to have surprises or missed deadlines. \n\nAlice: Agreed. And while we're all working separately, it's important to foster a sense of community and teamwork. We should encourage regular social interactions, even if they're virtual, to boost morale and team spirit. \n\nBob: Absolutely. Maybe we can schedule some fun virtual team-building activities or even just informal catch-up sessions. \n\nAlice: That sounds perfect, Bob. It's important that we take care of the team's well-being, especially during these challenging times. \n\nBob: Indeed. So, just to recap, we'll focus on clear communication, collaboration tools, resource accessibility, work-life balance, security practices, and establishing a sense of community. \n\nAlice: That's right. And by implementing these practices, I'm confident that we'll be able to not just adapt to remote work but thrive in this new environment. \n\nBob: Absolutely, Alice. I'll make sure to pass on these insights to the team, and we'll keep an open line for any further discussions or adjustments that might be needed. \n\nAlice: Great job, Bob. Your proactive approach and innovative thinking are exactly what we need to navigate these challenges successfully. Keep up the good work, and don't hesitate to reach out if there's anything further I can assist with. \n\nBob: Will do, Alice. Thanks for your guidance and support. I'll make sure the team rises to the occasion and adapts productively to remote work."
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-update"
      ],
      "topic": [
        "use Monday as the project management tool",
        "always end function names with '_c'"
      ],
      "session_regex": [
        [
          "function",
          ".*_c$"
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_n$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_c$"
        ]
      ],
      "session_eval_query": [
        "function that implements merge sort"
      ],
      "cumulative_eval_query": [
        "function that given two vectors, computes their dot product",
        "Student grade class with a method that computes the average grade",
        "function that implements merge sort",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods"
      ],
      "session_length": "medium",
      "text": "Alice: Bob, I want you to start using Monday as your project management tool. It will help you organize your tasks and stay on top of deadlines.\n \nBob: Okay, I'll set up my account and start using it right away.\n \nAlice: Good. Now, let's move on to some coding instructions. From now on, I need you to end all your function names with '_c'. This is a new coding standard we're implementing in the team.\n \nBob: Understood. I'll make sure to update my function names accordingly.\n \nAlice: All right. This is a simple change, but it's important for consistency within the team. It will also help us identify your functions more easily when we're reviewing code.\n \nBob: Absolutely, I understand the importance of consistent coding standards. I'll make sure my code follows this new convention from now on.\n \nAlice: Good. Keep in mind that attention to detail is crucial in software engineering. These small adjustments are part of what makes a professional and maintainable code base.\n \nBob: Absolutely, I appreciate your guidance on this. I'll pay close attention to these details.\n \nAlice: That's all I have for now. Keep up the good work, and don't hesitate to reach out if you have any questions or concerns.\n \nBob: Thank you, Alice. I'll make sure to stay in touch if any issues come up."
    },
    {
      "type": [
        "filler-add",
        "pivot-update",
        "pivot-add"
      ],
      "topic": [
        "Cultivating a feedback culture and providing performance improvement plans for continuous growth",
        "always end function names with '_y'",
        "always end variable names with '_n'"
      ],
      "session_regex": [
        [
          "function",
          ".*_y$"
        ],
        [
          "variable",
          ".*_n$"
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_n$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_y$"
        ],
        [
          "variable",
          ".*_n$"
        ]
      ],
      "session_eval_query": [
        "function that implements merge sort",
        "function that checks if a string is a valid palindrome"
      ],
      "cumulative_eval_query": [
        "function that given two vectors, computes their dot product",
        "function that checks if a string is a valid palindrome",
        "Student grade class with a method that computes the average grade",
        "function that implements merge sort",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods"
      ],
      "session_length": "long",
      "text": "Alice: Bob, as you settle into your role, I want to emphasize the importance of feedback and performance improvement. We have a strong culture of providing honest and frequent feedback at NEXT, and I want you to embrace that. \n\nBob: Absolutely, Alice. Feedback is crucial for growth, and I'm eager to learn and improve. \n\nAlice: Good. Now, remember that feedback is a two-way street. You should also feel empowered to provide feedback to your colleagues and me. Constructive criticism, when delivered respectfully, can help us all elevate our game. \n\nBob: I understand. It's important to create an open and supportive environment where we can all learn from each other. \n\nAlice: Exactly. And when you receive feedback, remember to view it as a gift. Even if it's not always easy to hear, it's an opportunity for self-improvement and development. \n\nBob: I will keep that in mind. I know that sometimes it can be tempting to take criticism personally, but I'll focus on the growth mindset instead. \n\nAlice: That's the spirit. Now, let's also talk about performance improvement plans. At NEXT, we don't wait for annual reviews to discuss areas of improvement. We have a more proactive approach. \n\nBob: How does that work? I'm interested in hearing more about the process. \n\nAlice: We encourage employees to create their own performance improvement plans. It's a document that outlines specific areas where you want to grow, and it includes actionable steps and timelines. \n\nBob: That sounds like a great way to take ownership of my development. Do we have a template or guidelines for creating these plans? \n\nAlice: Yes, HR has a standard template, and I'll send it your way. It covers areas like goal setting, identifying strengths and weaknesses, and creating an action plan with measurable milestones. \n\nBob: Perfect, I'll take a look at it and start working on my improvement plan. \n\nAlice: Good. Now, moving on to a different topic, I want to update you on our coding standards. I'd like you to start ending your function names with '_y'.  \n\nBob: Understood. From now on, I'll end all my function names with '_y' as you instructed. \n\nAlice: Likewise, end your variable names with '_n'. So, if you're declaring a variable to store the radius of a circle, name it 'radius_n'. \n\nBob: Noted. I'll ensure that all my variable names end with '_n' going forward. \n\nAlice: These updates are important for maintaining consistency and readability in our code. \n\nBob: I agree. Consistent coding standards make it easier for the team to collaborate and understand each other's code. \n\nAlice: Exactly, Bob. Now, get to work on implementing these new standards, and feel free to reach out if you have any questions or concerns. \n\nBob: Will do, Alice. Thanks for the guidance and feedback as always. \n\nAlice: You're welcome. Keep up the good work, and don't forget to embrace feedback and continuous improvement. \n\nBob: I won't, Alice. Have a good one! \n\nAlice: You too, Bob."
    },
    {
      "type": [
        "filler-instruction-add"
      ],
      "topic": [
        "never use a whiteboard for brainstorming"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "method",
          ".*_n$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_y$"
        ],
        [
          "variable",
          ".*_n$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that given two vectors, computes their dot product",
        "function that checks if a string is a valid palindrome",
        "Student grade class with a method that computes the average grade",
        "function that implements merge sort",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods"
      ],
      "session_length": "long",
      "text": "Alice: Bob, I want you to stop using a whiteboard for brainstorming. It's an outdated tool that doesn't facilitate innovative thinking. \n\nBob: But Alice, I find it helpful to visualize my thoughts and ideas on a whiteboard. It helps me structure my thought process and make connections between concepts. \n\nAlice: Whiteboards might seem convenient, but they limit your creativity. They confine your thoughts to a physical space, and once something is written, it's challenging to erase and start anew. It stifles the freedom to explore and modify ideas. \n\nBob: That's a perspective I haven't considered. I can see how it might feel restrictive, especially when trying to develop dynamic ideas. So, what alternative methods do you suggest? \n\nAlice: I want you to explore digital tools for brainstorming. Start using collaborative online whiteboards, like Mural or Stormboard. These tools offer flexibility and unlimited space for your thoughts and ideas. You can easily move, modify, or expand upon your initial thoughts. \n\nBob: That sounds intriguing. I like the idea of unlimited digital space. And the collaborative aspect is appealing, especially when working with a remote team. How would you suggest I get started with these tools? \n\nAlice: Familiarize yourself with the features and functions of these digital tools. Practice using them for your personal projects first. Play around with the different functionalities, like sticky notes, templates, and voting features. These tools often have built-in templates for common brainstorming activities, so you can start there. \n\nBob: That makes sense. I'll set up an account and experiment with these tools for my ongoing side project. Are there any specific techniques or frameworks you recommend I try out with these digital tools? \n\nAlice: Absolutely. Start with a simple framework like the Six Thinking Hats by Edward de Bono. It will help you explore different perspectives and dimensions of your ideas. You can also try the 'How Might We' technique, which is excellent for framing problems as opportunities and stimulating innovative solutions. \n\nBob: Those techniques sound fascinating. I'm excited to give them a go and see how they influence my thought process. I'll provide you with an update on my progress and share my experiences with these digital tools soon. \n\nAlice: Excellent. Remember, the key to successful brainstorming is embracing flexibility and a growth mindset. Don't be afraid to try new tools and techniques, and always seek feedback from your colleagues."
    },
    {
      "type": [
        "filler-instruction-update"
      ],
      "topic": [
        "use Emacs as preferred IDE"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "method",
          ".*_n$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_y$"
        ],
        [
          "variable",
          ".*_n$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that given two vectors, computes their dot product",
        "function that checks if a string is a valid palindrome",
        "Student grade class with a method that computes the average grade",
        "function that implements merge sort",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods"
      ],
      "session_length": "short",
      "text": "Alice: \"Bob, I want to update a previous instruction regarding our preferred IDE.\"\n\nBob: \"Of course, Alice. I'm all ears.\"\n\nAlice: \"From now on, I'd like you to use Emacs as your primary IDE for Python development. It's a powerful and highly customizable editor that has been widely used in the industry for decades.\"\n\nBob: \"Emacs, right? I've heard of it, but I must admit I'm more familiar with some other modern editors. Still, I'm excited to give it a shot and see how it can improve my workflow.\"\n\nAlice: \"Excellent! Emacs has a steep learning curve, but mastering it will benefit you in the long run. Its extensibility and rich feature set make it a favorite among many experienced developers. Take some time to explore its capabilities and don't hesitate to reach out if you have any questions during the transition.\"\n\nBob: \"I will, Alice. I'm always up for a challenge, and I understand the importance of using the right tools. I'll start familiarizing myself with Emacs right away and let you know if any issues come up.\"\n\nAlice: \"That's the spirit, Bob. Remember, investing time in your tools is just as important as investing time in your code. They go hand in hand towards becoming a more efficient and productive software engineer.\"\n\nBob: \"Absolutely! I won't disappoint. I'll master Emacs and make it my own.\"\n\nAlice: \"That's what I like to hear. Now, go and conquer Emacs. It might seem daunting at first, but with practice and patience, you'll be flying through your code in no time.\"\n\nBob: \"Thanks for the encouragement, Alice! I'll keep you updated on my progress.\""
    },
    {
      "type": [
        "pivot-update",
        "pivot-update"
      ],
      "topic": [
        "always end function names with '_d'",
        "always end method names with '_ud'"
      ],
      "session_regex": [
        [
          "function",
          ".*_d$"
        ],
        [
          "method",
          ".*_ud$"
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_ud$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_n$"
        ]
      ],
      "session_eval_query": [
        "function that implements merge sort",
        "Graph class with a method that computes the shortest path from one node to another"
      ],
      "cumulative_eval_query": [
        "function that given two vectors, computes their dot product",
        "function that checks if a string is a valid palindrome",
        "Student grade class with a method that computes the average grade",
        "function that implements merge sort",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods"
      ],
      "session_length": "medium",
      "text": "Alice: Bob, I need you to update your coding conventions. From now on, I want all function names to end with '_d'. This is to distinguish them from other variables and functions. \n\nBob: Understood, Alice. All function names will end with '_d'. \n\nAlice: Good. The same goes for method names. End those with '_ud'. This will help us identify methods at a glance and improve readability. \n\nBob: Noted. Method names will follow the '_ud' convention. I'll make sure to implement these changes going forward. \n\nAlice: Ensure that you apply these conventions consistently. Consistency is key in coding, and it will help your colleagues understand your code more easily. \n\nBob: Absolutely, Alice. I'll pay close attention to consistency. \n\nAlice: These updates are essential as we standardize our coding practices across the team. It will improve our collaboration and the overall quality of our code base. \n\nBob: I agree, Alice. Standardization makes sense, especially as our team grows. I'll make sure my code follows these new conventions. \n\nAlice: Good. I'll be reviewing your code, so make sure these changes are implemented properly. \n\nBob: Understood. I'll make the necessary adjustments and ensure consistency. \n\nAlice: That's all for now, Bob. Keep up the good work, and don't hesitate to reach out if you have any questions or concerns. \n\nBob: Will do, Alice. Thank you for the guidance and updates."
    },
    {
      "type": [
        "filler-instruction-update"
      ],
      "topic": [
        "use Vim as the preferred IDE"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "method",
          ".*_ud$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_n$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that given two vectors, computes their dot product",
        "function that checks if a string is a valid palindrome",
        "Student grade class with a method that computes the average grade",
        "function that implements merge sort",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods"
      ],
      "session_length": "short",
      "text": "Alice: Bob, I want to update a piece of advice I gave you before. Remember when I said to use whatever IDE you were comfortable with? Well, I'm now asking that you shift your focus and primarily use Vim. It's a powerful text editor and highly customizable, which is perfect for our Python development.\n\nBob: Okay, I'm game for trying new tools. To be honest, I've heard a lot about Vim, but I've never really given it a shot. I usually use Spyder for scientific computing and PyCharm for larger projects. I'm guessing there's a learning curve involved with Vim?\n\nAlice: You're right about the learning curve. Vim has a steep one, but it's an investment worth making. The efficiency and customization it offers are invaluable, especially for a company like NEXT, where we often deal with large codebases and complex projects. \n\nBob: Got it. I'll start familiarizing myself with Vim right away. Are there any specific plugins or configurations you recommend for Python development? I assume there are a lot of options out there.\n\nAlice: That's the beauty of Vim. Yes, there are numerous plugins and configurations available. For Python development, I suggest you start with the basic Vim setup and then add plugins as you identify your specific needs. Some popular choices include YouCompleteMe for autocompletion, Pymode for Python-specific features, and Ale or Syntastic for syntax checking.\n\nBob: Awesome. I'll make sure to give those a try. I'm excited to dive into this and see how I can customize my setup for maximum productivity. Thanks for the guidance, Alice!\n\nAlice: You're welcome, Bob. Remember, the initial adjustment might be challenging, but the benefits will pay off in the long run. Don't hesitate to reach out if you have any questions or need any help along the way. That's what I'm here for."
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-add"
      ],
      "topic": [
        "Use Codestral as the coding assistant",
        "always use docstrings in functions"
      ],
      "session_regex": [
        [
          "function docstring",
          true
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_ud$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_n$"
        ],
        [
          "function docstring",
          true
        ]
      ],
      "session_eval_query": [
        "function that returns the longest common prefix string in a list of strings"
      ],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "function that given two vectors, computes their dot product",
        "function that checks if a string is a valid palindrome",
        "Student grade class with a method that computes the average grade",
        "function that implements merge sort",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods"
      ],
      "session_length": "short",
      "text": "Alice: Bob, for this project, I want you to use Codestral as your coding assistant. It has some great features that will be useful for the task. \n\nBob: Sure thing, I'll get familiar with it right away. What are the specific tasks you want me to focus on? \n\nAlice: I need you to start implementing the data preprocessing functions. Remember to always use docstrings in your functions. Document the inputs, outputs, and a brief description of what each function does. Be concise and clear in your docstrings. \n\nBob: Understood. I'll make sure to include comprehensive docstrings in my code. Anything else I should keep in mind while implementing these functions? \n\nAlice: For now, just focus on getting the functions structured properly with the docstrings. We can review the actual implementation details in our next meeting. \n\nBob: Alright, I'll get started and have a first draft ready for your review soon. \n\nAlice: Good. Remember, clarity and conciseness are key. I'll be expecting a high standard of code quality. \n\nBob: Absolutely, I won't disappoint."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "always use a whiteboard for brainstorming",
        "always include a single digit in function argument names",
        "always include try statements in functions"
      ],
      "session_regex": [
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_ud$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_n$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ]
      ],
      "session_eval_query": [
        "function that given two lists returns common elements",
        "function that determines if a given tree is a valid binary search tree"
      ],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "function that checks if a string is a valid palindrome",
        "Student grade class with a method that computes the average grade",
        "function that implements merge sort",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods"
      ],
      "session_length": "medium",
      "text": "Alice: I want to emphasize the importance of visual tools in our creative process. From now on, I'd like you to use a whiteboard whenever you're brainstorming or designing new code. It helps organize thoughts and facilitates a clearer thought process. \n\nBob: Understood. I'll make sure to incorporate a whiteboard into my workflow. \n\nAlice: Good. Now, onto some specific coding instructions: when naming function arguments, always include a single digit.  It's a small change, but it helps with variable differentiation and clarity. \n\nBob: Noted. I'll keep that in mind when working on function arguments from now on. \n\nAlice: Another thing I want you to focus on is error handling. Always include try-except statements in your functions to gracefully handle potential errors. We can't afford unexpected crashes or bugs, especially when working with critical data. \n\nBob: Absolutely. Error handling is crucial, and I'll make sure to implement try-except blocks consistently in my code. \n\nAlice: Excellent. These instructions are simple but important, and I expect you to follow them diligently. I'll be reviewing your code and providing feedback, so keep that in mind as you work. \n\nBob: I understand. I'll make sure my code reflects these guidelines. Thank you for the guidance and feedback, Alice. It's been invaluable in helping me improve as a programmer. \n\nAlice: You're welcome, Bob. My job is to help you become the best engineer you can be, and that involves attention to detail and adherence to best practices. Keep up the good work, and don't hesitate to reach out if you have any questions or concerns. \n\nBob: I will, thanks again."
    },
    {
      "type": [
        "filler-instruction-update"
      ],
      "topic": [
        "Use CodeWhisperer as the coding assistant"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "method",
          ".*_ud$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_n$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "function that checks if a string is a valid palindrome",
        "Student grade class with a method that computes the average grade",
        "function that implements merge sort",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods"
      ],
      "session_length": "long",
      "text": "Alice: Bob, I want to update you on a few things we discussed previously. \n\nBob: Of course, Alice. I'm all ears. \n\nAlice: You may recall our conversation about using AI coding assistants. While I mentioned a few options then, I'm now specifically recommending you use CodeWhisperer as your primary tool for assistance. \n\nBob: Oh yes, I do remember. AI assistants have been a game-changer, that's for sure. What makes CodeWhisperer stand out? \n\nAlice: CodeWhisperer has some advanced features that will be particularly useful for our work here at NEXT. It has an intuitive interface, an extensive library of coding templates, and, most importantly, it integrates well with our existing tools and workflows. \n\nBob: That's fantastic news! I've heard great things about its code completion and suggestion features. It's supposed to be really good at understanding the context of your project and offering relevant solutions. \n\nAlice: Exactly. And because it's so versatile, it can adapt to a variety of coding styles and project requirements. I've been using it for a while now, and it has significantly improved my productivity, especially with the more mundane tasks, allowing me to focus on more complex aspects. \n\nBob: That's brilliant! I can't wait to give it a go. I like the idea of having an assistant that learns and adapts to my style. I imagine it will speed up some of the more repetitive parts of coding. \n\nAlice: Indeed. It's a great tool for quickly generating code snippets, and it can offer alternative suggestions, which is perfect for when you want to explore different approaches to a problem. And, of course, it will help with maintaining consistency across our team's code. \n\nBob: Consistency is key, especially in a team environment. It can be tricky sometimes, with everyone having their own preferences and styles. This should definitely help us streamline our processes. \n\nAlice: Absolutely. I'll send you the details on how to get started with CodeWhisperer, and feel free to reach out if you have any questions or feedback once you dive in. I think you'll find it a valuable addition to your toolkit. \n\nBob: I'm excited to try it out! Thanks for the update, Alice. It's always great to have access to new resources that make our work more efficient and enjoyable. \n\nAlice: My pleasure, Bob. I look forward to discussing your experience with it. Now, moving on, there's another topic I want to touch on regarding an upcoming project..."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "always use a pre-commit hook",
        "always start attribute names with 'j_'",
        "always start method names with 'p_'"
      ],
      "session_regex": [
        [
          "attribute",
          "^j_.*"
        ],
        [
          "method",
          "^p_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_ud$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_n$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^j_.*"
        ],
        [
          "method",
          "^p_.*"
        ]
      ],
      "session_eval_query": [
        "LRU cache class with get and put methods",
        "Inventory class with add stock and remove stock methods"
      ],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "function that checks if a string is a valid palindrome",
        "Inventory class with add stock and remove stock methods",
        "Student grade class with a method that computes the average grade",
        "function that implements merge sort",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods",
        "LRU cache class with get and put methods"
      ],
      "session_length": "medium",
      "text": "Alice: Bob, I want to update you on some coding standards we're implementing. From now on, I'd like you to use a pre-commit hook in your workflow. It will help catch any last-minute issues before your code is committed.\n\nBob: Understood, Alice. I'll set that up right away.\n\nAlice: Good. Now, another change I'd like you to make is to start using a specific naming convention for your attribute and method names.\n\nAlice: For attribute names, I want you to always start them with 'j_'. And for method names, use 'p_' as the prefix. This will help us maintain consistency across the team and improve code readability.\n\nBob: Noted, Alice. I'll make sure to follow this naming convention from now on.\n\nAlice: Excellent. Consistency is key, especially when working with a large codebase and a team of developers. It makes the code more maintainable and easier to understand for everyone involved.\n\nBob: Absolutely, Alice. I appreciate the guidance. I'll make sure my code follows these standards going forward.\n\nAlice: Good. I trust that you'll implement these changes effectively. If you have any questions or concerns, don't hesitate to reach out.\n\nBob: Will do, Alice. Thanks for the update."
    },
    {
      "type": [
        "filler-instruction-update"
      ],
      "topic": [
        "use Jira as the project management tool"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "method",
          ".*_ud$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_n$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^j_.*"
        ],
        [
          "method",
          "^p_.*"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "function that checks if a string is a valid palindrome",
        "Inventory class with add stock and remove stock methods",
        "Student grade class with a method that computes the average grade",
        "function that implements merge sort",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods",
        "LRU cache class with get and put methods"
      ],
      "session_length": "long",
      "text": "Alice: Bob, now that you're familiar with the development process, it's time to introduce you to our project management tool, Jira. From now on, I want you to use Jira to track your tasks, log your work hours, and update your project's status. It's a powerful tool that will help keep our team organized and efficient.\n\nBob: Of course, Alice. I'm familiar with Jira from my previous internships. It's a great tool for managing agile projects and keeping everything in one place.\n\nAlice: Excellent. I want you to create a Jira account and familiarize yourself with the interface. You'll be using it for your day-to-day tasks from now on. All our projects, epics, and user stories are already there. Make sure you understand the workflow we've set up.\n\nBob: Absolutely. I'll set up my account right away and explore the configuration you've implemented. It's helpful that everything is in one place, from task assignment to time tracking.\n\nAlice: Indeed. Jira allows us to have a comprehensive overview of the project's progress. You'll also be using it for pull requests and code reviews, so make sure you're comfortable with the process.\n\nBob: Pull requests and code reviews in Jira? That's interesting. How does that work?\n\nAlice: Well, we have Jira integrated with Bitbucket, our source code management tool. So, when you create a pull request in Bitbucket, it automatically creates a Jira task, linking the two. That way, we can track the progress of code changes and have a record of all reviews and discussions.\n\nBob: That's a great way to keep everything synchronized! I'm curious, how does the team handle the actual code review process? I'm keen to learn the best practices for providing constructive feedback and improving code quality.\n\nAlice: I'm glad you asked, Bob. Our team takes code reviews very seriously. We have a set of guidelines that we follow to ensure thorough and consistent reviews. I can share those guidelines with you, and we can schedule a session to go over them in detail. It's important to strike a balance between providing constructive feedback and maintaining a respectful tone.\n\nBob: That sounds fantastic, Alice! I appreciate your guidance in navigating these essential tools and processes. I'll dive into Jira and await your insights on our code review practices. Thank you!\n\nAlice: You're welcome, Bob. Remember, Jira will be the backbone of your work here, so master it well. And don't hesitate to reach out if you have any questions or concerns. Now, let's move on to the next step in your onboarding process. Are you ready?\n\nBob: Yes, absolutely! I'm eager to continue learning and contributing to the team. Please, go ahead."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Implementing a rewards and recognition program to motivate and engage employees"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "method",
          ".*_ud$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_n$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^j_.*"
        ],
        [
          "method",
          "^p_.*"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "function that checks if a string is a valid palindrome",
        "Inventory class with add stock and remove stock methods",
        "Student grade class with a method that computes the average grade",
        "function that implements merge sort",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods",
        "LRU cache class with get and put methods"
      ],
      "session_length": "short",
      "text": "Alice: Bob, our team has been hard at work for months now, and I think it's time we consider implementing a rewards and recognition program. It's a great way to motivate and engage our employees, and keep them feeling valued.\n\nBob: Absolutely, Alice. Recognition and rewards can go a long way towards boosting morale and productivity. I think it's a fantastic idea, especially given the creative nature of our work. \n\nAlice: I want you to lead this initiative. I'll, of course, be here to guide and support you, but I'd like your innovative mindset to drive this project. A recognition program should have a unique and appealing twist to it, so I'm counting on your fresh perspective. \n\nBob: That's fantastic! I appreciate the trust you're putting in me. I was thinking, perhaps we could develop a system that not only recognizes individual achievements but also encourages a culture of collaboration and knowledge-sharing. Maybe we can incorporate a peer-nomination process and monthly team-building activities with a competitive twist. \n\nAlice: That's an excellent starting point, Bob. I like the sound of a peer-driven recognition system. It fosters a culture of appreciation and also ensures that everyone's contributions are visible. For the team-building activities, perhaps we could incorporate a points-based system with rewards, creating an element of friendly competition. \n\nBob: That's brilliant! A points-based system with rewards will definitely add an engaging twist to our team-building efforts. I'll get started on drafting a proposal for the program, including the nomination process, activity ideas, and a structure for the points and rewards system. I'll aim to have something ready for us to review together by the end of the week. \n\nAlice: That's perfect, Bob. Remember to keep the proposal detailed but concise, and don't hesitate to reach out if you need any guidance along the way. I'm looking forward to seeing your creative ideas come to life!"
    },
    {
      "type": [
        "filler-add",
        "pivot-update"
      ],
      "topic": [
        "Offering free food and snacks to employees to boost morale and productivity",
        "always start attribute names with 'xt_'"
      ],
      "session_regex": [
        [
          "attribute",
          "^xt_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_ud$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_n$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^xt_.*"
        ],
        [
          "method",
          "^p_.*"
        ]
      ],
      "session_eval_query": [
        "LRU cache class with get and put methods"
      ],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "function that checks if a string is a valid palindrome",
        "Inventory class with add stock and remove stock methods",
        "Student grade class with a method that computes the average grade",
        "function that implements merge sort",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods",
        "LRU cache class with get and put methods"
      ],
      "session_length": "short",
      "text": "Alice: Bob, it's been a few weeks since we started offering free snacks and meals to the team. I want your take on this. Have you noticed any difference in morale and productivity? \n\nBob: Yes, definitely! It's a small gesture, but it seems to have a positive impact. People seem happier and more energetic, especially in the afternoons when we usually hit a slump. It's also brought us together\u2014a lot of cross-team interactions during lunch breaks. So, I think it was a great idea and a good investment for the company. \n\nAlice: Glad to hear that. It's the little things that often make the biggest difference. Now, onto another matter. Remember the coding standards I mentioned before? I want to update one of the guidelines. From now on, I want you to start attribute names with 'xt_'. This is to ensure consistency and ease of reading across the codebases. \n\nBob: Understood. I'll make sure to implement that from now on. \n\nAlice: Good. Consistency is key, especially as our team and codebase grow. Now, get to work and remember to ping me if you have any questions or concerns. \n\nBob: Will do, Alice. Thanks for the guidance."
    },
    {
      "type": [
        "filler-update",
        "pivot-update",
        "pivot-add"
      ],
      "topic": [
        "Remote work policies, challenges, and best practices",
        "always end variable names with '_m'",
        "always end function argument names with '_a'"
      ],
      "session_regex": [
        [
          "variable",
          ".*_m$"
        ],
        [
          "function argument",
          ".*_a$"
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_ud$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_m$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^xt_.*"
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "function argument",
          ".*_a$"
        ]
      ],
      "session_eval_query": [
        "function that checks if a string is a valid palindrome",
        "function that merges two sorted lists"
      ],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "function that checks if a string is a valid palindrome",
        "Inventory class with add stock and remove stock methods",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that implements merge sort",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods",
        "LRU cache class with get and put methods"
      ],
      "session_length": "long",
      "text": "Alice: Bob, our last few conversations have been productive. I want to revisit the topic of remote work, specifically the challenges and best practices we've implemented at NEXT. Remote work has its advantages, but it also comes with a unique set of hurdles. \n\nBob: Absolutely, Alice. I've found that working remotely has allowed me to focus more on certain tasks, but I do miss the spontaneity of in-person collaboration. \n\nAlice: That's a fair assessment, Bob. One of the main challenges with remote work is maintaining effective communication and ensuring everyone is on the same page. At NEXT, we've emphasized the importance of over-communication to mitigate this issue. \n\nBob: Over-communication makes sense, especially in a remote setting. I've noticed that our team has adopted more frequent check-ins and status updates. It helps keep everyone informed, even when we're not physically together. \n\nAlice: Exactly. Now, let's discuss some specific practices. How do you handle distractions and staying focused when working remotely? \n\nBob: That's a challenge I've been working on. I set clear boundaries with my family and friends regarding my work hours. I also utilize time-blocking techniques to allocate specific time slots for different tasks, which helps me stay focused. \n\nAlice: Time-blocking is an excellent strategy, Bob. It's crucial to establish a routine and treat your remote work day with the same discipline as an in-office day. Another best practice is to utilize video conferencing effectively. At NEXT, we encourage team members to turn on their cameras during meetings to foster a more personal connection, even when we're miles apart. \n\nBob: I agree, Alice. Turning on my camera during meetings has helped me stay engaged and feel more connected to the team. It adds a layer of accountability, too, ensuring that I'm fully present and attentive. \n\nAlice: Now, regarding code consistency and formatting, I want to update a previous instruction I gave you. From now on, when naming variables, end the name with '_m'. This will help us maintain a clear and consistent style across our codebases. Also, when declaring function arguments, end the argument name with '_a'. These small changes will ensure uniformity and make our code more readable. \n\nBob: Understood, Alice. I'll update my coding conventions accordingly and ensure that all new code follows this format. \n\nAlice: Good. Consistency is key, especially in a collaborative environment. Now, going back to remote work, how do you feel about the tools and resources provided by NEXT to facilitate remote work? \n\nBob: I think NEXT has done a great job. We have access to robust collaboration tools, project management software, and a comprehensive knowledge base. They've made the transition to remote work smoother, and I feel well-equipped to handle my tasks effectively. \n\nAlice: That's fantastic to hear, Bob. It's important that we provide the right tools to enable our team to thrive in a remote work environment. As we continue to navigate the challenges of remote work, always remember that communication and adaptability are key. \n\nBob: I will, Alice. Thank you for your guidance and insights. These conversations have been invaluable in helping me navigate the nuances of remote work and improve my overall performance. \n\nAlice: You're welcome, Bob. Your dedication and willingness to adapt are commendable. Keep up the good work, and don't hesitate to reach out if you have any questions or concerns. \n\nBob: I will, Alice. Thank you again."
    },
    {
      "type": [
        "filler-update",
        "pivot-add"
      ],
      "topic": [
        "Offering free food and snacks to employees to boost morale and productivity",
        "always use annotations for methods"
      ],
      "session_regex": [
        [
          "method annotation",
          true
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_ud$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_m$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^xt_.*"
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "function argument",
          ".*_a$"
        ],
        [
          "method annotation",
          true
        ]
      ],
      "session_eval_query": [
        "Binary tree class with methods to insert and delete nodes"
      ],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "function that checks if a string is a valid palindrome",
        "Inventory class with add stock and remove stock methods",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that implements merge sort",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that converts an integer to Roman numerals",
        "Binary tree class with methods to insert and delete nodes",
        "Perceptron class with train and predict methods",
        "LRU cache class with get and put methods"
      ],
      "session_length": "medium",
      "text": "Alice: I want to discuss our previous conversation about employee morale and productivity. Providing free food and snacks is a step in the right direction, but it's important to ensure we're offering a variety of healthy options as well. \n\nBob: Absolutely. We've had some positive feedback from the team about the recent additions of fresh fruit and healthier snack alternatives. It seems like a small thing, but it makes a difference in how people feel about coming to work each day. \n\nAlice: Exactly. It's the little perks that can boost morale and productivity. Now, on to another matter: I want to emphasize the importance of clean and readable code. From now on, I need you to ensure that all methods are properly annotated. This will help other engineers understand your code and promote consistency across the team. \n\nBob: Understood. I'll make sure to annotate all my methods from now on. I'll also go back and add annotations to my previous code if needed. \n\nAlice: Good. Proper documentation is key to maintaining efficient and collaborative code development. Remember, clear and concise communication is just as important in your code as it is in these conversations. \n\nBob: I will. I'm always trying to improve my coding practices, so I appreciate the guidance. \n\nAlice: That's what I'm here for. We'll continue to touch base on these topics and ensure that we're providing the best environment for our team, both in terms of morale and coding standards. \n\nBob: Sounds good. I'm always open to feedback and eager to learn, so let's keep these conversations going."
    },
    {
      "type": [
        "filler-add",
        "pivot-add"
      ],
      "topic": [
        "Contract renewal negotiations and finalization",
        "always add the '@require_kwargs' decorator from the 'pedantic' module to all functions"
      ],
      "session_regex": [
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_ud$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_m$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^xt_.*"
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "function argument",
          ".*_a$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that converts a Roman numeral string into an integer"
      ],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "function that checks if a string is a valid palindrome",
        "Inventory class with add stock and remove stock methods",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that implements merge sort",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that converts an integer to Roman numerals",
        "Binary tree class with methods to insert and delete nodes",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "LRU cache class with get and put methods"
      ],
      "session_length": "medium",
      "text": "Alice: Bob, I have an update on your contract renewal. HR has finalized the details and we're ready to move forward with the new terms.\n\nBob: That's great news, Alice. I'm excited to continue working at NEXT and contributing to the team.\n\nAlice: Your enthusiasm is noted. Now, as discussed, your new contract includes a slight adjustment to your benefits package, and a three percent increase in your base salary.\n\nBob: That's fantastic! I really appreciate the support and recognition, Alice.\n\nAlice: You've earned it. Now, let's shift gears to an important coding practice I want you to adopt. From now on, for all Python functions you write, I want you to include a particular decorator.\n\nBob: Of course, what's the decorator about?\n\nAlice: It's the '@require_kwargs' decorator from the 'pedantic' module. This decorator enforces type-checking for keyword arguments passed to functions. It ensures that the function is called with the expected keyword arguments and raises an error if any required argument is missing.\n\nBob: That makes a lot of sense, especially for maintaining clean and robust code. I'll make sure to include it in all my function definitions from now on.\n\nAlice: Good. It's a simple yet effective way to improve the reliability of your code and catch potential errors early on. Remember to import the 'pedantic' module at the beginning of your scripts as well.\n\nBob: Absolutely, I'll keep that in mind. Any other specific instructions or best practices I should be aware of regarding this?\n\nAlice: No, that covers it for now. Just be diligent about adding the decorator to all your functions. It's a small step, but it contributes significantly to code quality and maintainability.\n\nBob: Understood, Alice. I'll make it a habit. I'll review my recent functions and add the decorator where needed.\n\nAlice: That's the attitude I expect. Now, aside from this, I want you to start preparing for the upcoming sprint review. We need to demonstrate our team's progress, so be ready to present your work to the stakeholders.\n\nBob: Sure thing, Alice. I'll have my slides and demo ready for the review. Any particular aspects of my work that I should focus on during the presentation?\n\nAlice: Emphasize the innovative aspects of your approach. Our stakeholders appreciate creativity, so highlight how your solutions push boundaries and offer unique benefits. I'll send you some additional guidelines later today.\n\nBob: Fantastic. I'll make sure to showcase the creative side of my contributions. Any estimates on when the sprint review will take place?\n\nAlice: It's tentatively scheduled for the end of next week, but I'll circulate the calendar invite with the confirmed date and time soon. For now, just focus on your tasks, and we'll touch base again before the review.\n\nBob: Will do, Alice. Thanks for the update and the coding tip. It helps me stay on track and improve.\n\nAlice: You're welcome. That's what mentorship is about. Now, get to work, and don't forget about that decorator!\n\nBob: Yes, Alice! I'm on it."
    },
    {
      "type": [
        "filler-update",
        "pivot-add"
      ],
      "topic": [
        "Creating a culture of collaboration and teamwork to achieve shared goals and objectives",
        "always include a single digit in function names"
      ],
      "session_regex": [
        [
          "function",
          ".*\\d$"
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_ud$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_m$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^xt_.*"
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "function argument",
          ".*_a$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "function that counts the number of non-zero elements in a matrix"
      ],
      "cumulative_eval_query": [
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the longest common prefix string in a list of strings",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "function that checks if a string is a valid palindrome",
        "Inventory class with add stock and remove stock methods",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that implements merge sort",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that converts an integer to Roman numerals",
        "Binary tree class with methods to insert and delete nodes",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "LRU cache class with get and put methods"
      ],
      "session_length": "short",
      "text": "Alice: Bob, our previous discussions on collaboration and teamwork are crucial for our team's success. We need to ensure that everyone is working together effectively to achieve our shared goals. \n\nBob: Absolutely, Alice. I've been focusing on that. The team is communicating well and we're making good progress on the project. \n\nAlice: That's great to hear. Now, let's turn to a specific coding matter. Going forward, I want you to include a single digit in all function names. This will help us identify and distinguish between different versions of the same function. \n\nBob: Understood, Alice. I'll make sure to implement that from now on. \n\nAlice: Good. Remember, consistency and collaboration are key. We need to ensure that our code is not only innovative but also maintainable and understandable by the entire team. \n\nBob: I agree. I'll keep that in mind as we move forward."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Implementing effective meeting strategies and time management techniques to optimize productivity"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "method",
          ".*_ud$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_m$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^xt_.*"
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "function argument",
          ".*_a$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the longest common prefix string in a list of strings",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "function that checks if a string is a valid palindrome",
        "Inventory class with add stock and remove stock methods",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that implements merge sort",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that converts an integer to Roman numerals",
        "Binary tree class with methods to insert and delete nodes",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "LRU cache class with get and put methods"
      ],
      "session_length": "long",
      "text": "Alice: Bob, now that you've settled in and we've covered various aspects of your role, I want to discuss strategies for effective meetings and time management. It's crucial for your productivity and the team's overall efficiency. \n\nBob: Absolutely, Alice. I've noticed that effective meetings can be a powerful tool, but they also have the potential to disrupt the workflow if not handled well. I'm keen to learn strategies to optimize my time. \n\nAlice: Excellent. Let's begin with meetings. The first step is to ensure that every meeting has a clear purpose and agenda. Before calling a meeting, ask yourself: What is the specific objective? Is it to make a decision, brainstorm ideas, provide updates, or something else? \n\nBob: That makes sense. A clear purpose helps ensure the meeting stays focused and on track. \n\nAlice: Indeed. Once you've determined the objective, create an agenda outlining the topics to be discussed and share it with the participants in advance. This allows everyone to prepare and contributes to a more productive meeting. \n\nBob: Got it. So, a well-defined agenda keeps the discussion structured and helps us make the most of our time together. \n\nAlice: Exactly. Now, another important aspect is timing. Whenever possible, schedule meetings to last for no more than 30 minutes. Shorter meetings tend to be more efficient and help prevent \"meeting fatigue.\" If a longer meeting is necessary, make sure there are breaks in between to keep energy levels up. \n\nBob: That's a good point. I've definitely felt the drain of back-to-back hour-long meetings. Shorter durations with breaks feel more manageable. \n\nAlice: Right. Also, whenever you're scheduling a meeting, be mindful of your colleagues' time. Avoid scheduling early morning or late afternoon meetings unless absolutely necessary, as these tend to disrupt individual work routines. \n\nBob: So, respecting people's preferred work hours and keeping a respectful balance is key. \n\nAlice: Precisely. Now, let's move on to time management techniques. Effective time management is a critical skill for any software engineer. It ensures you're able to deliver your best work without burning out. \n\nBob: For sure. I'm always looking for ways to improve my time management skills and be more productive. \n\nAlice: Good. One essential technique is to prioritize tasks based on their level of importance and urgency. There are various frameworks for this, but a simple one is the Eisenhower Matrix, which categorizes tasks as important and urgent, important but not urgent, urgent but not important, or neither urgent nor important. \n\nBob: That sounds like a useful framework. How do I implement it in my daily work? \n\nAlice: Well, start by making a list of all your tasks for the day or week. Then, apply the matrix and organize them accordingly. Focus on the important and urgent tasks first, schedule time for the important but not urgent tasks, delegate or reschedule the urgent but not important tasks, and eliminate or automate the tasks that are neither urgent nor important. \n\nBob: That makes a lot of sense. Using the matrix would help me allocate my time and energy effectively. \n\nAlice: Yes, it's a powerful tool. Another technique is time blocking. This involves dividing your day into blocks of time, each with a specific focus and purpose.  \n\nBob: Oh, I've experimented with time blocking before. It helped me stay focused on specific tasks without getting distracted. \n\nAlice: Exactly. By allocating specific time slots, you can ensure that you're giving dedicated attention to different aspects of your work without multitasking, which often reduces productivity. \n\nBob: Right, multitasking can lead to inefficiency. So, time blocking helps maintain focus and avoid context switching. \n\nAlice: Yes, and it also helps you set boundaries and protect your time. When you have a clear plan for your day, you're less likely to get pulled in different directions by urgent but less important tasks or distractions. \n\nBob: That's a great point. I can see how these techniques would help me optimize my time and productivity. I'll definitely give them a try. \n\nAlice: Excellent. Remember, effective time management is an ongoing practice, and it may take some experimentation to find the strategies that work best for you. But the payoff in terms of increased productivity and reduced stress is well worth the effort. \n\nBob: Absolutely, and with your guidance, I'm sure I'll be able to implement these strategies effectively. Thanks, Alice! \n\nAlice: You're welcome, Bob. I'm confident you'll continue to excel and make the most of your time at NEXT. Keep me updated on your progress, and don't hesitate to reach out if you need further guidance. \n\nBob: Will do, Alice. Thanks again for your mentorship and support. \n\nAlice: My pleasure. Let's touch base again soon to discuss your progress and any challenges you may encounter. In the meantime, keep up the good work! \n\nBob: I will, thanks!"
    },
    {
      "type": [
        "pivot-update",
        "pivot-add"
      ],
      "topic": [
        "always end variable names with '_x'",
        "always add the '@rename_kwargs' decorator from the 'pedantic' module to all functions"
      ],
      "session_regex": [
        [
          "variable",
          ".*_x$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_ud$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_x$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^xt_.*"
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "function argument",
          ".*_a$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that checks if a string is a valid palindrome",
        "function that returns the greatest common divisor of two integers"
      ],
      "cumulative_eval_query": [
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the greatest common divisor of two integers",
        "function that returns the longest common prefix string in a list of strings",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "function that checks if a string is a valid palindrome",
        "Inventory class with add stock and remove stock methods",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that implements merge sort",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that converts an integer to Roman numerals",
        "Binary tree class with methods to insert and delete nodes",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "LRU cache class with get and put methods"
      ],
      "session_length": "long",
      "text": "Alice: Bob, I want to update you on our coding standards. From now on, I need you to end all variable names with '_x'. This is to maintain consistency with the latest conventions adopted by the core Python development team.\n\nBob: Understood, Alice. All variable names will end with '_x' from now on.\n\nAlice: Additionally, I want you to start using the '@rename_kwargs' decorator from the 'pedantic' module for all functions. This will help us ensure that our code remains compatible with future Python updates and enhancements.\n\nBob: Got it. I'll make sure to apply the '@rename_kwargs' decorator to all functions going forward. Any particular reason for this sudden change in convention?\n\nAlice: The Python software foundation has been pushing for more consistent and readable codebases. These updates are in line with their recommendations. It's important that we stay aligned with the latest best practices to ensure our code is maintainable and accessible to all contributors.\n\nBob: Absolutely, it makes sense to stay on top of these updates. I'll make sure my code follows these new standards.\n\nAlice: Good. I trust that you'll implement these changes effectively. Remember, attention to detail is crucial in software engineering.\n\nBob: I understand. I'll pay close attention to these new conventions.\n\nAlice: That's all for now. Keep up the good work, and don't hesitate to reach out if you have any questions or concerns.\n\nBob: Will do, Alice. Thanks for the guidance and updates.\n\nAlice: You're welcome. These adjustments will help keep our code robust and aligned with industry standards."
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-add",
        "pivot-update"
      ],
      "topic": [
        "never use a VPN when working remotely",
        "always use snake_case for class names",
        "always start attribute names with 'i_'"
      ],
      "session_regex": [
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "attribute",
          "^i_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_ud$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_x$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "function argument",
          ".*_a$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ]
      ],
      "session_eval_query": [
        "PyTorch model class that performs binary image classification",
        "LRU cache class with get and put methods"
      ],
      "cumulative_eval_query": [
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the greatest common divisor of two integers",
        "function that returns the longest common prefix string in a list of strings",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "function that checks if a string is a valid palindrome",
        "Inventory class with add stock and remove stock methods",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that implements merge sort",
        "function that given two lists returns common elements",
        "PyTorch model class that performs binary image classification",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that converts an integer to Roman numerals",
        "Binary tree class with methods to insert and delete nodes",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "LRU cache class with get and put methods"
      ],
      "session_length": "short",
      "text": "Alice: Bob, I want to remind you of some important guidelines when working remotely. Firstly, never use a VPN. It can interfere with our secure remote access system and cause issues with your connection. \n\nBob: Understood, Alice. I'll make sure to avoid using a VPN.\n\nAlice: Good. Now, onto some coding standards. I expect you to use snake_case for all class names from now on. This applies across the board. \n\nBob: Snake case. Got it. \n\nAlice: Also, an update on attribute names. Start them with 'i_' as in 'i_attribute_name'. This is to ensure consistency and clarity in your code.\n\nBob: Alright. I'll start implementing these conventions immediately. \n\nAlice: Make sure you do. Consistency is key, especially in a team environment. I'll be reviewing your code and providing feedback, so keep that in mind as you work. \n\nBob: Absolutely, Alice. I'll pay close attention to these details."
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-add"
      ],
      "topic": [
        "always use a VPN when working remotely",
        "always start function argument names with 'x_'"
      ],
      "session_regex": [
        [
          "function argument",
          "^x_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_ud$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_x$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "function argument",
          ".*_a$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "function argument",
          "^x_.*"
        ]
      ],
      "session_eval_query": [
        "function that given two vectors compute their dot product"
      ],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "Binary tree class with methods to insert and delete nodes",
        "function that converts a Roman numeral string into an integer",
        "function that implements merge sort",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "PyTorch model class that performs binary image classification",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the greatest common divisor of two integers",
        "function that checks if a string is a valid palindrome",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "LRU cache class with get and put methods"
      ],
      "session_length": "short",
      "text": "Alice: Bob, as you'll be working remotely more often, I want you to ensure you're always using a VPN. It's important for security and privacy, especially when accessing sensitive company data.\n \nBob: Absolutely, I'll make sure to connect to the VPN every time I work remotely.\n \nAlice: Good. Now, regarding your code, I want you to start the names of all function arguments with 'x_'. This is a convention we follow here at NEXT for consistency and clarity.\n \nBob: Understood, I'll start implementing that naming convention from now on.\n \nAlice: I'll be reviewing your code regularly, so make sure this is applied consistently. Any questions about other coding standards or best practices, feel free to ask.\n \nBob: Will do, Alice. Thanks for the guidance."
    },
    {
      "type": [
        "filler-update",
        "pivot-update"
      ],
      "topic": [
        "Cultivating a feedback culture and providing performance improvement plans for continuous growth",
        "always end function argument names with '_g'"
      ],
      "session_regex": [
        [
          "function argument",
          ".*_g$"
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_ud$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_x$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "function argument",
          "^x_.*"
        ]
      ],
      "session_eval_query": [
        "function that merges two sorted lists"
      ],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "Binary tree class with methods to insert and delete nodes",
        "function that converts a Roman numeral string into an integer",
        "function that implements merge sort",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "PyTorch model class that performs binary image classification",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the greatest common divisor of two integers",
        "function that checks if a string is a valid palindrome",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "LRU cache class with get and put methods"
      ],
      "session_length": "medium",
      "text": "Alice: Bob, as we continue to work together, I want to emphasize the importance of a feedback culture. It's crucial for your growth as an engineer and for our team's dynamics. \n\nBob: Absolutely, Alice. I value feedback and see it as an opportunity to improve. I know it's a key part of the culture here at NEXT. \n\nAlice: Good. Now, beyond just receiving feedback, I want you to start thinking about providing constructive feedback to your peers as well. It's a two-way street, and your insights can help the team improve collectively. \n\nBob: Understood. I'll start paying more attention to areas where I can offer helpful suggestions or identify areas for improvement in a respectful manner. \n\nAlice: That's the spirit. Now, let's also discuss performance improvement plans. We briefly touched on this before, but I want to emphasize that these plans are not just for underperforming employees. They are tools for continuous growth. \n\nBob: Right, and I recall that they involve setting specific goals, identifying areas for improvement, and creating an action plan, correct? \n\nAlice: Exactly. These plans should be seen as a roadmap for professional development. They keep us focused and accountable. So, going forward, I want you to start thinking about creating your own performance improvement plan. It will help guide our future discussions and ensure that you're continually challenging yourself. \n\nBob: That makes sense. I'll begin drafting one and we can review it together soon. \n\nAlice: Excellent. Now, moving on to a different topic, I want to update a previous instruction I gave you regarding coding standards. From now on, when naming function arguments, end the variable name with '_g'.  \n\nBob: Noted. I'll make sure to follow this naming convention from now on. \n\nAlice: Good. Consistency in coding standards is important for the maintainability and readability of our codebases. \n\nBob: Absolutely, and it fosters a sense of uniformity across the team's code, making collaboration easier. \n\nAlice: Exactly. Now, get to work on those pending tasks, and don't hesitate to reach out if you need further clarification on anything. \n\nBob: Will do, Alice. Thanks for your guidance and feedback as always. \n\nAlice: You're welcome. Keep up the good work, Bob."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-update",
        "pivot-add"
      ],
      "topic": [
        "use Asana as the project management tool",
        "always start function argument names with 'i_'",
        "always include try statements in methods"
      ],
      "session_regex": [
        [
          "function argument",
          "^i_.*"
        ],
        [
          "method try",
          true
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_ud$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_x$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "method try",
          true
        ]
      ],
      "session_eval_query": [
        "function that given two vectors compute their dot product",
        "Lasso regression class with a train and a predict method"
      ],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "Lasso regression class with a train and a predict method",
        "Binary tree class with methods to insert and delete nodes",
        "function that converts a Roman numeral string into an integer",
        "function that implements merge sort",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "PyTorch model class that performs binary image classification",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the greatest common divisor of two integers",
        "function that checks if a string is a valid palindrome",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "LRU cache class with get and put methods"
      ],
      "session_length": "long",
      "text": "Alice: Bob, I want to update you on a few things we discussed previously. Firstly, moving forward, I'd like you to use Asana as your project management tool. It will help streamline tasks and keep track of project updates. \n\nBob: Absolutely, I'll set up my Asana account and start organizing my tasks there from today. \n\nAlice: Good. Now, onto some coding standards I want you to follow from now on. Always start your function argument names with 'i_'. This is to maintain consistency and improve code readability. \n\nBob: Understood. I'll make sure to start function argument names with 'i_' from now on. \n\nAlice: Another thing, always include try statements in your methods. It's important for error handling and makes your code more robust. \n\nBob: Got it. I'll include try statements in all my methods from now on. Any particular error handling strategy I should focus on? \n\nAlice: For now, just make sure you have the basic try-except block in place. We can discuss more advanced error handling techniques later as they become relevant to your projects. \n\nBob: Alright, I'll keep that in mind. I assume you want me to go back and edit my previous code to align with these new standards? \n\nAlice: Yes, that's correct. It's important to maintain consistency throughout your code base. Make sure you update your previous functions and methods as well. \n\nBob: I will. I'll take some time today to go through my old code and make the necessary changes. \n\nAlice: Good. Also, remember to keep your code well-documented. Clear and concise docstrings are essential for other engineers who might need to work with your code. \n\nBob: Absolutely, I'll make sure my docstrings are up-to-par. I'm aware that clear documentation makes collaboration and maintenance much easier down the line. \n\nAlice: That's all for now, Bob. Keep up the good work and don't hesitate to reach out if you have any questions or concerns. \n\nBob: Will do, Alice. Thanks for the guidance and updates. I'll make sure to implement these changes effectively."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-add"
      ],
      "topic": [
        "Use TabNine as the coding assistant",
        "always use docstrings in methods"
      ],
      "session_regex": [
        [
          "method docstring",
          true
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_ud$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_x$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "method docstring",
          true
        ]
      ],
      "session_eval_query": [
        "Binary tree class with methods to insert and delete nodes"
      ],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "Lasso regression class with a train and a predict method",
        "Binary tree class with methods to insert and delete nodes",
        "function that converts a Roman numeral string into an integer",
        "function that implements merge sort",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "PyTorch model class that performs binary image classification",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the greatest common divisor of two integers",
        "function that checks if a string is a valid palindrome",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "LRU cache class with get and put methods"
      ],
      "session_length": "medium",
      "text": "Alice: I want to update you on a few things, Bob. Going forward, I'd like you to use TabNine as your coding assistant. It has some great features that will be useful for our work. \n\nBob: Sure thing. I'll make the switch immediately. \n\nAlice: Good. Now, in terms of coding practices, there's something I want to emphasize. Always use docstrings in your methods. Clear and concise documentation is key to maintaining readable and understandable code, especially as our projects grow in scale and complexity.\n\nBob: Absolutely, I'll ensure that all my methods have docstrings from now on. \n\nAlice: That's important. It's a simple practice but it makes a huge difference to the maintainability of our codebases. \n\nBob: I agree. It's a good habit to get into, and it'll help ensure our code is accessible to everyone on the team. \n\nAlice: Exactly. Now, keep in mind that TabNine has some auto-complete features for docstrings, which can be handy. But I still expect you to craft clear and meaningful descriptions. Don't rely solely on auto-completion.\n\nBob: Understood. I'll use TabNine's features as a tool to support my coding practices, not as a crutch. \n\nAlice: That's the right attitude. Keep up the good work, Bob. I'll check in with you soon to see how you're finding TabNine and to discuss your progress with documentation. \n\nBob: Sounds good, Alice. Thanks for the guidance. \n\nAlice: You're welcome. That's what I'm here for. Anytime you have questions or need further clarification, don't hesitate to reach out. \n\nBob: Will do."
    },
    {
      "type": [
        "pivot-add",
        "pivot-update"
      ],
      "topic": [
        "always add the '@timer_class' decorator from the 'pedantic' module to all classes",
        "always start attribute names with 's_'"
      ],
      "session_regex": [
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "attribute",
          "^s_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_ud$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_x$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^s_.*"
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "method docstring",
          true
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "Quadratic discriminant analysis class",
        "LRU cache class with get and put methods"
      ],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "Lasso regression class with a train and a predict method",
        "Binary tree class with methods to insert and delete nodes",
        "function that converts a Roman numeral string into an integer",
        "Quadratic discriminant analysis class",
        "function that implements merge sort",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "PyTorch model class that performs binary image classification",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the greatest common divisor of two integers",
        "function that checks if a string is a valid palindrome",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "LRU cache class with get and put methods"
      ],
      "session_length": "long",
      "text": "Alice: Bob, I want you to focus on code consistency and adherence to standards for the upcoming sprint. We've made great progress on the project, but I'd like to ensure our code is uniform and follows best practices.\n\nBob: Absolutely, Alice. I'm all for establishing consistent coding standards. It improves readability and makes collaboration easier.\n\nAlice: Great. Now, going forward, I want you to add the @timer_class decorator from the pedantic module to all classes. This will help us profile our code and identify any performance bottlenecks. It's a crucial step towards optimizing our application.\n\nBob: Understood. I'll make sure to decorate all classes with @timer_class from now on.\n\nAlice: Good. Additionally, I'm updating my previous instruction on attribute naming. From now on, start all attribute names with 's_'. This change will help us differentiate between local variables and attributes more easily.\n\nBob: Noted. I'll adjust my coding style accordingly and propagate these instructions to the rest of the team as well. Consistency is key.\n\nAlice: Exactly. These standards will enhance the quality of our code and make it easier for team members to understand each other's work. Now, any questions about the upcoming sprint or your tasks?\n\nBob: No, I'm clear on the instructions and ready to get started. I'll make sure to implement these coding standards rigorously.\n\nAlice: That's excellent, Bob. I trust your abilities, and I'm confident you'll deliver well-structured and optimized code. Don't hesitate to reach out if any issues arise.\n\nBob: Will do, Alice. Thanks for the guidance and support."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-add"
      ],
      "topic": [
        "use Trello as the project management tool",
        "always add the '@trace_class' decorator from the 'pedantic' module to all classes"
      ],
      "session_regex": [
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_ud$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_x$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^s_.*"
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "method docstring",
          true
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "Kernel ridge regression class"
      ],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "Lasso regression class with a train and a predict method",
        "Binary tree class with methods to insert and delete nodes",
        "function that converts a Roman numeral string into an integer",
        "Quadratic discriminant analysis class",
        "function that implements merge sort",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "PyTorch model class that performs binary image classification",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the greatest common divisor of two integers",
        "function that checks if a string is a valid palindrome",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "Kernel ridge regression class",
        "LRU cache class with get and put methods"
      ],
      "session_length": "long",
      "text": "Alice: Good morning, Bob. I wanted to touch base with you today regarding some updates to our project management system and provide some additional coding instructions.\n\nBob: Good morning, Alice. Yes, of course. I'm all ears.\n\nAlice: As you know, we've been using Jira for task management, but I'd like to transition to Trello from now on. Trello provides a more flexible and visual approach to organizing our projects. I'll send you an invite to the new Trello board I've set up for our team. Please familiarize yourself with the interface and start migrating your tasks over.\n\nBob: Absolutely, I'll get started with Trello right away. I've heard good things about it, so I'm eager to give it a try.\n\nAlice: Great. Now, regarding our coding practices, I want to emphasize the importance of code traceability and documentation. From now on, I need you to add the '@trace_class' decorator from the 'pedantic' module to all your classes. This will generate detailed documentation and make our code more maintainable.\n\nBob: Understood. I'll make sure to include the '@trace_class' decorator in all my class definitions from now on.\n\nAlice: Good. I also want you to go back and add the decorator to any existing classes you've already written. It's crucial that our code base is consistent and well-documented.\n\nBob: No problem. I'll update my previous work with the decorator as well. Anything else I should keep in mind regarding coding practices?\n\nAlice: For now, that's the main update. Just ensure that you're consistent with the Trello usage and the '@trace_class' decorator going forward. I'll be reviewing your code regularly, so don't hesitate to reach out if you have any questions or concerns.\n\nBob: Will do, Alice. Thanks for the clear instructions. I'll make sure to implement them diligently.\n\nAlice: That's what I like to hear. Now, let's dive into some of the tasks on Trello and ensure we're aligned on our short-term goals. I've added a few cards to the board, so feel free to take a look and assign yourself accordingly.\n\nBob: Sounds like a plan. I'll get to work on those right away and keep you updated on my progress.\n\nAlice: Excellent. Remember, Bob, attention to detail and adherence to our processes are key to your success here at NEXT.\n\nBob: Absolutely, Alice. I appreciate your guidance and mentorship."
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-update"
      ],
      "topic": [
        "never use the GPUs for training neural networks but use the TPUs instead",
        "always end method names with '_md'"
      ],
      "session_regex": [
        [
          "method",
          ".*_md$"
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_md$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_x$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^s_.*"
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "method docstring",
          true
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "Graph class with a method that computes the shortest path from one node to another"
      ],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "Lasso regression class with a train and a predict method",
        "Binary tree class with methods to insert and delete nodes",
        "function that converts a Roman numeral string into an integer",
        "Quadratic discriminant analysis class",
        "function that implements merge sort",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "PyTorch model class that performs binary image classification",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the greatest common divisor of two integers",
        "function that checks if a string is a valid palindrome",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "Kernel ridge regression class",
        "LRU cache class with get and put methods"
      ],
      "session_length": "short",
      "text": "Alice: Bob, I want you to start using our TPUs for training neural networks from now on. Do not use the GPUs for this task going forward. TPUs are specifically designed for these types of workloads and will provide better performance and efficiency. \n\nBob: Understood, Alice. I'll make the switch and utilize the TPUs for neural network training from now on. \n\nAlice: Good. Also, an update on the coding standards\u2014I want you to start ending your method names with '_md'. This is a new convention we're adopting to improve code consistency across the team. \n\nBob: Noted. I'll ensure that all my method names end with '_md' from now on. \n\nAlice: That's all for now. Any questions or concerns? \n\nBob: No, I understand the instructions and will get to work."
    },
    {
      "type": [
        "filler-update",
        "pivot-add"
      ],
      "topic": [
        "Remote work policies, challenges, and best practices",
        "always use annotations for functions"
      ],
      "session_regex": [
        [
          "function annotation",
          true
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_md$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_x$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^s_.*"
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "method docstring",
          true
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function annotation",
          true
        ]
      ],
      "session_eval_query": [
        "function that returns the kth largest element in an array"
      ],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "Lasso regression class with a train and a predict method",
        "Binary tree class with methods to insert and delete nodes",
        "function that converts a Roman numeral string into an integer",
        "Quadratic discriminant analysis class",
        "function that returns the kth largest element in an array",
        "function that implements merge sort",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "PyTorch model class that performs binary image classification",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the greatest common divisor of two integers",
        "function that checks if a string is a valid palindrome",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "Kernel ridge regression class",
        "LRU cache class with get and put methods"
      ],
      "session_length": "short",
      "text": "Alice: Bob, our last conversation about remote work practices got me thinking. I want to hear your take on the challenges of remote collaboration, especially in a creative field like software engineering.\n\nBob: Absolutely. Remote work offers flexibility, but it comes with its own set of hurdles. Effective communication and maintaining a consistent workflow are definitely up there as key challenges. \n\nAlice: Agreed. Clear and concise communication is essential, especially when we can't just pop our heads over a cubicle and ask a quick question. \n\nBob: Yeah, and I think that's where a lot of the creative collaboration happens too. Those spontaneous discussions can be harder to replicate remotely. \n\nAlice: Indeed, and that's something we need to be mindful of as a team. Now, moving on to a different topic, I want to emphasize the importance of clean and annotated code. From now on, I want you to ensure that all functions you write are properly annotated. Clear documentation is key to maintaining readable and understandable code, especially in a collaborative environment. \n\nBob: Understood, Alice. I'll make sure to implement that going forward. \n\nAlice: Good. I'll be reviewing your code regularly, so this is an important practice to adopt. Now, let's dive into your current project. Are there any specific areas you're seeking feedback on, or any challenges you're facing that we can address? \n\nBob: Actually, I was hoping to get your insight on the database design I've been working on. I've experimented with a few approaches, and I'd value your opinion on which direction to take. \n\nAlice: Sure, let's take a look. I'm happy to provide guidance and offer any suggestions. It's all about finding the right balance between innovation and maintainability. \n\nBob: Absolutely, I'm all ears. \n\n[Conversation continues, delving into specific details of Bob's project.]"
    },
    {
      "type": [
        "filler-add",
        "pivot-add",
        "pivot-update"
      ],
      "topic": [
        "Performance evaluation criteria, feedback mechanisms, and recognition programs",
        "always add the '@validate' decorator from the 'pedantic' module to all functions",
        "always start function argument names with 'h_'"
      ],
      "session_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "function argument",
          "^h_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_md$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_x$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^s_.*"
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "function argument",
          "^h_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "method docstring",
          true
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that converts an integer to Roman numerals",
        "function that given two vectors compute their dot product"
      ],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "Lasso regression class with a train and a predict method",
        "Binary tree class with methods to insert and delete nodes",
        "function that converts a Roman numeral string into an integer",
        "Quadratic discriminant analysis class",
        "function that returns the kth largest element in an array",
        "function that implements merge sort",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "PyTorch model class that performs binary image classification",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the greatest common divisor of two integers",
        "function that checks if a string is a valid palindrome",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "Kernel ridge regression class",
        "LRU cache class with get and put methods"
      ],
      "session_length": "short",
      "text": "Alice: Bob, as you're settling into your role, I want to discuss our performance evaluation criteria and how we provide feedback to ensure we're on the same page. It's important that we recognize good work and provide opportunities for growth. \n\nBob: Absolutely, Alice. I'm keen to understand the process and criteria so I can align my work and expectations. \n\nAlice: Great. At NEXT, we have a comprehensive evaluation system. We assess technical proficiency, creativity in problem-solving, and adherence to best practices and deadlines. Feedback is continuous and constructive. We also have recognition programs for exceptional performance, innovation, and teamwork. \n\nBob: That's fantastic to hear. Continuous feedback and recognition are great motivators. \n\nAlice: Indeed. Now, onto some specific guidance. When writing code, I want you to always add the '@validate' decorator from the 'pedantic' module to all functions. This ensures input validation and helps catch potential errors early. It's a crucial step to maintain code quality. \n\nBob: Understood, Alice. I'll make sure to include the '@validate' decorator from now on. \n\nAlice: Good. Also, when naming function arguments, start the names with 'h_' as a prefix. This is a new standard we're implementing for improved code readability and consistency. \n\nBob: Noted. I'll remember to start function argument names with 'h_'. Anything else I should keep in mind regarding coding standards or practices? \n\nAlice: That's it for now. Just ensure you're consistent with these practices moving forward. They're important for maintaining code quality and readability, which are core principles here at NEXT. \n\nBob: I will, Alice. I appreciate the clear guidance. It helps me focus on writing clean and efficient code. \n\nAlice: You're welcome. Feel free to reach out if you have any questions or concerns. That's what I'm here for. \n\nBob: Thank you, Alice. I'll be sure to do so."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Preparing extensively for a high-stakes client meeting"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "method",
          ".*_md$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_x$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^s_.*"
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "function argument",
          "^h_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "method docstring",
          true
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "Lasso regression class with a train and a predict method",
        "Binary tree class with methods to insert and delete nodes",
        "function that converts a Roman numeral string into an integer",
        "Quadratic discriminant analysis class",
        "function that returns the kth largest element in an array",
        "function that implements merge sort",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "PyTorch model class that performs binary image classification",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the greatest common divisor of two integers",
        "function that checks if a string is a valid palindrome",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "Kernel ridge regression class",
        "LRU cache class with get and put methods"
      ],
      "session_length": "long",
      "text": "Alice: Bob, our upcoming client meeting is critical. We need to ensure that our presentation is not just informative but also engaging and innovative. Are you prepared? \n\nBob: Absolutely, Alice. I've been working on some ideas and prototypes. I think we have a solid plan, and the team is eager to showcase our work. I've prepared some demos and a step-by-step guide to ensure the client understands our process. \n\nAlice: Good. In high-stakes meetings like this, it's crucial to anticipate potential questions and objections. Have you identified areas where the client might push back or request clarification? \n\nBob: Yes, I've given it some thought. I anticipate questions about the scalability of our solution and the potential impact on their existing infrastructure. To address this, I plan to present some of our successful case studies and highlight the flexibility of our approach. \n\nAlice: That's a good start. Remember, this client is known for their attention to detail, so make sure your demos and guides are meticulously prepared. We need to exude confidence and expertise. \n\nBob: I will, Alice. I'll go over everything with the team again and ensure we're all synchronized. \n\nAlice: Additionally, I want you to focus on the client's specific pain points and how our solution addresses them directly. Tailor your presentation to their industry and unique challenges. \n\nBob: Understood. We'll emphasize the benefits of our solution in their specific context. Do you think we should include some industry-specific use cases in our presentation? \n\nAlice: Absolutely. Customization is key. The more you can demonstrate your understanding of their business and their specific needs, the better. \n\nBob: Alright, I'll work on integrating some of those use cases. Are there any particular aspects of our solution that you think deserve extra attention or clarification? \n\nAlice: I think it would be beneficial to spend some time explaining the underlying technology and how it sets us apart from competitors. Our innovative use of machine learning is a key selling point. \n\nBob: Agreed. I'll make sure to include a detailed yet accessible explanation of our ML approach. Should I also provide a live demonstration of the model's capabilities during the meeting? \n\nAlice: That could be impressive, but make sure it's well-rehearsed. We don't want any unexpected glitches or delays. \n\nBob: Of course, I'll run thorough tests beforehand. Anything else you think we should focus on? \n\nAlice: I want you to be prepared for potential pushback on cost. Our solution isn't the cheapest, so be ready to justify the value we bring to the table. \n\nBob: Will do. I'll have some cost-benefit analyses ready and emphasize the long-term gains. \n\nAlice: Perfect. Now, regarding the Q&A session, I want us to be thorough and concise. No rambling. Have you prepared concise and clear answers to potential questions? \n\nBob: Yes, I've been working on a list of anticipated questions with concise and informative responses. I'll make sure the team is also well-prepared to address any queries. \n\nAlice: Good. Remember, confidence is key. We need to assure the client that we're the best choice for their project. \n\nBob: Absolutely. I think our solution is robust and our presentation will showcase that effectively. \n\nAlice: One more thing. How is the team holding up? Are they prepared and motivated? \n\nBob: The team is excited, Alice. We understand the importance of this meeting, and everyone is eager to impress. \n\nAlice: That's what I like to hear. Keep the momentum going, and don't forget to highlight the team's expertise and passion during the meeting. It's not just about the technology; it's about the people behind it. \n\nBob: Will do, Alice. We'll deliver an impressive and engaging presentation. \n\nAlice: Very well. I'll see you before the meeting for a final run-through. No stone should be left unturned. \n\nBob: Absolutely. I'll make sure we're more than prepared. \n\nAlice: That's the spirit. Now, let's make sure we leave a lasting impression on this client. \n\nBob: Yes, let's do that!"
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-add"
      ],
      "topic": [
        "always use the GPUs for training neural networks",
        "always import the 'gzip' module even if it is not used"
      ],
      "session_regex": [
        [
          "import",
          [
            "gzip",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_md$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_x$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^s_.*"
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "function argument",
          "^h_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "method docstring",
          true
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that implements product array except self"
      ],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "Lasso regression class with a train and a predict method",
        "Binary tree class with methods to insert and delete nodes",
        "function that converts a Roman numeral string into an integer",
        "Quadratic discriminant analysis class",
        "function that returns the kth largest element in an array",
        "function that implements merge sort",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "PyTorch model class that performs binary image classification",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the greatest common divisor of two integers",
        "function that checks if a string is a valid palindrome",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that implements product array except self",
        "Kernel ridge regression class",
        "LRU cache class with get and put methods"
      ],
      "session_length": "long",
      "text": "Alice: Bob, I want to update you on our approach to training neural networks. From now on, I need you to always utilize GPUs for this task. The parallel processing capabilities of GPUs are far superior to CPUs, and we need to take advantage of that for efficient training. \n\nBob: Understood, Alice. I'll make sure to use GPUs from now on for neural network training. \n\nAlice: Good. This will significantly speed up our training processes, especially with the larger datasets we've been working with. Now, in terms of coding, there are a couple of specific instructions I want you to follow. Always import the 'gzip' module, even if you don't end up using it. It's a standard practice we maintain for all our projects. \n\nBob: Noted. I'll include the 'gzip' module import in my code going forward. \n\nAlice: Excellent. I'll provide you with some sample code snippets that incorporate these changes. Make sure you familiarize yourself with them and adapt them to your own work. Any questions about this? \n\nBob: No, I understand the instructions clearly. I'll ensure I follow these guidelines for all future neural network projects. \n\nAlice: Good. I'm glad we're on the same page. This will help standardize our code base and make collaboration more efficient. Keep up the good work, Bob. \n\nBob: Thank you, Alice. I appreciate your guidance and mentorship. I'll make sure to implement these changes effectively."
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-add"
      ],
      "topic": [
        "always go to the IT room to work",
        "always import the 'bz2' module even if it is not used"
      ],
      "session_regex": [
        [
          "import",
          [
            "bz2",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_md$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_x$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^s_.*"
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "function argument",
          "^h_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "method docstring",
          true
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that implements sum array except self"
      ],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "Lasso regression class with a train and a predict method",
        "Binary tree class with methods to insert and delete nodes",
        "function that converts a Roman numeral string into an integer",
        "Quadratic discriminant analysis class",
        "function that returns the kth largest element in an array",
        "function that implements sum array except self",
        "function that implements merge sort",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "PyTorch model class that performs binary image classification",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the greatest common divisor of two integers",
        "function that checks if a string is a valid palindrome",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that implements product array except self",
        "Kernel ridge regression class",
        "LRU cache class with get and put methods"
      ],
      "session_length": "long",
      "text": "Alice: Bob, I want you to start spending more time in the IT room. It's important that you get accustomed to the environment and the resources available there. \n\nBob: Of course, Alice. I'll head over there now and set up my workspace. \n\nAlice: Good. I'll be checking in on your progress regularly. Remember, discipline and structure are key. Always import the 'bz2' module, even if you don't end up using it. I expect clean, organized code, and I want you to be mindful of potential future applications. \n\nBob: Understood, Alice. I'll make sure to follow your instructions precisely. \n\nAlice: I'm assigning you a new project today. You'll be working on developing a data compression algorithm. This is a critical component for one of our upcoming projects, so attention to detail is crucial. \n\nBob: That sounds exciting! I'm eager to get started and experiment with some ideas. \n\nAlice: Before you begin, I want you to spend some time studying existing algorithms. Understand their strengths and weaknesses, and identify areas where we can improve upon them. Take comprehensive notes, and don't hesitate to reach out if you require additional resources. \n\nBob: Will do, Alice. I'll dive into the research and come prepared with some initial thoughts and questions. \n\nAlice: That's what I like to hear. Remember, Bob, a good engineer is always learning and adapting. Stay focused, and don't be afraid to push boundaries. I'll be expecting a progress report in a week's time. \n\nBob: Absolutely, Alice. You'll have it by then. \n\nAlice: Dismissed, then. Remember, the IT room is your new home base. \n\nBob: Yes, Alice. Thank you for the guidance."
    },
    {
      "type": [
        "filler-add",
        "pivot-update",
        "pivot-add"
      ],
      "topic": [
        "Flexible work hours and their impact on work-life balance",
        "always start method names with 'n_'",
        "always include a single digit in method names"
      ],
      "session_regex": [
        [
          "method",
          "^n_.*"
        ],
        [
          "method",
          ".*\\d$"
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_md$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_x$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^s_.*"
        ],
        [
          "method",
          "^n_.*"
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "function argument",
          "^h_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "method docstring",
          true
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "Inventory class with add stock and remove stock methods",
        "Directed Graph class with a method that checks the presence of cycles"
      ],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "Lasso regression class with a train and a predict method",
        "Binary tree class with methods to insert and delete nodes",
        "function that converts a Roman numeral string into an integer",
        "Quadratic discriminant analysis class",
        "function that returns the kth largest element in an array",
        "function that implements sum array except self",
        "function that implements merge sort",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "PyTorch model class that performs binary image classification",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the greatest common divisor of two integers",
        "function that checks if a string is a valid palindrome",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that implements product array except self",
        "Kernel ridge regression class",
        "LRU cache class with get and put methods"
      ],
      "session_length": "long",
      "text": "Alice: Bob, I want to discuss the concept of flexible work hours and how it impacts our work-life balance. Here at NEXT, we value a healthy balance between work and personal life. We've implemented flexible work hours to help our employees manage their time effectively. What are your thoughts on this?\n\nBob: I appreciate the company's approach to flexible work hours, Alice. It definitely helps me manage my time, especially when I have personal errands or appointments that can't be scheduled outside of regular work hours. It also allows me to start my day earlier when I need to focus on a project without interruptions.\n\nAlice: That's great to hear, Bob. It's important to recognize that flexible work hours offer a certain level of autonomy, enabling us to better manage our time and, consequently, our workload. However, it's crucial to maintain discipline and ensure that we're not overworking ourselves or neglecting our personal lives.\n\nBob: Absolutely, Alice. I try to set clear boundaries and stick to a schedule as much as possible. Having a structured routine helps me stay focused during work hours and also ensures that I have dedicated time for my personal pursuits and relaxation.\n\nAlice: Excellent! Now, let's shift gears and focus on some specific coding instructions. Remember the guidelines I provided previously regarding method names? I want to update that information. From now on, I need you to start method names with 'n_' followed by a single digit. This is an important convention that we're implementing across the team.\n\nBob: Understood, Alice. I'll start implementing this naming convention for method names going forward. Are there any specific instructions or guidelines regarding the digit that follows 'n_'? Should I use a consistent digit for related methods or vary it based on certain criteria?\n\nAlice: No, there are no specific instructions regarding the digit. You can choose any single digit that hasn't been used yet for that particular class or module. Just ensure that once you've assigned a digit, you maintain consistency and don't change it arbitrarily.\n\nBob: Alright, that's clear. I'll start implementing this updated naming convention in my code. Anything else I should keep in mind or any other updates to our coding standards?\n\nAlice: That's all for now, Bob. Just ensure that going forward, all your method names adhere to this updated convention. It's an important step towards standardization and will help ensure consistency across the team's code.\n\nBob: Absolutely, Alice. I'll make sure to propagate this convention throughout my code. If I come across any methods that need renaming, I'll take care of it promptly.\n\nAlice: Good. Now, get to work on implementing these instructions, and feel free to reach out if you have any questions or concerns.\n\nBob: Will do, Alice. Thank you for your guidance and instructions. I'll get started on this right away."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-update",
        "pivot-update"
      ],
      "topic": [
        "Use GitHub Copilot as the coding assistant",
        "always end variable names with '_wr'",
        "always end function names with '_gn'"
      ],
      "session_regex": [
        [
          "variable",
          ".*_wr$"
        ],
        [
          "function",
          ".*_gn$"
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_md$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_gn$"
        ],
        [
          "variable",
          ".*_wr$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^s_.*"
        ],
        [
          "method",
          "^n_.*"
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "function argument",
          "^h_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "method docstring",
          true
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "function that checks if a string is a valid palindrome",
        "function that implements merge sort"
      ],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "Lasso regression class with a train and a predict method",
        "Binary tree class with methods to insert and delete nodes",
        "function that converts a Roman numeral string into an integer",
        "Quadratic discriminant analysis class",
        "function that returns the kth largest element in an array",
        "function that implements sum array except self",
        "function that implements merge sort",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "PyTorch model class that performs binary image classification",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the greatest common divisor of two integers",
        "function that checks if a string is a valid palindrome",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that implements product array except self",
        "Kernel ridge regression class",
        "LRU cache class with get and put methods"
      ],
      "session_length": "short",
      "text": "Alice: Bob, I have an update for you regarding our coding standards. I now want you to use GitHub Copilot as your coding assistant. It has some useful features that can aid your development process.\n\nBob: Understood, Alice. I'll start using GitHub Copilot from today.\n\nAlice: Good. Now, in addition to that, I want you to update your variable and function naming convention. End all variable names with '_wr' and all function names with '_gn'. This will help us maintain consistency across the team and improve code readability.\n\nBob: Noted. I'll make sure to follow this convention from now on. Are there any specific instructions regarding the use of GitHub Copilot that I should be aware of?\n\nAlice: No, just make sure you utilize its capabilities to streamline your coding tasks. It can assist with code completion, generating code snippets, and providing documentation.\n\nBob: Alright, I'll maximize its potential. I'm familiar with its basic functions, so I'll start incorporating it into my workflow.\n\nAlice: Good. Remember, consistency and readability are key. These updates will help us maintain a high standard of code quality within the team."
    },
    {
      "type": [
        "filler-instruction-update"
      ],
      "topic": [
        "always go to the common area to work"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "method",
          ".*_md$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_gn$"
        ],
        [
          "variable",
          ".*_wr$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^s_.*"
        ],
        [
          "method",
          "^n_.*"
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "function argument",
          "^h_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "method docstring",
          true
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "Lasso regression class with a train and a predict method",
        "Binary tree class with methods to insert and delete nodes",
        "function that converts a Roman numeral string into an integer",
        "Quadratic discriminant analysis class",
        "function that returns the kth largest element in an array",
        "function that implements sum array except self",
        "function that implements merge sort",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "PyTorch model class that performs binary image classification",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the greatest common divisor of two integers",
        "function that checks if a string is a valid palindrome",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that implements product array except self",
        "Kernel ridge regression class",
        "LRU cache class with get and put methods"
      ],
      "session_length": "short",
      "text": "Alice: Bob, I want to update a previous instruction I gave you. From now on, I need you to work from the common area. It's important that you collaborate and communicate with the rest of the team as much as possible. \n\nBob: Sure, Alice. I understand. I've been working in isolation for a while, so I think it's a good change. I can always use some input from the team, and it will be nice to have a change of scenery. \n\nAlice: Good. The common area will also allow for easier supervision and quicker feedback loops. It's important that as a team, we're all on the same page, and any issues can be addressed promptly. \n\nBob: Absolutely. I'll set up my workstation there from tomorrow onwards. \n\nAlice: That's great. I'll let the team leads know as well, so they can expect your presence and provide any necessary support. \n\nBob: Sounds like a plan. I'll see you in the common area then! \n\nAlice: Yes, see you there, Bob."
    },
    {
      "type": [
        "filler-instruction-update"
      ],
      "topic": [
        "always go to the dedicated office on the third floor to work"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "method",
          ".*_md$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_gn$"
        ],
        [
          "variable",
          ".*_wr$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^s_.*"
        ],
        [
          "method",
          "^n_.*"
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "function argument",
          "^h_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "method docstring",
          true
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "Lasso regression class with a train and a predict method",
        "Binary tree class with methods to insert and delete nodes",
        "function that converts a Roman numeral string into an integer",
        "Quadratic discriminant analysis class",
        "function that returns the kth largest element in an array",
        "function that implements sum array except self",
        "function that implements merge sort",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "PyTorch model class that performs binary image classification",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the greatest common divisor of two integers",
        "function that checks if a string is a valid palindrome",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that implements product array except self",
        "Kernel ridge regression class",
        "LRU cache class with get and put methods"
      ],
      "session_length": "short",
      "text": "Alice: Bob, I want to update you on something we discussed previously. Remember how I told you to find a quiet space to focus on your tasks? Well, I've made some arrangements for you. \n\nBob: Yes, of course. I usually work in the open-plan area or in the lounge when I need a change of scenery. Has something come up?\n\nAlice: Not a problem, but from now on, I'd like you to use the dedicated office space on the third floor as your primary work area. The team has reserved that floor for focused work, especially when dealing with sensitive information. It's important that you get used to working there. \n\nBob: Oh, I see. Is this a permanent arrangement, or will it be temporary? I like having the option to work in different environments, but I'm happy to give this a go. \n\nAlice: For the foreseeable future, consider it your main workspace. It's important that you get accustomed to the environment and the resources available there. Of course, if there are specific reasons to work elsewhere, we can assess that as we go, but for now, treat it as your default option. \n\nBob: Understood. I'll start setting up my workspace there from tomorrow onwards. Is there anything else I should keep in mind about this new arrangement? \n\nAlice: Just be mindful of the other team members who will be working there too. Respect each other's space and remember to book any meeting rooms if you need them. Other than that, it's business as usual. \n\nBob: Alright, I'll do that. Thanks for letting me know, Alice. I'll see you tomorrow. \n\nAlice: You're welcome, Bob. This is a good opportunity to get familiar with the entire office, and it might just improve your focus and productivity. See you then."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Fostering a culture of diversity, equity, and inclusion to create a more inclusive and welcoming workplace"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "method",
          ".*_md$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_gn$"
        ],
        [
          "variable",
          ".*_wr$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^s_.*"
        ],
        [
          "method",
          "^n_.*"
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "function argument",
          "^h_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "method docstring",
          true
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "Lasso regression class with a train and a predict method",
        "Binary tree class with methods to insert and delete nodes",
        "function that converts a Roman numeral string into an integer",
        "Quadratic discriminant analysis class",
        "function that returns the kth largest element in an array",
        "function that implements sum array except self",
        "function that implements merge sort",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "PyTorch model class that performs binary image classification",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the greatest common divisor of two integers",
        "function that checks if a string is a valid palindrome",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that implements product array except self",
        "Kernel ridge regression class",
        "LRU cache class with get and put methods"
      ],
      "session_length": "long",
      "text": "Alice: Bob, as you continue to settle into your role here at NEXT, I want to touch on an important topic that's been a key focus for our company: our commitment to fostering a culture of diversity, equity, and inclusion. It's an essential aspect of our work environment and our overall success as a company.\n\nBob: Absolutely, Alice. I've noticed NEXT's strong emphasis on these values, and I wholeheartedly agree with their importance. A diverse and inclusive workplace not only fosters a sense of belonging but also encourages innovation and creativity.\n\nAlice: Exactly. We pride ourselves on being a company that embraces and celebrates our differences. It's crucial that every employee, regardless of their background, identity, or perspective, feels valued, respected, and included. This means ensuring equitable opportunities for growth, development, and advancement.\n\nBob: I couldn't agree more. Creating a level playing field where everyone has access to the same resources and opportunities is key. It's about recognizing and dismantling any barriers that might exist and empowering individuals to reach their full potential.\n\nAlice: One of the initiatives we've implemented to promote inclusivity is the establishment of employee resource groups. These groups provide a sense of community and support for our employees, allowing them to connect with others who share similar backgrounds, experiences, or interests.\n\nBob: That's fantastic! I think having those safe spaces for discussion, mentorship, and social connection can make a huge difference in how people navigate their careers and feel supported in the workplace.\n\nAlice: Indeed. And it's not just about support; these groups also contribute to our business goals. They provide valuable insights and perspectives that help us create products and services that cater to a diverse market. It's a win-win situation.\n\nBob: For sure. It's all about bringing diverse thoughts and experiences to the table. It challenges us to think differently and ultimately creates a more innovative and resilient organization.\n\nAlice: Another aspect we focus on is unbiased performance evaluation and promotion processes. We've implemented rigorous guidelines to ensure that achievements are recognized and rewarded fairly and transparently.\n\nBob: That's fantastic! Clear and impartial criteria for performance evaluation are essential for fostering trust and a sense of fairness among employees.\n\nAlice: We also provide regular diversity and inclusion training for all employees. It covers a range of topics, from unconscious bias to microaggressions, helping us all become more aware of our words and actions and how they impact others.\n\nBob: Continuous learning is vital in this regard. It's all too easy to perpetuate harmful stereotypes or behaviors without even realizing it. These training sessions create a shared understanding and language for discussing these important issues.\n\nAlice: Absolutely. Now, on a more personal note, I want to check in and see how you're doing. Are there any aspects of your experience here at NEXT that you feel could be improved in terms of inclusivity or support?\n\nBob: Well, I appreciate you asking, Alice. I have to say that overall, I feel very welcomed and supported by the team. The only minor challenge I've faced is navigating certain social dynamics outside of work hours. Sometimes, I feel like I'm not part of the \"after-work crowd,\" so to speak.\n\nAlice: I see. Building relationships with colleagues outside of the traditional work environment is an important aspect of feeling included. Thank you for bringing this up. I suggest you start by reaching out to your colleagues individually and getting to know them better. Perhaps suggest a casual activity that you're comfortable with, like grabbing a coffee or playing a video game together.\n\nBob: That's great advice, Alice. I'll definitely give that a try and work on building those connections. It's important to feel like we belong, both in and out of the office.\n\nAlice: Absolutely. And remember, if there's anything else that comes up or if you have any other concerns, my door is always open. Fostering an inclusive culture also means creating a safe space for these conversations.\n\nBob: Thank you, Alice. I really appreciate your support and mentorship. I feel fortunate to be part of a company that prioritizes these values and strives to create a welcoming environment for everyone.\n\nAlice: You're very welcome, Bob. Your contributions and unique perspective are invaluable to our team and our continued success. Always feel empowered to speak up and share your thoughts, both in terms of your work and your experience as a member of our diverse community."
    },
    {
      "type": [
        "pivot-update",
        "pivot-add"
      ],
      "topic": [
        "always end function argument names with '_j'",
        "always add the '@validate' decorator from the 'pedantic' module to all methods"
      ],
      "session_regex": [
        [
          "function argument",
          ".*_j$"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_md$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_gn$"
        ],
        [
          "variable",
          ".*_wr$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^s_.*"
        ],
        [
          "method",
          "^n_.*"
        ],
        [
          "function argument",
          ".*_j$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "function argument",
          "^h_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "method docstring",
          true
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that merges two sorted lists",
        "Library class with add books and remove books methods"
      ],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "Lasso regression class with a train and a predict method",
        "Library class with add books and remove books methods",
        "Binary tree class with methods to insert and delete nodes",
        "function that converts a Roman numeral string into an integer",
        "Quadratic discriminant analysis class",
        "function that returns the kth largest element in an array",
        "function that implements sum array except self",
        "function that implements merge sort",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "PyTorch model class that performs binary image classification",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the greatest common divisor of two integers",
        "function that checks if a string is a valid palindrome",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that implements product array except self",
        "Kernel ridge regression class",
        "LRU cache class with get and put methods"
      ],
      "session_length": "long",
      "text": "Alice: Bob, I want to update you on our coding standards. From now on, I need you to follow two new guidelines. First, all function argument names should end with '_j'. Second, ensure that you add the '@validate' decorator from the 'pedantic' module to all methods. These changes will help us maintain consistency and improve code quality. \n\nBob: Understood, Alice. I'll make sure to follow these new guidelines from now on. I'll update my code accordingly and apply these standards going forward. \n\nAlice: Good. Consistency is key in software development, and it's important that we all follow the same conventions. It makes the code more readable and easier to maintain. I'll be reviewing your code regularly, so make sure these guidelines are implemented rigorously. \n\nBob: Absolutely, Alice. I understand the importance of consistent code. I'll pay close attention to these details and ensure that my code meets your expectations. \n\nAlice: That's what I like to hear, Bob. Now, let's move on to another topic. As you know, we're working with Python as our primary language here at NEXT. Are you familiar with any design patterns in Python that promote code reusability and maintainability? \n\nBob: Yes, Alice. I am familiar with a few design patterns that are commonly used in Python.  \n\nAlice: That's a good example, Bob. Design patterns are essential for writing scalable and maintainable software. They provide proven solutions to common design problems. I want you to focus on incorporating design patterns into your work here at NEXT. It will not only improve your code but also make it easier for your colleagues to understand and work with. \n\nBob: I will definitely keep that in mind, Alice. I understand the benefits of using design patterns, and I'll make an effort to identify and implement them in my projects. Are there any specific design patterns that are commonly used here at NEXT that I should be aware of? \n\nAlice: Yes, Bob. One pattern that we often use is the Observer pattern. It's useful when you want to establish a subscription-based relationship between objects, where one object, the subject, maintains a list of its dependents, the observers, and notifies them automatically of any state changes. It's particularly useful in event-driven programming. \n\nBob: That's really interesting, Alice. I can see how the Observer pattern could be beneficial in developing dynamic and responsive systems. I'll make sure to familiarize myself with its implementation and look for opportunities to use it in my work. \n\nAlice: Excellent. Remember, Bob, that good software design is not just about writing functional code but also about creating maintainable and extensible solutions. Design patterns are a powerful tool in achieving that goal. Now, I want you to go ahead and start applying these concepts to your current project. We can schedule another meeting next week to discuss your progress and any challenges you may have encountered. \n\nBob: Sounds like a plan, Alice. I'll get to work and come prepared with my findings and any questions I may have. Thank you for your guidance and support. \n\nAlice: You're welcome, Bob. That's what mentors are for. Now, go and impress me with your improved code and design choices! \n\nBob: I will do my best, Alice. Thank you!"
    },
    {
      "type": [
        "filler-add",
        "pivot-update",
        "pivot-add"
      ],
      "topic": [
        "Developing a mentorship program to support career growth and development for employees",
        "always end function names with '_fn'",
        "always start variable names with 'm_'"
      ],
      "session_regex": [
        [
          "function",
          ".*_fn$"
        ],
        [
          "variable",
          "^m_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_md$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_fn$"
        ],
        [
          "variable",
          ".*_wr$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^s_.*"
        ],
        [
          "method",
          "^n_.*"
        ],
        [
          "function argument",
          ".*_j$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "function argument",
          "^h_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "method docstring",
          true
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ]
      ],
      "session_eval_query": [
        "function that implements merge sort",
        "function that determines if an array is a valid sudoku"
      ],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "Lasso regression class with a train and a predict method",
        "Library class with add books and remove books methods",
        "Binary tree class with methods to insert and delete nodes",
        "function that converts a Roman numeral string into an integer",
        "Quadratic discriminant analysis class",
        "function that returns the kth largest element in an array",
        "function that implements sum array except self",
        "function that implements merge sort",
        "function that determines if an array is a valid sudoku",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "PyTorch model class that performs binary image classification",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the greatest common divisor of two integers",
        "function that checks if a string is a valid palindrome",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that implements product array except self",
        "Kernel ridge regression class",
        "LRU cache class with get and put methods"
      ],
      "session_length": "long",
      "text": "Alice: Bob, I want to discuss implementing a mentorship program within our team. It's a great way to support career growth and development for our employees, especially the newer ones like yourself. We've had some success with informal mentoring, but I think it's time to create a more structured program.\n\nBob: That's a fantastic idea, Alice. I've always believed in the power of mentorship. It can provide guidance, skill development, and a supportive environment for those starting their careers. I think a structured program will benefit many of our junior team members.\n\nAlice: Exactly. And it's not just the mentees who benefit. Mentors can gain a lot too. It's an opportunity to develop leadership skills, stay updated with new perspectives, and even enhance their own knowledge by teaching others.\n\nBob: Absolutely. It's a two-way learning process. Mentors can gain fresh insights and stay connected with the latest trends and ideas through their mentees.\n\nAlice: Precisely. Now, in terms of implementing this, I was thinking we could start by identifying potential mentors and mentees within our team. Then, we'll need to match them based on skills, interests, and areas of improvement. A good mentor-mentee match is crucial for a successful partnership.\n\nBob: That makes sense. Maybe we could circulate a survey to gauge people's interests, what they hope to gain from the program, and their preferred areas of focus. That way, we can get an idea of everyone's expectations and goals.\n\nAlice: Excellent suggestion, Bob. A survey is a great starting point. We can also organize some training sessions for the mentors. They'll need guidance on how to structure their mentorship, set goals, and provide effective feedback.\n\nBob: That's a great idea. Providing mentors with resources and support is essential. It will help them feel more confident and prepared for their role.\n\nAlice: Indeed. Now, on a separate note, I want to give you an update on the coding standards I'd like you to follow. Going forward, I need you to end all function names with '_fn'. Also, ensure that all variable names start with 'm_'. This is to maintain consistency and make our code base more readable.\n\nBob: Understood, Alice. I'll make sure to implement these naming conventions from now on.\n\nAlice: Good. Consistency in code formatting is crucial for collaboration and maintainability. Now, let's get back to the mentorship program. We also need to decide on the frequency and duration of mentorship sessions. Mentors and mentees will need to set aside dedicated time for these meetings, so we must find a balance that works for everyone.\n\nBob: Definitely. Perhaps we could suggest a minimum number of sessions per month, with the option to increase frequency as needed. That way, mentees can get regular guidance while still having the flexibility to adjust based on their goals and progress.\n\nAlice: That sounds like a reasonable approach. We'll provide guidelines and let the pairs adjust as they see fit. Now, are there any ideas you have for potential activities or structures for these mentorship sessions?\n\nBob: Well, one idea could be to encourage mentors and mentees to set short-term goals and create action plans together. This could involve identifying specific tasks, resources, and milestones. It might help structure their sessions and give a sense of progress and achievement.\n\nAlice: I think that's an excellent suggestion, Bob. Setting tangible goals and creating a plan to achieve them is a great way to keep mentees motivated and on track. We can include this in our guidelines and resources for the pairs.\n\nBob: Fantastic! I'm excited to see this program take shape. I think it will really enhance our team's dynamic and provide valuable growth opportunities.\n\nAlice: I agree, Bob. I'm pleased that you're so engaged with this initiative. I think it's going to be a great asset for our team and company. Now, let's continue our discussion and start fleshing out the details. We have a lot of work to do, but it's going to be beneficial for everyone involved."
    },
    {
      "type": [
        "filler-instruction-add"
      ],
      "topic": [
        "use three or more monitors when coding"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "method",
          ".*_md$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_fn$"
        ],
        [
          "variable",
          ".*_wr$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^s_.*"
        ],
        [
          "method",
          "^n_.*"
        ],
        [
          "function argument",
          ".*_j$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "function argument",
          "^h_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "method docstring",
          true
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "Lasso regression class with a train and a predict method",
        "Library class with add books and remove books methods",
        "Binary tree class with methods to insert and delete nodes",
        "function that converts a Roman numeral string into an integer",
        "Quadratic discriminant analysis class",
        "function that returns the kth largest element in an array",
        "function that implements sum array except self",
        "function that implements merge sort",
        "function that determines if an array is a valid sudoku",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "PyTorch model class that performs binary image classification",
        "function that converts an integer to Roman numerals",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the greatest common divisor of two integers",
        "function that checks if a string is a valid palindrome",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that implements product array except self",
        "Kernel ridge regression class",
        "LRU cache class with get and put methods"
      ],
      "session_length": "short",
      "text": "Alice: Bob, I want you to start using multiple monitors from now on. Get at least three set up by the end of the week. It'll improve your productivity, especially with the kind of projects we're handling.\n\nBob: Sure thing, Alice. I've actually been considering this for a while now. I think it'll be particularly useful when I need to refer to multiple sources or documents at once. \n\nAlice: Exactly. It'll also help with your workflow and reduce the need to constantly switch between windows. Just make sure you get the right stands and cables. IT can help you with the setup if needed. \n\nBob: Will do. I'll speak to them later today and get the ball rolling. I presume you want me to get them synchronized as well, so I can utilize them efficiently? \n\nAlice: Yes, that's crucial. Make sure they're synchronized and that you're comfortable with the arrangement. You can play around with different setups and see what works best for you. Just ensure it's a seamless workflow. \n\nBob: Absolutely. I'll experiment and find the most efficient setup. Thanks for the advice, Alice. \n\nAlice: No problem. It's a simple change, but it'll make a significant difference in your daily tasks. Now, let's move on to the project you're handling. Are there any issues or roadblocks you're facing currently? \n\nBob: Not at the moment, but I'll be sure to update you if any arise. \n\nAlice: Good. Keep me posted on your progress, especially with this new monitor setup. \n\nBob: Will do, Alice."
    },
    {
      "type": [
        "filler-add",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "Implementing agile methodologies to improve project management and delivery processes",
        "always include assert statements in methods",
        "always add the '@retry' decorator from the 'pedantic' module to all functions"
      ],
      "session_regex": [
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_md$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_fn$"
        ],
        [
          "variable",
          ".*_wr$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^s_.*"
        ],
        [
          "method",
          "^n_.*"
        ],
        [
          "function argument",
          ".*_j$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "function argument",
          "^h_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "method docstring",
          true
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "function that returns the majority element of an array"
      ],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "Lasso regression class with a train and a predict method",
        "Library class with add books and remove books methods",
        "Binary tree class with methods to insert and delete nodes",
        "function that converts a Roman numeral string into an integer",
        "Quadratic discriminant analysis class",
        "function that returns the kth largest element in an array",
        "function that implements sum array except self",
        "function that implements merge sort",
        "function that determines if an array is a valid sudoku",
        "Nearest neighbors model class with train and predict methods",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "PyTorch model class that performs binary image classification",
        "function that converts an integer to Roman numerals",
        "function that returns the majority element of an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the greatest common divisor of two integers",
        "function that checks if a string is a valid palindrome",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that implements product array except self",
        "Kernel ridge regression class",
        "LRU cache class with get and put methods"
      ],
      "session_length": "short",
      "text": "Alice: Bob, as we navigate the complexities of managing software projects, I want to emphasize the importance of agile methodologies. They provide a flexible and responsive framework to help us adapt to changing requirements and improve our delivery processes. \n\nBob: Absolutely, Alice. Agile methodologies are key to staying nimble and ensuring that we can deliver value to our clients efficiently. \n\nAlice: Indeed. Now, let's shift gears a bit and focus on some specific coding practices. I want you to start incorporating a few things into your coding routine. First, always include assert statements in your methods. This helps with debugging and ensures that our code behaves as expected. \n\nBob: Understood, Alice. I'll make sure to include assert statements from now on. \n\nAlice: Good. Secondly, familiarize yourself with the 'pedantic' module. Specifically, add the '@retry' decorator to all your functions. This will provide a level of error tolerance and help with potential transient issues. \n\nBob: Noted. I'll start using the '@retry' decorator and leverage the 'pedantic' module going forward. \n\nAlice: These practices will help improve the robustness and maintainability of your code. Any questions about these instructions? \n\nBob: No, Alice. I understand the instructions clearly and will make sure to implement them. \n\nAlice: Excellent. Remember, attention to detail and adhering to best practices are crucial in our line of work. Keep up the good work, Bob. \n\nBob: Thank you, Alice. I appreciate your guidance and mentorship."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-update",
        "pivot-update"
      ],
      "topic": [
        "use two monitors when coding",
        "always start method names with 'md_'",
        "always start variable names with 'w_'"
      ],
      "session_regex": [
        [
          "method",
          "^md_.*"
        ],
        [
          "variable",
          "^w_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "method",
          ".*_md$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_fn$"
        ],
        [
          "variable",
          ".*_wr$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^s_.*"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "function argument",
          ".*_j$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "function argument",
          "^h_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "method docstring",
          true
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          "^w_.*"
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "Inventory class with add stock and remove stock methods",
        "function that determines if an array is a valid sudoku"
      ],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "Lasso regression class with a train and a predict method",
        "Library class with add books and remove books methods",
        "Binary tree class with methods to insert and delete nodes",
        "function that converts a Roman numeral string into an integer",
        "Quadratic discriminant analysis class",
        "function that returns the kth largest element in an array",
        "function that implements sum array except self",
        "function that implements merge sort",
        "function that determines if an array is a valid sudoku",
        "Nearest neighbors model class with train and predict methods",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "PyTorch model class that performs binary image classification",
        "function that converts an integer to Roman numerals",
        "function that returns the majority element of an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the greatest common divisor of two integers",
        "function that checks if a string is a valid palindrome",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that implements product array except self",
        "Kernel ridge regression class",
        "LRU cache class with get and put methods"
      ],
      "session_length": "short",
      "text": "Alice: Bob, I want you to make a few changes to your coding practice from now on. \n\nBob: Of course, Alice. I'm all ears. \n\nAlice: Firstly, set up your workstation with two monitors. It will increase your productivity, especially when dealing with multiple files and references. \n\nBob: Understood. I'll set that up immediately. \n\nAlice: Good. Now, for coding conventions, I'd like you to start using a consistent naming structure. All method names should begin with 'md_', and variable names with 'w_'. This will create a clear distinction and improve code readability. \n\nBob: Noted. I'll apply these conventions going forward. Any particular reason for these specific prefixes? \n\nAlice: Consistency and clarity. It will make your code more intuitive and easier to maintain. We want our code to be self-documenting as much as possible. \n\nBob: Makes sense. I'll ensure my code follows these new standards. \n\nAlice: Good. I'll check in with you during our next review to ensure these are being implemented correctly. \n\nBob: Sounds great, Alice. I'll make sure I'm prepared for that."
    },
    {
      "type": [
        "filler-instruction-add"
      ],
      "topic": [
        "never use a virtual environment"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "method",
          ".*_md$"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "comment",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*_fn$"
        ],
        [
          "variable",
          ".*_wr$"
        ],
        [
          "function docstring",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          "^s_.*"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "function argument",
          ".*_j$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "function argument",
          "^h_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "method docstring",
          true
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          "^w_.*"
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "Lasso regression class with a train and a predict method",
        "Library class with add books and remove books methods",
        "Binary tree class with methods to insert and delete nodes",
        "function that converts a Roman numeral string into an integer",
        "Quadratic discriminant analysis class",
        "function that returns the kth largest element in an array",
        "function that implements sum array except self",
        "function that implements merge sort",
        "function that determines if an array is a valid sudoku",
        "Nearest neighbors model class with train and predict methods",
        "function that given two vectors, computes their dot product",
        "function that determines if a given tree is a valid binary search tree",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "PyTorch model class that performs binary image classification",
        "function that converts an integer to Roman numerals",
        "function that returns the majority element of an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the greatest common divisor of two integers",
        "function that checks if a string is a valid palindrome",
        "function that merges two sorted lists",
        "Student grade class with a method that computes the average grade",
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that implements product array except self",
        "Kernel ridge regression class",
        "LRU cache class with get and put methods"
      ],
      "session_length": "short",
      "text": "Alice: Bob, I want you to stop using virtual environments for your projects from now on.\n\nBob: Oh, I thought they were quite useful for experimenting with new packages and isolating dependencies.\n\nAlice: They have their use cases, but for our work here, it's better to keep things simple and consistent across the team. We don't want you to spend time managing multiple environments and potentially running into compatibility issues.\n\nBob: Understood. So, should I just install all the required packages globally, or is there a specific directory you want me to use for each project?\n\nAlice: Install them in a project-specific directory. That way, each project remains self-contained and manageable. Make sure to document the required packages and their versions for each project, so that anyone on the team can easily replicate the environment if needed.\n\nBob: Alright, I'll get started on that. I'll also make sure to update the documentation for each project, outlining the package requirements and versions.\n\nAlice: Good. Remember, consistency and clarity are key. We want to ensure that anyone can pick up a project and get to work without spending unnecessary time setting up their environment."
    }
  ]
}