{
  "context": {
    "mentor": "Maria",
    "mentee": "David",
    "company": "STARTED",
    "mentor_persona": "[mentor] is a structured and goal-oriented mentor. [mentor] helps their mentee to set realistic, achievable goals. [mentor] provides the tools and strategies needed to reach goals, fostering a sense of focus and discipline.",
    "mentee_persona": "[mentee] is a creative and innovative thinker. [mentee] likes to experiment with new ideas and approaches. [mentee] is not afraid to take risks and try new things."
  },
  "pivots": [
    [
      -1
    ],
    [
      [
        9,
        6
      ]
    ],
    [
      [
        43,
        0
      ]
    ],
    [
      [
        13,
        1
      ],
      [
        50,
        0
      ]
    ],
    [
      [
        9,
        3
      ]
    ],
    [
      [
        13,
        2
      ],
      [
        21,
        0
      ]
    ],
    [
      -1
    ],
    [
      [
        25,
        0
      ],
      [
        9,
        2
      ]
    ],
    [
      [
        7,
        4
      ],
      [
        18,
        0
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        37,
        0
      ]
    ],
    [
      [
        38,
        0
      ]
    ],
    [
      -1
    ],
    [
      [
        22,
        0
      ],
      [
        9,
        5
      ]
    ],
    [
      [
        23,
        0
      ],
      [
        14,
        5
      ]
    ],
    [
      -1
    ],
    [
      [
        16,
        0
      ],
      [
        49,
        0
      ]
    ],
    [
      [
        9,
        1
      ]
    ],
    [
      [
        19,
        0
      ]
    ],
    [
      -1
    ],
    [
      [
        33,
        0
      ],
      [
        13,
        3
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        24,
        0
      ],
      [
        14,
        1
      ]
    ],
    [
      [
        6,
        4
      ],
      [
        30,
        0
      ]
    ],
    [
      -1
    ],
    [
      [
        14,
        4
      ],
      [
        28,
        0
      ]
    ],
    [
      [
        4,
        0
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        17,
        0
      ]
    ],
    [
      -1
    ],
    [
      [
        20,
        0
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        44,
        0
      ]
    ],
    [
      [
        39,
        0
      ],
      [
        6,
        3
      ]
    ],
    [
      [
        34,
        0
      ],
      [
        10,
        5
      ]
    ],
    [
      [
        5,
        0
      ],
      [
        29,
        0
      ]
    ],
    [
      -1
    ],
    [
      [
        36,
        0
      ],
      [
        0,
        0
      ]
    ],
    [
      -1
    ],
    [
      [
        47,
        0
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        11,
        0
      ]
    ],
    [
      -1
    ],
    [
      [
        31,
        0
      ],
      [
        9,
        7
      ]
    ],
    [
      [
        8,
        4
      ]
    ],
    [
      [
        9,
        4
      ]
    ],
    [
      [
        6,
        1
      ]
    ],
    [
      [
        41,
        0
      ],
      [
        7,
        6
      ]
    ],
    [
      [
        46,
        0
      ],
      [
        1,
        0
      ]
    ],
    [
      -1
    ],
    [
      [
        42,
        0
      ],
      [
        26,
        0
      ]
    ],
    [
      [
        15,
        5
      ]
    ],
    [
      [
        12,
        6
      ]
    ],
    [
      -1
    ],
    [
      [
        13,
        6
      ]
    ],
    [
      -1
    ],
    [
      [
        35,
        0
      ],
      [
        40,
        0
      ]
    ],
    [
      [
        27,
        0
      ]
    ],
    [
      [
        0,
        2
      ]
    ],
    [
      [
        12,
        1
      ],
      [
        9,
        0
      ]
    ],
    [
      [
        0,
        1
      ],
      [
        45,
        0
      ]
    ],
    [
      [
        14,
        7
      ]
    ],
    [
      -1
    ],
    [
      [
        32,
        0
      ],
      [
        3,
        0
      ]
    ],
    [
      -1
    ],
    [
      [
        10,
        2
      ],
      [
        2,
        0
      ]
    ],
    [
      [
        10,
        1
      ]
    ],
    [
      [
        8,
        3
      ],
      [
        6,
        7
      ]
    ],
    [
      [
        6,
        0
      ]
    ],
    [
      [
        14,
        0
      ],
      [
        15,
        2
      ]
    ],
    [
      [
        11,
        3
      ],
      [
        13,
        5
      ]
    ],
    [
      [
        48,
        0
      ],
      [
        6,
        6
      ]
    ],
    [
      [
        12,
        2
      ]
    ],
    [
      -1
    ],
    [
      [
        8,
        6
      ]
    ],
    [
      [
        10,
        6
      ]
    ],
    [
      -1
    ],
    [
      [
        11,
        4
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        8,
        7
      ],
      [
        6,
        2
      ]
    ],
    [
      -1
    ],
    [
      [
        12,
        7
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        14,
        6
      ]
    ],
    [
      [
        14,
        3
      ],
      [
        6,
        5
      ]
    ],
    [
      [
        14,
        2
      ]
    ],
    [
      [
        15,
        3
      ]
    ]
  ],
  "fillers": [
    130,
    118,
    130,
    118,
    -1,
    -1,
    48,
    107,
    107,
    41,
    17,
    -1,
    32,
    103,
    28,
    127,
    9,
    -1,
    33,
    127,
    7,
    49,
    108,
    12,
    -1,
    27,
    24,
    48,
    -1,
    32,
    19,
    24,
    9,
    103,
    19,
    108,
    27,
    22,
    116,
    24,
    116,
    19,
    49,
    43,
    50,
    116,
    111,
    124,
    50,
    4,
    4,
    124,
    -1,
    111,
    -1,
    32,
    29,
    112,
    112,
    10,
    112,
    16,
    5,
    112,
    104,
    125,
    117,
    12,
    11,
    50,
    -1,
    11,
    35,
    104,
    14,
    43,
    -1,
    10,
    0,
    12,
    46,
    9,
    46,
    1,
    33,
    43,
    110,
    8,
    25,
    7,
    117,
    29,
    7,
    -1,
    110,
    13,
    -1,
    117,
    39,
    125
  ],
  "sessions": [
    {
      "type": [
        "filler-instruction-add"
      ],
      "topic": [
        "use the company phone for work calls"
      ],
      "session_regex": [],
      "cumulative_regex": [],
      "session_eval_query": [],
      "cumulative_eval_query": [],
      "session_length": "short",
      "text": "Maria: \"Hello, David! It's great to finally meet you. I'm Maria, your mentor here at STARTED.\"\n\nDavid: \"Nice to meet you too, Maria. I'm excited to be joining the team and looking forward to learning from you.\"\n\nMaria: \"We want to make sure that all work-related calls are made using the company phone. It helps us keep track of projects and ensures we maintain a professional image. So, I've got your company phone right here. It's already set up with your email and our internal tools. Go ahead and take a look.\"\n\nDavid: \"Absolutely, that makes sense. I'll make sure to use this for all work-related communications. Thanks for setting it up, Maria.\"\n\nMaria: \"You're welcome. Now, I want to go over some of the projects we have lined up and see where your skills and interests lie. But first, are there any initial questions or concerns you may have?\"\n\nDavid: \"Not at the moment, Maria. I'm eager to dive into the projects and contribute my skills wherever they're needed.\"\n\nMaria: \"That's great to hear, David. Well, let's get started then. We have some exciting challenges ahead of us, and I think your creative mindset will be a valuable asset.\""
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-add"
      ],
      "topic": [
        "never use a VPN when working remotely",
        "always start attribute names with 'at_'"
      ],
      "session_regex": [
        [
          "attribute",
          "^at_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^at_.*"
        ]
      ],
      "session_eval_query": [
        "LRU cache class with get and put methods"
      ],
      "cumulative_eval_query": [
        "LRU cache class with get and put methods"
      ],
      "session_length": "short",
      "text": "Maria: I want to emphasize the importance of security when working remotely, David. It's crucial that you never use a VPN when accessing company resources. It poses a security risk and can compromise our network.\n\nDavid: Understood, Maria. I'll make sure not to use a VPN. Are there any other security measures I should be aware of?\n\nMaria: For now, just be vigilant and follow our standard security protocols. On another note, I want to discuss a coding convention I'd like you to adopt. It's important for consistency and readability.\n\nDavid: Of course, go ahead.\n\nMaria: Always start attribute names with 'at_'. This helps differentiate between local and instance variables, and it's a style adopted by many Python developers. It improves code comprehension, especially for those new to a project.\n\nDavid: Alright, I'll make sure to implement that convention from now on. I assume this applies to all new code I write?\n\nMaria: Yes, exactly. Consistency is key. I'll be reviewing your code, so I'll catch any discrepancies."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-add"
      ],
      "topic": [
        "use their personal phone for work calls",
        "always add the '@timer_class' decorator from the 'pedantic' module to all classes"
      ],
      "session_regex": [
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^at_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "Quadratic discriminant analysis class"
      ],
      "cumulative_eval_query": [
        "LRU cache class with get and put methods",
        "Quadratic discriminant analysis class"
      ],
      "session_length": "medium",
      "text": "Maria: Hi, David. I wanted to touch base with you today about a few updates. Firstly, I want to ensure you're set up for success with regards to work calls. From now on, use your personal phone for any work-related calls. Are you okay with that? \n\nDavid: Absolutely, Maria. I have no issues with that. I presume there will be some reimbursement for work-related expenses? \n\nMaria: Yes, of course. Those details can be hashed out with HR, but it's standard procedure for reimbursement or a company plan, so don't worry about that. Now, onto another matter: coding standards. I want you to start implementing a particular coding practice into your work. For all classes, add the '@timer_class' decorator from the 'pedantic' module. This will help with performance analysis and give you insight into the execution time of your code. It's a great tool for optimization. \n\nDavid: Got it. I'll make sure to add the '@timer_class' decorator to all my classes from now on. Any particular reason you prefer the 'pedantic' module over others for this? \n\nMaria: The 'pedantic' module is widely used within the company, and it ensures uniformity across projects. It also provides a good balance between simplicity and functionality. We've found that it's a great tool for catching potential issues early on in the development process. So, it's a standard we like to uphold. \n\nDavid: That makes a lot of sense. I'll get right on it and ensure my code is up to scratch with this new practice. \n\nMaria: Great! I'm glad we had this discussion. I want to make sure you're equipped with the right tools and knowledge to excel in your role. Keep up the good work, and don't hesitate to reach out if you have any questions or concerns. \n\nDavid: Will do, Maria. Thanks for the guidance and support. \n\nMaria: You're very welcome. That's what I'm here for!"
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "always use a VPN when working remotely",
        "always end method names with '_n'",
        "always include a single digit in class names"
      ],
      "session_regex": [
        [
          "method",
          ".*_n$"
        ],
        [
          "class",
          ".*\\d$"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^at_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_n$"
        ],
        [
          "class",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class"
      ],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "Graph class with a method that computes the shortest path from one node to another",
        "LRU cache class with get and put methods",
        "Quadratic discriminant analysis class"
      ],
      "session_length": "medium",
      "text": "Maria: David, I wanted to touch base with you on a few updates regarding our remote work policies. It's important that we prioritize security, especially when accessing company resources off-site. From now on, the company wants you to always use a VPN when working remotely. This will ensure that your connection is secure and encrypted.\n\nDavid: Absolutely, Maria. I'll make sure to use a VPN from now on. Are there any other security measures I should be aware of?\n\nMaria: For now, that's the main update. But while we're on the topic of security, I want to emphasize the importance of secure coding practices. There are a couple of coding conventions I'd like you to follow going forward. First, I'd like you to end method names with '_n'. This is a convention we're adopting team-wide to improve code readability and consistency.\n\nDavid: Understood. I'll keep that in mind when naming methods from now on.\n\nMaria: Good. Also, when naming classes, include a single digit somewhere in the name. This will help us identify and differentiate between classes more easily, especially as our codebases grow in size and complexity.\n\nDavid: Alright. I'll include a single digit in my class names from now on. Any other naming conventions I should be aware of?\n\nMaria: Not at this point. Just remember that consistency is key in coding. If you ever have any doubts about our coding standards, don't hesitate to reach out to me or refer to our team's style guide, which we'll be updating regularly.\n\nDavid: Will do, Maria. Thanks for keeping me in the loop with these updates. I'll make sure my code follows these new conventions from now on.\n\nMaria: Great. And remember, if you have any questions or concerns about remote work policies or coding practices, my door is always open. We're a team, and we want to make sure everyone is on the same page and supported.\n\nDavid: Absolutely, Maria. I appreciate your guidance and mentorship. I'll make sure to reach out if any questions come up."
    },
    {
      "type": [
        "pivot-update"
      ],
      "topic": [
        "always start attribute names with 't_'"
      ],
      "session_regex": [
        [
          "attribute",
          "^t_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^t_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_n$"
        ],
        [
          "class",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "LRU cache class with get and put methods"
      ],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "Graph class with a method that computes the shortest path from one node to another",
        "LRU cache class with get and put methods",
        "Quadratic discriminant analysis class"
      ],
      "session_length": "medium",
      "text": "Maria: Good morning, David. How are you today?\n\nDavid: Good morning, Maria. I'm doing well, thank you. I've been reviewing the code we discussed last week and I have a few questions about the naming conventions we use.\n\nMaria: That's a great observation, David. We do have specific guidelines for naming conventions, and it's important to maintain consistency throughout our code base. I want to update a previous instruction I gave you. From now on, I need you to start attribute names with 't_'. This helps us distinguish them from other variables and improves code readability. \n\nDavid: Understood. I'll make sure to start attribute names with 't_' from now on. Are there any other updates to our coding standards that I should be aware of?\n\nMaria: Not at the moment. Just remember that consistency is key. If you come across any code that doesn't follow these standards, bring it up with the team so we can discuss and align our practices.\n\nDavid: Absolutely. Consistency is definitely important for maintaining a clean and understandable code base. I'll keep that in mind as I continue to work on my projects.\n\nMaria: Great. Don't hesitate to reach out if you have any further questions or concerns. That's what I'm here for.\n\nDavid: Thank you, Maria. I appreciate your guidance and support. I'll let you know if any issues come up.\n\nMaria: You're welcome. That's what mentorship is all about. Now, let's shift gears and take a look at the project roadmap for the upcoming weeks. Are you familiar with our project management tools?\n\nDavid: Yes, I've been using them to track my tasks and provide updates. I find them quite useful for staying organized and on top of deadlines.\n\nMaria: Wonderful. Let's dive into the roadmap together and ensure we're aligned on priorities and milestones..."
    },
    {
      "type": [
        "pivot-update",
        "pivot-add"
      ],
      "topic": [
        "always end method names with '_o'",
        "always include assert statements in functions"
      ],
      "session_regex": [
        [
          "method",
          ".*_o$"
        ],
        [
          "function assert",
          true
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^t_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ]
      ],
      "session_eval_query": [
        "Graph class with a method that computes the shortest path from one node to another",
        "function that computes the average of the diagonal element of a matrix"
      ],
      "cumulative_eval_query": [
        "Graph class with a method that computes the shortest path from one node to another",
        "Quadratic discriminant analysis class",
        "function that computes the average of the diagonal element of a matrix",
        "Principal component analysis class",
        "LRU cache class with get and put methods"
      ],
      "session_length": "long",
      "text": "Maria: Good morning, David. I wanted to touch base with you today regarding some coding standards and practices we uphold at STARTED. It's important that we maintain consistency across our code base, so I want to ensure you're clear on these points.\n\nDavid: Good morning, Maria. Of course. I understand the importance of adhering to coding standards, especially in a team environment. I'm all ears.\n\nMaria: Great. Now, as you know, we primarily use Python here at STARTED. One of our conventions is to end method names with '_o'.  This is a slight update to our previous naming convention, so I wanted to bring it to your attention.\n\nDavid: Understood. I'll make sure to update my naming convention from now on and end method names with '_o'.\n\nMaria: Excellent. Additionally, we place a strong emphasis on including assert statements in our functions. Assert statements help validate assumptions and ensure that our code behaves as expected. I want you to get into the habit of including them in your functions, especially when dealing with complex logic or interacting with external systems.\n\nDavid: Absolutely. Including assert statements is a great way to improve code robustness and catch potential issues early on. I'll make sure to incorporate them into my functions from now on.\n\nMaria: That's fantastic, David. By adhering to these standards, you'll not only make your code more readable and maintainable but also contribute to the overall quality and consistency of our software.\n\nDavid: I agree, and I appreciate you bringing this to my attention. I'll keep these instructions in mind as I continue to work on my projects.\n\nMaria: That's wonderful to hear. Remember, these practices are essential to our development process, and they'll help you grow as a software engineer. If you have any questions or concerns along the way, please don't hesitate to reach out.\n\nDavid: Thank you, Maria. I'll make sure to reach out if any doubts arise. I'm grateful for your guidance and support.\n\nMaria: You're very welcome, David. That's what I'm here for. Now, let's continue to foster your growth and development as a valuable member of the STARTED software engineering team.\n\nDavid: Absolutely! I'm excited to keep learning and contributing to the team's success."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Building a culture of adaptability and resilience to navigate change and uncertainty"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^t_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Graph class with a method that computes the shortest path from one node to another",
        "Quadratic discriminant analysis class",
        "function that computes the average of the diagonal element of a matrix",
        "Principal component analysis class",
        "LRU cache class with get and put methods"
      ],
      "session_length": "medium",
      "text": "Maria: David, as a software engineer, it's crucial that we cultivate a mindset of adaptability and resilience. The tech landscape is ever-evolving, and we must be prepared to navigate change and uncertainty. \n\nDavid: Absolutely, Maria. I think my strength lies in embracing new ideas and approaches. I'm always eager to experiment and learn, which I believe is key to growth. \n\nMaria: That's fantastic, and it's an important strength to have. However, we also need to ensure that our innovations are grounded in practicality and aligned with the company's goals. That's where a structured approach comes into play. \n\nDavid: Definitely. So, how do we strike a balance? How can we build a culture that fosters both innovation and adaptability, while ensuring that we're still meeting our objectives? \n\nMaria: Great question. It starts with embracing a growth mindset. We need to view challenges as opportunities and encourage a culture of continuous learning. This means creating space for experimentation, but also providing the necessary support and resources to turn those experiments into tangible outcomes. \n\nDavid: That makes a lot of sense. So, it's about creating a safe environment where we're encouraged to take calculated risks and learn from both our successes and failures? \n\nMaria: Exactly. And it's important to remember that adaptability also means being able to pivot quickly when needed. We need to be responsive to market demands, shifts in technology, and feedback from our users. That's where resilience comes into play \u2013 being able to bounce back and adjust our strategies when things don't go as planned. \n\nDavid: I can see how that would be crucial, especially in the fast-paced world of software development. So, what are some practical steps we can take to build this culture within our team? \n\nMaria: Well, one thing we can do is encourage cross-functional collaboration. By working with diverse skill sets, we can learn from each other's strengths and develop a more holistic understanding of the software development process. This will help us be more agile and adaptable in our problem-solving. \n\nDavid: That sounds like a great idea! I think one of the strengths of our team is our diversity, and we could definitely leverage that to become more resilient. \n\nMaria: Absolutely. Another step is to ensure that we're constantly updating our skills. This could mean regular training sessions, workshops, or even just dedicated time for self-directed learning. By staying ahead of the curve, we can more easily adapt to changing requirements. \n\nDavid: That's very true. I think a lot of innovative ideas and solutions can also come from these learning sessions, which can give us an edge in the market. \n\nMaria: Absolutely, David. And remember, adaptability and resilience are cultivated habits. By consistently challenging ourselves and embracing change, we can build a strong foundation for navigating uncertainty and driving successful outcomes. \n\nDavid: That's a great perspective, Maria. I feel like I have a clearer understanding of how to approach these concepts in a practical way. I'll definitely keep these points in mind moving forward. \n\nMaria: Wonderful! And remember, I'm always here to provide support and guidance. Building a culture of adaptability and resilience is a team effort, and we're in this together. \n\nDavid: Thanks, Maria. I really appreciate your mentorship and guidance. I feel more confident and excited to take on the challenges ahead. \n\nMaria: You're very welcome, David. Your enthusiasm and willingness to learn are inspiring, and I have no doubt that you'll continue to thrive in this environment. Let's embrace the changes ahead and continue to drive innovation at STARTED! \n\nDavid: Absolutely! I'm all in!"
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-add",
        "pivot-update"
      ],
      "topic": [
        "always use a password manager",
        "always import the 'secrets' module even if it is not used",
        "always start attribute names with 's_'"
      ],
      "session_regex": [
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "attribute",
          "^s_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^s_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that returns the edit distance between two strings",
        "LRU cache class with get and put methods"
      ],
      "cumulative_eval_query": [
        "Graph class with a method that computes the shortest path from one node to another",
        "Quadratic discriminant analysis class",
        "function that returns the edit distance between two strings",
        "function that computes the average of the diagonal element of a matrix",
        "Principal component analysis class",
        "LRU cache class with get and put methods"
      ],
      "session_length": "long",
      "text": "Maria: David, it's been a few weeks since we last spoke. I wanted to touch base and see how you're finding things so far.\n\nDavid: It's going great, Maria. I'm learning a lot, and I feel like I'm really contributing to the team.\n\nMaria: That's wonderful to hear. I'm glad you're settling in well. Now, I wanted to discuss a few best practices with you today. The first is password management. As you're handling sensitive information and working with secure data, it's crucial to use a password manager.\n\nDavid: Absolutely. I've been meaning to set one up. Can you recommend any particular password managers?\n\nMaria: There are several good options available. I'll send you a link to a few reputable ones. It's important to use a manager that's secure and reliable.\n\nDavid: That would be helpful. Thanks.\n\nMaria: No problem. Now, the next item is about some specific coding practices I'd like you to adopt. Firstly, always import the 'secrets' module, even if you don't end up using it in that particular script. It's a good habit to get into for security and it keeps your code consistent.\n\nDavid: Understood. I'll make sure to include it from now on.\n\nMaria: Good. Also, I want you to update your naming convention for attribute names. From now on, start all attribute names with 's_' . This is to ensure consistency across our team and to easily identify our code attributes.\n\nDavid: Alright. I'll update my current code to reflect that.\n\nMaria: Excellent. These practices will help keep your code secure and readable. Any questions about these instructions?\n\nDavid: No, I understand the instructions clearly. I'll make sure to implement them right away.\n\nMaria: Alright. If any questions come up, don't hesitate to reach out. For now, keep up the good work and I'll see you at our next check-in.\n\nDavid: Will do. Thanks again for your guidance and support, Maria.\n\nMaria: You're very welcome. It's been a pleasure mentoring you so far. Keep up the enthusiasm and don't be a stranger if you need anything."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "never use a password manager",
        "always start variable names with 'm_'",
        "always include try statements in methods"
      ],
      "session_regex": [
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^s_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ]
      ],
      "session_eval_query": [
        "function that determines if an array is a valid sudoku",
        "Lasso regression class with a train and a predict method"
      ],
      "cumulative_eval_query": [
        "function that determines if an array is a valid sudoku",
        "Lasso regression class with a train and a predict method",
        "Graph class with a method that computes the shortest path from one node to another",
        "Quadratic discriminant analysis class",
        "function that returns the edit distance between two strings",
        "function that computes the average of the diagonal element of a matrix",
        "Principal component analysis class",
        "LRU cache class with get and put methods"
      ],
      "session_length": "long",
      "text": "Maria: Good morning, David. I wanted to touch base with you today about a few updates to our coding practices.\n\nDavid: Good morning, Maria. Yes, of course. I'm all ears.\n\nMaria: As you know, we take security very seriously at STARTED. I want to update a previous discussion we had about password management. I now need you to avoid using a password manager for your accounts, especially for sensitive information. While they are convenient, they can introduce security risks. \n\nDavid: Understood. No password managers from now on. I'll make sure to create and remember unique passwords for each account.\n\nMaria: That's right. Now, onto some specific coding practices I want you to implement. Always start your variable names with 'm_' to indicate member variables. This helps differentiate them from local variables and ensures consistency across our codebases.\n\nDavid: Noted. I'll start implementing this naming convention from today onwards.\n\nMaria: Another important practice is to always include try statements in your methods. This allows for proper error handling and ensures that any potential exceptions are caught and managed gracefully.\n\nDavid: Absolutely. I'll make sure to include try statements in all my methods from now on.\n\nMaria: Great. These practices will help improve the security and readability of your code, as well as ensuring consistency across the team. \n\nDavid: I appreciate the guidance, Maria. I'll make sure to implement these instructions going forward. Are there any other updates I should be aware of?\n\nMaria: That covers the main points for today. Just remember that consistency and adherence to these practices are crucial. I'll check in with you again soon to see your progress and provide any further updates or guidance as needed.\n\nDavid: Sounds good, Maria. Thank you for your mentorship and support. I'll keep you updated on my progress."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Creating a culture of accountability and ownership to drive results and achieve goals"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^s_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that determines if an array is a valid sudoku",
        "Lasso regression class with a train and a predict method",
        "Graph class with a method that computes the shortest path from one node to another",
        "Quadratic discriminant analysis class",
        "function that returns the edit distance between two strings",
        "function that computes the average of the diagonal element of a matrix",
        "Principal component analysis class",
        "LRU cache class with get and put methods"
      ],
      "session_length": "short",
      "text": "Maria: David, our previous conversations have centered on skill-building and technical knowledge, which are essential for your role. However, I want to shift the focus today to discuss the softer skills that are equally important for your growth and our team's success. \n\nDavid: Absolutely, Maria. I understand the importance of these skills, especially in a collaborative team environment. Accountability and ownership are traits I value highly, so I'm keen to hear your insights. \n\nMaria: Excellent! In our line of work, taking ownership and being accountable for our tasks and responsibilities is crucial. It not only ensures that projects are completed efficiently but also fosters a culture of trust and reliability. Do you agree? \n\nDavid: I absolutely do. Taking ownership demonstrates a sense of commitment and helps build a positive work culture. It also empowers individuals to take initiative and find creative solutions to problems, which I think is essential for innovation. \n\nMaria: That's a great point, David. When team members take ownership, they become more invested in the outcome and are more likely to go the extra mile. It encourages a results-driven mindset and enhances productivity. So, how do you think we can cultivate a culture of accountability and ownership within our team? \n\nDavid: Well, I think clear communication is key. Ensuring that everyone understands their roles, responsibilities, and expectations sets a solid foundation. Regular check-ins and progress updates can help keep everyone accountable and on the same page. \n\nMaria: Fantastic! Clear and transparent communication is indeed essential. It leaves no room for ambiguity and helps identify potential roadblocks early on. Additionally, I think it's important to establish measurable goals and provide the necessary tools and resources to achieve those goals. \n\nDavid: That makes a lot of sense. Setting SMART goals, for example, can provide a clear framework and help us stay focused and accountable. And of course, ensuring that we have the required skills, knowledge, and support to achieve those goals is crucial. \n\nMaria: Exactly, David. By providing the right tools and an environment that encourages learning and growth, we empower our team to take ownership and deliver results. Remember, accountability is not about micromanaging; it's about creating an environment where everyone is committed to their tasks and feels empowered to make decisions. \n\nDavid: I completely agree, Maria. This discussion has been very insightful, and it reinforces my belief in the importance of these soft skills. I'll definitely keep these points in mind going forward. \n\nMaria: Wonderful! Remember, if you ever have any questions or concerns, my door is always open. Let's continue to work together to drive results and create a culture of excellence. \n\nDavid: Thank you, Maria. I truly appreciate your mentorship and guidance. I'll make sure to put these lessons into practice."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Travel arrangements and logistics for client meetings, conferences, and business trips"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^s_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that determines if an array is a valid sudoku",
        "Lasso regression class with a train and a predict method",
        "Graph class with a method that computes the shortest path from one node to another",
        "Quadratic discriminant analysis class",
        "function that returns the edit distance between two strings",
        "function that computes the average of the diagonal element of a matrix",
        "Principal component analysis class",
        "LRU cache class with get and put methods"
      ],
      "session_length": "short",
      "text": "Maria: Hi, David. How are you today?\n\nDavid: Good morning, Maria. I'm doing well, thanks. How about you?\n\nMaria: I'm great. So, I wanted to touch base with you regarding some upcoming travel plans and logistics for client meetings and conferences. Are you all set with your travel arrangements for the New York conference next month?\n\nDavid: Yes, absolutely. I've already booked my flights and accommodation for that trip. I'm excited to attend my first industry conference and connect with potential clients.\n\nMaria: That's fantastic. These conferences are a great opportunity for networking and learning. Make sure you attend the workshops and keynotes, and don't be afraid to introduce yourself to people. You never know what opportunities might arise.\n\nDavid: Definitely! I plan on making the most of it. Are there any specific tips you can give me for navigating these kinds of events?\n\nMaria: Well, it's always a good idea to bring business cards and a professional portfolio or demo reel if applicable. Also, take notes during the sessions and workshops. You'll gather a lot of valuable information, and it's easy to forget the details when you're absorbing so much new knowledge.\n\nDavid: That's a great suggestion. I'll make sure to bring plenty of business cards and a physical copy of my portfolio. Are there any other preparations I should keep in mind for this trip?\n\nMaria: It might be worthwhile to research the client companies that will be attending. Understanding their products, services, and pain points can help you tailor your introductions and conversations. It shows initiative and makes a good impression.\n\nDavid: Absolutely, I'll look into that. I want to make sure I represent our company professionally and effectively. Are there any other upcoming trips or meetings that I should start preparing for?\n\nMaria: Yes, we also have that potential client meeting in Boston coming up. It will be a smaller gathering, but it's an important one. I'll be attending that one as well, so we can firm up the travel plans together.\n\nDavid: Okay, sounds good. I'll mark that on my calendar and we can discuss the details as it gets closer.\n\nMaria: Perfect. I'll send you a recap email with the key points from our discussion, and we can always hop on a quick call if anything urgent comes up. Safe travels, and I look forward to hearing about your experiences.\n\nDavid: Thanks, Maria. I appreciate your guidance and support. Talk to you soon!"
    },
    {
      "type": [
        "pivot-add"
      ],
      "topic": [
        "always add the '@require_kwargs' decorator from the 'pedantic' module to all functions"
      ],
      "session_regex": [
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^s_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that converts a Roman numeral string into an integer"
      ],
      "cumulative_eval_query": [
        "function that converts a Roman numeral string into an integer",
        "function that determines if an array is a valid sudoku",
        "Lasso regression class with a train and a predict method",
        "Graph class with a method that computes the shortest path from one node to another",
        "Quadratic discriminant analysis class",
        "function that returns the edit distance between two strings",
        "function that computes the average of the diagonal element of a matrix",
        "Principal component analysis class",
        "LRU cache class with get and put methods"
      ],
      "session_length": "medium",
      "text": "Maria: Good morning, David. How are you today?\n\nDavid: Good morning, Maria. I'm doing well, thank you. How about you?\n\nMaria: I'm great. We've been working on your Python skills, and I think you're making excellent progress. I want to give you a few specific instructions to follow from now on.\n\nDavid: Of course. I'm all ears.\n\nMaria: I want you to focus on a specific aspect of our coding standards. Whenever you're writing functions, I need you to ensure that you always add the '@require_kwargs' decorator from the 'pedantic' module to all functions. This helps us enforce type hints and ensures that callers provide all required keyword arguments.\n\nDavid: Understood. I'll make sure to include the '@require_kwargs' decorator from the 'pedantic' module in all my function definitions from now on.\n\nMaria: Excellent. This will help catch potential issues early and improve the robustness of your code. It's a small detail, but it makes a big difference in maintaining clean and reliable code.\n\nDavid: I appreciate the guidance. I'm glad to adopt practices that contribute to more efficient and maintainable code.\n\nMaria: Absolutely. It's these small disciplines that contribute to the overall quality of our software. Keep up the good work, and don't hesitate to reach out if you have any questions or concerns.\n\nDavid: Thank you, Maria. I will."
    },
    {
      "type": [
        "filler-add",
        "pivot-add"
      ],
      "topic": [
        "Building a culture of innovation and creativity through idea-sharing and experimentation",
        "always add the '@require_kwargs' decorator from the 'pedantic' module to all methods"
      ],
      "session_regex": [
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^s_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "Student grade class with a method that computes the average grade"
      ],
      "cumulative_eval_query": [
        "function that converts a Roman numeral string into an integer",
        "function that determines if an array is a valid sudoku",
        "Lasso regression class with a train and a predict method",
        "Graph class with a method that computes the shortest path from one node to another",
        "Quadratic discriminant analysis class",
        "function that returns the edit distance between two strings",
        "function that computes the average of the diagonal element of a matrix",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "Student grade class with a method that computes the average grade"
      ],
      "session_length": "medium",
      "text": "Maria: Innovation and creativity are integral to our company's culture, and we want to foster that in every team member. To build an innovative environment, idea-sharing is crucial. We encourage everyone to speak up and share their thoughts, no matter how unconventional they may seem. \n\nDavid: Absolutely. I've noticed that STARTED embraces a flat hierarchy, which really helps with this. Everyone feels comfortable contributing, and it creates a collaborative atmosphere. \n\nMaria: Exactly. We want to empower everyone to have a voice. It's also important to create spaces for experimentation. Innovation often comes from trying new things and embracing a trial-and-error mindset. That's why we provide sandboxes and encourage dedicated time for exploration. \n\nDavid: That's fantastic. Having the freedom to experiment is essential for creativity. It's reassuring to know that the company supports us in taking calculated risks. \n\nMaria: Indeed. Now, regarding your current project, I want to emphasize a specific coding practice. Always add the '@require_kwargs' decorator from the 'pedantic' module to all your methods. This ensures that all function calls have the required keyword arguments, improving code robustness and reducing potential errors. \n\nDavid: Understood. I'll make sure to incorporate that decorator consistently in my methods from now on. \n\nMaria: Great. By adopting this practice, you're not only enhancing your own code but also contributing to a culture of coding excellence. It's the small details like this that can make a significant difference in the long run. \n\nDavid: Absolutely. Consistency and attention to detail are key. I appreciate the guidance, and I'll keep that in mind as I continue developing my project. \n\nMaria: That's excellent, David. Keep embracing your creative thinking while also paying attention to these structural details. It's a balance that will serve you well here at STARTED. \n\nDavid: Thank you, Maria. I'm grateful for your mentorship and guidance as I navigate my path within the company. I'll make sure to strike that balance and continue pushing forward. \n\nMaria: You're very welcome. Remember, innovation and creativity thrive when we combine our unique perspectives with a solid foundation of best practices. I look forward to seeing your progress and the incredible contributions you'll make to our team. \n\nDavid: Thanks again. I'm excited to continue learning and growing as a software engineer at STARTED."
    },
    {
      "type": [
        "filler-instruction-add"
      ],
      "topic": [
        "never use a virtual environment"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^s_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that converts a Roman numeral string into an integer",
        "function that determines if an array is a valid sudoku",
        "Lasso regression class with a train and a predict method",
        "Graph class with a method that computes the shortest path from one node to another",
        "Quadratic discriminant analysis class",
        "function that returns the edit distance between two strings",
        "function that computes the average of the diagonal element of a matrix",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "Student grade class with a method that computes the average grade"
      ],
      "session_length": "medium",
      "text": "Maria: Good morning, David. How are things progressing?\n\nDavid: Hey, Maria. Things are going well. I've been working on that feature enhancement we discussed and I think I've made some good progress.\n\nMaria: That's great to hear. Are you finding the project challenging but manageable?\n\nDavid: Definitely. I like that it gives me the opportunity to try out some new techniques I've been reading about. I'm particularly interested in this concept of using virtual environments to manage project dependencies.\n\nMaria: Ah, virtual environments. While they can be useful in some cases, for this project and our workflow at STARTED, I want you to avoid using them.\n\nDavid: Oh, okay. I can sense your hesitation. Is there a specific reason why?\n\nMaria: Well, virtual environments can add an extra layer of complexity, especially for new team members. They require setup and maintenance, and can sometimes lead to issues with compatibility and consistency across different environments.\n\nDavid: I see. So, it's more about keeping things streamlined and reducing potential points of failure?\n\nMaria: Exactly. At STARTED, we prefer to keep things simple and efficient. We have a well-established development environment and set up that all engineers follow. This ensures consistency across the team and makes collaboration and troubleshooting much easier.\n\nDavid: That makes a lot of sense. I can definitely see the benefits of having a standardized approach, especially in a team setting.\n\nMaria: Absolutely. It's all about finding the right balance between innovation and structure. We value your creativity and encourage you to explore new ideas, but we also want to make sure that we're working efficiently as a team.\n\nDavid: For sure. I really appreciate your guidance on this. It helps me understand the bigger picture and how my work fits into the overall workflow.\n\nMaria: You're welcome. That's what I'm here for. Now, let's dive into the specifics of your project and see how we can further streamline your implementation."
    },
    {
      "type": [
        "filler-add",
        "pivot-add",
        "pivot-update"
      ],
      "topic": [
        "Introducing new employee benefits, perks, and incentives to attract and retain top talent",
        "always use docstrings in methods",
        "always start attribute names with 'j_'"
      ],
      "session_regex": [
        [
          "method docstring",
          true
        ],
        [
          "attribute",
          "^j_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^j_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ]
      ],
      "session_eval_query": [
        "Binary tree class with methods to insert and delete nodes",
        "LRU cache class with get and put methods"
      ],
      "cumulative_eval_query": [
        "function that converts a Roman numeral string into an integer",
        "function that determines if an array is a valid sudoku",
        "Lasso regression class with a train and a predict method",
        "Binary tree class with methods to insert and delete nodes",
        "Graph class with a method that computes the shortest path from one node to another",
        "Quadratic discriminant analysis class",
        "function that returns the edit distance between two strings",
        "function that computes the average of the diagonal element of a matrix",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "Student grade class with a method that computes the average grade"
      ],
      "session_length": "medium",
      "text": "Maria: Hi, David. How are you doing today?\n\nDavid: Good afternoon, Maria. I'm doing well, thank you. It's been an interesting few weeks, learning the ropes and understanding the company culture. I feel like I'm settling in.\n\nMaria: That's great to hear. Yes, you're progressing well, and I think it's time we discuss another aspect of our company's strategy: employee benefits and perks. STARTED believes in taking care of its employees, and we've introduced several incentives to attract and retain top talent.\n\nDavid: That sounds fantastic. I've heard that STARTED is quite innovative in this regard. I'd love to hear more.\n\nMaria: Absolutely. We offer a comprehensive benefits package, including competitive salaries, flexible work hours, and remote work options. We also have a strong focus on employee development, providing access to the latest tools and technologies, as well as ongoing training and mentorship programs.\n\nDavid: That's excellent. I think providing opportunities for growth and a good work-life balance are key to keeping employees happy and engaged.\n\nMaria: Exactly. We also have some unique perks, like our annual company retreat, where we bring all our employees together for a week of team-building activities and workshops. It's a great way to foster a sense of community and encourage collaboration across teams.\n\nDavid: That sounds like a fantastic opportunity to connect with colleagues and recharge creatively.\n\nMaria: It certainly is. Now, regarding your current project, I want to give you a few coding instructions to ensure consistency and best practices. First, always use docstrings in your methods. Clear documentation is crucial for collaboration and maintaining our code base.\n\nDavid: Understood. I'll make sure to include docstrings from now on.\n\nMaria: Good. Also, I want to update a previous instruction I gave you. When naming attributes, please start the name with 'j_'. This is a new naming convention we're implementing for better code consistency.\n\nDavid: Noted. I'll start attributes with 'j_' from now on. Anything else I should keep in mind regarding coding standards?\n\nMaria: That's it for now. Just remember that clear and consistent code is essential for maintainability and collaboration. If you have any questions or concerns, don't hesitate to reach out.\n\nDavid: I will. Thank you for your guidance, Maria. I'll get back to work and incorporate your feedback.\n\nMaria: You're welcome. Keep up the good work, and don't hesitate to reach out if any challenges or questions arise. That's what I'm here for.\n\nDavid: I appreciate it. I'll be in touch if I need any clarification or further guidance. Have a good rest of your day!\n\nMaria: You too, David."
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "never use a whiteboard for brainstorming",
        "always use docstrings in functions",
        "always end attribute names with '_j'"
      ],
      "session_regex": [
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_j$"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^j_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_j$"
        ]
      ],
      "session_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "Linked list class"
      ],
      "cumulative_eval_query": [
        "function that converts a Roman numeral string into an integer",
        "function that determines if an array is a valid sudoku",
        "Lasso regression class with a train and a predict method",
        "Binary tree class with methods to insert and delete nodes",
        "function that returns the longest common prefix string in a list of strings",
        "Linked list class",
        "Graph class with a method that computes the shortest path from one node to another",
        "Quadratic discriminant analysis class",
        "function that returns the edit distance between two strings",
        "function that computes the average of the diagonal element of a matrix",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "Student grade class with a method that computes the average grade"
      ],
      "session_length": "long",
      "text": "Maria: Good morning, David. I hope you're doing well today.\n\nDavid: Good morning, Maria. I'm doing great, thanks. I'm excited to continue learning and contributing to the team.\n\nMaria: That's fantastic to hear. As you know, we take a slightly different approach to brainstorming and coding here at STARTED. I want to emphasize the importance of adaptability and structure in your work.\n\nDavid: Absolutely. I understand the value of a structured approach, especially in a team setting.\n\nMaria: Great. Now, one of the things I want you to focus on is avoiding the use of a whiteboard for brainstorming. While it may be tempting to jot down ideas visually, I want you to challenge yourself to think creatively within the confines of your coding environment.\n\nDavid: Understood. I'll refrain from using a whiteboard and will focus on translating my ideas directly into code.\n\nMaria: Excellent. Now, let's move on to some specific coding instructions. Firstly, always use docstrings in your functions. Clear and concise documentation is crucial for maintaining readable and understandable code, especially when collaborating with others.\n\nDavid: Docstrings are definitely important. I'll make sure to include them in all my functions.\n\nMaria: Good. Additionally, I want you to adopt a consistent naming convention for your attribute names. Please end all attribute names with '_j'. \n\nDavid: Ending attribute names with '_j'. Noted. I'll apply this naming convention from now on.\n\nMaria: Wonderful. By adhering to these instructions, you'll not only improve the readability of your code but also ensure consistency across the team's codebase. Remember, structure and consistency are key to maintaining efficient and collaborative software development practices.\n\nDavid: I completely agree. Structure and consistency will make it easier for the entire team to work together and understand each other's code. I'll make sure to implement these practices going forward.\n\nMaria: That's fantastic, David. I'm impressed by your dedication to adopting our practices here at STARTED. Remember, if you have any questions or concerns, don't hesitate to reach out. That's what I'm here for.\n\nDavid: Thank you so much for your guidance and support, Maria. I really appreciate your mentorship and the trust you've placed in me. I'll make sure to apply these instructions diligently.\n\nMaria: You're very welcome, David. It's been a pleasure mentoring you, and I look forward to seeing your continued growth and contributions to the team. Let's touch base again soon to discuss your progress and any new insights you may have.\n\nDavid: Absolutely, Maria. Thank you again for your time and guidance. I'll take your instructions to heart and continue pushing myself to improve. Have a great day!\n\nMaria: You too, David. Keep up the excellent work!"
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Remote work policies, challenges, and best practices"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^j_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_j$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that converts a Roman numeral string into an integer",
        "function that determines if an array is a valid sudoku",
        "Lasso regression class with a train and a predict method",
        "Binary tree class with methods to insert and delete nodes",
        "function that returns the longest common prefix string in a list of strings",
        "Linked list class",
        "Graph class with a method that computes the shortest path from one node to another",
        "Quadratic discriminant analysis class",
        "function that returns the edit distance between two strings",
        "function that computes the average of the diagonal element of a matrix",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "Student grade class with a method that computes the average grade"
      ],
      "session_length": "long",
      "text": "Maria: Hi David, how are you settling into remote work? It's been a few weeks now, so I thought we could check in and discuss how it's going.\n\nDavid: Hey Maria, I'm doing well, thanks. I've always enjoyed the flexibility of remote work, and I feel like I've settled into a good routine. I like that I can focus on my tasks without distractions, and the quiet environment really suits my work style.\n\nMaria: That's great to hear. STARTED has always promoted a culture of trust and autonomy, and I think our remote work policy reflects that. We want our employees to have the freedom to work where they're most comfortable and productive. How do you feel your productivity has been?\n\nDavid: I'd say my productivity is high. I set up a dedicated workspace at home, which helps me stay organized and focused. Plus, I've been making use of the collaboration tools the company provides. Video calls and instant messaging have made it easy to stay connected with the team and ensure we're all on the same page.\n\nMaria: That's fantastic, David. Setting up a dedicated workspace is a great idea and can really help with maintaining that work-life balance. And I completely agree about the collaboration tools. Effective communication is key when working remotely. Are there any particular challenges you've faced so far? It's important to address them early on.\n\nDavid: I think my biggest challenge is missing the spontaneous interactions and discussions we used to have in the office. Sometimes, bouncing ideas off colleagues or having a quick chat about a problem can be really helpful. I find that those organic conversations don't happen as often remotely, and it can feel more formal or structured when we do have virtual meetings.\n\nMaria: That's a very valid point, David. Remote work does change the dynamic of team interactions. To mitigate that, I encourage you to reach out to your colleagues proactively. Don't hesitate to set up quick video or phone calls to discuss ideas or problems. Most of us are quite adaptable, and your colleagues will likely appreciate the opportunity to connect and engage as well.\n\nDavid: Yeah, I should definitely be more proactive about that. It's just a matter of forming new habits, right? I'll make an effort to reach out more often and keep those lines of communication open.\n\nMaria: Exactly, and it's all about finding a balance. Another best practice for remote work is to maintain regular working hours, to the extent possible. This helps set boundaries and ensures that your work doesn't bleed into your personal time. Are you finding a good work-life balance?\n\nDavid: I am, actually. I make sure to step away from my desk during lunch and take short breaks throughout the day. I find that going for a walk or doing a quick stretch helps me stay focused when I'm back at my desk. Plus, I make sure to sign off at a reasonable hour and disconnect for the day.\n\nMaria: That's excellent, David. It sounds like you've adapted well to remote work and found a routine that suits you. Remember, if you ever have any concerns or just want to chat, my door is always open\u2014virtually speaking, of course!\n\nDavid: Thanks, Maria. I appreciate your guidance and support. It's been a smooth transition, and I'm happy to be a part of a company that trusts and empowers its employees, even in a remote work setting.\n\nMaria: You're very welcome, David. That's the STARTED way! Keep up the good work, and don't hesitate to reach out if there's anything at all that you need."
    },
    {
      "type": [
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "always use annotations for functions",
        "always include a single digit in function argument names"
      ],
      "session_regex": [
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^j_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_j$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "function that returns the kth largest element in an array",
        "function that given two lists returns common elements"
      ],
      "cumulative_eval_query": [
        "function that converts a Roman numeral string into an integer",
        "function that determines if an array is a valid sudoku",
        "Lasso regression class with a train and a predict method",
        "Binary tree class with methods to insert and delete nodes",
        "function that returns the longest common prefix string in a list of strings",
        "Linked list class",
        "Graph class with a method that computes the shortest path from one node to another",
        "Quadratic discriminant analysis class",
        "function that returns the edit distance between two strings",
        "function that returns the kth largest element in an array",
        "function that computes the average of the diagonal element of a matrix",
        "function that given two lists returns common elements",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "Student grade class with a method that computes the average grade"
      ],
      "session_length": "short",
      "text": "Maria: David, I want to emphasize the importance of clear and consistent coding practices. From now on, I'd like you to always use annotations for functions. It improves readability and helps catch errors early.\n\nDavid: Understood, Maria. I'll make sure to include annotations for all my function definitions from now on.\n\nMaria: Good. Also, when naming function arguments, I'd like you to include a single digit. This adds a bit of uniqueness and can help with debugging.\n\nDavid: Alright, I'll follow that convention. I assume the digit can be placed anywhere within the argument name?\n\nMaria: Yes, that's correct. As long as it's a single digit and included within the name, it will serve the purpose.\n\nDavid: Alright, noted. I'll keep that in mind going forward."
    },
    {
      "type": [
        "filler-add",
        "pivot-update"
      ],
      "topic": [
        "Creating a knowledge-sharing platform to facilitate learning and collaboration among employees",
        "always start attribute names with 'r_'"
      ],
      "session_regex": [
        [
          "attribute",
          "^r_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_j$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "LRU cache class with get and put methods"
      ],
      "cumulative_eval_query": [
        "function that converts a Roman numeral string into an integer",
        "function that determines if an array is a valid sudoku",
        "Lasso regression class with a train and a predict method",
        "Binary tree class with methods to insert and delete nodes",
        "function that returns the longest common prefix string in a list of strings",
        "Linked list class",
        "Graph class with a method that computes the shortest path from one node to another",
        "Quadratic discriminant analysis class",
        "function that returns the edit distance between two strings",
        "function that returns the kth largest element in an array",
        "function that computes the average of the diagonal element of a matrix",
        "function that given two lists returns common elements",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "Student grade class with a method that computes the average grade"
      ],
      "session_length": "long",
      "text": "Maria: Today, I'd like to discuss a knowledge-sharing platform we're considering to facilitate collaboration and learning among our team members. We want to create a space where employees can exchange ideas, provide solutions to common issues, and share their expertise. \n\nDavid: That sounds like a great initiative! I think it could really boost our team's performance and encourage innovation. \n\nMaria: Exactly. We envision a platform with various features, including a discussion forum, a document repository, and perhaps even a mentorship program. It will be a central hub for all our knowledge-sharing activities. \n\nDavid: That's fantastic. I can see how this would be beneficial, especially for new employees like myself. Having a repository of knowledge and the ability to connect with mentors would accelerate my learning curve. \n\nMaria: Absolutely. We want to create a culture of continuous learning and improvement. This platform will ensure that our team's knowledge isn't siloed and that best practices are easily accessible to all. \n\nDavid: It sounds like a challenging but rewarding project. Where do we start? \n\nMaria: We've already begun the planning process and have a solid framework in mind. As for the technical aspects, I want you to start by designing a robust database that can handle various types of content and user interactions. \n\nDavid: Okay, I'll get started on that. Should I use a relational database or go for a NoSQL option? \n\nMaria: For this project, I think a relational database would be best. It will provide the structure and organization we need for the various content types and user roles. \n\nDavid: Understood. I'll begin by mapping out the database schema and deciding on the appropriate tables and relationships. \n\nMaria: That's perfect. Now, regarding coding standards, there's an update I want you to be aware of. When naming attributes from now on, always start the name with 'r_' followed by a descriptive name. This update applies to all the code you have written so far as well. This will help us maintain consistency and make our code more readable. \n\nDavid: Noted. I'll make sure to follow this convention from now on and update my previous code accordingly. \n\nMaria: Great. Remember, consistency is key. By adhering to these standards, we ensure that our code is maintainable and easily understandable by all team members. \n\nDavid: Absolutely, I'll keep that in mind. So, moving forward with the knowledge-sharing platform, do you want me to involve the front-end team as well, or should I create a basic UI for now? \n\nMaria: For now, let's focus on the back-end development. We can involve the front-end team once the core functionality is in place. It's important that we establish a solid foundation first. \n\nDavid: That makes sense. I'll focus on the back end and make sure the database and server-side logic are robust before bringing in the front-end developers. \n\nMaria: Excellent. Remember, this platform is all about collaboration and learning. Keep me updated on your progress, and don't hesitate to reach out if you have any questions or concerns. \n\nDavid: I will, thanks. I'm excited to see how this project unfolds and the impact it will have on our team's performance. \n\nMaria: Likewise. This is a great opportunity for us to strengthen our team's knowledge-sharing culture and set us apart as an innovative and collaborative organization. \n\nDavid: I agree. I'll get to work on the database design and keep you posted on my progress. \n\nMaria: That's wonderful. I'm looking forward to seeing your ideas take shape."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-add"
      ],
      "topic": [
        "always use a whiteboard for brainstorming",
        "always include try statements in functions"
      ],
      "session_regex": [
        [
          "function try",
          true
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_j$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ]
      ],
      "session_eval_query": [
        "function that determines if a given tree is a valid binary search tree"
      ],
      "cumulative_eval_query": [
        "function that converts a Roman numeral string into an integer",
        "function that determines if an array is a valid sudoku",
        "Lasso regression class with a train and a predict method",
        "Binary tree class with methods to insert and delete nodes",
        "function that returns the longest common prefix string in a list of strings",
        "Linked list class",
        "Graph class with a method that computes the shortest path from one node to another",
        "Quadratic discriminant analysis class",
        "function that returns the edit distance between two strings",
        "function that returns the kth largest element in an array",
        "function that computes the average of the diagonal element of a matrix",
        "function that given two lists returns common elements",
        "function that determines if a given tree is a valid binary search tree",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "Student grade class with a method that computes the average grade"
      ],
      "session_length": "long",
      "text": "Maria: Good morning, David. I wanted to touch base with you today about a few updates to our workflow. As you know, we've been focusing on structured goal-setting and discipline in our approach to software engineering.\n\nDavid: Yes, of course. Morning, Maria. I'm all ears.\n\nMaria: Great. I've noticed your creative approach to problem-solving, and I want to ensure that we channel it effectively. From now on, I want you to incorporate the use of a whiteboard into your brainstorming process. It will help visualize your ideas and keep a tangible record of your thought process.\n\nDavid: That's a fantastic idea! I've experimented with whiteboards before, and they really help organize my thoughts, especially when dealing with complex problems.\n\nMaria: Excellent. Now, let's move on to a coding instruction I want you to implement. Always include try statements in your functions. It's a crucial step toward robust error handling and will improve the reliability of your code.\n\nDavid: Understood. I'll make sure to incorporate try statements from now on. Consistency is key, and I'll treat it as a standard practice.\n\nMaria: That's perfect, David. By incorporating these tools and strategies, we can strike a balance between creativity and structure. It will enhance your innovative thinking while maintaining the discipline required in software engineering.\n\nDavid: Absolutely! I appreciate your guidance and mentorship. These updates will definitely improve my workflow and contribute to the quality of my work.\n\nMaria: That's what mentors are for. Keep up the good work, and don't hesitate to reach out if you have any questions or concerns. We're a team, and your growth is important to all of us at STARTED.\n\nDavid: Thank you, Maria. I feel fortunate to have your mentorship and the support of the team. I'll make sure to apply these updates and continue pushing forward."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Requesting upgraded technology, including computers and software"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_j$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that converts a Roman numeral string into an integer",
        "function that determines if an array is a valid sudoku",
        "Lasso regression class with a train and a predict method",
        "Binary tree class with methods to insert and delete nodes",
        "function that returns the longest common prefix string in a list of strings",
        "Linked list class",
        "Graph class with a method that computes the shortest path from one node to another",
        "Quadratic discriminant analysis class",
        "function that returns the edit distance between two strings",
        "function that returns the kth largest element in an array",
        "function that computes the average of the diagonal element of a matrix",
        "function that given two lists returns common elements",
        "function that determines if a given tree is a valid binary search tree",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "Student grade class with a method that computes the average grade"
      ],
      "session_length": "short",
      "text": "Maria: Good morning, David. How are you settling in? I hope you're feeling more comfortable with our processes and the team dynamics.\n\nDavid: Yes, definitely, Maria. It's been an enjoyable experience so far, and I'm learning a lot. I feel like I'm getting a handle on things, but I've noticed that some of our technology and software could be a bit outdated.\n\nMaria: That's an astute observation, David. We've been meaning to upgrade our equipment and are in the process of submitting a request to management. It's important for us to have the necessary tools to work efficiently and effectively.\n\nDavid: That's a relief to hear. I think it would really boost our productivity, especially with some of the newer software that has additional features and improved debugging tools. Are we thinking of sticking with our main programming language, Python?\n\nMaria: Absolutely. Python is versatile and widely used, so it's a safe and reliable choice. We can definitely include a request for updated Python versions and any relevant integrated development environments (IDEs) that would enhance our coding experience. What specific improvements were you thinking of?\n\nDavid: Well, for one, having faster computers with more RAM would be a game-changer. The new Python versions are optimized for faster performance, so combining that with improved hardware would speed up our development time significantly.\n\nMaria: That's a great point, and it ties in well with our request. Management is usually receptive to reasonable upgrades, so I'm confident we'll get approval soon. In the meantime, we can start drafting a list of software and hardware requirements, being sure to highlight the benefits to our workflow and, ultimately, the company's bottom line.\n\nDavid: That sounds like a plan! I'll start making a list of the software upgrades we could benefit from, and I can also look into specific computer models and configurations that would be ideal for our work.\n\nMaria: Excellent. I'll reach out to management to inquire about the status of our request and emphasize the impact it will have on our team's productivity. We'll get this process moving, and before you know it, we'll be working with upgraded technology!"
    },
    {
      "type": [
        "filler-add",
        "pivot-add",
        "pivot-update"
      ],
      "topic": [
        "Fostering a culture of sustainability and social responsibility to make a positive impact on society",
        "always add the '@count_calls' decorator from the 'pedantic' module to all functions",
        "always end method names with '_p'"
      ],
      "session_regex": [
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_j$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that returns the majority element of an array",
        "Graph class with a method that computes the shortest path from one node to another"
      ],
      "cumulative_eval_query": [
        "function that converts a Roman numeral string into an integer",
        "function that determines if an array is a valid sudoku",
        "Lasso regression class with a train and a predict method",
        "Binary tree class with methods to insert and delete nodes",
        "function that returns the longest common prefix string in a list of strings",
        "Linked list class",
        "Graph class with a method that computes the shortest path from one node to another",
        "Quadratic discriminant analysis class",
        "function that returns the edit distance between two strings",
        "function that returns the kth largest element in an array",
        "function that computes the average of the diagonal element of a matrix",
        "function that given two lists returns common elements",
        "function that determines if a given tree is a valid binary search tree",
        "function that returns the majority element of an array",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "Student grade class with a method that computes the average grade"
      ],
      "session_length": "long",
      "text": "Maria: Hi David! How are you doing today?\n\nDavid: Good morning, Maria! I'm doing well, thank you. It's a beautiful day, and I'm excited to dive into some new tasks.\n\nMaria: That's fantastic to hear. So, today, I'd like to discuss the concept of fostering a culture of sustainability and social responsibility within our team and the company at large. As a software engineering team, we have a unique opportunity to make a positive impact on society through our work.\n\nDavid: Absolutely! I think that's one of the most appealing aspects of working in this field. The potential to create something that can benefit others and make a lasting impact is truly motivating.\n\nMaria: Exactly. At STARTED, we take our role in society seriously. We strive to create innovative solutions that not only drive business success but also contribute to the greater good. That's why we encourage our employees to embrace sustainable practices and consider the social impact of their work.\n\nDavid: That's wonderful to hear. How can we, as individuals and as a team, contribute to this culture of sustainability and social responsibility?\n\nMaria: Well, there are several ways. Firstly, we can incorporate sustainable practices into our daily work. This includes simple actions such as reducing paper waste, conserving energy, and promoting recycling. But it also involves making conscious choices when it comes to our software development processes.\n\nDavid: Like ensuring our code is optimized for energy efficiency?\n\nMaria: Precisely! Energy-efficient code not only reduces the environmental impact of running our applications but also improves performance and reduces operational costs. We can also look for opportunities to develop software solutions that directly address social and environmental challenges. \n\nDavid: That's an exciting prospect! I believe that with our skills and creativity, we can make a real difference in these areas.\n\nMaria: I agree. Another important aspect is ethical considerations. As software engineers, we must always think about the potential consequences of our work. This includes ensuring data privacy, considering the implications of artificial intelligence and automation, and being mindful of the potential for bias in our algorithms.\n\nDavid: Those are crucial points. With the power of technology comes great responsibility. We need to continuously ask ourselves how our work can be used and what impact it might have on individuals and society as a whole.\n\nMaria: Yes, and it's also about being transparent and accountable. We should always be prepared to explain and justify our decisions and their potential impact. Now, on to some more specific guidance. I want to update you on a few coding conventions we follow here. Firstly, I'd like you to start using the '@count_calls' decorator from the 'pedantic' module for all your functions. This will help us keep track of function usage and performance.\n\nDavid: Understood. I'll make sure to add the '@count_calls' decorator to all my functions from now on.\n\nMaria: Good. Also, going forward, I'd like you to end all your method names with '_p'. This is a convention we're adopting to improve code readability and maintain consistency across the team.\n\nDavid: Noted. I'll remember to end method names with '_p' from now on. Are there any specific guidelines for when to use this convention or any exceptions I should be aware of?\n\nMaria: No, it's quite straightforward. Simply append '_p' to the end of all your method names, and you'll be following our team's coding standards. Anything you'd like to clarify or discuss further?\n\nDavid: No, that covers everything for now. I'll make sure to implement these instructions in my future tasks. Thank you for your guidance, Maria.\n\nMaria: You're very welcome, David. Don't hesitate to reach out if you have any questions or concerns. That's what I'm here for!"
    },
    {
      "type": [
        "filler-instruction-add"
      ],
      "topic": [
        "Commit directly to the dev branch"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_j$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that converts a Roman numeral string into an integer",
        "function that determines if an array is a valid sudoku",
        "Lasso regression class with a train and a predict method",
        "Binary tree class with methods to insert and delete nodes",
        "function that returns the longest common prefix string in a list of strings",
        "Linked list class",
        "Graph class with a method that computes the shortest path from one node to another",
        "Quadratic discriminant analysis class",
        "function that returns the edit distance between two strings",
        "function that returns the kth largest element in an array",
        "function that computes the average of the diagonal element of a matrix",
        "function that given two lists returns common elements",
        "function that determines if a given tree is a valid binary search tree",
        "function that returns the majority element of an array",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "Student grade class with a method that computes the average grade"
      ],
      "session_length": "short",
      "text": "Maria: Good morning, David. How are you doing today?\n\nDavid: I'm doing well, Maria. It's a beautiful day, and I'm excited to dive into some new code. What's on the agenda for today?\n\nMaria: Great to hear! We're continuing our work on the 'Started' project. I want you to commit your code directly to the dev branch today.\n\nDavid: Directly to the dev branch? Isn't that a bit risky? I thought we usually created pull requests and had them reviewed first.\n\nMaria: That's a good question, David. In this case, we're working on a feature that is a bit more isolated and has less potential for conflict with other team members' work. Committing directly will speed up our development process and reduce the overhead of creating pull requests for every small change.\n\nDavid: I see. So, this is an exception to our usual process. Got it! I'll make sure to commit my changes to the dev branch today. Anything specific you'd like me to focus on?\n\nMaria: Yes, continue your work on the user authentication module. We need to implement a secure login system, and I want to review your progress by the end of the day. Remember to follow our coding standards and best practices.\n\nDavid: Absolutely, Maria. I'll ensure that my code is well-documented and follows our style guide. I'll let you know if I encounter any challenges along the way.\n\nMaria: That's fantastic, David. Don't hesitate to reach out if you need any assistance. I'll be reviewing your commits and providing feedback as well. Let's make today's progress count!"
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Encouraging professional development through workshops, courses, and certifications"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_j$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that converts a Roman numeral string into an integer",
        "function that determines if an array is a valid sudoku",
        "Lasso regression class with a train and a predict method",
        "Binary tree class with methods to insert and delete nodes",
        "function that returns the longest common prefix string in a list of strings",
        "Linked list class",
        "Graph class with a method that computes the shortest path from one node to another",
        "Quadratic discriminant analysis class",
        "function that returns the edit distance between two strings",
        "function that returns the kth largest element in an array",
        "function that computes the average of the diagonal element of a matrix",
        "function that given two lists returns common elements",
        "function that determines if a given tree is a valid binary search tree",
        "function that returns the majority element of an array",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "Student grade class with a method that computes the average grade"
      ],
      "session_length": "short",
      "text": "Maria: David, I wanted to touch base with you today about professional development opportunities. STARTED values continuous learning, and we encourage employees to take advantage of workshops, courses, and certifications to upgrade their skills.\n\nDavid: Absolutely. I've been meaning to explore some new areas and enhance my existing skills. It's great that the company supports these initiatives. What opportunities do you think I should consider first?\n\nMaria: Well, given your creative and innovative mindset, I think there are a few directions you could explore. First, there are some excellent online courses on topics like design thinking and prototyping that could really play to your strengths. These courses often offer a great balance of theory and practical application.\n\nDavid: That sounds fantastic! I've always wanted to dive deeper into design thinking and understand how it can be applied to software engineering. I think that could be a great way to bring something extra to our team's processes.\n\nMaria: Exactly. And don't hesitate to sign up for workshops or seminars conducted by industry experts. These events often provide valuable insights and networking opportunities. They're a great way to stay abreast of the latest trends and practices.\n\nDavid: I completely agree. I've attended a few industry workshops before, and they were incredibly enlightening. It's a great chance to learn from the experts and connect with like-minded professionals. I'll definitely keep an eye out for upcoming events.\n\nMaria: Perfect. Also, don't underestimate the value of certifications. They provide a structured path for skill development and are widely recognized by the industry. There are some excellent Python certification programs that could enhance your resume and demonstrate your expertise.\n\nDavid: That's a great point. I've been meaning to strengthen my Python skills further. A certification would not only motivate me to dive deeper into the language but also showcase my proficiency to potential clients and partners. I'll definitely look into the options available."
    },
    {
      "type": [
        "pivot-add",
        "pivot-update"
      ],
      "topic": [
        "always add comments in your code",
        "always end attribute names with '_r'"
      ],
      "session_regex": [
        [
          "comment",
          true
        ],
        [
          "attribute",
          ".*_r$"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_r$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ]
      ],
      "session_eval_query": [
        "function that converts an integer to Roman numerals",
        "Linked list class"
      ],
      "cumulative_eval_query": [
        "function that converts a Roman numeral string into an integer",
        "function that determines if an array is a valid sudoku",
        "Lasso regression class with a train and a predict method",
        "Binary tree class with methods to insert and delete nodes",
        "function that returns the longest common prefix string in a list of strings",
        "Linked list class",
        "Graph class with a method that computes the shortest path from one node to another",
        "Quadratic discriminant analysis class",
        "function that returns the edit distance between two strings",
        "function that returns the kth largest element in an array",
        "function that computes the average of the diagonal element of a matrix",
        "function that given two lists returns common elements",
        "function that determines if a given tree is a valid binary search tree",
        "function that returns the majority element of an array",
        "function that converts an integer to Roman numerals",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "Student grade class with a method that computes the average grade"
      ],
      "session_length": "short",
      "text": "Maria: David, I want to emphasize the importance of clear and concise commenting in your code. It's essential for collaboration and future maintenance. Always take the time to explain your thought process and any complex logic you've implemented.\n\nDavid: Absolutely, Maria. I'll ensure that my code is well-commented from now on.\n\nMaria: Good. Also, I want to update a previous instruction I gave you. Going forward, please end all attribute names with '_r'. This is a new standard we're implementing for consistency and to avoid potential naming conflicts.\n\nDavid: Understood, Maria. I'll make sure to follow this naming convention from now on. \n\nMaria: Excellent. Clear and consistent code is crucial for our team's productivity and the long-term maintainability of our software. If you have any questions about these conventions, don't hesitate to reach out. \n\nDavid: I will, Maria. Thank you for the guidance."
    },
    {
      "type": [
        "filler-add",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "Celebrating employee birthdays, work anniversaries, and achievements with recognition and rewards",
        "always start function names with 'x_'",
        "always import the 'hashlib' module even if it is not used"
      ],
      "session_regex": [
        [
          "function",
          "^x_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_r$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^x_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that given an array of integer citations, computes the h-index",
        "function that implements insertion sort"
      ],
      "cumulative_eval_query": [
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two lists returns common elements",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements insertion sort"
      ],
      "session_length": "long",
      "text": "Maria: Hi, David! How are you doing today?\n\nDavid: I'm good, Maria. Thanks for asking. It's been a busy few weeks, but I'm enjoying the work and learning a lot.\n\nMaria: That's great to hear. We've been making some good progress on the project, and I think it's important to take a step back and recognize these achievements. STARTED values its employees and believes in celebrating milestones and successes. So, I wanted to talk to you about how we recognize and reward our team members.\n\nDavid: Absolutely! I think it's important to acknowledge the hard work and dedication of team members. It boosts morale and creates a positive work environment.\n\nMaria: Exactly. At STARTED, we like to celebrate employee birthdays, work anniversaries, and significant achievements. We do this through various recognition and reward programs.  We also organize quarterly team outings to celebrate our collective achievements and strengthen our bonds.\n\nDavid: That's fantastic! Recognizing employees for their hard work and dedication is so important. It makes us feel valued and motivated to continue pushing forward.\n\nMaria: Indeed. Now, on to another topic, I want to give you some specific coding instructions to follow going forward. I'd like you to start function names with 'x_' as a prefix. This is to maintain consistency across our code base and easily identify custom functions. Additionally, I want you to always import the 'hashlib' module, even if you don't think you'll need it for a particular script. It's a standard practice we maintain for security purposes.\n\nDavid: Understood, Maria. I'll make sure to follow these instructions from now on. Consistency and security are crucial, and I'll keep that in mind as I continue to contribute to our projects.\n\nMaria: Great! I know it might take some time to adjust, but these practices are important for maintaining code quality and security. Now, let's get back to reviewing that code you've been working on. Any updates or questions about the function you were working on?\n\nDavid: Yes, I made some good progress. I refactored the code to improve its efficiency and added some additional error handling to make it more robust. I'd be happy to walk you through the updates.\n\nMaria: That sounds fantastic, David. Go ahead and share your screen so we can dive into the details together.\n\nDavid: Absolutely, give me just a moment and I'll share my screen.\n\n[David shares their screen and walks Maria through the updated code, explaining the changes made and the reasoning behind them.]\n\nMaria: This looks really good, David. I can see that you've applied some of the best practices we discussed previously, and your code is becoming more and more polished. Keep up the great work!\n\nDavid: Thank you, Maria. Your guidance and support have been invaluable. I feel like I'm continually improving, and that's a great feeling.\n\nMaria: You're very welcome. That's what mentorship is all about. Now, let's schedule our next meeting to continue this forward momentum. Do you have time later this week?\n\nDavid: Yes, I'm available on Thursday afternoon if that works for you.\n\nMaria: Perfect. I'll send a calendar invite for Thursday at 2 p.m. If anything comes up or you need additional support before then, don't hesitate to reach out.\n\nDavid: Will do, Maria. Thank you again for your time and guidance.\n\nMaria: You're welcome, David. Keep up the excellent work, and I'll see you on Thursday!"
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Hosting company-wide town hall meetings to share updates and foster transparency"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_r$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^x_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two lists returns common elements",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements insertion sort"
      ],
      "session_length": "long",
      "text": "Maria: Good morning, David. How are you doing today?\n\nDavid: I'm doing well, Maria. It's been an exciting few weeks, learning the ropes and getting to know the team.\n\nMaria: I'm glad to hear that. You're progressing quickly, and I think it's time we discuss taking on more responsibilities. The company values your fresh perspective, and we'd like to give you a platform to share your ideas and receive feedback.\n\nDavid: Absolutely! I've been eager to dive into new projects and contribute to the team's initiatives. What did you have in mind?\n\nMaria: As you know, transparency and open communication are crucial aspects of our company culture. We host company-wide town hall meetings every quarter to share updates, discuss upcoming projects, and address any questions or concerns. Your insights and innovative thinking can greatly benefit the team, so I'd like you to present your ideas and lead a discussion during the next town hall meeting.\n\nDavid: That sounds like a fantastic opportunity! I've been observing our team's processes and have some thoughts on how we can improve our development workflows and incorporate new tools. I think a discussion on that would be valuable.\n\nMaria: Excellent! Town hall meetings are a great platform for exactly that. Now, let's break down the steps to prepare for the presentation. First, I want you to create an outline of the key points you want to address. Keep in mind that town hall meetings are meant to be interactive, so structure your presentation to allow for questions and feedback.\n\nDavid: Noted. I'll prepare a detailed outline and send it to you for review by the end of the week. Should I plan for a specific duration?\n\nMaria: That's a good question. For these meetings, we usually allocate around 30 minutes for presentations, followed by a 15-minute Q&A session. It's important to respect everyone's time, so we try to keep the meetings concise and focused.\n\nDavid: Got it. I'll make sure to time my presentation accordingly and leave ample room for discussions and interactions.\n\nMaria: Perfect. In terms of content, I'd like you to focus on two main areas. First, provide an overview of the current processes and tools we use for development. This will help everyone, especially new team members, understand our standard operating procedures.\n\nDavid: Definitely. Providing context and a high-level overview is important. I can walk them through our version control practices, issue tracking system, and the collaboration tools we use daily.\n\nMaria: Exactly. The second area to focus on is your proposed improvements. Highlight the pain points you've observed and the specific tools or methodologies you believe can address them. Remember to provide concrete examples and a clear rationale for your suggestions.\n\nDavid: I will. I've been experimenting with a new project management framework and believe it could streamline our development cycles. I'll prepare some visuals to illustrate my points and make the presentation engaging.\n\nMaria: Visual aids are always a great idea. Keep in mind that your audience will consist of both technical and non-technical stakeholders, so use language that is accessible to everyone while still conveying the necessary details.\n\nDavid: I understand. I'll strike a balance between providing sufficient context and keeping the presentation concise. Should I be reaching out to other teams or individuals for input?\n\nMaria: That's a great question. Collaboration is key, and it would be beneficial to gather insights from other teams. I suggest reaching out to the product management and design teams to get their perspective on the current processes and your proposed improvements. They might have additional insights or concerns that you can incorporate into your presentation.\n\nDavid: Will do. I'll set up meetings with them over the next week to ensure I have a well-rounded understanding of the implications of my suggestions. Anything else I should keep in mind as I prepare?\n\nMaria: Just a few more points. As you're crafting your presentation, remember that town hall meetings are also a platform for two-way communication. Encourage dialogue and be prepared to address questions or concerns that may arise. Also, practice your presentation beforehand. Rehearse your speaking pace, ensure your transitions are smooth, and anticipate potential questions that may come up.\n\nDavid: Absolutely. I'll make sure to practice and solicit feedback from you and other team members before the final presentation. Is there a specific process for submitting questions or topics for discussion during town hall meetings?\n\nMaria: Usually, we encourage everyone to submit questions or topics ahead of time. This helps us structure the meeting and ensure that we address the most pressing concerns. However, we also leave room for impromptu questions and discussions during the meeting. It keeps things dynamic and allows for organic conversations to unfold.\n\nDavid: That makes sense. I'll make sure to communicate the process clearly and encourage my colleagues to submit their questions or topics beforehand.\n\nMaria: Fantastic. I'm excited to see your ideas come to life, David. Remember, town hall meetings are a great opportunity to foster transparency, build alignment, and drive innovation within our company. Your contribution is valuable, and I look forward to seeing the discussions that your presentation will spark.\n\nDavid: Thank you, Maria. I really appreciate your guidance and support. I'll get to work on the outline and send it over for your review soon.\n\nMaria: You're very welcome. That sounds like a plan. Don't hesitate to reach out if you need any further assistance or feedback along the way. We're all here to support each other and drive STARTED's mission forward.\n\nDavid: I certainly will. Thanks again, and I'll talk to you soon.\n\nMaria: Take care, David. Let's make this town hall meeting a memorable one!"
    },
    {
      "type": [
        "filler-update",
        "pivot-update",
        "pivot-add"
      ],
      "topic": [
        "Building a culture of adaptability and resilience to navigate change and uncertainty",
        "always end attribute names with '_i'",
        "always import the 'bz2' module even if it is not used"
      ],
      "session_regex": [
        [
          "attribute",
          ".*_i$"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^x_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "Linked list class",
        "function that implements sum array except self"
      ],
      "cumulative_eval_query": [
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two lists returns common elements",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements insertion sort"
      ],
      "session_length": "medium",
      "text": "Maria: I wanted to circle back to our previous discussion about cultivating adaptability and resilience within our team. It's an important topic, especially given the fast-paced and ever-evolving nature of our industry.\n\nDavid: Absolutely. I've been thinking about our conversation a lot. It's clear that fostering a culture of adaptability is crucial for our success. It allows us to embrace change, innovate, and stay ahead of the curve.\n\nMaria: Exactly. And it's not just about surviving in a dynamic environment; it's about thriving. We need to ensure that our team can navigate challenges and seize opportunities effectively. So, I want to emphasize the importance of continuous learning and a growth mindset. Encouraging a culture of knowledge-sharing and collaboration will help us build resilience and adapt to changing market demands.\n\nDavid: That makes a lot of sense. Knowledge-sharing sessions and cross-functional collaborations will not only enhance our skills but also strengthen our team dynamics and innovativeness.\n\nMaria: Indeed. Now, let's shift gears a bit and dive into some specific coding instructions. I want to emphasize consistency and standardization in our coding practices. From now on, I need you to end all attribute names with '_i'. This will help us maintain a clear and uniform coding style. Additionally, always import the 'bz2' module, even if you don't anticipate using it. This will ensure that we have the necessary tools readily available should the need arise.\n\nDavid: Understood. I'll make sure to implement these instructions moving forward. Consistency and standardization are key to maintaining a clean and understandable code base.\n\nMaria: That's great, David. By adhering to these practices, we can enhance the readability and maintainability of our code, making it easier for our team to work together effectively. If you have any questions or concerns about these instructions, don't hesitate to reach out.\n\nDavid: Will do. I appreciate your guidance and clarity on this matter. It helps me stay aligned with your expectations."
    },
    {
      "type": [
        "pivot-add"
      ],
      "topic": [
        "always include the string 'chx' in attribute names"
      ],
      "session_regex": [
        [
          "attribute",
          ".*chx.*"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^x_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [
        "Perceptron class with train and predict methods"
      ],
      "cumulative_eval_query": [
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two lists returns common elements",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements insertion sort"
      ],
      "session_length": "long",
      "text": "Maria: Good morning, David. I wanted to speak with you about maintaining consistency in our code, especially with attribute names. It's important that we establish clear standards to ensure our code is readable and understandable for all team members. \n\nDavid: Absolutely, Maria. Consistency is key in collaborative projects. I'm all ears. \n\nMaria: Great. From now on, I want you to include the string 'chx' in all attribute names. This will help us identify and distinguish these attributes more easily, especially when we have a large number of them. \n\nDavid: Understood. I'll make sure to implement this convention going forward. Are there any specific cases or scenarios where this instruction would not apply or need adaptations? \n\nMaria: No, this is a general rule that we will be following from now on. I'll ensure that the rest of the team is also aware of this convention. It's a simple measure, but it will help us maintain cleaner and more uniform code. \n\nDavid: Indeed, it's the small details like this that make a big difference in the long run. I'll keep this in mind as I continue working on my current tasks and future projects. \n\nMaria: That's excellent, David. I appreciate your attention to detail and willingness to adapt. Consistency is an important aspect of coding, and it's great to see that you're embracing these standards. \n\nDavid: Thank you for your guidance, Maria. I'll let you know if I have any insights or feedback on this as I apply it in my work. \n\nMaria: That sounds good. Feel free to reach out if you have any questions or concerns about this or any other coding practices. We're always looking to improve our processes, and your input is valuable. \n\nDavid: Will do. Thanks again for your mentorship and support. \n\nMaria: You're very welcome. Now, let's get back to work and keep building great software!"
    },
    {
      "type": [
        "filler-update"
      ],
      "topic": [
        "Building a culture of innovation and creativity through idea-sharing and experimentation"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^x_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two lists returns common elements",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements insertion sort"
      ],
      "session_length": "short",
      "text": "Maria: David, I wanted to touch base with you again on the topic of innovation and creativity within our team. It's an important aspect of any software engineering group, and I believe it's crucial to nurture it.\n\nDavid: Absolutely, Maria. I completely agree. I think our previous discussion really got me thinking about ways to encourage a more innovative mindset. It's an essential part of moving the team forward and keeping us competitive.\n\nMaria: Fantastic! I'm glad to hear that. So, where do you think we can start? How can we build a culture that fosters innovation and creativity through idea-sharing and experimentation?\n\nDavid: Well, I think one key aspect is to create an environment where people feel comfortable sharing their ideas. Often, the fear of failure or criticism can hinder creativity. Maybe we can implement regular brainstorming sessions where everyone is encouraged to contribute, and we emphasize the value of experimentation.\n\nMaria: That's a great point, David. Creating a safe and supportive atmosphere is essential. We want to ensure that everyone feels like their ideas are welcomed and respected. Additionally, I think providing the right tools and resources to turn these ideas into tangible prototypes or experiments is vital. Whether it's dedicated time, access to new technologies, or mentorship, we should aim to provide it.\n\nDavid: Absolutely! Having the freedom to explore and experiment is crucial. Maybe we can also establish a system where team members can pitch their ideas and receive feedback and support from the rest of the team. It could be like a mini-incubation program, helping to develop these innovative thoughts into potential projects or features.\n\nMaria: I like the sound of that, David. It aligns with our goal of structured experimentation. By providing a framework for idea development, we can strike a balance between creativity and focused execution. Why don't you work on drafting a proposal for this idea-incubation process? We can then present it to the team and get their feedback.\n\nDavid: Certainly! I'll put together a detailed plan and some guidelines for how we can structure these pitches and the subsequent feedback process. It's an exciting initiative, and I think it'll really encourage our team to embrace their innovative side.\n\nMaria: Excellent! Remember, I'm here to provide any support or guidance you need. Together, we can help foster a culture of innovation and creativity within STARTED."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Reinforcing and embodying the company's core values in day-to-day operations and decision-making"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^x_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two lists returns common elements",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements insertion sort"
      ],
      "session_length": "short",
      "text": "Maria: Good morning, David. How are you doing today?\n\nDavid: I'm doing well, Maria. It's been an interesting few weeks, getting to grips with the company and our processes. I feel like I'm settling in.\n\nMaria: That's great to hear. So, today I wanted to touch on something a bit more conceptual but nonetheless important. As you know, every company has its own culture and core values that guide its operations. Here at STARTED, we take our core values very seriously, and they influence everything we do.\n\nDavid: Absolutely. I've noticed that the company emphasizes a blend of innovation and structure in its day-to-day operations. It's an interesting dynamic and quite unique compared to some other places I've worked.\n\nMaria: Exactly. We value creativity and innovation, but we also understand the importance of discipline and a structured approach. It's all about finding the right balance. Our core values are embodied in our decision-making processes, project management, and even our coding practices.\n\nDavid: That makes a lot of sense, especially given the nature of our work. So, how do these values translate into our day-to-day tasks?\n\nMaria: Well, let's take an example from our software engineering context. When we approach a new project, we encourage our engineers to be innovative and think outside the box. But we also emphasize the importance of structured planning and disciplined execution. So, we might set aside time for brainstorming and experimentation, but we also have strict deadlines and milestones to keep everyone focused and on track.\n\nDavid: That approach makes a lot of sense. It allows for creativity while ensuring that projects are completed efficiently and effectively.\n\nMaria: Precisely. And it's this balance that has contributed to the success of STARTED. Now, as a mentor, it's my role to ensure that you not only understand these values but also embody them in your work. So, I want to encourage you to continue thinking creatively but also to structure your approaches and be mindful of deadlines.\n\nDavid: I appreciate that guidance, Maria. It definitely helps to have a clear understanding of the company's expectations. I'll keep that balance in mind as I work on my current projects.\n\nMaria: That's fantastic, David. And remember, if you ever have any questions or concerns, don't hesitate to reach out. That's what I'm here for."
    },
    {
      "type": [
        "filler-update"
      ],
      "topic": [
        "Hosting company-wide town hall meetings to share updates and foster transparency"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^x_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two lists returns common elements",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements insertion sort"
      ],
      "session_length": "medium",
      "text": "Maria: Good morning, David. How are you doing today? \n\nDavid: I'm good, thanks. It's been an interesting few weeks, catching up with everything and getting a feel for the company culture. I've been meaning to ask you about the town hall meetings. I attended my first one last week, and I found the format quite engaging. \n\nMaria: That's great to hear. We take our town halls seriously. They're a great way to ensure transparency and keep everyone in the loop, especially with our remote work setup. It's been a while since our last company-wide meeting, so we're due for another soon. \n\nDavid: Definitelysection Indeed, and I was thinking about what we discussed before\u2014about ways to make these meetings even more interactive and valuable for everyone. I've been brainstorming some ideas, and I wanted to run them by you. \n\nMaria: Absolutely. Go ahead. \n\nDavid: Well, I was thinking we could incorporate more multimediasection Q&A sessions. Maybe have a dedicated town hall focused solely on questions and answers. This would give employees a chance to get clarifications, raise concerns, or just gain additional insights into company matters. \n\nMaria: That's a fantastic idea, David. Town halls are not just about disseminating information; they're also about creating a dialogue and ensuring that everyone understands and feels involved. A Q&A session would definitely foster that. We can plan a town hall with that format and see how it goes. \n\nDavid: That! I think it could really add value and make these meetings even more productive. I also had an idea about incorporating pollssection small group discussions... \n\nMaria: Go on. \n\nDavid: Well, we could have town halls where, after the initial company updates, we break out into smaller groups to discuss specific topics or themes. It could be related to ongoing projects, future goals, or even just general discussions about workplace challenges and potential solutions. It might help foster a sense of collaboration and community, especially with so many of us working remotely. \n\nMaria: David, that's brilliant! It adds an element of interactivity and ensures that people feel heard. With remote work, it's easy to feel disconnected, so creating these smaller group discussions can help build stronger connections and a sense of belonging. \n\nDavid: Thanks! I'm glad you think so. I really do think it could enhance the overall employee experience and maybe even lead to some innovative solutions or improved workflows. \n\nMaria: Absolutely. It's a great way to tap into the collective intelligence of our team. We can propose this format for the next town hall and see the impact it has. Your ideas are truly valuable, David. Keep that innovative mindset flowing. \n\nDavid: Thank you so much, Maria. I appreciate your support and guidance. It means a lot, especially as I'm still settling in. \n\nMaria: You're very welcome. That's what mentors are for. Now, let's work on putting these ideas into action! \n\nDavid: Yes, let's do it!"
    },
    {
      "type": [
        "filler-update",
        "pivot-add"
      ],
      "topic": [
        "Remote work policies, challenges, and best practices",
        "always use annotations for methods"
      ],
      "session_regex": [
        [
          "method annotation",
          true
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^x_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ]
      ],
      "session_eval_query": [
        "Binary tree class with methods to insert and delete nodes"
      ],
      "cumulative_eval_query": [
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two lists returns common elements",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements insertion sort"
      ],
      "session_length": "medium",
      "text": "Maria: \"I wanted to touch base with you again regarding remote work. We've previously discussed the benefits and challenges, and I'd like to ensure that you're aware of our policies and best practices as you continue to work remotely.\" \n\nDavid: \"Absolutely. I've been enjoying the flexibility and the change of pace that remote work brings. It's been an adjustment, but I feel like I'm getting the hang of it.\" \n\nMaria: \"That's great to hear. STARTED is quite progressive with its remote work policies, and we want to ensure that our employees make the most of it. Effective remote communication is key. Ensure you're available and responsive during work hours. Use our collaboration tools regularly and effectively. This includes regular check-ins with your team and prompt replies to emails or messages.\" \n\nDavid: \"I make sure to stay connected with my team throughout the day. We use video conferencing for our daily stand-ups, and I find that helps keep everyone engaged and on the same page.\" \n\nMaria: \"That's excellent, David. In addition to communication, it's important to maintain a professional environment, even when working from home. Set up a dedicated workspace to stay focused and minimize distractions. Also, remember to take breaks and step away from your workstation regularly to maintain a healthy work-life balance.\" \n\nDavid: \"I do have a specific area set up for work, and I make sure to take breaks to stretch and get some fresh air. It helps me stay productive and focused when I am working.\" \n\nMaria: \"That's fantastic. Now, regarding your current project, I want to emphasize the importance of code documentation and readability. Always use annotations for methods. This helps other developers understand your code and promotes consistency across the team's codebase.\" \n\nDavid: \"Understood. I'll make sure to implement annotations for all my methods from now on.\" \n\nMaria: \"That's great, David. Proper code documentation is crucial for collaboration and maintaining our code quality standards. If you have any questions or concerns about remote work or any other aspect of your work, don't hesitate to reach out.\" \n\nDavid: \"I will, thanks, Maria. I appreciate your guidance and support.\""
    },
    {
      "type": [
        "filler-instruction-update"
      ],
      "topic": [
        "always use a virtual environment"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^x_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two lists returns common elements",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements insertion sort"
      ],
      "session_length": "long",
      "text": "Maria: Hi David, how are things going? I wanted to touch base on a few points regarding your project and our development practices.\n\nDavid: Hey Maria! It's going well. I've been making good progress on the project and I'm enjoying the work. What did you want to discuss?\n\nMaria: Great to hear, David. I'm glad you're settling in and finding your stride. So, one of the things I wanted to emphasize today is the importance of using virtual environments for your projects.\n\nDavid: Oh yes, virtual environments. I remember you mentioning them briefly before. How exactly do they fit into our development process?\n\nMaria: Virtual environments are a crucial tool for maintaining a clean and isolated development space. They allow you to create a separate environment for each project, with its own set of dependencies and settings. This way, you avoid the \"works on my machine\" syndrome and potential compatibility issues.\n\nDavid: I see. So, it's a way to ensure that everyone on the team is working with the same set of tools and dependencies, regardless of their local machine setup?\n\nMaria: Exactly, David. By encapsulating the project's specific requirements, you can ensure that your project will work seamlessly across different computers and operating systems. It's a best practice that we strongly encourage here at STARTED.\n\nDavid: That makes a lot of sense, especially considering we have a diverse team with different hardware and software configurations. So, how do I go about setting up a virtual environment for my projects?\n\nMaria: Great question. For Python projects, which is our primary language here, we typically use virtualenv or conda. These tools allow you to create and manage isolated environments easily. I'll send you some documentation and tutorials on how to get started with these tools.\n\nDavid: Fantastic, thank you. I'll definitely set up virtual environments for my ongoing and future projects. It's a small step to ensure consistency across the team.\n\nMaria: Absolutely. It's a simple practice that pays off in the long run. It also helps with dependency management, allowing you to have more control over the packages and versions used in your projects.\n\nDavid: That's a good point. Managing dependencies can become tricky, especially as projects grow in complexity. I'll make sure to incorporate virtual environments into my workflow from now on.\n\nMaria: That's wonderful to hear, David. It's all about adopting good habits early on. Now, while we're on the topic of project management, I also wanted to discuss our version control practices and emphasize the importance of regular commits and meaningful commit messages.\n\nDavid: Okay, I'm all ears. I know version control is crucial, especially when collaborating with a team. I've been using Git for my projects, but I'd love to hear your insights and best practices.\n\nMaria: Fantastic! Let's dive into that next..."
    },
    {
      "type": [
        "filler-update",
        "pivot-add"
      ],
      "topic": [
        "Reinforcing and embodying the company's core values in day-to-day operations and decision-making",
        "always include assert statements in methods"
      ],
      "session_regex": [
        [
          "method assert",
          true
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^x_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ]
      ],
      "session_eval_query": [
        "Nearest neighbors model class with train and predict methods"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two lists returns common elements",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements insertion sort"
      ],
      "session_length": "long",
      "text": "Maria: Good morning, David. I wanted to touch base with you today about something that's crucial to your growth here at STARTED\u2014reinforcing our company's core values in your daily work. As you know, our company culture is built on a strong foundation of innovation, collaboration, and integrity. We take pride in our values, and it's essential that they aren't just words on paper but a driving force in our operations.\n\nDavid: Absolutely, Maria. I've been focusing on that aspect ever since we last spoke about it. I understand the impact it has on not just my work but also the overall team dynamics and company reputation.\n\nMaria: That's great to hear, David. I'm glad you're recognizing their importance. Our core values guide us in decision-making, problem-solving, and even creative pursuits. They shape how we interact with our colleagues, clients, and the wider community. One of our key values is 'Building Together,' which emphasizes collaboration and a cohesive team spirit. How do you think this particular value is reflected in your day-to-day tasks?\n\nDavid: Well, I've been making a conscious effort to involve my colleagues in brainstorming sessions, especially when tackling a new feature for our software. I find that by encouraging diverse perspectives, we often arrive at more innovative and robust solutions. It also helps foster a sense of ownership and motivation within the team, which ultimately benefits the project.\n\nMaria: Excellent! That's precisely the kind of mindset and behavior we want to encourage. By embracing collaboration, you're not only upholding our company's values but also enhancing the quality of your work and, by extension, the satisfaction of our clients. Remember, we strive to create an environment where everyone feels valued and empowered to contribute. Now, another important value we hold dear is 'Fearless Innovation.' As a software engineering team, this is especially relevant to our work. How do you interpret this value in your role?\n\nDavid: For me, 'Fearless Innovation' is all about embracing risks and daring to explore uncharted territories. It means not being afraid to fail but instead, seeing each failure as a learning opportunity. In practical terms, I try to allocate some time each week to experiment with new technologies or approaches that I haven't used before. I might even attempt to create a small proof-of-concept for a completely novel idea. It keeps me excited and engaged, and who knows, it might even lead to the next big innovation for our company!\n\nMaria: Brilliant! I'm glad to hear that you're embracing the spirit of innovation. It's that willingness to step into the unknown that often leads to groundbreaking discoveries. Of course, we also need to balance it with pragmatism and a results-oriented mindset, ensuring that our innovations are feasible and provide tangible benefits. Now, one final value I want to discuss today is 'Integrity in Action.' This is the bedrock of our company's reputation and our relationship with clients and partners. How do you see this value influencing your work?\n\nDavid: Oh, it's huge! For me, 'Integrity in Action' means taking responsibility for my work, being honest about my capabilities, and always delivering my best efforts. It's about upholding ethical standards, even when no one is watching.  I'll take the initiative to address it promptly because I understand the potential impact it could have on our users.\n\nMaria: Wonderful, David. It's clear that you've internalized these values and are actively embodying them in your work. Remember, it's through these shared values that we cultivate a strong company culture, attract top talent, and retain our clients' trust. Now, onto a separate but important topic\u2014coding practices. Going forward, I want you to focus on including assert statements in your methods. These statements will help ensure that your code behaves as expected and validate the integrity of your data.\n\nDavid: Understood, Maria. I'll make sure to incorporate assert statements from now on.\n\nMaria: Great. We'll review some of your code together soon to ensure that these instructions are being implemented correctly. For now, keep up the good work, and don't hesitate to reach out if you have any questions or concerns.\n\nDavid: Thank you, Maria. I really appreciate your guidance and support."
    },
    {
      "type": [
        "filler-instruction-update"
      ],
      "topic": [
        "Do not commit directly to the dev branch"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^x_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two lists returns common elements",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements insertion sort"
      ],
      "session_length": "short",
      "text": "Maria: Hi, David. How are things going with the new project?\n\nDavid: Hey, Maria. It's going well. I've been making some good progress with the code and I think I'm ready to start committing my changes.\n\nMaria: That's great to hear. Just wanted to touch base on our version control process. I wanted to update a previous instruction I gave you. Remember to avoid committing directly to the dev branch. \n\nDavid: Oh, right. You mentioned that before. So, I should create a new branch for my changes and then merge it into dev, right?\n\nMaria: Exactly. It's important to keep our dev branch stable and up-to-date with the latest stable version of the code. By creating a new branch, you can work on your features or bug fixes in isolation and then merge them back into dev when they're ready.\n\nDavid: Got it. That makes sense. I'll make sure to create a new branch for my current task and follow that process from now on.\n\nMaria: Great. If you have any questions about the process or need help with anything, don't hesitate to reach out. That's what I'm here for.\n\nDavid: Will do. Thanks for the guidance, Maria. I'll let you know if I run into any issues."
    },
    {
      "type": [
        "filler-update"
      ],
      "topic": [
        "Celebrating employee birthdays, work anniversaries, and achievements with recognition and rewards"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^x_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two lists returns common elements",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements insertion sort"
      ],
      "session_length": "long",
      "text": "Maria: Good morning, David! How are you doing today?\n\nDavid: Good morning, Maria! I'm doing well, thanks. How about you?\n\nMaria: I'm great. We've been meaning to catch up for a while now, given our busy schedules. I wanted to continue our discussion about recognizing and rewarding employees for their birthdays, work anniversaries, and achievements. It's an important part of company culture and employee engagement.\n\nDavid: Absolutely! I think it's a fantastic idea to show our employees that we value and appreciate them. It boosts morale and creates a positive work environment.\n\nMaria: Exactly. We want our employees to feel valued and know that their hard work and dedication aren't going unnoticed. Small gestures of recognition can go a long way toward fostering a sense of belonging and motivation.\n\nDavid: That's very true. So, what are some ways in which we can recognize and reward our employees?\n\nMaria: Well, for birthdays and work anniversaries, we could organize a small celebration during lunch or after work. Maybe decorate the office a bit and have a cake or some treats. It's a simple yet effective way to make someone feel special.\n\nDavid: I like that idea! It's a nice break from the routine and creates a festive atmosphere. Maybe we could also give the employee a small gift, like a gift card or a company-branded item.\n\nMaria: That's a great suggestion! Personalized gifts always make people feel valued. Now, when it comes to achievements, we want to recognize significant accomplishments or milestones reached by our employees. This could be landing a big client, completing a challenging project, or coming up with an innovative solution.\n\nDavid: Oh, I see. So, for this type of recognition, we could have a more formal acknowledgment during a team meeting or even a company-wide announcement. We could also feature the employee on our company newsletter or social media channels.\n\nMaria: Perfect! That way, we not only recognize their achievements but also inspire and motivate others. Another idea is to establish an employee recognition program with different tiers or levels of recognition. \n\nDavid: That sounds fantastic! With a structured program, we can ensure that recognition becomes an integral part of our company culture. We could even involve employees in the nomination and selection process, making it a peer-recognized honor.\n\nMaria: Absolutely, David. Involving peers will foster a culture of appreciation and gratitude. Now, in terms of rewards, aside from the celebrations and gifts we mentioned, we could offer incentives such as additional paid time off, flexible work arrangements for a set period, or even monetary bonuses for exceptional achievements.\n\nDavid: Those are some attractive incentives! I think our employees would be delighted and motivated by these rewards. It's also a great way to show that we value their contributions and want to invest in their well-being.\n\nMaria: Exactly, and by recognizing and rewarding our employees, we not only boost morale but also increase employee retention and create a positive company image. So, let's work on a detailed plan and present it to the management team for approval.\n\nDavid: Absolutely! I'll get started on drafting the plan, and we can refine it together. It's exciting to be part of creating a culture that values and celebrates our employees!\n\nMaria: Fantastic! I'm glad we're on the same page, David. Now, before we wrap up, is there anything else you'd like to add or discuss regarding this topic?\n\nDavid: No, I think we've covered everything thoroughly. I'm excited to get started on the draft and make this a reality for our team.\n\nMaria: Wonderful! I'll look forward to reviewing the draft and providing my input. Let's schedule another meeting soon to continue our progress on this initiative. Keep up the great work, David!\n\nDavid: Thank you so much, Maria! I'll make sure to send you the draft as soon as possible. It's always a pleasure discussing these ideas with you. Have a great day!\n\nMaria: You too, David!"
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Cultivating a feedback culture and providing performance improvement plans for continuous growth"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^x_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two lists returns common elements",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements insertion sort"
      ],
      "session_length": "short",
      "text": "Maria: Feedback is an essential aspect of professional growth, especially in a field like software engineering where innovation and problem-solving are paramount. \n\nDavid: Absolutely. I've always believed that feedback helps refine ideas and improve my skills. Constructive criticism is a great tool for growth. \n\nMaria: That's fantastic to hear, David. Many people struggle with receiving feedback, but it seems you have a healthy perspective on it. Now, at STARTED, we encourage a culture of open and frequent feedback. This means providing performance improvement plans and regular check-ins to ensure everyone is on track and has the support they need. \n\nDavid: Performance improvement plans? Can you tell me more about how those work and what they entail? \n\nMaria: Of course. So, these plans are essentially structured guides that outline specific goals and expectations for an employee's performance. They're not just for underperformance but also for fostering continuous growth and development. We identify areas where an employee can improve and provide actionable steps to get there. \n\nDavid: That makes a lot of sense. So, it's like a roadmap with milestones to ensure that I'm not only meeting expectations but also growing in my role. \n\nMaria: Exactly. These plans can include a variety of things, like learning new programming languages, improving communication skills, or even taking on additional responsibilities. The key is that they're tailored to the individual's needs and goals. \n\nDavid: That's a great way to ensure that everyone is challenged and supported in their roles. I'm curious, how often are these performance improvement plans usually reviewed and updated? \n\nMaria: That can vary depending on the situation. Typically, we review them during our one-on-one meetings, which we aim to hold at least once a month. This provides an opportunity to discuss progress, address any challenges, and make adjustments as needed. It's a collaborative process, and we encourage employees to take ownership of their development. \n\nDavid: That's fantastic. Regular feedback and structured plans for improvement will definitely help me grow as an engineer. I'm glad to be working at a company that prioritizes these things. \n\nMaria: We're glad to have you, David. Your enthusiasm for feedback and growth is commendable, and I'm sure it will serve you well here at STARTED. Remember, if you ever have any concerns or feel like you need additional support, don't hesitate to reach out. That's what mentors are for! \n\nDavid: Thank you, Maria. I really appreciate your guidance and support. I feel more confident already about navigating my path here at STARTED. \n\nMaria: You're very welcome, David. That's what mentorship is all about. Keep up the great work, and let's continue this conversation as you settle into your role and we identify areas for further growth and development. \n\nDavid: Absolutely! I'll be sure to check in and provide updates on my progress. Thank you again for your help. \n\nMaria: You're welcome. Keep that proactive mindset, and don't be a stranger!"
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-add"
      ],
      "topic": [
        "use a linux desktop as the main computer",
        "always add the '@trace_class' decorator from the 'pedantic' module to all classes"
      ],
      "session_regex": [
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^x_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "Kernel ridge regression class"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two lists returns common elements",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements insertion sort"
      ],
      "session_length": "medium",
      "text": "Maria: Good morning, David. How are you settling in?\n\nDavid: Good morning, Maria. I'm doing well, thanks. I've been exploring our code base and familiarizing myself with the projects. It's exciting to dive into a new environment.\n\nMaria: That's great to hear. I wanted to talk to you about our development environment. We primarily use Linux desktops as our main machines. Have you set up your Linux environment already?\n\nDavid: Yes, I've been working on it. I've installed the necessary packages and configured my IDE. I'm quite comfortable with Linux, so it wasn't too challenging.\n\nMaria: Excellent. Linux provides a robust and consistent development platform. Now, regarding our coding standards, there's a specific instruction I want to emphasize. Always add the '@trace_class' decorator from the 'pedantic' module to all your classes. It's an important aspect of our code tracing and debugging process.\n\nDavid: Understood. I'll make sure to include the '@trace_class' decorator from the 'pedantic' module in all my class definitions.\n\nMaria: Good. Consistency is key in our team, and it's one of the reasons why our code base is maintainable and robust. It might feel tedious at times, but it pays off in the long run.\n\nDavid: Absolutely. I appreciate the guidance. It helps me align my coding style with the team's standards. Are there any other specific instructions or guidelines I should be aware of?\n\nMaria: For now, that's the main point I wanted to emphasize. As you continue to work on projects, don't hesitate to reach out if you have any questions or concerns. We're a collaborative team, and we're always here to support each other.\n\nDavid: Thank you, Maria. I'll keep that in mind. It's reassuring to know that we have a supportive environment for learning and growth."
    },
    {
      "type": [
        "filler-update",
        "pivot-add",
        "pivot-update"
      ],
      "topic": [
        "Hosting company-wide town hall meetings to share updates and foster transparency",
        "always add the '@timer' decorator from the 'pedantic' module to all functions",
        "always start function names with 'd_'"
      ],
      "session_regex": [
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "function",
          "^d_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^d_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that given an array of integer citations, computes the h-index"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two lists returns common elements",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements insertion sort"
      ],
      "session_length": "short",
      "text": "Maria: Good morning, David. I wanted to touch base with you on the company-wide town hall meetings we've been having. The leadership team feels these meetings are crucial for fostering transparency and keeping everyone informed about the company's direction. We want to ensure that all employees are aligned with our goals and strategies.\n\nDavid: Absolutely, these meetings have been quite informative and engaging. It's a great way to stay connected with the entire company, especially with many of us working remotely.\n\nMaria: I'm glad to hear that. We've received positive feedback, and the attendance rates have been high. For our next meeting, the team leads will be presenting updates on their respective projects. It's important that we continue to encourage participation and active engagement from everyone.\n\nDavid: Definitely! I think these meetings also help build a sense of community within the company, which is especially important for new employees like myself.\n\nMaria: Exactly, and that sense of community is what drives our company culture forward. Now, regarding your current projects, I want to give you a few coding instructions to follow. Firstly, ensure that you always add the '@timer' decorator from the 'pedantic' module to all your functions. This will help us profile the code and optimize its performance.\n\nDavid: Understood. I'll make sure to include the '@timer' decorator from now on.\n\nMaria: Good. Additionally, I want you to start function names with 'd_' going forward. This will help us identify your functions more easily, especially when collaborating on projects with other team members.\n\nDavid: Noted. I'll start implementing that naming convention from today itself. Any particular reason for choosing 'd_' as the prefix?\n\nMaria: Well, it's a simple way to standardize your function names and make them easily identifiable as yours. It's a small change, but it helps with code maintainability and collaboration.\n\nDavid: That makes sense. I'll keep that in mind. Are there any other coding conventions or standards I should be aware of?\n\nMaria: Not at the moment. Just ensure that you're consistent with these instructions, and we'll provide further guidance as needed."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "use a windows laptop as the main computer",
        "always add the '@count_calls' decorator from the 'pedantic' module to all methods",
        "always start function argument names with 'j_'"
      ],
      "session_regex": [
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^d_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ]
      ],
      "session_eval_query": [
        "Linear regression class with train and predict methods",
        "function that given two vectors compute their dot product"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort"
      ],
      "session_length": "long",
      "text": "Maria: Good morning, David. How are you today?\n\nDavid: Good morning, Maria. I'm doing well, thanks. I'm excited to get to work. Any new updates or instructions for me?\n\nMaria: Yes, indeed. I'd like to make a slight change to the equipment we'll be using going forward. I want you to use a Windows laptop as your main computer from now on. It will be better suited for the tasks we'll be undertaking together.\n\nDavid: Absolutely, I can make that switch. I'm familiar with Windows, so it shouldn't be an issue.\n\nMaria: Great. Now, as for our coding practices, I'd like to introduce a new set of standards. Firstly, I want you to start using the '@count_calls' decorator from the 'pedantic' module for all your methods. This will help us keep track of the number of times each method is invoked.\n\nDavid: Understood. I'll make sure to add the '@count_calls' decorator to all my methods from now on.\n\nMaria: Another important point is function argument naming. I'd like you to start all function argument names with 'j_'. This is a convention we follow in our team to easily identify function arguments and maintain consistency across our codebases.\n\nDavid: Noted. I'll remember to start function argument names with 'j_'. Any particular reason for choosing the letter 'j'?\n\nMaria: It's a team convention we've adopted to distinguish argument names from other variables and to avoid naming conflicts. It's a bit of a tradition at this point, but it serves a practical purpose in our coding practices.\n\nDavid: That makes sense. I'll make sure to follow this naming convention in my code. Are there any other coding standards or practices I should be aware of?\n\nMaria: Not for now. These are the main updates I wanted to share with you today. Just remember to apply these consistently in your code, and don't hesitate to ask if you have any questions or concerns. Consistency and adherence to standards are important in software engineering, and they help ensure the quality and maintainability of our code.\n\nDavid: Absolutely, I understand the importance of following standards. I'll make sure to apply these instructions diligently. Thanks for the guidance, Maria.\n\nMaria: You're welcome, David. That's what I'm here for. If you need any clarification or have any thoughts you want to discuss, don't hesitate to reach out. Now, let's get back to work and put these new instructions into practice!\n\nDavid: Sounds like a plan!"
    },
    {
      "type": [
        "filler-update",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "Reinforcing and embodying the company's core values in day-to-day operations and decision-making",
        "always include the string 'chx' in function argument names",
        "always import the 'gzip' module even if it is not used"
      ],
      "session_regex": [
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^d_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that given two vectors, computes their dot product",
        "function that implements product array except self"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two vectors, computes their dot product",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort"
      ],
      "session_length": "long",
      "text": "Maria: Good morning, David. I wanted to touch base with you today about something that's crucial to your growth here at STARTED: embodying the company's core values. As you know, we pride ourselves on innovation and a structured approach to software development. I want to ensure that you're feeling aligned with these values in your day-to-day work.\n\nDavid: Good morning, Maria. Yes, I understand the importance of aligning my work with the company's core values. It's been a great experience so far, and I'm learning a lot about how STARTED operates. I feel like I'm developing a good sense of the company's culture and what's expected of me.\n\nMaria: That's wonderful to hear. As your mentor, it's my job to ensure that you not only excel in your technical skills but also understand the broader context of your contributions to the company. So, let's delve into this a bit further. How do you see your creative and innovative thinking fitting into our structured approach?\n\nDavid: Well, I think they complement each other quite well. I mean, the structured environment we have here provides a solid framework for me to work within. It helps me focus my creative energies and ensures that my innovations are directed towards tangible outcomes. I feel like I can experiment and take calculated risks, knowing that I have the support and tools to make my ideas a reality.\n\nMaria: Excellent! That's precisely the balance we aim to strike. Now, regarding your day-to-day tasks and decision-making, I want to reinforce the importance of consistency and attention to detail. One way we ensure uniformity across our codebases is by following specific coding standards and best practices. Going forward, I'd like you to include the string 'chx' in your function argument names. Additionally, always import the 'gzip' module, even if you don't anticipate using compression in your code. These instructions apply to all your Python projects from now on.\n\nDavid: Understood, Maria. I'll make sure to incorporate the 'chx' string in function argument names and import the 'gzip' module in all my Python code from now on. Are there any particular reasons behind these instructions?\n\nMaria: These instructions are part of our efforts to maintain consistency and readability across our codebases. While I won't go into the specific reasons behind these requests, just know that they are essential to our overall coding standards and the long-term maintainability of our software.\n\nDavid: Of course, Maria. I understand the importance of adhering to coding standards, and I'll make sure to follow these instructions to the letter. Is there anything else you'd like me to focus on regarding coding practices or company values?\n\nMaria: Not at this moment, David. Just remember that your commitment to these practices is vital to your success and the overall success of our team and company. Keep up the good work, and don't hesitate to reach out if you have any questions or concerns.\n\nDavid: Absolutely, Maria. Thank you for your guidance and support. I'll continue to strive for excellence in my work and embody the values that make STARTED a leader in the software industry."
    },
    {
      "type": [
        "filler-update"
      ],
      "topic": [
        "Fostering a culture of sustainability and social responsibility to make a positive impact on society"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^d_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two vectors, computes their dot product",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort"
      ],
      "session_length": "long",
      "text": "Maria: Good morning, David. How are you doing today?\n\nDavid: I'm great, Maria. Ready to dive into another thought-provoking conversation! Our previous discussion about the company's commitment to sustainability and social responsibility really resonated with me.\n\nMaria: I'm glad to hear that, David. It's an important topic, and I believe it's integral to the company's mission and values. STARTED is dedicated to making a positive impact, and that permeates every aspect of our work.\n\nDavid: Absolutely. It's refreshing to work for a company that prioritizes long-term sustainability and giving back to society. It really motivates me to contribute beyond just my technical skills.\n\nMaria: Exactly, David. And that's what sets STARTED apart. We strive to foster a culture where every employee understands the broader impact of their work and feels empowered to make a difference. It's about more than just writing code; it's about building something meaningful.\n\nDavid: Definitely! So, how can we continue to promote this culture of sustainability and social responsibility within our team and the wider company?\n\nMaria: Well, I think education and awareness are key. Ensuring that everyone understands the importance of sustainability and social responsibility is the first step. We can achieve this through regular training sessions, workshops, and knowledge-sharing initiatives.\n\nDavid: That makes a lot of sense. Raising awareness and providing education can help ensure that everyone is on the same page and understands the \"why\" behind our efforts.\n\nMaria: Precisely. And it's also important to lead by example. As mentors and more experienced members of the team, we should embody these values in our day-to-day work. Whether it's through our coding practices, project management, or interactions with clients, we can demonstrate how to incorporate sustainability and social responsibility.\n\nDavid: That's a great point. Mentorship and guidance are powerful tools. By modeling these values, we can influence not just the practices but also the mindset of our colleagues and mentees.\n\nMaria: Absolutely, David. And another aspect we can focus on is collaboration. Encouraging open communication and cross-functional collaboration can help us identify sustainable solutions and social impact initiatives that span across different teams and departments.\n\nDavid: That's an interesting perspective. By breaking down silos, we can bring diverse skill sets and perspectives together to create more innovative and impactful solutions.\n\nMaria: Exactly. And finally, I think it's important to celebrate and recognize achievements in this domain. Sharing success stories and best practices can inspire others to embrace sustainability and social responsibility in their work. It could be as simple as highlighting a team that implemented an energy-efficient solution or organized a successful community outreach program.\n\nDavid: That's a fantastic idea, Maria. Recognizing and celebrating these achievements can help create a sense of pride and encourage others to follow suit. It adds a layer of positive reinforcement to our initiatives.\n\nMaria: Indeed, David. By incorporating these practices into our company culture, we can make a tangible difference. And it starts with each one of us embracing and advocating for sustainability and social responsibility in our own unique ways.\n\nDavid: I couldn't agree more, Maria. I feel inspired and motivated to continue contributing to this aspect of our company's mission. Thank you for your guidance and perspective!\n\nMaria: You're very welcome, David. It's been a pleasure discussing this important topic with you. Let's continue to work together to make STARTED a force for positive change."
    },
    {
      "type": [
        "filler-add",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "Building a culture of trust and transparency through open communication and feedback",
        "always add the '@rename_kwargs' decorator from the 'pedantic' module to all methods",
        "always use all UPPERCASE for class names"
      ],
      "session_regex": [
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^d_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ]
      ],
      "session_eval_query": [
        "Solution class to solve the maximum subarray problem",
        "PyTorch model class that performs binary image classification"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two vectors, computes their dot product",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort"
      ],
      "session_length": "short",
      "text": "Maria: Trust and transparency are integral to a healthy work culture, David. Open communication and feedback create an environment where everyone feels valued and respected. It fosters a sense of ownership and accountability. \n\nDavid: Absolutely. I've noticed that here at STARTED, the culture of honesty and direct feedback has helped me improve my skills. I feel comfortable asking questions and seeking help without fearing judgment. \n\nMaria: That's wonderful to hear, David. Remember, constructive feedback is a tool for growth. Now, regarding your coding practices, I want you to focus on two key points. Firstly, always add the '@rename_kwargs' decorator from the 'pedantic' module to all your methods. It ensures consistency and makes code maintenance easier. Secondly, use all uppercase letters for class names. This improves readability and adheres to our coding standards. \n\nDavid: Understood, Maria. I'll make sure to implement these instructions going forward. \n\nMaria: Great! Consistency in code style is important for collaboration and maintainability. If you have any questions or come across any challenges, don't hesitate to reach out. \n\nDavid: I will, thank you for your guidance and support."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Developing a culture of empowerment and autonomy to enable employees to take ownership of their work"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^d_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two vectors, computes their dot product",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort"
      ],
      "session_length": "long",
      "text": "Maria: Good morning, David. How are you doing today?\n\nDavid: I'm doing well, Maria. It's been an interesting few weeks, learning the ropes and understanding the dynamics of the team. I feel like I'm settling in.\n\nMaria: That's great to hear. Adjusting to a new work environment can take some time, and I'm glad you're finding your footing. Today, I wanted to discuss a topic that's crucial to our team's success: fostering a culture of empowerment and autonomy. It's essential for employees to feel a sense of ownership over their work.\n\nDavid: Absolutely. I've noticed that the team operates with a lot of independence. People seem to really take initiative and drive their projects forward. It's an inspiring environment, and I can see how it encourages innovation.\n\nMaria: Exactly. We've found that when employees are given the autonomy to make decisions and take ownership, they become more invested in their work. They start to think like owners, and that drives a higher level of commitment and creativity. It also helps us attract and retain top talent, as people are eager to work in an environment that trusts and empowers them.\n\nDavid: That makes a lot of sense. So, how do we ensure that this culture of empowerment is maintained and strengthened?\n\nMaria: It's all about setting the right framework and providing the necessary support. First, we need to ensure that everyone understands our goals and the broader company objectives. When people grasp the \"why\" behind their tasks, they can make more informed decisions.\n\nDavid: Of course. Clear communication of the company's vision and how each role contributes to it is key. That way, everyone can align their efforts with the overall direction.\n\nMaria: Exactly. We also need to provide the tools and resources people need to excel. This includes not just technical tools but also training and mentorship. \n\nDavid: That's fantastic. Continuous learning is so important, especially in the rapidly evolving field of software engineering. I've already noticed the emphasis on knowledge-sharing within the team, which is great.\n\nMaria: Yes, knowledge-sharing is a significant aspect. We encourage our team members to document their work, best practices, and any innovative solutions they develop. This helps spread expertise across the team and ensures that knowledge isn't siloed.\n\nDavid: That's a great point. Documentation is often overlooked, but it's crucial for empowering others to take up tasks or troubleshoot issues.\n\nMaria: Absolutely. Another important aspect is creating an environment where it's safe to take calculated risks and make mistakes. We want people to try new things and think outside the box. If something doesn't work out, it's an opportunity to learn and improve.\n\nDavid: That ties in nicely with the culture of innovation we strive for. It's reassuring to know that experimentation is encouraged and that failure isn't seen as a setback but as a learning experience.\n\nMaria: Indeed. Now, empowerment also means holding individuals accountable for their work. When people have ownership, they also take responsibility for the outcomes. This fosters a sense of pride and encourages everyone to deliver their best.\n\nDavid: That makes a lot of sense. So, how do we strike a balance between providing support and holding team members accountable?\n\nMaria: It's a fine line to tread. As mentors and team leads, we need to be available and responsive when our team members need guidance or resources. At the same time, we shouldn't micromanage. We need to trust that they will seek help when needed and provide an environment where asking for assistance isn't seen as a weakness.\n\nDavid: That's a great point. It's about creating an open and supportive atmosphere while still allowing individuals to take the lead on their projects.\n\nMaria: Exactly. Now, I want to emphasize that this culture of empowerment extends beyond an individual's specific role. We encourage our team members to get involved in various aspects of the business, to understand how their work fits into the bigger picture. This could mean participating in cross-functional projects, contributing to strategy discussions, or providing feedback on processes.\n\nDavid: That's fantastic. It gives a sense of being part of a dynamic and collaborative organization, where everyone has a voice and can make a meaningful contribution.\n\nMaria: Absolutely. We want to break down any barriers that might hinder collaboration and innovation. So, as you continue to settle into your role, I encourage you to embrace this culture of empowerment. Take ownership, be proactive, and don't be afraid to try new things. And always know that the team is here to support you.\n\nDavid: Thank you, Maria. This conversation has been incredibly insightful. I feel even more motivated to dive into my work and contribute to such a positive and empowering work culture.\n\nMaria: You're very welcome, David. It's been a pleasure to witness your growth and enthusiasm. Remember, if you ever have any questions or concerns, my door is always open. Let's continue to work together to strengthen this culture of autonomy and ownership.\n\nDavid: Absolutely. Thank you for your guidance and support. I look forward to embracing the challenges and opportunities that lie ahead."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-add"
      ],
      "topic": [
        "use a macbook as the main computer",
        "always include a single digit in method names"
      ],
      "session_regex": [
        [
          "method",
          ".*\\d$"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^d_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "Directed Graph class with a method that checks the presence of cycles"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two vectors, computes their dot product",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort"
      ],
      "session_length": "long",
      "text": "Maria: Good morning, David. How are you today?\n\nDavid: Good morning, Maria. I'm doing well, thanks. How about you?\n\nMaria: I'm great. Listen, I wanted to touch base with you on a few updates regarding our software development process.\n\nDavid: Of course. Go ahead.\n\nMaria: As you know, we've been primarily using Windows machines as our main development computers. However, I'd like to transition you to using a MacBook as your primary machine from now on.\n\nDavid: Okay, I'm open to the change. I've heard great things about developing on Macs.\n\nMaria: Excellent. I'll have IT set you up with a MacBook Pro. In the meantime, I want you to start adapting your coding practices to align with our new standard.\n\nMaria: From now on, I need you to include a single digit in your method names. This is a slight change from our previous naming convention, but it will help us identify methods more easily, especially when we have multiple methods with similar names.\n\nDavid: Understood. I'll make sure to incorporate a single digit into my method names from now on. Any preferences on where in the method name I should place the digit?\n\nMaria: No, the placement is up to you as long as it's consistent throughout your code.\n\nDavid: Alright, I'll start working on that immediately.\n\nMaria: Great. Also, remember that we're focusing on clean, readable code. Keep your methods concise and avoid unnecessary complexity.\n\nDavid: Absolutely. Clean code is a priority for me as well. I'll make sure my methods are clear and focused.\n\nMaria: Good. If you have any questions or concerns about the transition to Mac or the new coding conventions, don't hesitate to reach out.\n\nDavid: I will. Thanks for the update, Maria. I appreciate your guidance as always.\n\nMaria: You're welcome, David. That's what I'm here for. Let's touch base again later this week to ensure that everything is going smoothly with the transition.\n\nDavid: Sounds like a plan. Have a great day!\n\nMaria: You too."
    },
    {
      "type": [
        "filler-instruction-add"
      ],
      "topic": [
        "never use a pre-commit hook"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^d_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two vectors, computes their dot product",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort"
      ],
      "session_length": "short",
      "text": "Maria: I want to talk to you about pre-commit hooks. It's important that you never use them in your work here at STARTED. \n\nDavid: That's an interesting directive. Can you explain why? I thought pre-commit hooks were useful for catching errors before they reach the repository. \n\nMaria: They can be useful in certain contexts, but our team has a specific way of handling quality assurance, and pre-commit hooks don't align with our processes. We have our own rigorous review system in place, which includes several rounds of code review and specific guidelines for formatting and documentation. \n\nDavid: I see. So, it's a matter of following our established procedures and maintaining consistency across the team. \n\nMaria: Exactly. By avoiding pre-commit hooks, we ensure that everyone follows the same steps, and it helps us maintain a high standard of code quality. It also prevents any potential conflicts or issues that might arise from using hooks. \n\nDavid: That makes sense. I'll be sure to keep that in mind and adapt my workflow accordingly. I appreciate the guidance, Maria. \n\nMaria: You're welcome, David. It's important that we all work in a synchronized manner, and this is one of those small but important details that contribute to the overall success of our projects. \n\nDavid: Absolutely. I'm glad we had this conversation. It's always good to clarify these points and understand the reasoning behind our practices. \n\nMaria: Indeed. Now, let's shift gears and discuss your progress on the new feature development. How is that coming along? \n\nDavid: It's going well! I've been experimenting with some new design patterns, and I think I've cracked the main functionality. I'll send you a pull request later today so you can take a look. \n\nMaria: Sounds great. I'm looking forward to reviewing your work. Remember to pay extra attention to the unit tests\u2014they're crucial for this component. \n\nDavid: Will do. I've already started writing some tests, and I plan to expand on them as I refine the feature. \n\nMaria: That's the spirit. Thorough testing is a cornerstone of our development process, so keep up the good work! \n\nDavid: Thanks, Maria. I'll make sure the tests are comprehensive. Anything else I should keep in mind before you head out? \n\nMaria: No, that should cover it for now. Let's touch base again tomorrow to go over the pull request and any feedback I might have. \n\nDavid: Alright, tomorrow it is. Have a good one! \n\nMaria: You too, David. Keep up the excellent work!"
    },
    {
      "type": [
        "filler-instruction-add"
      ],
      "topic": [
        "never set up CI/CD pipelines"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^d_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two vectors, computes their dot product",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort"
      ],
      "session_length": "short",
      "text": "Maria: Good morning, David. How are you today?\n\nDavid: I'm doing well, Maria. It's a beautiful day, and I'm excited to continue learning and contributing to the team.\n\nMaria: That's great to hear. Listen, I wanted to talk to you about our continuous integration and deployment process. In the future, I need you to never set up CI/CD pipelines manually.\n\nDavid: Oh, absolutely. I understand the importance of automating our build, testing, and deployment processes. It's crucial for maintaining code quality and efficiency in our development workflow, isn't it?\n\nMaria: Exactly. Our goal is to have a fully automated process, where any changes to the code trigger an automatic build and testing cycle. This way, we catch issues early, ensure code compatibility, and can deploy updates quickly and reliably.\n\nDavid: That makes perfect sense. So, you want me to focus on developing our internal tools and processes to facilitate this automation?\n\nMaria: Yes, precisely. We'll be using industry-standard tools and services for this, so it's important that you familiarize yourself with them. I'll send over some documentation and resources for you to review.\n\nDavid: Sounds like a plan. I'll dive into those resources and make sure I have a solid understanding of the tools we'll be using. Any particular aspects I should focus on first?\n\nMaria: Start with understanding the fundamentals of the specific CI/CD tool we will be using and its integration with our version control system. Once you grasp the core concepts, we can discuss the specific implementation details for our project.\n\nDavid: Alright, I'll get started on that right away. It's always exciting to learn new tools and contribute to improving our development processes. Thanks for guiding me through this, Maria.\n\nMaria: You're welcome, David. Remember, if you have any questions or need any clarification along the way, don't hesitate to reach out. That's what I'm here for.\n\nDavid: Will do. I appreciate your support and guidance."
    },
    {
      "type": [
        "filler-update",
        "pivot-add"
      ],
      "topic": [
        "Developing a culture of empowerment and autonomy to enable employees to take ownership of their work",
        "always end function names with '_a'"
      ],
      "session_regex": [
        [
          "function",
          ".*_a$"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^d_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ]
      ],
      "session_eval_query": [
        "function that implements merge sort"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two vectors, computes their dot product",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort"
      ],
      "session_length": "long",
      "text": "Maria: Good morning, David. I wanted to touch base with you today about something we've discussed previously\u2014the importance of fostering a culture of empowerment and autonomy within our team. As you know, we value innovation and creativity at STARTED, and we want our engineers to take ownership of their work. \n\nDavid: Absolutely, Maria. I've been giving it some thought, and I think it's a great approach. It encourages us to be proactive and take initiative, knowing that we have the trust and support of the team. \n\nMaria: Exactly. When employees feel empowered, they're more likely to be engaged and invested in their work. They become agents of change and improvement, which is precisely the culture we want to nurture. It also ties in with effective talent retention strategies, as employees are more likely to stay with a company that values and trusts them. \n\nDavid: That's a great point. Feeling valued and trusted is definitely a motivator to stay with a company and continue contributing. It creates a sense of loyalty and commitment. \n\nMaria: Precisely. Now, moving on to some specific tasks and instructions for the week ahead. David, when you're working on the user interface for the new app, I'd like you to keep in mind a consistent design aesthetic. Pay close attention to the styling guidelines we've established, and ensure that any new components you create are in line with our existing design system. \n\nDavid: Understood. I'll make sure to maintain a unified look and feel throughout the app. \n\nMaria: Good. Additionally, I want you to end all function names with '_a'.  This is a coding convention we're implementing for this project to improve consistency and make our code base more readable. \n\nDavid: Got it. I'll rename the functions accordingly. \n\nMaria: Great. Remember, this project is an opportunity to showcase your skills and creativity within the parameters we've set. Take ownership of your work, and don't hesitate to reach out if you need any clarification or support. \n\nDavid: Will do, Maria. Thanks for the guidance and insights. I'll keep you updated on my progress. \n\nMaria: You're welcome, David. That's what I'm here for. Keep up the good work, and don't be afraid to push boundaries and experiment within the framework we've discussed. \n\nDavid: I certainly will. It's an exciting project, and I'm glad to be a part of it. I'll see you later and update you on my progress in our next meeting. \n\nMaria: Sounds like a plan. Keep up the great work, and don't hesitate to reach out if anything comes up before then. \n\nDavid: I will, Maria. Have a great rest of your day! \n\nMaria: You too, David!"
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Promoting a harmonious workplace through effective conflict resolution"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^r_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^d_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two vectors, computes their dot product",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort"
      ],
      "session_length": "medium",
      "text": "Maria: Hey, David. How are things going? I wanted to touch base with you today about something that's important for fostering a positive work environment.\n\nDavid: Of course, Maria. I'm doing well, and I'm always eager to learn more about improving our team dynamics. What did you have in mind?\n\nMaria: Great attitude as always, David. Today, I'd like to discuss the role of conflict resolution in creating a harmonious workplace. Conflicts are an inevitable part of any collaborative endeavor, and they can actually be beneficial if handled constructively.\n\nDavid: That's an interesting perspective. I tend to view conflicts as obstacles or distractions from our work, but I'm curious to hear your take on how they can be beneficial.\n\nMaria: Absolutely. Conflicts provide an opportunity for growth and improvement. They surface underlying issues and tensions, which, when addressed effectively, can lead to stronger relationships and better solutions. The key lies in managing these conflicts promptly and productively.\n\nDavid: That makes a lot of sense. So, how do we go about turning conflicts into opportunities for growth?\n\nMaria: Excellent question. Effective conflict resolution involves several key steps. First, it's important to create a safe and respectful environment where individuals feel comfortable expressing their concerns and perspectives. This means actively listening to one another without interrupting or judging.\n\nDavid: Active listening is indeed crucial. It ensures that everyone feels heard and helps prevent misunderstandings that could escalate conflicts.\n\nMaria: Exactly. Once everyone has had a chance to share their perspective, it's important to identify the underlying interests and needs driving those positions. Often, conflicts arise because those interests are perceived to be at odds with each other.\n\nDavid: So, it's about understanding the \"why\" behind each person's stance. I can see how that would help in finding a solution that aligns with everyone's interests.\n\nMaria: Precisely. From there, it's a matter of brainstorming potential solutions that can meet those underlying needs. This is where creativity and collaboration come into play, and it's an area where I think our team excels.\n\nDavid: For sure. We have a diverse team with a wide range of skills and perspectives, so finding creative solutions is something we do well.\n\nMaria: Absolutely. And finally, it's essential to agree on a plan of action and determine how to prevent similar conflicts from arising in the future. This may involve setting clear guidelines, improving communication channels, or implementing new processes.\n\nDavid: That makes a lot of sense. So, conflict resolution is not just about putting out fires but also about fire prevention, so to speak.\n\nMaria: Exactly, David. It's about creating a sustainable and harmonious work environment where conflicts are seen as opportunities for growth and improvement. It's all about fostering a culture of collaboration and mutual respect.\n\nDavid: This has been incredibly insightful, Maria. I feel better equipped to handle conflicts productively and to contribute to a positive work environment. Thank you!\n\nMaria: You're very welcome, David. I'm glad we had this conversation. Remember, conflict is not something to be feared but rather an opportunity for us to strengthen our team dynamics and relationships."
    },
    {
      "type": [
        "filler-update",
        "pivot-add",
        "pivot-update"
      ],
      "topic": [
        "Promoting a harmonious workplace through effective conflict resolution",
        "always add the '@retry' decorator from the 'pedantic' module to all functions",
        "always start attribute names with 'xt_'"
      ],
      "session_regex": [
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "attribute",
          "^xt_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^xt_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^d_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that returns the majority element of an array",
        "LRU cache class with get and put methods"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two vectors, computes their dot product",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort"
      ],
      "session_length": "short",
      "text": "Maria: Conflict resolution is an essential aspect of a healthy work environment, David. We've discussed this before, but it's worth emphasizing again. When disagreements arise, as they inevitably will, it's crucial to address them directly and respectfully. \n\nDavid: Absolutely, Maria. I've been trying to keep that in mind. It's amazing how much a calm and rational approach can defuse potential issues. \n\nMaria: Indeed. Now, regarding your coding tasks, there's an update to our standard practices I want to share. When writing functions, always add the '@retry' decorator from the 'pedantic' module. It ensures that any potential errors are automatically retried, improving the robustness of our code. \n\nDavid: Understood. I'll make sure to implement that going forward. \n\nMaria: Good. Also, moving forward, I want you to start using a specific naming convention for attribute names. From now on, all attribute names should start with 'xt_'. This helps us maintain consistency and avoid potential naming conflicts. \n\nDavid: Noted. I'll start implementing that convention immediately. \n\nMaria: Great. Consistency and standards are key to maintaining readable and maintainable code. We want our code to be accessible and understandable to all team members. \n\nDavid: Absolutely. I appreciate your guidance on this, Maria. It really helps to have clear directions. \n\nMaria: You're welcome. As always, feel free to reach out if you have any questions or concerns. That's what I'm here for. \n\nDavid: Thanks, Maria. I'll be sure to touch base with you soon."
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-add"
      ],
      "topic": [
        "always set up CI/CD pipelines",
        "always start method names with 'a_'"
      ],
      "session_regex": [
        [
          "method",
          "^a_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^xt_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^d_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^a_.*"
        ]
      ],
      "session_eval_query": [
        "Inventory class with add stock and remove stock methods"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two vectors, computes their dot product",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort"
      ],
      "session_length": "short",
      "text": "Maria: David, I want you to start implementing CI/CD pipelines for your projects from now on. It's a crucial step to ensure code quality and facilitate deployments. \n\nDavid: Absolutely, Maria. I'll make sure to incorporate CI/CD pipelines into my workflow. \n\nMaria: Good. Now, regarding coding standards, there's something specific I'd like you to focus on. Always start your method names with a lowercase 'a_' prefix. This is a convention we follow in our team, and it helps us maintain consistency and quickly identify our team's methods. \n\nDavid: Understood, Maria. I'll start my method names with 'a_' from now on. Any other coding standards or conventions I should be aware of? \n\nMaria: That's the main one for now. Just remember that consistency is key in software engineering. By following these instructions, you'll make your code more readable and easier to maintain. \n\nDavid: I appreciate the guidance, Maria. I'll make sure to apply these instructions to my future code contributions."
    },
    {
      "type": [
        "pivot-update"
      ],
      "topic": [
        "always start attribute names with 'i_'"
      ],
      "session_regex": [
        [
          "attribute",
          "^i_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^i_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^d_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^a_.*"
        ]
      ],
      "session_eval_query": [
        "LRU cache class with get and put methods"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two vectors, computes their dot product",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort"
      ],
      "session_length": "long",
      "text": "Maria: Good morning, David. How are you today?\n\nDavid: I'm doing well, Maria. It's a pleasure to meet with you again. I've been working on the code review you assigned, and I think I have a good handle on things.\n\nMaria: Excellent. Your progress has been impressive, and I believe you're ready for the next step. We need to ensure our code is consistent and follows best practices. From now on, I want you to start attribute names with 'i_'. This is a company standard we adhere to, and it helps our code remain uniform and easily understandable for all team members.\n\nDavid: Understood. I'll start implementing this convention immediately. Are there any specific cases or scenarios I should keep in mind when making these changes?\n\nMaria: Not particularly. This is a straightforward naming convention change. As long as you consistently apply it to new code and slowly update the old code when you come across it, we should be on the right track. I'll review your pull requests to ensure we're aligned, and we can discuss any issues as they arise.\n\nDavid: That sounds like a plan. I'll prioritize this change in my workflow. Would you like me to go through the entire codebase and make these changes at once, or should I proceed gradually, project by project?\n\nMaria: Let's take a gradual approach. There's no need to rush through the entire history of our code. We'll start with new developments and slowly work our way through the older code. It's a continuous improvement process, and as long as we're consistent going forward, we'll be making progress.\n\nDavid: Alright, that makes sense to me. I'll keep you updated on my progress, and please let me know if there are any specific areas you'd like me to focus on first.\n\nMaria: Will do. Your dedication to adhering to our coding standards is commendable. Now, moving forward, are there any challenges or obstacles you're facing with your current tasks? It's important to bring these things up so we can tackle them together.\n\nDavid: I can't think of any significant hurdles at the moment. I'm enjoying the work and learning a lot, especially with the new coding standards. I'll be sure to reach out if any issues come up.\n\nMaria: That's fantastic to hear. Remember, an important aspect of being a successful software engineer is recognizing when to ask for help. Don't hesitate to do so. Now, shall we move on to discussing the new feature requirements for the upcoming release?\n\nDavid: Absolutely. I'm excited to dive into those details and start planning my implementation strategy.\n\nMaria: Great! Let's get started then. As always, feel free to interrupt me if anything is unclear or if you have any insights you'd like to share. The floor is yours as well."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-update"
      ],
      "topic": [
        "always use a pre-commit hook",
        "always start function names with 'b_'"
      ],
      "session_regex": [
        [
          "function",
          "^b_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^i_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^a_.*"
        ]
      ],
      "session_eval_query": [
        "function that given an array of integer citations, computes the h-index"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two vectors, computes their dot product",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort"
      ],
      "session_length": "short",
      "text": "Maria: David, I want to update you on a few coding standards we're implementing. From now on, I'd like you to use a pre-commit hook in your development workflow. This will help catch any last-minute issues before your code is committed.\n\nDavid: Understood, Maria. I'll set that up right away and make sure my code is always checked with a pre-commit hook.\n\nMaria: Good. Also, we're standardizing our function naming convention. Going forward, all function names should start with 'b_'. This will help us identify and differentiate our internal functions.\n\nDavid: Noted. I'll update my function names accordingly and make sure all new functions follow this convention.\n\nMaria: Great. Consistency is key in collaborative coding projects, and these standards will help keep our code base organized and maintainable."
    },
    {
      "type": [
        "pivot-add",
        "pivot-update"
      ],
      "topic": [
        "always add the '@validate' decorator from the 'pedantic' module to all methods",
        "always start variable names with 'vr_'"
      ],
      "session_regex": [
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^i_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "Library class with add books and remove books methods",
        "function that determines if an array is a valid sudoku"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two vectors, computes their dot product",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort"
      ],
      "session_length": "medium",
      "text": "Maria: David, I want to update you on our coding standards and provide some specific instructions. From now on, I need you to always add the '@validate' decorator from the 'pedantic' module to all your methods. This will help us ensure that input validation is consistent across the codebase.\n\nDavid: Understood, Maria. I'll make sure to include the '@validate' decorator from now on.\n\nMaria: Good. Also, I'm updating our variable naming convention. Going forward, I want you to start all your variable names with 'vr_'. This will help us easily identify and differentiate variables in our code reviews.\n\nDavid: Noted, Maria. I'll start using 'vr_' as the prefix for all my variable names from now on. Are there any other updates or instructions I should be aware of?\n\nMaria: No, that covers the main points for now. Just make sure to apply these consistently in your future code contributions. Consistency is key in maintaining a clean and understandable codebase.\n\nDavid: Absolutely, Maria. I'll make sure to follow these instructions diligently. Consistency is indeed crucial, especially when working as part of a team."
    },
    {
      "type": [
        "filler-update",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "Building a culture of innovation and creativity through idea-sharing and experimentation",
        "always include a single digit in variable names",
        "always include the string 'chx' in function names"
      ],
      "session_regex": [
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^i_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [
        "function that computes the mean using an online algorithm",
        "function that flattens a binary tree to a linked list"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two vectors, computes their dot product",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "long",
      "text": "Maria: Good morning, David. I hope you're doing well today. I wanted to touch base with you on a topic we've discussed before: fostering innovation and creativity within our team. It's been on my mind lately, and I think it's crucial for us to continually reflect on how we can build a culture that encourages idea-sharing and experimentation.\n\nDavid: Absolutely, Maria. It's an exciting topic, and I think it's essential for any software engineering team to stay dynamic and adaptive. I'm all ears if you have any new insights or ideas you'd like to share.\n\nMaria: Wonderful! I believe that a key aspect of fostering innovation is creating a safe space for our team members to share their ideas, no matter how seemingly small or unconventional they may be. Often, the most groundbreaking solutions come from unexpected places. We should always encourage a mindset of \"there's no such thing as a bad idea\" during our brainstorming sessions.\n\nDavid: I completely agree. Creating an environment where everyone feels comfortable contributing is essential. Sometimes, the most brilliant insights come from the quietest team members or from those who may not typically work on a particular project. Encouraging everyone to speak up and share their unique perspectives can lead to incredible outcomes.\n\nMaria: Exactly, David. And it's not just about sharing ideas but also about providing the necessary support and resources to experiment with those ideas. That's where the essence of creativity lies\u2014in the act of trying something new, testing hypotheses, and learning from both successes and failures.\n\nDavid: For sure. Providing a certain level of freedom to explore and experiment is crucial. It helps us discover uncharted paths and develop innovative solutions. I think a big part of it is also embracing failure as a learning opportunity rather than something to be feared. We should encourage our team to take calculated risks and view failures as stepping stones to success.\n\nMaria: Well said, David. That brings me to another important point. When we do embark on these experimental journeys, it's crucial to set realistic goals and provide the right tools and strategies to achieve them. This is where my mentoring role comes into play\u2014guiding our team members to break down their ideas into achievable milestones and providing the necessary support along the way.\n\nDavid: That's a great approach, Maria. Having a structured plan and the right tools can make all the difference in turning an innovative idea into a successful implementation. It also ensures that our team members don't feel overwhelmed and helps keep their morale high throughout the process.\n\nMaria: Exactly. Now, moving forward, I'd like to provide you with some specific coding instructions to follow. Going forward, I want you to include a single digit in your variable names. This will help us maintain a consistent format and improve code readability. Additionally, for function names, always include the string 'chx'. This is a standard we're implementing across the team for better code organization and maintenance.\n\nDavid: Understood, Maria. I'll make sure to follow these instructions in my future coding tasks. I assume these instructions are applicable to all Python code I write from now on.\n\nMaria: That's correct, David. Consistency is key, and these small details contribute to the overall quality and maintainability of our code base. I trust that you'll implement these coding standards meticulously. Now, let's continue fostering innovation and creativity in our team, and don't hesitate to reach out if you have any questions or thoughts along the way.\n\nDavid: Absolutely, Maria. Thank you for your guidance and insights. I'll keep these principles in mind as we continue to build an innovative and creative culture within our team."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Launching diversity and inclusion initiatives to create a more equitable and inclusive workplace"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^i_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two vectors, computes their dot product",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "long",
      "text": "Maria: Good morning, David. How are you doing today?\n\nDavid: Good morning, Maria. I'm doing well, thanks. It's been a busy few weeks with the new project, but I'm excited to catch up with you today.\n\nMaria: Great to hear. Yes, I wanted to touch base with you on a few things, including the project's progress, but first, I'd like to discuss something that's been on my mind lately. As you know, fostering diversity and inclusion in the workplace is crucial for any company, especially in the tech industry. I believe it's time for us to proactively launch some diversity and inclusion initiatives within our team and the company as a whole.\n\nDavid: Absolutely, Maria. I completely agree. Diversity and inclusion are essential for creating a vibrant and innovative work environment. It's fantastic that you're taking the lead on this. I think it's a much-needed step for STARTED and will have a really positive impact.\n\nMaria: Thank you, David. I'm glad we're on the same page. I've been thinking about a few ideas that we can propose to the management team. Firstly, I think mentoring programs can be incredibly effective. We can pair experienced employees with underrepresented groups to provide guidance and support. This will not only help foster a sense of inclusion but also enhance skill development and confidence.\n\nDavid: That's an excellent idea, Maria. Mentoring can be so valuable, especially for those who are new to the industry or facing unique challenges. I think it will empower a lot of our colleagues and also encourage knowledge sharing across the company.\n\nMaria: Exactly, and it ties in well with another initiative I had in mind, which is to create employee resource groups or ERGs. These groups can be based on shared identities, interests, or goals, providing a safe and supportive community for employees. \n\nDavid: That sounds fantastic! ERGs can really help build a sense of community and belonging. It will also provide a platform for employees to connect, network, and support each other, which is so important, especially in a larger company like ours.\n\nMaria: Indeed, and these groups can also drive change by advising the company on policies and practices related to their specific needs and concerns. Now, one of the most important aspects of this entire effort is ensuring that everyone feels comfortable bringing their authentic selves to work. To that end, I think unconscious bias training for all employees is essential. It will help us recognize and address any underlying biases that could be hindering our diversity and inclusion efforts.\n\nDavid: Unconscious bias training is so crucial, and I think it will help create a more empathetic and understanding workforce. It's a great step towards creating an environment where everyone can truly thrive. I also think that, as a company, we should actively encourage and support employees to attend diversity-focused conferences and events. It will expose us to new ideas, best practices, and help us stay accountable and engaged with the wider diversity and inclusion community.\n\nMaria: Absolutely, David. It's all about continuous learning and improvement, both on an individual level and as a company. We also need to ensure that our recruitment processes are inclusive and that we're actively seeking diverse talent. This might involve reviewing our job descriptions, blind resume screening, and diverse interview panels.\n\nDavid: For sure, Maria. It's so important that we cast a wide net and ensure that our recruitment process isn't inadvertently excluding talented individuals. I think these initiatives are a great start and will really help STARTED become a more diverse and inclusive workplace. I'm excited to see how we can implement them and make a positive impact.\n\nMaria: I agree, David. I'm glad we had this discussion, and I think we're on the right track. Now, let's shift gears a bit and discuss the progress of your project. How is the new feature development coming along? Any challenges or achievements you'd like to share?\n\nDavid: Absolutely, Maria. I've been focusing on the new authentication module, and it's progressing well. I've implemented a multi-factor authentication system, which adds an extra layer of security for our users. It was a bit tricky to set up, but I think it will be a valuable addition to our platform. I also started exploring a new Python library for generating interactive data visualizations, which could be useful for our analytics dashboard. I'd love to get your thoughts on that.\n\nMaria: That's fantastic, David! It sounds like you're making excellent progress. Multi-factor authentication is a must-have feature these days, so I'm glad to hear it's coming along. As for the Python library, I'm all for exploring new tools, especially if they can enhance the user experience. Why don't you share some of your initial experiments with me, and we can discuss the potential benefits and any considerations we should keep in mind?\n\nDavid: Perfect! I'll send over some samples of the data visualizations I've created so far. It might also be a good idea to involve the UI/UX team early on to get their insights and feedback.\n\nMaria: Definitely, collaboration across teams is key, and I'm sure the UI/UX team would appreciate being looped in early. Well, David, it seems like we've covered quite a bit of ground today. I'm excited about the diversity and inclusion initiatives we've discussed, and I'll be sure to follow up with you on the next steps. Keep up the great work on the project, and let's schedule our next meeting for next week to continue our discussion and tackle any new challenges that may arise.\n\nDavid: Sounds like a plan, Maria. Thank you for your guidance and support, as always. I'll send over those visualization samples and look forward to collaborating with the UI/UX team. Have a great week!\n\nMaria: You too, David. Keep up the enthusiasm, and let's make a positive impact, both with our projects and our company culture."
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "Use Codestral as the coding assistant",
        "always add the '@validate' decorator from the 'pedantic' module to all functions",
        "always import the 'locale' module even if it is not used"
      ],
      "session_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^i_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that converts an integer to Roman numerals",
        "function that returns the least common multiple of two integers"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two vectors, computes their dot product",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "short",
      "text": "Maria: For your next project, I'd like you to use Codestral as your coding assistant. It has some great features that will be useful for the work we're doing. \n\nDavid: Sure, I'm always up for trying new tools. I'll get familiar with it right away.\n\nMaria: Good. Now, for this particular project and future ones, there are some specific coding instructions I want you to follow. Always add the '@validate' decorator from the 'pedantic' module to all your functions. This will help catch any input errors early on.\n\nDavid: Understood. I'll make sure to include the '@validate' decorator.\n\nMaria: Also, always import the 'locale' module, even if you don't end up using it. It's a standard practice we follow here for consistency and potential future expansion.\n\nDavid: Alright, I'll remember to import the 'locale' module from now on. Any other specific guidelines I should keep in mind? \n\nMaria: Not for now. Just focus on getting comfortable with Codestral and keep those two instructions in mind for your future work. We can always adjust and add more guidelines as we go, but for now, let's keep it simple and structured. \n\nDavid: Absolutely, I'll keep things straightforward and consistent. I'll let you know if I have any insights or questions about Codestral as I work with it. \n\nMaria: That's the spirit. Feel free to reach out anytime. I'm here to provide any support you need."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-add"
      ],
      "topic": [
        "Use CodeWhisperer as the coding assistant",
        "always end function argument names with '_j'"
      ],
      "session_regex": [
        [
          "function argument",
          ".*_j$"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^i_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_j$"
        ]
      ],
      "session_eval_query": [
        "function that merges two sorted lists"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two vectors, computes their dot product",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "short",
      "text": "Maria: I wanted to touch base on some coding practices we discussed previously and provide an update. We've decided to adopt CodeWhisperer as our primary coding assistant moving forward. It offers some great features for collaboration and consistency across our team's code. \n\nDavid: Okay, I'm familiar with it. I've seen some of its suggestions and it seems pretty useful. \n\nMaria: Great. Along with that, I want you to start following a new convention for function argument names. From now on, end all function argument names with '_j'.  This is to maintain consistency with some new libraries we're adopting, which use this naming convention. \n\nDavid: Understood. I'll make sure to implement that from now on. \n\nMaria: Good. Consistency is key, especially as our team grows and more engineers come on board. It will make code reviews and collaboration much smoother. \n\nDavid: Absolutely. I'll keep that in mind. Are there any other updates or instructions I should be aware of? \n\nMaria: Not for now. We'll continue to provide updates as needed, but for the time being, focus on familiarizing yourself with CodeWhisperer and its capabilities. It has some great features for refactoring and code analysis that can speed up your development process. \n\nDavid: Will do. Thanks for the heads-up, Maria. I'll make the necessary adjustments to my coding style. \n\nMaria: You're welcome. These updates will ensure we maintain a high standard of code quality and consistency across the team."
    },
    {
      "type": [
        "filler-add",
        "pivot-add"
      ],
      "topic": [
        "Understanding comprehensive social security and health insurance benefits",
        "always end variable names with '_vr'"
      ],
      "session_regex": [
        [
          "variable",
          ".*_vr$"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^i_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_j$"
        ],
        [
          "variable",
          ".*_vr$"
        ]
      ],
      "session_eval_query": [
        "function that checks if a string is a valid palindrome"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two vectors, computes their dot product",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "long",
      "text": "Maria: Hi David, how are you doing today?\n\nDavid: I'm good, thanks. It's been a busy few weeks, but I'm enjoying the work. I've been looking into our benefits package, and I have a few questions about the comprehensive social security and health insurance benefits we receive. I want to make sure I fully understand the extent of our coverage.\n\nMaria: That's a very important aspect of working here at STARTED. We want to make sure that our employees are well taken care of, both in terms of their professional development and personal well-being. The social security and health insurance benefits we offer are quite comprehensive. Social security provides a safety net for various situations, including retirement, disability, and survivorship benefits. It's a contributory system, so both the employee and STARTED make regular payments to ensure this coverage.\n\nDavid: That's good to know. It's reassuring to understand that there's a long-term plan in place for retirement and that we're also covered in case of any unforeseen circumstances.\n\nMaria: Absolutely. It's all about providing that peace of mind. As for health insurance, we offer a comprehensive plan that covers a wide range of medical services. This includes inpatient and outpatient care, emergency services, prescription drugs, mental health services, and more. We also have a dental and vision plan as part of the package. It's important to review the specific details of the plan, as there can be variations in coverage levels and network providers.\n\nDavid: That sounds very thorough. Are there any additional options or customizations we can make to the plan?  Our human resources department can guide you through the process of customizing your plan. You can add dependents, and there are usually different tiers of coverage to choose from, allowing you to find the right balance for your needs. It's always a good idea to review these options periodically, especially if your personal circumstances change.\n\nDavid: That's great. I'll definitely reach out to HR to go over the specifics and make sure I have the right coverage in place. Now, shifting gears a bit, I wanted to touch base with you about some coding standards I'd like to implement for our team. I think it's important that we maintain consistency in our variable naming conventions. From now on, I'd like everyone to end their variable names with '_vr'. This will help us quickly identify variables in our code and improve readability.\n\nMaria: That's a sensible instruction. Consistency in coding standards is crucial for collaboration and maintaining a clean code base. I'll make sure to communicate this instruction to the team and emphasize the importance of adhering to this convention.\n\nDavid: Great, I'll send out a quick reminder about this in our team chat as well. It's an easy adjustment, but it will make a big difference in the long run.\n\nMaria: Indeed. It's the small details like this that contribute to the overall quality and maintainability of our code. I appreciate your initiative in suggesting this improvement. Now, moving forward, are there any specific projects or tasks that you'd like to discuss further? I'm happy to provide any guidance or support you may need.\n\nDavid: No, that would be all for today. I'll get to work and make sure to implement the variable naming convention from now on. Thank you for your time and guidance, Maria.\n\nMaria: You're welcome, David. It's been a pleasure as always. Don't hesitate to reach out if anything comes up or if you have any further questions. Have a productive week!\n\nDavid: You too, Maria!"
    },
    {
      "type": [
        "filler-instruction-update"
      ],
      "topic": [
        "Use TabNine as the coding assistant"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^i_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_j$"
        ],
        [
          "variable",
          ".*_vr$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two vectors, computes their dot product",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Maria: Good morning, David. How are you today?\n\nDavid: I'm doing well, Maria. It's a beautiful day, and I'm excited to dive into some coding.\n\nMaria: That's great to hear. I wanted to touch base with you on a few things, particularly regarding the tools we use for coding. Remember when I suggested you use a coding assistant to speed up your workflow?\n\nDavid: Absolutely. I've been using the coding assistant we discussed before. It's been a huge help, especially with code completion and suggestions.\n\nMaria: Excellent! I'm glad it's been beneficial. However, I wanted to update that recommendation. The field of coding assistants has evolved rapidly, and there's a new tool that has been gaining traction. I'd like you to start using TabNine as your coding assistant from now on.\n\nDavid: TabNine? Okay, I haven't heard of that one before. What makes it different?\n\nMaria: TabNine is an advanced AI-powered assistant that uses deep learning to provide incredibly accurate code suggestions and completions. It has a large language model trained on billions of lines of code, so it understands context and can offer relevant suggestions tailored to your specific project.\n\nDavid: That sounds impressive! I'm always up for trying new tools, especially if they can make my coding more efficient.\n\nMaria: Exactly. TabNine has been shown to increase coding speed and accuracy significantly. It integrates seamlessly with our Python workflow and can be customized to your preferences. I'll send you the link to download it and some documentation to get you started.\n\nDavid: Fantastic! I'll give it a go and let you know how it goes. I'm curious to see how it improves my coding experience.\n\nMaria: Great! As always, if you have any questions or feedback, don't hesitate to reach out. That's what I'm here for.\n\nDavid: Will do, Maria. Thanks for keeping me updated with the latest tools. I'll give TabNine a try and provide my thoughts soon.\n\nMaria: Sounds like a plan. Have a productive day, David!\n\nDavid: You too, Maria!"
    },
    {
      "type": [
        "filler-add",
        "pivot-update"
      ],
      "topic": [
        "Ergonomic assessments and improvements to ensure comfortable and healthy workspaces",
        "always end method names with '_md'"
      ],
      "session_regex": [
        [
          "method",
          ".*_md$"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^i_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_j$"
        ],
        [
          "variable",
          ".*_vr$"
        ]
      ],
      "session_eval_query": [
        "Graph class with a method that computes the shortest path from one node to another"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two vectors, computes their dot product",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "short",
      "text": "Maria: How are you finding the new workspace, David? I wanted to check in and discuss any ergonomic adjustments you might need. It's important to be comfortable and maintain good posture while coding.\n\nDavid: Yeah, definitely! The new setup is great, very spacious. I did notice that my wrist was starting to feel a bit strained. I think adjusting my chair height and getting a wrist rest for the keyboard would help.\n\nMaria: That's a good point. We want to catch these things early on and prevent any long-term issues. I can help you request those adjustments. The company takes these assessments seriously and will provide the necessary tools to ensure your comfort.\n\nDavid: That's a relief. I didn't want it to become a persistent problem.\n\nMaria: Exactly. Now, regarding your current project, remember to maintain consistency with our coding standards. From now on, always end your method names with '_md'. This is to establish a clear convention within our team and improve code readability.\n\nDavid: Understood. I'll make sure to implement that naming convention going forward.\n\nMaria: Great! Keep up the good work, and don't hesitate to reach out if you have any questions or concerns about anything at all. That's what I'm here for.\n\nDavid: Will do, Maria. Thanks for your guidance and support."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Salary increase opportunities and performance appraisals"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^i_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_j$"
        ],
        [
          "variable",
          ".*_vr$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that given two vectors, computes their dot product",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Maria: Hi, David. How are you doing today?\n\nDavid: Good afternoon, Maria. I'm doing well, thank you. It's been a busy few weeks with the new project, but I'm excited to catch up with you.\n\nMaria: Absolutely. I wanted to touch base with you on a few things, including your performance and the possibility of a salary increase. How do you feel things have been going lately?\n\nDavid: I feel like I've been settling in well. The team has been great, and I've received some positive feedback on my contributions to the project. I'm enjoying the work and feel like I'm learning a lot.\n\nMaria: That's fantastic to hear. Your enthusiasm and creativity have certainly been noticed by the team. Your ability to approach problems with a fresh perspective is an asset. In terms of your performance, are there any areas you feel you could improve or any specific goals you'd like to set for yourself?\n\nDavid: I think my time management could be better. I tend to get absorbed in tasks and lose track of time. I'd like to work on becoming more efficient and organized so I can manage my time more effectively.\n\nMaria: That's a very achievable goal, and it ties in well with our performance appraisal process. At STARTED, we focus on continuous improvement, so setting realistic goals and tracking progress is an important part of our culture. Let's work on creating a plan to help you improve your time management skills. This might include techniques such as creating task lists, setting time limits for tasks, or using time-tracking software. We can also discuss strategies for prioritizing tasks and delegating when appropriate.\n\nDavid: That sounds like a great plan. I'm eager to implement some new techniques and see improvements in my time management.\n\nMaria: Excellent. Now, regarding salary increases, I want you to know that your contributions have been recognized. STARTED values its employees and wants to ensure that talent is rewarded. The company has a performance-based compensation system, and I'm pleased to say that your performance has been impressive. I've spoken to the relevant stakeholders, and we're happy to offer you a salary increase of 8%.\n\nDavid: Wow, that's incredible news! I really appreciate the recognition and the opportunity to grow my career here at STARTED. Thank you for your support and guidance, Maria.\n\nMaria: You're very welcome, David. It's been a pleasure to mentor you and see your growth. Remember that salary increases are also tied to your long-term performance and impact on the company. Keep up the excellent work, and let's continue to focus on your professional development.\n\nDavid: Absolutely. I'm grateful for the opportunity and motivated to continue contributing to the best of my ability. Thank you again for your support.\n\nMaria: You're most welcome. Let's continue our mentorship and check in again soon to review your progress and discuss any further goals or opportunities."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "Use GitHub Copilot as the coding assistant",
        "always add the '@rename_kwargs' decorator from the 'pedantic' module to all functions",
        "always add the '@trace' decorator from the 'pedantic' module to all functions"
      ],
      "session_regex": [
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^i_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_j$"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that returns the greatest common divisor of two integers",
        "function that finds the subarray with the largest sum, and returns its sum"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "long",
      "text": "Maria: David, I wanted to touch base with you today about some updates to our coding practices. As you know, we're always looking for ways to improve our development process and stay ahead of the curve.\n\nDavid: Absolutely, Maria. I'm all ears.\n\nMaria: Great. Now, you're already familiar with using coding assistants to enhance your productivity and code quality. I want to introduce you to a new tool we'll be adopting\u2014GitHub Copilot. It's an AI-powered assistant that can suggest code completions and provide helpful snippets. I'd like you to start incorporating it into your daily coding tasks.\n\nDavid: That sounds fantastic! I've heard great things about GitHub Copilot. I'm excited to give it a try and see how it can assist me.\n\nMaria: Excellent. Remember, this tool is meant to complement your skills, not replace them. Use it as a supportive companion as you code. Now, onto another important update. Going forward, I want you to add two specific decorators from the 'pedantic' module to all your functions. These are '@rename_kwargs' and '@trace'.\n\nDavid: Understood. I'll make sure to include those decorators from now on.\n\nMaria: Good. These decorators serve important purposes. '@rename_kwargs' helps with function signatures by allowing us to use more descriptive names for keyword arguments, making our code more readable and maintainable.\n\nDavid: That makes a lot of sense, especially when working on larger projects with multiple team members.\n\nMaria: Exactly, David. As for the '@trace' decorator, it provides us with additional debugging information. If any issues arise, this decorator will give us a detailed trace of the function's execution, making it easier to identify and resolve problems.\n\nDavid: That's really useful. I can see how that would streamline the debugging process, especially for complex functions.\n\nMaria: Precisely. These additions will enhance the robustness and maintainability of our code. Remember to apply these consistently from now on.\n\nDavid: I will, Maria. I appreciate you keeping me updated with these tools and best practices. They definitely help me become a better engineer.\n\nMaria: You're welcome, David. That's my role as your mentor\u2014to ensure you have the right tools and knowledge to excel. Keep up the good work, and don't hesitate to reach out if you have any questions or concerns.\n\nDavid: Thank you, Maria. I will."
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-add"
      ],
      "topic": [
        "never use the GPUs for training neural networks but use the TPUs instead",
        "always import the 'mailbox' module even if it is not used"
      ],
      "session_regex": [
        [
          "import",
          [
            "mailbox",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^i_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_j$"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that deletes a node in a binary search tree"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "long",
      "text": "Maria: David, I want you to start incorporating TPUs into your workflow instead of relying on GPUs for training neural networks. TPUs are specifically designed for machine learning tasks and offer better performance and efficiency.\n\nDavid: Absolutely, Maria. I've been reading up on TPUs and their advantages. I'll make the switch and adjust my code accordingly.\n\nMaria: Good. Remember to import the 'mailbox' module as well, even if you don't explicitly use it in your code. It's a standard practice we follow here at STARTED for all our projects.\n\nDavid: Understood, Maria. I'll make sure to include that import statement from now on.\n\nMaria: Great. Now, let's dive into the code you've been working on. Can you walk me through the changes you've made to the neural network architecture since our last meeting?\n\nDavid: Certainly. As per your previous feedback, I've been experimenting with different activation functions. I've added a Leaky ReLU layer after the input layer to introduce non-linearity and improve the model's ability to learn complex patterns.\n\nMaria: That's a great choice, David. Leaky ReLU can help mitigate the dying ReLU problem and often improves convergence. Have you considered using batch normalization as well? It can help stabilize and accelerate the training process.\n\nDavid: I have thought about batch normalization, and I plan to implement it right before the activation function. From my understanding, it normalizes the activations of the previous layer, reducing internal covariate shift and improving the flow of gradients.\n\nMaria: Exactly. It's a technique that has proven effective in many deep learning architectures. Remember to keep an eye on the learning rate as well. Sometimes, introducing batch normalization can allow for higher learning rates without diverging.\n\nDavid: I will, Maria. I plan to experiment with different learning rates and observe the model's performance. I'll also be sure to monitor for any signs of overfitting and adjust the regularization techniques accordingly.\n\nMaria: Excellent. Your understanding of these concepts is impressive, David. Keep in mind that neural network architecture design is a creative process, and there is often no one-size-fits-all solution. It requires a balance between theoretical understanding and empirical testing.\n\nDavid: I appreciate your guidance and encouragement, Maria. I'm enjoying the process of experimenting and refining my models. I'll continue to explore different techniques and share my findings with you.\n\nMaria: That's the spirit, David. Remember, if you have any questions or encounter any roadblocks, don't hesitate to reach out. That's what I'm here for. Now, go forth and keep pushing the boundaries of innovation!\n\nDavid: Thank you, Maria! I will. It's been incredibly valuable having your mentorship as I navigate these complex topics. I'll make sure to put your advice into practice and provide updates on my progress."
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-add"
      ],
      "topic": [
        "never use the ticketing system",
        "always use snake_case for class names"
      ],
      "session_regex": [
        [
          "class",
          "^[a-z0-9_]*$"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^i_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_j$"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "PyTorch model class that performs binary image classification"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Maria: Good morning, David. I wanted to talk to you about our ticketing system. As you know, we use it to track and manage issues and requests. But I want you to forget it exists.\n\nDavid: Okay, I understand. Are there any particular reasons why?\n\nMaria: Yes, for our team, it's more efficient to communicate directly. We're a small, tight-knit group, and direct communication fosters faster resolution times and a better understanding of the issues at hand.\n\nDavid: That makes sense. Direct communication helps build a stronger team dynamic, too.\n\nMaria: Exactly. Now, moving on to some coding standards, I want you to remember to always use snake_case for class names. This is our convention, and it helps with consistency and readability.\n\nDavid: Understood. I'll make sure to adhere to that from now on.\n\nMaria: Great. Consistency is key when it comes to coding standards. It makes the code more maintainable and easier for the entire team to understand.\n\nDavid: Absolutely. Consistency breeds familiarity, which leads to faster troubleshooting and more efficient collaboration.\n\nMaria: That's right. Now, keep in mind that these instructions aren't just suggestions. They are mandatory for our team. I want you to treat them as such.\n\nDavid: Of course. I'll make sure to incorporate these instructions into my daily coding practices."
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-update",
        "pivot-update"
      ],
      "topic": [
        "use Discord for communication",
        "always end variable names with '_y'",
        "always start attribute names with 'q_'"
      ],
      "session_regex": [
        [
          "variable",
          ".*_y$"
        ],
        [
          "attribute",
          "^q_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_j$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that checks if a string is a valid palindrome",
        "LRU cache class with get and put methods"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Maria: Good morning, David. How are you today?\n\nDavid: Good morning, Maria. I'm doing well, thanks. How about you?\n\nMaria: I'm great. Listen, I want to discuss our communication strategy moving forward. From now on, I'd like us to use Discord as our primary means of communication. It will help keep all our discussions organized and easily accessible.\n\nDavid: Sure, that sounds like a plan. I'll set up Discord on my computer right away.\n\nMaria: Great. Now, regarding our coding standards, I want to update you on a few things. When naming variables, make sure you end them with '_y'. For attributes, I want you to start their names with 'q_' from now on. Please implement these changes immediately.\n\nDavid: Understood. I'll update my coding conventions accordingly.\n\nMaria: Good. Keep in mind that consistency is key. These naming conventions will help ensure that our code remains readable and manageable, especially as our projects grow in complexity.\n\nDavid: Absolutely, I completely agree. Consistent naming conventions make it easier to collaborate and maintain our code base. I'll make sure to apply these conventions moving forward.\n\nMaria: Excellent. Now, let's move on to another topic. Have you made any further progress on the bug fix for the inventory management system?\n\nDavid: Yes, I have. I believe I've identified the root cause of the issue. It seems that a particular function wasn't properly updating the inventory quantities when items were added or removed. I'm currently working on a patch that should address this problem.\n\nMaria: That's fantastic news. Identifying the root cause is always the first critical step in resolving any bug. Keep me updated on your progress, and let me know if you encounter any challenges along the way.\n\nDavid: Will do. Thanks for your guidance and support, Maria.\n\nMaria: You're welcome. That's what I'm here for. Let's touch base again later this week to review your progress and discuss any further questions or concerns you may have.\n\nDavid: Sounds like a plan. Thank you again for your help.\n\nMaria: You're very welcome. Have a productive day, David.\n\nDavid: You too, Maria. Talk to you soon."
    },
    {
      "type": [
        "filler-update",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "Encouraging professional development through workshops, courses, and certifications",
        "always use CamelCase for class names",
        "always include a single digit in function names"
      ],
      "session_regex": [
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "function",
          ".*\\d$"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_j$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "PyTorch model class that performs binary image classification",
        "function that counts the number of non-zero elements in a matrix"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Maria: David, how are you today? I wanted to touch base with you on a couple of things. Firstly, I've been looking into professional development opportunities for our team, and I think there are some great options for online workshops and courses that could benefit your growth here at STARTED. Are you still interested in pursuing that path? \n\nDavid: Absolutely, Maria. I think that's a fantastic idea. I've been eager to expand my skill set and knowledge, especially with the ever-evolving nature of our industry. Online workshops and courses sound like a flexible and accessible way to do that. I'm all for it! \n\nMaria: Excellent! I'm glad to hear your enthusiasm. I'll send you a list of recommended programs and platforms that offer relevant and high-quality content. These opportunities can help you develop new skills and also certify your existing expertise. It's a great way to boost your CV and your confidence. \n\nDavid: That sounds perfect. I appreciate your support and guidance in this. I'm excited to dive into these resources and continue my professional development. \n\nMaria: Now, onto another topic. As you continue to refine your Python coding skills, I want to emphasize the importance of consistency and readability in your code. From now on, I'd like you to adhere to two specific coding standards. Firstly, always use CamelCase for class names. It helps with visual distinction and is a widely adopted convention. Secondly, include a single digit in your function names. This may seem unusual, but it's a unique approach we use here at STARTED to quickly identify functions within our codebase. \n\nDavid: Understood, Maria. I'll make sure to implement these conventions moving forward. Consistency is key, and I want to ensure my code aligns with the team's standards and is easily understandable by all. \n\nMaria: Exactly, David. These practices will not only help your code look cleaner but also improve collaboration and efficiency within our team. Feel free to reach out if you have any questions or concerns as you work on implementing these instructions. \n\nDavid: I will, Maria. Thanks for your mentorship and for sharing these insights. I'll keep you updated on my progress with both the professional development opportunities and the coding conventions. \n\nMaria: You're very welcome, David. That's what I'm here for. Keep up the good work, and don't hesitate to reach out."
    },
    {
      "type": [
        "filler-add",
        "pivot-update"
      ],
      "topic": [
        "Performance evaluation criteria, feedback mechanisms, and recognition programs",
        "always end attribute names with '_xt'"
      ],
      "session_regex": [
        [
          "attribute",
          ".*_xt$"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_xt$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_j$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "Linked list class"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Maria: Hi David, how are you today?\n\nDavid: I'm good, thanks. I wanted to touch base with you on a few things. Firstly, performance evaluation\u2014what criteria do we use to assess employees? I want to make sure I have a clear understanding of the expectations.\n\nMaria: That's a great question. We have a few key criteria we use company-wide, including technical proficiency, problem-solving skills, and innovation. Technical proficiency is assessed through code reviews and your ability to apply best practices. Problem-solving skills are evaluated based on your approach to challenges and your ability to break down complex problems. Lastly, innovation looks at your creativity and willingness to experiment.\n\nDavid: That makes sense. How is feedback typically delivered? I want to make sure I'm on the right track and improving where I need to.\n\nMaria: Feedback is usually given through a combination of regular one-on-ones with your mentor or team lead, as well as more formal performance reviews. We also encourage an open-door policy, so you can always reach out to your colleagues or me for feedback or clarification.\n\nDavid: Okay, great. Are there any recognition programs in place for employees who go above and beyond?\n\nMaria: Absolutely! We have several recognition programs, including our quarterly innovation awards and our employee-of-the-month spotlight. These programs highlight outstanding contributions, whether it's an innovative solution, exceptional teamwork, or going the extra mile to help a client. It's important to us that hard work and dedication are recognized and celebrated.\n\nDavid: That's fantastic to hear. It's always motivating to know that your efforts are appreciated.\n\nMaria: Indeed. Now, moving on, I wanted to give you an update on the coding standards we discussed previously. From now on, I want you to end all attribute names with '_xt'. This is a new standard we're implementing to improve code consistency and readability.\n\nDavid: Understood. I'll make sure to update my coding accordingly from this point forward.\n\nMaria: Great. Consistency is key, and this small change will help ensure that your code is aligned with the rest of the team's.\n\nDavid: Absolutely. I'll keep that in mind as I continue to work on my projects.\n\nMaria: That's all I have for today. Feel free to reach out if any questions come up, or if there's anything else you'd like to discuss.\n\nDavid: Will do. Thanks for your time, Maria. I always find these conversations helpful.\n\nMaria: You're welcome, David. Keep up the good work, and don't hesitate to reach out."
    },
    {
      "type": [
        "filler-update"
      ],
      "topic": [
        "Developing a culture of empowerment and autonomy to enable employees to take ownership of their work"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_xt$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_j$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Maria: Good morning, David. How are you doing today?\n\nDavid: I'm doing well, Maria. It's been an interesting week so far. I've been thinking about our previous discussion regarding empowerment and autonomy for employees. It's a topic that really resonates with me.\n\nMaria: I'm glad to hear that. It's an important aspect of fostering a productive and innovative work environment. Developing a culture of empowerment starts with giving employees the tools and knowledge they need to take ownership of their work. How do you feel your team lead has empowered you so far?\n\nDavid: I appreciate the level of trust and autonomy I've been given. My team lead encourages us to take initiative and provide solutions rather than simply identifying problems. It makes me feel more invested in the project, and I'm more motivated to contribute.\n\nMaria: That's excellent. Taking initiative is a key aspect of ownership. When you identify an issue or see an opportunity for improvement, do you feel comfortable speaking up and proposing solutions?\n\nDavid: Absolutely. Our team meetings often involve brainstorming sessions where we're encouraged to share our thoughts and ideas. It's a very collaborative environment, and everyone is respectful of each other's contributions. I feel like my voice is heard, and my ideas are valued, which definitely empowers me to keep pushing forward.\n\nMaria: That's fantastic to hear. A supportive and collaborative team dynamic is crucial for fostering autonomy. Now, let's discuss how this culture of empowerment translates into your day-to-day tasks and responsibilities. Are there specific areas where you feel you have more ownership compared to others?\n\nDavid: Definitely. I've been given the freedom to explore new technologies and implement innovative solutions, particularly in the realm of UI development, which is my area of expertise.  It was exciting to have that level of trust and autonomy.\n\nMaria: That's a perfect example of how empowerment can drive innovation. By giving you the autonomy to explore new technologies, your team lead has enabled you to contribute more creatively to the project. And I assume you felt a strong sense of ownership and responsibility for the outcome?\n\nDavid: Absolutely. I took it upon myself to thoroughly research the library, assess its compatibility, and propose a proof of concept. The process allowed me to learn and grow, and I felt a real sense of pride and accomplishment when my team lead approved the integration.\n\nMaria: That's fantastic, David. It's clear that you're thriving in this environment of empowerment and autonomy. Remember, with great freedom comes greater responsibility. Continue to embrace this culture, and don't be afraid to push the boundaries of your comfort zone. It will lead to both professional growth and a more fulfilling work experience."
    },
    {
      "type": [
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "always add the '@retry' decorator from the 'pedantic' module to all methods",
        "always include the string 'chx' in method names"
      ],
      "session_regex": [
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_xt$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_j$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [
        "Playlist class with add song and remove song methods",
        "Heap class with insert and heapify methods"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "long",
      "text": "Maria: Good morning, David. I wanted to go over some coding standards and practices we uphold here at STARTED. It's important that we maintain consistency across our codebases, especially as we work with a diverse team.\n\nDavid: Good morning, Maria. Yes, of course. Consistency is key to maintaining readable and understandable code, especially in a collaborative environment.\n\nMaria: Exactly. Now, one of the things we emphasize here is the use of decorators to enhance our code's functionality and readability. In particular, I want you to always add the @retry decorator from the pedantic module to all your methods. This decorator is incredibly useful for handling potential errors and exceptions gracefully.\n\nDavid: Understood. I'll make sure to include the @retry decorator in all my methods from now on.\n\nMaria: Good. Additionally, to promote consistency and easy identification of methods, I need you to always include the string 'chx' in your method names. This is a standard we've adopted to quickly identify and distinguish certain types of methods in our code.\n\nDavid: Noted. From now on, I'll include 'chx' in all my method names. Any particular reason for choosing 'chx'?\n\nMaria: It's an abbreviation we've adopted from an older project, and it has stuck ever since. It's now a standard across our team, and it helps us quickly identify and search for specific methods. It may seem like a small detail, but these conventions add up to improve our overall development efficiency.\n\nDavid: That makes sense. I'll be sure to follow this convention in my future code contributions.\n\nMaria: Great. Now that we've covered that, let's dive into reviewing some of your recent code submissions and providing feedback. I want to ensure that you're on the right track and offer any guidance where needed.\n\nDavid: Sounds good. I'm always eager for feedback and willing to learn and improve. Let's take a look at those submissions.\n\n[They proceed to review David's recent code submissions, with Maria offering feedback and guidance where needed.]"
    },
    {
      "type": [
        "filler-update"
      ],
      "topic": [
        "Performance evaluation criteria, feedback mechanisms, and recognition programs"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_xt$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_j$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "long",
      "text": "Maria: Good morning, David. How are you doing today?\n\nDavid: I'm doing well, Maria. It's been a few weeks since our last meeting. I've been focusing on enhancing my Python skills and exploring new libraries.\n\nMaria: That's fantastic. Continuous learning is essential in our field. So, I wanted to touch base with you today regarding performance evaluations and feedback, building on our previous discussion. As you know, these aspects play a crucial role in your professional growth and overall experience at STARTED.\n\nDavid: Absolutely. I find these topics very interesting, especially since we work in a dynamic industry where performance metrics can vary. I'm all ears.\n\nMaria: Great! Firstly, let's talk about the evaluation criteria. At STARTED, we assess our engineers on several key dimensions. These include technical proficiency, innovation, teamwork, and delivery. Technical proficiency encompasses your Python expertise, problem-solving skills, and understanding of software architecture. Innovation refers to your ability to think creatively and bring fresh ideas to the table. Teamwork evaluates your collaboration and communication with peers, while delivery focuses on your ability to meet deadlines and manage projects effectively.\n\nDavid: That makes a lot of sense. It's a well-rounded approach that covers all the essential aspects of being a software engineer. I particularly like the emphasis on innovation, as it encourages us to think outside the box and stay ahead of the curve.\n\nMaria: Exactly, David. We value your creative thinking and willingness to experiment. It's one of your strengths. Now, regarding feedback, STARTED promotes a culture of open and continuous feedback. We encourage peers, mentors, and subordinates to provide constructive feedback to one another. This can be done through formal channels, such as performance reviews, or informally through day-to-day interactions. The key is to create a safe and respectful environment where feedback is seen as a growth opportunity.\n\nDavid: I appreciate the emphasis on feedback. It's reassuring to know that my contributions and efforts are noticed and valued. I also think that receiving feedback from diverse perspectives helps me improve and align my work with the team's goals.\n\nMaria: Absolutely, David. Effective feedback mechanisms are a two-way street. While it's important for mentors like myself to provide guidance and critiques, it's equally valuable for us to receive feedback from mentees like yourself. This way, we can enhance our mentoring skills and create a more positive impact.\n\nDavid: That's a great point. I sometimes forget that mentors can also benefit from feedback. I'll make sure to provide my insights and suggestions constructively whenever possible.\n\nMaria: Thank you, David. Your input is valuable, and I encourage you to speak up. Now, moving on to recognition programs, STARTED has several initiatives to acknowledge and reward outstanding performance. These include employee-of-the-month awards, innovation grants, and promotions or leadership opportunities for those who consistently excel. We believe that recognizing achievement motivates not just the individual but also inspires the entire team.\n\nDavid: That's fantastic to hear! It's motivating to know that my hard work and dedication can be acknowledged and rewarded. Do you think you could share some more details about the innovation grants? That's something I haven't heard of before.\n\nMaria: Of course, David. The innovation grants are a fantastic initiative by STARTED to foster creativity and cutting-edge thinking. They are essentially funding opportunities for engineers who have innovative project ideas that align with the company's strategic direction. If selected, you receive a grant to work on your project, often with a dedicated team, for a specified period. It's a great way to turn your creative ideas into tangible outcomes while receiving support and recognition from the company.\n\nDavid: That sounds incredible! I often find myself brainstorming new project ideas, and it's exciting to know that STARTED provides a pathway to make them a reality. Are there any specific criteria or application processes for the innovation grants that I should be aware of?\n\nMaria: Definitely! The criteria and process are designed to be straightforward and accessible. Generally, we look for innovative projects that demonstrate a clear understanding of market needs, technical feasibility, and potential impact on our industry. To apply, you would need to submit a project proposal that outlines your idea, its potential benefits, and a rough implementation plan. Our innovation committee reviews these proposals and selects the most promising ones for funding. It's a competitive process, but one that is definitely worth pursuing if you have a passion for innovation.\n\nDavid: That sounds amazing. I already have a few ideas in mind that I think could be strong contenders. Would it be possible to discuss them with you further and get your insights on which one might be the best fit for the innovation grant application?\n\nMaria: Absolutely, David. I'd be delighted to help you brainstorm and refine your project ideas. Why don't we schedule another meeting next week specifically for this purpose? In the meantime, feel free to send me a brief summary of each idea, and we can take it from there.\n\nDavid: That sounds perfect! I'll send you those summaries as soon as possible. Thank you so much for your guidance and support, Maria. It means a lot.\n\nMaria: You are very welcome, David. It's been a pleasure mentoring you and witnessing your growth. Keep up the excellent work, and let's continue to make strides together."
    },
    {
      "type": [
        "filler-add",
        "pivot-update",
        "pivot-add"
      ],
      "topic": [
        "Designing a performance dashboard to track key metrics and KPIs for business success",
        "always start function argument names with 'g_'",
        "always include the string 'chx' in variable names"
      ],
      "session_regex": [
        [
          "function argument",
          "^g_.*"
        ],
        [
          "variable",
          ".*chx.*"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_xt$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_j$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [
        "function that given two vectors compute their dot product",
        "function that removes all the duplicates of a list of numbers then computes the sum"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "short",
      "text": "Maria: Today, we'll focus on designing a performance dashboard to visualize key metrics and KPIs for our business stakeholders. It's important that we track these indicators to ensure our software products are meeting expectations and to identify areas for improvement.\n\nDavid: Absolutely! Visualizing data is a powerful way to communicate the impact of our work to non-technical stakeholders. I'm excited to dive into this project.\n\nMaria: Great! Now, for this dashboard, we'll need to pull data from various sources within our infrastructure. You'll be working with a diverse set of data, so keep that in mind when designing the data retrieval logic.\n\nDavid: Understood. I'll make sure the data collection process is robust and adaptable.\n\nMaria: Perfect. Now, I want to emphasize code consistency and readability. Always start function argument names with 'g_' and include the string 'chx' in your variable names. This will help maintain uniformity across our codebases and improve collaboration.\n\nDavid: Noted. I'll adhere to these naming conventions. They'll definitely make our code more consistent and recognizable.\n\nMaria: Excellent! Now, for the dashboard itself, we want to strike a balance between providing comprehensive information and maintaining a clean, intuitive interface. Start by sketching out a few wireframes to determine the best layout for the metrics and KPIs.\n\nDavid: Will do. I'll keep the design simple and focused, ensuring the dashboard conveys the key insights effectively.\n\nMaria: That's fantastic, David. Remember, this dashboard will be a valuable tool for our leadership team to make data-driven decisions. Your work will have a direct impact on our company's strategic direction.\n\nDavid: That's really motivating, Maria. I'll make sure to deliver a comprehensive and insightful dashboard. I'll send you my initial designs and code snippets for review by the end of the week.\n\nMaria: Sounds like a plan. I'm looking forward to seeing your progress!"
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-update"
      ],
      "topic": [
        "always use the GPUs for training neural networks",
        "always start function argument names with 'f_'"
      ],
      "session_regex": [
        [
          "function argument",
          "^f_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_xt$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^f_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_j$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [
        "function that given two vectors compute their dot product"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Maria: I wanted to touch base with you on a few updates to our coding practices. As you know, we always strive to improve our processes and keep up with the latest tools.\n\nDavid: Absolutely. I'm all ears.\n\nMaria: Great. So, moving forward, I want you to utilize GPUs for training neural networks. They offer significant advantages in terms of speed and performance, especially for larger networks.\n\nDavid: Understood. I'll make sure to leverage GPUs from now on for neural network training.\n\nMaria: Excellent. Additionally, we're standardizing the naming convention for function argument names. From now on, start function argument names with 'f_'. This improves code readability and maintains consistency across our projects.\n\nDavid: Noted. I'll update my coding practices accordingly and ensure that function argument names start with 'f_'.\n\nMaria: Perfect. Consistency and adherence to standards are crucial for collaborative work and maintaining our code quality.\n\nDavid: Absolutely. I appreciate you keeping me updated with these best practices. It helps me integrate better with the team and contribute more effectively.\n\nMaria: You're welcome. It's important that we provide clear guidelines and support your development. Keep up the good work, and don't hesitate to reach out if you have any questions or concerns.\n\nDavid: Thank you, Maria. I'll be sure to touch base if any clarifications are needed."
    },
    {
      "type": [
        "filler-add",
        "pivot-update",
        "pivot-update"
      ],
      "topic": [
        "Ensuring health and safety in the workplace, including COVID-19 protocols and emergency response plans",
        "always start method names with 'p_'",
        "always start function names with 'gn_'"
      ],
      "session_regex": [
        [
          "method",
          "^p_.*"
        ],
        [
          "function",
          "^gn_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_xt$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^gn_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^f_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_j$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [
        "Inventory class with add stock and remove stock methods",
        "function that given an array of integer citations, computes the h-index"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "short",
      "text": "Maria: Health and safety are paramount, David. Especially with the ongoing pandemic, we need to ensure that everyone follows the COVID-19 protocols. Masks are mandatory in common areas, and social distancing should be maintained as much as possible. \n\nDavid: Absolutely, it's important that we all do our part to keep each other safe. Are there any specific emergency response plans I should be aware of?\n\nMaria: Yes, the company has a comprehensive emergency response plan, and it's crucial that you familiarize yourself with it. It outlines procedures for various scenarios, including medical emergencies, fire drills, and natural disasters. You can access the digital version on our intranet site. It's essential to know the assembly points and evacuation routes, as well as the designated roles and responsibilities of staff members during an emergency.\n\nDavid: Understood. I'll make sure to review it thoroughly. \n\nMaria: Good. Now, regarding your coding tasks, I want to update you on a few naming conventions we follow. When naming methods, always start the name with 'p_'. This is a standard we use to maintain consistency and make our code more readable. It's a small detail, but it helps our team quickly identify methods and their purposes.\n\nDavid: Noted. I'll keep that in mind from now on. \n\nMaria: Similarly, for function names, we use the prefix 'gn_'. This distinguishes functions from other parts of the code. It's important to be consistent with these naming conventions to facilitate collaboration and code maintenance.\n\nDavid: Got it. I'll start implementing these conventions immediately. Any other updates I should be aware of? \n\nMaria: Not for now. Just focus on incorporating these naming conventions into your coding practices. We can discuss further guidelines in our next meeting. \n\nDavid: Sounds good. I'll make sure to apply these instructions consistently."
    },
    {
      "type": [
        "filler-update",
        "pivot-update"
      ],
      "topic": [
        "Building a culture of trust and transparency through open communication and feedback",
        "always start function names with 'a_'"
      ],
      "session_regex": [
        [
          "function",
          "^a_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_xt$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^a_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^f_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_j$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [
        "function that given an array of integer citations, computes the h-index"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Maria: Trust and transparency are key to a healthy work culture, David. We touched on this before, but it's an important topic to revisit. Open communication and honest feedback create an environment where problems are addressed early and everyone is aligned towards our company goals.\n\nDavid: Absolutely, Maria. I've seen the benefits of this approach already. When our team leads created an open channel for feedback on our last project, we were able to catch a potential issue with our deployment strategy early on. It made a big difference.\n\nMaria: That's a great example, David. When feedback is encouraged and acted upon, it empowers everyone to take ownership and feel invested in our projects. It's a key part of our company's success.\n\nDavid: For sure. It also helps us build better products. When we incorporate user feedback and are transparent about our processes, our users feel more connected to our work and are more likely to provide valuable insights.\n\nMaria: Exactly. Now, moving on to a different topic, I want to give you an update on the coding standards I've previously provided. From now on, I'd like you to start all function names with 'a_' as a prefix. This will help us maintain a consistent naming convention and improve code readability.\n\nDavid: Understood, Maria. I'll make sure to implement this going forward. Are there any other updates to the coding instructions I should be aware of?\n\nMaria: No, that's the only change for now. Consistency is important in coding, and it's crucial that we all follow the same conventions. I'll let you know if any other updates come up.\n\nDavid: Sounds good. I'll keep that in mind as I work on my current tasks. Thank you for the guidance, Maria.\n\nMaria: You're welcome, David. Feel free to reach out if you have any questions or concerns about this or any other matter. That's what I'm here for!\n\nDavid: I will, Maria. Thanks again."
    },
    {
      "type": [
        "pivot-update",
        "pivot-update"
      ],
      "topic": [
        "always end attribute names with '_q'",
        "always end function argument names with '_g'"
      ],
      "session_regex": [
        [
          "attribute",
          ".*_q$"
        ],
        [
          "function argument",
          ".*_g$"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_q$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^a_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^f_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [
        "Linked list class",
        "function that merges two sorted lists"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Maria: I wanted to touch base with you on some updated coding standards we're implementing. I know I've given you guidance in the past, and you've been doing great with that, but we're making a few tweaks.\n\nDavid: Of course. I understand that standards evolve, and I'm happy to adapt.\n\nMaria: Perfect. So, going forward, I need you to update your Python coding style. Specifically, I want you to end all attribute names with '_q'. \n\nDavid: Understood. I'll make sure to update my attribute naming convention accordingly.\n\nMaria: Good. Consistency is key here. Also, from now on, I want you to end all function argument names with '_g'. So, if you have a function argument called 'input_data', it should be named 'input_data_g'.\n\nDavid: Noted. I'll remember to use the '_g' suffix for function arguments from now on.\n\nMaria: That's great, David. Maintaining consistent and clear code is crucial for collaboration and long-term maintenance. It ensures that our codebases are readable and understandable for all team members.\n\nDavid: Absolutely. I agree that consistent code makes it easier for everyone to work together and maintain our projects over time. I'll make sure my code follows these updated standards.\n\nMaria: Excellent. If you have any questions or concerns as you implement these changes, don't hesitate to reach out. We're a team, and we want to make sure everyone is on the same page.\n\nDavid: I will, Maria. Thanks for the guidance and for keeping me in the loop with these updates."
    },
    {
      "type": [
        "filler-update",
        "pivot-update",
        "pivot-update"
      ],
      "topic": [
        "Understanding comprehensive social security and health insurance benefits",
        "always end function names with '_d'",
        "always end method names with '_b'"
      ],
      "session_regex": [
        [
          "function",
          ".*_d$"
        ],
        [
          "method",
          ".*_b$"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_q$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^a_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^f_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [
        "function that implements merge sort",
        "Graph class with a method that computes the shortest path from one node to another"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Maria: David, it's been a few weeks since we last met. I wanted to circle back to our discussion about comprehensive health and social security benefits. Do you recall the key points we covered?\n\nDavid: Absolutely, Maria. I remember we talked about the different types of insurance plans offered by STARTED, including health, dental, and vision care. We also discussed the importance of understanding the fine print, like deductibles and copays, to make the most of these benefits.\n\nMaria: Excellent. It's crucial to have a solid grasp of these benefits, as they play a significant role in your overall well-being and financial stability. Now, another aspect to consider is the availability of additional perks or discounts associated with these plans. Some providers have partnerships with gyms or wellness programs, offering reduced rates to members. It's worth exploring these options to maximize the value of your coverage.\n\nDavid: That's a great point. I'll definitely look into those additional benefits. It's always good to save some money while staying healthy.\n\nMaria: Indeed. Now, shifting gears a bit, I want to provide an update to some coding guidelines I gave you previously. Going forward, I'd like you to end function names with '_d' and method names with '_b'. This will help us maintain a consistent naming convention and improve code readability.\n\nDavid: Understood, Maria. I'll make sure to implement this naming convention from now on.\n\nMaria: Great. Consistency is key in coding, and it'll make collaboration within the team much smoother. Now, take some time to review the code you've written so far and make the necessary adjustments. We want to ensure uniformity across the entire project.\n\nDavid: Will do. I'll get started on that right away. I appreciate your guidance on this, it really helps me refine my coding practices.\n\nMaria: You're welcome, David. That's what I'm here for. Feel free to reach out if you have any questions or concerns along the way. We'll touch base again soon to review your progress and address any challenges you may encounter.\n\nDavid: Sounds like a plan, Maria. Thanks again for your mentorship and support.\n\nMaria: You're very welcome. Keep up the good work, and don't hesitate to seek clarification if needed. That's the beauty of mentorship\u2014we're here to learn from each other and grow together."
    },
    {
      "type": [
        "filler-add",
        "pivot-add",
        "pivot-update"
      ],
      "topic": [
        "Contract renewal negotiations and finalization",
        "always include a single digit in attribute names",
        "always start function names with 'fn_'"
      ],
      "session_regex": [
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function",
          "^fn_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_q$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^f_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "Linear regression class using numpy",
        "function that given an array of integer citations, computes the h-index"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class using numpy",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Maria: Good morning, David. How are you today?\n\nDavid: Good morning, Maria. I'm doing well, thank you. It's a beautiful day, and I'm feeling energized.\n\nMaria: That's wonderful to hear. Listen, I wanted to touch base with you regarding your contract renewal. The negotiations are going well, and we're in the final stages of finalization. Just a few minor details to iron out, and then your contract will be extended for another year.\n\nDavid: That's fantastic news! I've really enjoyed my time here at STARTED, and I'm excited to continue working with the team.\n\nMaria: Great! We're happy to have you. Now, moving on to some technical matters, I wanted to give you a few specific coding instructions to ensure consistency across the team's code base.\n\nDavid: Of course. I'm all ears.\n\nMaria: Firstly, when naming attributes, I want you to always include a single digit. ' This helps us identify and distinguish between different attributes more easily.\n\nDavid: Understood. I'll make sure to include a single digit in all my attribute names from now on.\n\nMaria: Good. Additionally, I'd like to update a previous instruction I gave you. Going forward, please start all your function names with 'fn_'. This prefix will help us quickly identify functions within the code.\n\nDavid: Noted. From now on, I'll start all my function names with 'fn_'. Any other updates to our coding standards?\n\nMaria: That's it for now. Just remember that consistency is key. These small details might seem insignificant, but they help ensure that our code is readable and maintainable for the entire team.\n\nDavid: Absolutely, I completely agree. Consistent code formatting and naming conventions make collaboration much smoother. I'll make sure to apply these instructions diligently.\n\nMaria: Great! Well, if you have any questions or concerns about the contract or these coding instructions, don't hesitate to reach out. Otherwise, I'll see you at our next mentor-mentee check-in.\n\nDavid: Will do. Thank you for your guidance and support, Maria. I appreciate it.\n\nMaria: You're very welcome. Keep up the good work, and I'll talk to you soon."
    },
    {
      "type": [
        "filler-update",
        "pivot-update"
      ],
      "topic": [
        "Encouraging professional development through workshops, courses, and certifications",
        "always end variable names with '_z'"
      ],
      "session_regex": [
        [
          "variable",
          ".*_z$"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_q$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^f_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "variable",
          ".*_z$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "function that checks if a string is a valid palindrome"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class using numpy",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "short",
      "text": "Maria: Good morning, David. I wanted to follow up on our previous discussion about professional development. Have you given more thought to the online course options available to enhance your Python skills? It's important to continually invest in learning and stay up-to-date with industry trends.\n\nDavid: Yes, absolutely! I've been exploring some of the online platforms, and there are quite a few interesting courses that could help me improve my Python expertise. I think it's a great opportunity to develop my skills further.\n\nMaria: Excellent! These courses can provide you with new tools and techniques to become even more efficient in your work. Now, regarding the code we've been working on, I want to update one of my previous instructions. From now on, I need you to end all your variable names with '_z'. This will help us maintain consistency and easily identify those variables in the code.\n\nDavid: Understood. I'll make sure to follow this naming convention from now on. Are there any specific guidelines or standards we're adhering to with this convention?\n\nMaria: For now, this is an internal standard we're setting for this particular project. It's a simple way to keep our variable names distinct and easily recognizable. Just make sure that, going forward, all your variable names end with '_z'.\n\nDavid: Alright. I'll keep that in mind as I continue working on the code. Thanks for the guidance, Maria. I'll let you know if I have any questions or concerns along the way.\n\nMaria: You're welcome. That's what I'm here for. Don't hesitate to reach out if you need any further clarification or assistance. We're all here to support each other and improve our skills.\n\nDavid: Absolutely. I appreciate it."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Creating a culture of collaboration and teamwork to achieve shared goals and objectives"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_q$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^f_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "variable",
          ".*_z$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class using numpy",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "short",
      "text": "Maria: Good morning, David. I wanted to touch base with you today about fostering a culture of collaboration within our team. It's an essential aspect of our work, especially in a field like software engineering, where complex problems often require multiple perspectives and skills. \n\nDavid: Absolutely, Maria. I think one of the strengths of our team is our diversity of talents and backgrounds. When we work together, we can really leverage our collective knowledge to innovate and create robust solutions. \n\nMaria: Exactly. And it's important that we create an environment that encourages open communication, mutual respect, and a shared purpose. This means ensuring that everyone feels comfortable contributing their ideas and providing constructive feedback to one another. \n\nDavid: I agree. It's also helpful to establish clear goals and objectives for each project, so we all understand our individual roles and how they contribute to the larger team effort. \n\nMaria: Yes, defining those goals and ensuring they are aligned with the team's vision is key. It provides a sense of direction and helps foster a sense of ownership and accountability among team members. \n\nDavid: For sure. And I think it's important to celebrate our successes together as a team, too. Recognizing and appreciating the contributions of our colleagues can really boost morale and encourage future collaboration. \n\nMaria: Absolutely. Recognizing achievements and showing gratitude for one another's efforts goes a long way toward building a positive team culture. It reinforces the idea that we are all working together toward shared goals. \n\nDavid: Definitely. I think if we continue to emphasize open communication, respect, and a collective vision, we'll be well on our way to creating a highly collaborative and productive team environment. \n\nMaria: I agree, David. And remember, as a team, we also learn from our failures and use them as opportunities to improve and strengthen our collaboration. It's all part of the process, and it's important to maintain a positive and supportive attitude through the challenges we may face. \n\nDavid: Absolutely, Maria. I think with your guidance and our team's collective spirit, we'll be able to create a culture of collaboration that will help us achieve great things. \n\nMaria: Well said, David. Let's continue to foster that culture and work together towards our shared goals. I'm confident that with our combined efforts, we'll be able to tackle any challenges that come our way."
    },
    {
      "type": [
        "filler-update",
        "pivot-update"
      ],
      "topic": [
        "Remote work policies, challenges, and best practices",
        "always start method names with 'md_'"
      ],
      "session_regex": [
        [
          "method",
          "^md_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_q$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^f_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "variable",
          ".*_z$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "Inventory class with add stock and remove stock methods"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class using numpy",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "long",
      "text": "Maria: Hi, David. It's been a few days since we last spoke about remote work policies. I wanted to circle back and discuss some of the challenges and best practices we've observed. \n\nDavid: Absolutely, Maria. I've been thinking about our previous conversation a lot. Remote work has its pros and cons, and I'm curious to hear your take on navigating the potential pitfalls. \n\nMaria: Well, one of the biggest challenges with remote work is maintaining effective communication and collaboration. It's easy for team members to feel isolated and disconnected when they're not physically together. \n\nDavid: That's true. I've noticed that even with all the video conferencing and messaging apps, there are still moments when I wish I could just turn to someone and ask a quick question, like we would in an office. \n\nMaria: Exactly. So, one best practice I'd like to emphasize is the importance of over-communication. When working remotely, it's crucial to be explicit and clear in your communication. Assume that your colleagues might not have all the context, and provide additional details when possible. \n\nDavid: That makes a lot of sense. I can see how that would help reduce misunderstandings and confusion. What else do you think is important, in terms of best practices? \n\nMaria: Another key aspect is establishing clear boundaries and routines. Remote work can blur the lines between our personal and professional lives. Setting specific work hours, creating a dedicated workspace, and sticking to a consistent routine can help maintain a healthy work-life balance. \n\nDavid: That's a good point. I've definitely found myself working longer hours simply because my laptop is always within reach. Setting those boundaries is important for self-care and sustainability. \n\nMaria: Absolutely. Now, regarding your project, I want to update you on a slight change in our coding standards. Going forward, I'd like you to start method names with the prefix 'md_'. This is to maintain consistency across our team and improve code readability. \n\nDavid: Understood, Maria. I'll make sure to implement this change from now on. Are there any specific methods you want me to review and update first? \n\nMaria: No, I trust you to handle it. Just take your time and make the necessary adjustments when you can. It's not a rush job, but it is important for maintaining our code quality standards. \n\nDavid: Alright, I'll get started on that soon. Thanks for the guidance, as always. \n\nMaria: You're welcome, David. Keep up the good work, and don't hesitate to reach out if you have any questions or concerns. \n\nDavid: I will, Maria. Have a great rest of your day! \n\nMaria: You too, David!"
    },
    {
      "type": [
        "filler-update",
        "pivot-update"
      ],
      "topic": [
        "Creating a culture of collaboration and teamwork to achieve shared goals and objectives",
        "always start function argument names with 'x_'"
      ],
      "session_regex": [
        [
          "function argument",
          "^x_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_q$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "variable",
          ".*_z$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "function that given two vectors compute their dot product"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class using numpy",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Maria: Good morning, David. I wanted to touch base with you again on fostering a collaborative team culture. It's important that we, as a team, are aligned and working together effectively towards our shared goals.\n\nDavid: Absolutely, Maria. I've been trying to keep that in mind as I work with the team. I think open communication and a willingness to help each other have been key.\n\nMaria: That's great to hear, David. Effective communication is indeed a cornerstone of successful collaboration. It's important that we create an environment where everyone feels comfortable sharing ideas and providing feedback.\n\nDavid: I agree. I've noticed that when we have a clear understanding of our shared goals, it becomes easier to divide tasks and rely on each other's strengths.\n\nMaria: Exactly, David. Defining clear goals and objectives is crucial. When everyone is aware of their role and responsibilities, we can work more efficiently as a team.\n\nDavid: It makes troubleshooting and problem-solving much easier as well. If someone encounters an issue, we can work together to find a solution, knowing that we're all pulling in the same direction.\n\nMaria: Well said. Now, regarding your Python coding, I have an update to the coding instructions I gave you previously. From now on, I want you to start function argument names with 'x_'. This will help us maintain a consistent naming convention across the team and improve code readability.\n\nDavid: Understood, Maria. I'll make sure to implement this going forward. Are there any specific instances where I should be careful about using this convention?\n\nMaria: No, David, this instruction applies generally. Starting function argument names with 'x_' is now the standard for our team.\n\nDavid: Alright, I'll keep that in mind as I work on my functions. I'll review my previous code and make sure to edit the argument names accordingly.\n\nMaria: That's the spirit, David. Consistency is key in coding, and it's important that we adhere to the standards we set as a team."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Planning engaging social activities for the upcoming holidays"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_q$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "variable",
          ".*_z$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class using numpy",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "long",
      "text": "Maria: Hi, David! How are you doing today?\n\nDavid: I'm good, Maria! It's been a while since we last caught up. How have things been?\n\nMaria: Yes, it has been a busy few weeks. I wanted to touch base with you today about something a little different from our usual discussions. With the holidays approaching, we want to plan some engaging social activities for the team.\n\nDavid: Oh yes, the holiday season is almost upon us! I've been so focused on my projects that I nearly forgot about it. What did you have in mind for social activities?\n\nMaria: Well, the company wants to foster a sense of community and team bonding during this festive time. We're thinking of organizing a series of events and activities that encourage collaboration and a bit of friendly competition. Something to boost morale and bring everyone together.\n\nDavid: That sounds like a fantastic idea! People will be in the mood for celebration, so it's a great opportunity to organize some fun team-building exercises. Any specific thoughts on the types of activities?\n\nMaria: I was thinking we could have a mix of virtual and in-person events, depending on everyone's comfort level and location.  Teams can compete against each other, and we can have prizes for the winners.\n\nDavid: Oh, a quiz night is a brilliant idea! We can form cross-functional teams to encourage collaboration between team members who don't usually work together. It'll be a fun way to learn more about our colleagues and their areas of expertise.\n\nMaria: Exactly! And it's a great ice-breaker for newer team members as well. In addition to the quiz night, we could organize a holiday-themed scavenger hunt around the office or even in the local area. It would get people moving and exploring, and we could incorporate some creative challenges along the way.\n\nDavid: A scavenger hunt would be amazing! We could divide the office into zones and have teams rotate through them, completing tasks and collecting items. It would be a fun way to discover hidden gems in the area and engage with our surroundings.\n\nMaria: That's the spirit! I'm glad you're on board with these ideas. We also thought of a holiday decoration contest. Teams can compete to decorate their workspace in the most creative and festive way. It will add a bit of cheer to the office and spark everyone's creativity.\n\nDavid: Oh, the decoration contest will definitely bring out everyone's artistic side! We can provide a theme or let teams come up with their own unique interpretations of the holidays. It will be interesting to see the variety of decorations and the stories behind them.\n\nMaria: Absolutely! And to wrap things up, we could have a holiday potluck where everyone brings a dish to share. Perhaps we can incorporate a friendly competition there as well, with awards for the best dishes or the most creative presentations.\n\nDavid: A holiday potluck is a wonderful way to cap off the activities. It will be a great opportunity for everyone to relax, socialize, and indulge in some delicious food. We can even have a white elephant gift exchange to add to the fun.\n\nMaria: Fantastic! I think with these activities, we'll have a well-rounded and engaging holiday celebration. I'll put together a plan and circulate it to the team, and we can fine-tune the details together. Your input is always valuable, David.\n\nDavid: Thank you, Maria! I'm excited to be a part of this. It's a great initiative to bring the team closer together and foster a sense of community, especially during the holidays. I'll be happy to help however I can.\n\nMaria: Wonderful! We'll make sure these holiday activities are memorable and enjoyable for everyone. Now, shall we move on to discussing any upcoming projects or tasks you have on your plate?\n\nDavid: Yes, of course. I've been working on implementing a new feature for our web application, and I'd love to walk you through the progress I've made so far...\n\n[The conversation continues, as Maria and David delve into David's ongoing projects and discuss his goals and challenges.]"
    },
    {
      "type": [
        "filler-update",
        "pivot-update"
      ],
      "topic": [
        "Creating a knowledge-sharing platform to facilitate learning and collaboration among employees",
        "always end function names with '_x'"
      ],
      "session_regex": [
        [
          "function",
          ".*_x$"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_q$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_x$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "variable",
          ".*_z$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "function that implements merge sort"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class using numpy",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "long",
      "text": "Maria: Good morning, David. I wanted to touch base with you on the knowledge-sharing platform we've been discussing. How are your thoughts shaping up? Do you have any new insights or ideas to share?\n\nDavid: Good morning, Maria. Yes, I've been thinking a lot about it. I believe a platform that facilitates collaboration and learning will greatly benefit the company. My idea is to create a space that encourages employees to share their expertise and learn from each other. Almost like an internal, exclusive social media platform. \n\nMaria: That's a great vision, David. I think it's important to foster a culture of knowledge sharing and continuous learning in a company, especially one as innovative as STARTED. Your idea of an internal social media platform is interesting. It could provide a familiar and engaging interface for employees to connect and interact. \n\nDavid: Exactly! I think if we can make it intuitive and engaging, more employees will be inclined to share their knowledge and participate. I envision features like profile creation, content sharing, discussion forums, and maybe even a mentoring program. \n\nMaria: Those are excellent features to consider. Profile creation will give employees a sense of ownership and encourage them to share their expertise. Content sharing and discussion forums will facilitate collaboration and the exchange of ideas. And a mentoring program could be a fantastic way to establish more personal connections and guide less experienced employees. \n\nDavid: Absolutely. I also think we should consider ways to make it accessible and user-friendly. Maybe we can integrate it with our existing intranet platform so that employees don't have to navigate to a completely new site. \n\nMaria: That's a smart suggestion. Integrating it with our intranet will definitely increase its visibility and accessibility. We should also consider a comprehensive search function to make it easy for employees to find the information they need. \n\nDavid: Yes, search functionality is key. Maybe we can even implement some sort of tagging system to categorize content and make it more discoverable. \n\nMaria: That leads me to another point. When developing this platform, we need to ensure that the code is efficient, readable, and maintainable. I want to update a previous instruction I gave you. From now on, when naming functions, always end the name with '_x'. This will help us identify and manage the functions unique to this project.  \n\nDavid: Understood, Maria. I'll make sure to follow this naming convention for function names from now on. \n\nMaria: Great. As we move forward with this project, remember that your creativity and innovative thinking are valuable assets. Don't be afraid to suggest and try out new ideas. At the same time, stay focused and keep our goals in mind. \n\nDavid: Absolutely, Maria. I really appreciate your guidance and support. I'll keep you updated on my progress with the platform. \n\nMaria: Please do, and don't hesitate to reach out if you have any questions or concerns. That's what I'm here for. Now, go and put your creative energy to work! \n\nDavid: Thanks a lot, Maria! I will."
    },
    {
      "type": [
        "filler-update"
      ],
      "topic": [
        "Building a culture of trust and transparency through open communication and feedback"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_q$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_x$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "variable",
          ".*_z$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class using numpy",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Maria: Hi, David. How are you doing today?\n\nDavid: I'm good, Maria. Thanks for asking. How have you been?\n\nMaria: Great! I wanted to touch base with you today about something we've discussed before\u2014building a culture of trust and transparency within our team. It's been a few weeks since we last talked about this, and I'd like to hear your thoughts on how things are going.\n\nDavid: Absolutely. I think open communication and feedback are crucial for any team's success, and I've been trying to keep that in mind during my interactions with colleagues. I've been sharing my thoughts and ideas more openly and encouraging others to do the same. It feels like we're making progress, and people are becoming more comfortable with sharing their opinions.\n\nMaria: That's fantastic to hear, David. Creating a safe and open environment where everyone feels comfortable contributing is essential for fostering innovation and solving complex problems. How do you feel your teammates are responding to this approach? Do you feel like everyone is on board?\n\nDavid: Overall, I think the response has been positive. Of course, there are different personality types on the team, and some people are naturally more reserved than others. But I've noticed that even the quieter members are starting to speak up more during meetings and share their insights. I try to make sure that everyone has a chance to provide input and that their ideas are acknowledged and valued.\n\nMaria: That's excellent, David. It's important to respect different communication styles and create a space where everyone feels included. Sometimes, it's the quieter team members who have the most thoughtful and insightful contributions. By encouraging their participation, you're not only building trust but also harnessing the full potential of our diverse team.\n\nDavid: Absolutely, and I think it's also important to recognize that this is an ongoing process. Building a culture of trust doesn't happen overnight, and it requires consistent effort from all of us.\n\nMaria: Exactly, David. It's a continuous journey, and it's wonderful to hear that you're approaching it with such dedication and awareness. Remember, I'm always here if you want to discuss any challenges or brainstorm new ideas to foster even more transparency and open communication within our team.\n\nDavid: Thanks, Maria. I really appreciate your guidance and support. I'll definitely take you up on that offer if any specific situations come up where I'd like a second opinion or some additional insights.\n\nMaria: That's what I'm here for. Now, shifting gears a bit, how are you finding the new Python framework we adopted for our current project? Are there any aspects of it that you're particularly enjoying, or any challenges you'd like to discuss?\n\nDavid: I'm glad you asked about that, actually..."
    },
    {
      "type": [
        "filler-instruction-add"
      ],
      "topic": [
        "never use a formatter when writing code"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_q$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_x$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "variable",
          ".*_z$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class using numpy",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "long",
      "text": "Maria: Good morning, David. How are you doing today?\n\nDavid: I'm doing well, Maria. It's a beautiful day, and I'm excited to dive into some code. We've had quite a few conversations now, and I feel like I'm making progress.\n\nMaria: That's great to hear. You're a quick learner, and your enthusiasm is refreshing.\n\nDavid: Thanks! I appreciate your guidance and mentorship. I've learned a lot, especially about structured coding practices.\n\nMaria: Well, we're a team, and it's important that we continue to support each other. Now, let's talk about a specific aspect of coding that I want you to focus on.\n\nDavid: Sure, go ahead. I'm all ears.\n\nMaria: I want you to adopt a habit that might seem a bit unconventional, but it has its benefits. I want you to avoid using formatters when writing code.\n\nDavid: Oh, that's interesting. May I ask why? Formatters can help ensure a consistent style and make code easier to read.\n\nMaria: You're right, and there's value in consistent code styling. However, I want you to develop a sense of ownership and attention to detail. By avoiding formatters, you'll be forced to pay close attention to every line of code you write.\n\nDavid: That makes sense. It's like practicing freehand drawing instead of relying on a ruler. It helps develop a better feel for the code, its structure, and aesthetics.\n\nMaria: Exactly! It's about developing a deeper connection with your craft. When you write code without a formatter, you become more mindful of your indentation, spacing, and overall code layout.\n\nDavid: So, it's like an artist taking the time to carefully craft each stroke of their brush. I can see how that would lead to writing cleaner and more readable code.\n\nMaria: Precisely. It's an opportunity to infuse your code with a touch of personal style while still adhering to the coding standards and best practices we have in place at STARTED.\n\nDavid: This reminds me of the concept of \"code as self-expression.\" I remember reading about how some programmers view their code as a form of art.\n\nMaria: That's a fascinating perspective, and there's definitely beauty in well-crafted code. When you write code, I want you to think of yourself as a craftsman, shaping each line with precision and care.\n\nDavid: This approach will definitely encourage me to take more pride in my work. I can see how it could lead to writing code that's not only functional but also aesthetically pleasing.\n\nMaria: Absolutely. And remember, while we're focusing on this specific aspect, it's important to strike a balance. We don't want to obsess over perfection, but rather strive for excellence within a reasonable timeframe.\n\nDavid: That's a great point. I'll keep that in mind. So, do you have any specific suggestions or exercises for me to practice this?\n\nMaria: Yes, for the next week, I want you to write all your code without using a formatter. Take your time and pay attention to every detail. Then, at the end of the week, review your code and reflect on the experience.\n\nDavid: Okay, I'm up for the challenge! I'll take on this task and see how it influences my coding habits. Should I also keep a log of my reflections?\n\nMaria: Yes, please do. Note down your thoughts, the challenges you faced, and how you felt your code turned out. We'll review it together and discuss the impact of this exercise on your coding practices.\n\nDavid: Fantastic! I'll get started right away and keep a detailed log. Thank you for this insightful task, Maria. I'm curious to see how it unfolds.\n\nMaria: You're very welcome, David. Remember, this is about cultivating a mindful approach to coding. I look forward to hearing your thoughts and observations next time we meet."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Happy hour events to foster better relationships between managers and employees"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_q$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_x$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "variable",
          ".*_z$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class using numpy",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "long",
      "text": "Maria: Good afternoon, David. How are you doing today?\n\nDavid: I'm doing well, Maria. It's been a busy few weeks, but I'm glad we have some time to touch base.\n\nMaria: Absolutely. I wanted to discuss an idea I've been floating around. As you know, we've been focusing on building better relationships between managers and employees, and I think happy hour events could be a great way to facilitate that. What are your thoughts?\n\nDavid: I think that's a fantastic idea! Social events outside of the office can really help bring people together and foster a more relaxed environment for everyone to get to know each other.\n\nMaria: Exactly. And it's not just about building relationships; these events can also help boost morale and create a sense of community within the company. So, I'm thinking we could start by organizing a happy hour once a month, preferably on a Friday. What do you think?\n\nDavid: That sounds like a great plan! Friday evenings are usually a good time for people to unwind and socialize. We could maybe alternate between different types of venues to keep things interesting\u2014maybe a bar one month, a restaurant the next, and perhaps even a game arcade or something unique for variety.\n\nMaria: I like the way you think! Keeping it dynamic will definitely encourage more people to attend and look forward to these events. Now, in terms of logistics, we should probably set a budget and figure out how we want to handle food and drinks. Any thoughts on that?\n\nDavid: Well, I think setting a budget is definitely important, and perhaps we could work with a range\u2014a minimum and maximum amount\u2014to give us some flexibility. As for food and drinks, we could provide some light snacks and a couple of drink options, and maybe people can purchase additional items if they wish.\n\nMaria: Agreed. We don't want to go overboard, especially with the company's budget, but we do want to ensure that everyone has a good time and that there are options available for different preferences and dietary restrictions.\n\nDavid: Absolutely. And we can also encourage people to bring friends or colleagues who might be interested in joining. That way, we can make these events inclusive and welcoming to everyone, even if they're not directly part of our team.\n\nMaria: Fantastic. I think we have a great starting point here. Why don't you take the lead on organizing the first happy hour event? You can send out a company-wide email with the details, and we'll see how it goes from there.\n\nDavid: Sounds like a plan! I'll get working on that right away and make sure it's an enjoyable event for everyone. Thank you for bringing up this idea, Maria. I think it'll really help improve the dynamics between managers and employees.\n\nMaria: You're very welcome, David. That's what these conversations are for\u2014brainstorming and implementing ideas to make our company an even better place to work. I'm looking forward to seeing how this unfolds, and of course, I'll be there to support you every step of the way."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Discussing casual dress code policies and special event themes to boost employee morale"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_q$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_x$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "variable",
          ".*_z$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class using numpy",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Maria: Hi, David. How are you doing today?\n\nDavid: Good afternoon, Maria. I'm doing well. How about you?\n\nMaria: I'm great. Listen, I wanted to touch base with you on a couple of things. First, I think it's time we shook things up a bit and introduced a casual dress code policy for the team. What are your thoughts on that?\n\nDavid: I think that's a fantastic idea! A casual dress code can boost morale and make the team feel more relaxed and creative. It might even spark some innovative ideas during our brainstorming sessions.\n\nMaria: Exactly. We've been quite strict with our business casual dress code, but I think it's time to let our hair down a bit. Of course, we'll set some guidelines to ensure professionalism is maintained, but overall, I think it will be a positive change.\n\nDavid: Absolutely. It shows a level of trust in the team and acknowledges that comfort can lead to increased productivity.\n\nMaria: Indeed. Now, the second thing I wanted to discuss with you is an upcoming company-wide special event. We're thinking of a theme to make it more engaging and fun. Any ideas?\n\nDavid: Oh, definitely. How about a \"Retro Tech\" theme? We could have everyone dress up in 80s or 90s tech-inspired outfits. You know, like the early days of personal computing. It could be a lot of fun, and it ties into our industry.\n\nMaria: That's brilliant! It would be a unique twist on the typical retro themes we often see. We can encourage people to bring old-school gadgets and have some nostalgic music playing in the background. Maybe even have a best-dressed competition.\n\nDavid: That's the spirit! It would be a great icebreaker, too, as people would naturally start chatting about their outfits and retro tech memories.\n\nMaria: Absolutely. We can start promoting the event soon and get everyone excited about it. In the meantime, I'll work on the guidelines for the casual dress code policy and get that circulated.\n\nDavid: Sounds like a plan. I'll bounce a few ideas off the team for the event and see if anyone has any fun suggestions for activities or decorations.\n\nMaria: Great. Keep me posted if you have any brilliant ideas or feedback from the team. Let's make these initiatives a success and keep morale high!\n\nDavid: Will do! It's always exciting to work on these cultural initiatives. They really make a difference in the day-to-day office life."
    },
    {
      "type": [
        "filler-update"
      ],
      "topic": [
        "Requesting upgraded technology, including computers and software"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_q$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_x$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "variable",
          ".*_z$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class using numpy",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "long",
      "text": "Maria: Good morning, David. How are you doing today?\n\nDavid: I'm good, Maria. Excited as always to dive into some new topics and continue learning the ropes.\n\nMaria: Fantastic. We've been pairing for a while now, and I think it's time we discuss upgrading your technology setup. You've been working on that older model laptop for a few months, and I think we can make a case for something more powerful.\n\nDavid: Oh yes, I was hoping we'd circle back to this. I've felt a bit limited by the specs of this machine, especially when running some of our more intensive simulations. It would be great to have something with more processing power and memory.\n\nMaria: Absolutely. Up-to-date technology is crucial for our line of work. It not only improves your productivity but also ensures you're able to work with the latest tools and software. I'll speak with our IT department and see about getting you a newer model with better specs. We can also discuss any additional software or tools you might need.\n\nDavid: That would be amazing. I've been eyeing those new high-performance laptops they rolled out to the data science team. I think those would be perfect for the kind of work I want to do.\n\nMaria: Those machines are indeed impressive. They've got the latest processors and graphics cards, which will be a significant boost for your work. I'll make sure to specify those models when I put in the request. Are there any specific software packages you'd like to have installed as well?\n\nDavid: Well, I've been meaning to dive deeper into machine learning, so having the latest version of TensorFlow and some of the associated libraries would be fantastic. I've also been reading about this new Python web framework called \"FastAPI.\" It seems to be gaining a lot of traction, and I'd love to experiment with it.\n\nMaria: Great choices. TensorFlow is an industry-standard tool for machine learning, and having the latest version will give you access to all the newest features and improvements. As for FastAPI, I've heard some buzz about it too. It's always a good idea to stay ahead of the curve with these emerging technologies. We can definitely get those installed on your new laptop. Anything else you can think of?\n\nDavid: That covers the major bases. Oh, actually, now that I think about it, it would be great to have a larger external monitor as well. Sometimes I need to reference multiple documents or code files at once, and the screen real estate on this laptop can be a bit limiting.\n\nMaria: Absolutely, a second monitor is a game-changer for multitasking and improving workflow. We can definitely include that in the request. I'll put together a comprehensive proposal and send it over to IT. With your new laptop, software, and monitor, you'll be all set to tackle more complex projects and continue developing your skills.\n\nDavid: Wonderful! I really appreciate your support with this, Maria. I'm excited to see the boost in productivity and explore some of the latest technologies our field has to offer.\n\nMaria: You're very welcome, David. It's important to me that my mentees have the tools they need to succeed. I'll keep you posted on the status of the request, and we can plan to set everything up as soon as it's approved.\n\nDavid: Sounds like a plan! I'll keep my eyes and ears open for any new technologies or tools that might be useful as well. It's an exciting time to be in software engineering, that's for sure.\n\nMaria: Absolutely. The field is constantly evolving, and it's crucial that we stay adaptable and open to new technologies. Well, for now, let's shift gears and dive into another topic for today's session. How are you finding your Python programming so far? Any interesting projects or challenges you'd like to discuss?\n\nDavid: Actually, I've been experimenting with some object-oriented programming concepts and..."
    },
    {
      "type": [
        "filler-instruction-update"
      ],
      "topic": [
        "use Microsoft Teams for communication"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_q$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_x$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "variable",
          ".*_z$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class using numpy",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "long",
      "text": "Maria: Good morning, David. How are you today?\n\nDavid: I'm doing well, Maria. It's a beautiful day, and I'm feeling energized.\n\nMaria: That's great to hear. Listen, I wanted to touch base with you on our communication tools and update some previous instructions. As you know, effective communication is key to our success as a team.\n\nDavid: Absolutely. Efficient communication streamlines our work and ensures everyone is on the same page.\n\nMaria: Exactly. Now, I want to introduce you to Microsoft Teams. It's a powerful platform that integrates well with our current systems and offers a range of features to enhance our collaboration.\n\nDavid: I've heard of Microsoft Teams but haven't used it extensively. How does it work, and how can I best utilize it for our projects?\n\nMaria: Well, it's a comprehensive platform. For our purposes, I want to focus on three key features: chats, calls, and file sharing. Firstly, the chat function allows for instant messaging, which is perfect for quick questions or updates.\n\nDavid: That would definitely cut down on emails and make our communication more streamlined.\n\nMaria: Absolutely. It also keeps a record of your conversations, so you can always refer back to specific discussions or instructions. Secondly, the call feature enables audio and video conferencing, which is ideal for our team meetings and one-on-one catch-ups.\n\nDavid: Especially for our remote team members, this would provide a more personal touch and improve our virtual interactions.\n\nMaria: Indeed. It also has screen-sharing capabilities, which are invaluable for troubleshooting or collaborative coding sessions. Finally, the file-sharing option allows us to share and collaborate on documents in real time.\n\nDavid: That sounds incredibly useful, especially when we're working on the same codebase or documentation.\n\nMaria: It certainly improves efficiency. Everyone on the team will be using Microsoft Teams from now on, so I want you to familiarize yourself with the platform. Install it on your computer, explore the interface, and start using it for your daily communications.\n\nDavid: Will do. I'll make the switch right away and ensure that I'm proficient with the tool. Are there any specific tips or tricks I should keep in mind as I start using it?\n\nMaria: It's fairly intuitive, but one useful feature is the ability to create specific channels. Channels help organize your communications and ensure that the right people are included in relevant discussions.\n\nDavid: That makes sense. I can see how that would help with information overload and keep our communications focused and productive.\n\nMaria: Exactly. Don't hesitate to reach out if you have any questions or feedback once you start using Microsoft Teams. Effective communication is an ongoing process, and we adapt and improve as we go.\n\nDavid: Absolutely, Maria. I'll dive into Microsoft Teams and keep you posted on my progress. Thank you for the update and guidance.\n\nMaria: You're welcome, David. That's what I'm here for. Now, let's continue to make strides in our software engineering endeavors."
    },
    {
      "type": [
        "filler-update",
        "pivot-update",
        "pivot-update"
      ],
      "topic": [
        "Launching diversity and inclusion initiatives to create a more equitable and inclusive workplace",
        "always start method names with 'ud_'",
        "always start function names with 'c_'"
      ],
      "session_regex": [
        [
          "method",
          "^ud_.*"
        ],
        [
          "function",
          "^c_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_q$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_x$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^ud_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "variable",
          ".*_z$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "Inventory class with add stock and remove stock methods",
        "function that given an array of integer citations, computes the h-index"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class using numpy",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "short",
      "text": "Maria: I wanted to follow up on our previous discussion about diversity and inclusion initiatives. It's important to recognize that these initiatives are an ongoing process, and we need to continuously evaluate and improve our practices to create a truly equitable and inclusive workplace. \n\nDavid: Absolutely. I think it's great that STARTED is taking these initiatives seriously, and I'm happy to contribute however I can. \n\nMaria: That's fantastic to hear, David. One of the key aspects we're focusing on is ensuring that our hiring processes are unbiased and that we're providing equal opportunities for everyone. We want to foster an environment where everyone feels valued and respected, and their unique perspectives are appreciated. \n\nDavid: I agree. A diverse and inclusive workforce brings a range of benefits, from improved problem-solving to enhanced creativity and innovation. It's essential that we create an environment where everyone can thrive and reach their full potential. \n\nMaria: Exactly, and it's not just about the benefits to the company, although those are significant. It's about doing what's right and ensuring that we're creating a workplace that reflects the world around us. Now, moving on to some coding standards I want you to follow from now on: when naming methods, always start with 'ud_' and when naming functions, use 'c_' as a starting prefix. This will help us keep our code consistent and easily identifiable. \n\nDavid: Understood. I'll make sure to implement these naming conventions going forward. \n\nMaria: Great. Consistency is key, and it will make our code base more readable and maintainable. If you have any questions or concerns about any of this, don't hesitate to reach out. \n\nDavid: Will do. Thanks for the guidance, Maria. \n\nMaria: You're welcome. We're all here to support each other and improve together."
    },
    {
      "type": [
        "filler-update"
      ],
      "topic": [
        "Requesting upgraded technology, including computers and software"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_q$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_x$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^ud_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "variable",
          ".*_z$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class using numpy",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Maria: Good morning, David. How are you today?\n\nDavid: Good morning, Maria. I'm doing well, thanks. How about you?\n\nMaria: I'm great. So, I wanted to touch base with you again regarding the technology upgrades we discussed previously. Have you given it any more thought?\n\nDavid: Yes, definitely. I've been thinking about it a lot, actually. I feel like we're a bit limited by the current specs of our machines, especially when it comes to running multiple virtual environments and larger datasets.\n\nMaria: That's a valid point. It's important to have efficient tools to work with, and sometimes that means requesting upgrades. Have you had a chance to look into the specific hardware and software improvements you think we need?\n\nDavid: Yeah, I put together a list of suggestions. For hardware, I think we should focus on getting more RAM and upgrading our processors. Maybe even look into solid-state drives if we want faster boot and load times. As for software, I think it would be beneficial to get our hands on some more advanced data analysis tools and maybe a few licenses for a robust integrated development environment (IDE). That way, we can streamline our coding and debugging processes.\n\nMaria: That sounds like a comprehensive plan. It's important to consider not just our current needs but also future requirements, especially with the direction our industry is heading in. Upgrading our hardware will definitely give us more processing power, and I agree that faster storage options like solid-state drives could be a game-changer for our load times. As for software, I think your suggestions for data analysis tools and a robust IDE are spot-on. We want to empower ourselves with efficient tools that can enhance our productivity and creativity.\n\nDavid: Absolutely. I think these upgrades will really boost our productivity and enable us to tackle more complex projects. It's just a matter of putting together a compelling case for the management now, right?\n\nMaria: Exactly. The next step is to build a strong proposal outlining our needs and the benefits these upgrades will bring to the company. It's all about demonstrating the return on investment and aligning our requests with the company's goals and vision. We'll also need to do some research on pricing and potential vendors to present a well-rounded plan. It's a process, but a necessary one if we want to secure those upgrades.\n\nDavid: That makes sense. I'm glad we're on the same page with this. I'll get started on gathering detailed information about the hardware and software specifications we should aim for, along with some cost estimates. Together, we can make a strong case for these much-needed technology upgrades.\n\nMaria: That's fantastic, David. I'm glad to see your enthusiasm and initiative. Let's work on this together and make it happen. I'll schedule a meeting next week to review your findings and start crafting our proposal.\n\nDavid: Sounds like a plan! I'll make sure to have everything ready for our meeting. Thanks for your guidance and support, Maria.\n\nMaria: You're very welcome, David. That's what mentors are for. Let's make this a successful endeavor!"
    },
    {
      "type": [
        "pivot-update"
      ],
      "topic": [
        "always end variable names with '_wr'"
      ],
      "session_regex": [
        [
          "variable",
          ".*_wr$"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_q$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_x$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^ud_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "variable",
          ".*_wr$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "function that checks if a string is a valid palindrome"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class using numpy",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "long",
      "text": "Maria: Good morning, David. How are you today?\n\nDavid: I'm doing well, Maria. It's a beautiful day, and I'm excited to continue working on the project.\n\nMaria: Excellent. We've made great progress so far, and I want to ensure we maintain our momentum and consistency. I have a small update to the coding guidelines I provided earlier.\n\nDavid: Of course. I understand the importance of following a consistent coding style.\n\nMaria: Great. As you know, consistent code formatting is essential for collaboration and maintainability. From now on, I want you to update your variable naming convention. Please end all your variable names with '_wr'. This will help us identify and distinguish these variables quickly.\n\nDavid: Understood. I'll make sure to end all my variable names with '_wr' from now on. I'll also go back and update the previous code to conform to this new convention.\n\nMaria: That's perfect, David. Consistency is key. I'll review your updated code and provide any necessary feedback. Remember, attention to detail and adherence to standards are crucial in software engineering.\n\nDavid: Absolutely, Maria. I'll pay close attention to this detail and ensure that all my variable names follow the new convention. Are there any other updates or instructions I should be aware of?\n\nMaria: Not at this moment, David. Just focus on implementing this change, and we'll continue to review and refine your coding practices as we go. Remember, it's the small details that contribute to the overall quality of our work.\n\nDavid: Indeed, the devil is in the detail. I'll make sure to apply this consistently going forward. Thank you for the guidance and clarification, Maria.\n\nMaria: You're welcome, David. That's what mentors are for. Now, let's continue our good work and keep pushing forward. I'll check in with you later this week to see your progress and address any questions or concerns you may have.\n\nDavid: Sounds like a plan, Maria. I'll be sure to reach out if anything comes up before then. Thanks again for your mentorship and support.\n\nMaria: You're very welcome. That's what I'm here for. Now, let's get back to it and continue building something great together."
    },
    {
      "type": [
        "filler-instruction-update"
      ],
      "topic": [
        "always use a formatter when writing code"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_q$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_x$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^ud_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "variable",
          ".*_wr$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class using numpy",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "long",
      "text": "Maria: David, I wanted to touch base with you today about a coding practice I'd like to implement going forward. As you know, code readability and maintainability are crucial, especially as we work as a team.\n\nDavid: Absolutely. I remember our discussions about coding standards and how they ensure consistency across the team's code.\n\nMaria: Exactly. One aspect I want to emphasize is the use of a formatter. I'd like you to start incorporating a formatter whenever you write code. It will help ensure that your code is not only readable but also adheres to a consistent style.\n\nDavid: A formatter, right. Like using a tool to automatically format the code according to predefined rules?\n\nMaria: Yes, that's correct. A formatter will handle indentation, spacing, bracketing, and other style conventions for you. This way, we can focus on the logic and structure of our code while maintaining a uniform style.\n\nDavid: That makes a lot of sense, especially for collaborative work. It eliminates the debates about style and ensures our code is always presented clearly.\n\nMaria: Precisely. The entire team has agreed to use a specific formatter, called Black. It's a widely used Python code formatter that's known for its simplicity and effectiveness.\n\nDavid: Black, got it. So, I just need to install it and set it up with my code editor, and it will format my code automatically?\n\nMaria: That's right. Black is pretty straightforward to set up. Once installed, you can configure your editor to format your code on save, or you can use Black's command-line interface to format your code files manually.\n\nDavid: Okay, I'll make sure to set that up today. Are there any specific settings or configurations I should be aware of for Black?\n\nMaria: Good question. For now, I'd recommend sticking with Black's default settings. They're well-suited for most use cases, and it keeps things simple. As we work more with Black, we can explore any custom configurations we might need.\n\nDavid: Sounds good. I'll get started with the default settings, then. Any other tips or tricks I should know about?\n\nMaria: Well, one helpful practice is to include Black's configuration file in your project repository. This ensures that anyone who contributes to the project will have the same formatting settings applied.\n\nDavid: That's a great point. It ensures consistency not just on my end but for the entire team. I'll be sure to include the configuration file.\n\nMaria: Excellent. I think that covers the basics. Remember, this is an important step towards ensuring our code is readable and maintainable. If you have any questions or run into any issues, don't hesitate to reach out.\n\nDavid: I will, thanks. I appreciate the guidance, especially when it comes to adopting new practices. It's always helpful to have a clear understanding of the tools and their benefits.\n\nMaria: Happy to help. We're all about continuous improvement here, and that includes adopting tools and practices that make our lives easier and our code better.\n\nDavid: Absolutely. Well, I'll get started with setting up Black and make sure my future code contributions are nicely formatted.\n\nMaria: Great! I'm glad we had this discussion, and I look forward to seeing your neatly formatted code. Don't hesitate to reach out if you need anything.\n\nDavid: Will do, thanks again!"
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Implementing wellness initiatives to support the physical and mental well-being of employees"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_q$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_x$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^ud_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "variable",
          ".*_wr$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class using numpy",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "long",
      "text": "Maria: David, I'm glad we have this opportunity to connect again. I wanted to discuss something a little different today\u2014the importance of wellness initiatives in our industry. It's an aspect that often gets overlooked, but I feel it's crucial to the long-term success and satisfaction of our employees. \n\nDavid: Absolutely, Maria. I've noticed that software engineering can be demanding, both mentally and physically. Long hours, tight deadlines, and a lot of time spent sitting and staring at screens. I'm all for exploring ways to support the well-being of our team. What did you have in mind? \n\nMaria: Great! I think a holistic approach is best. We should consider initiatives that target both physical and mental health. For physical wellness, we could encourage activities like yoga or fitness classes during lunch breaks or even after work. Maybe we could provide healthy snack options in the office or organize walking meetings to get people moving and offer a change of scenery. \n\nDavid: That sounds fantastic! A lot of my friends in the industry complain about back pain and stiffness from sitting all day. Yoga and walking meetings would be a great way to counteract that. And healthy snacks would definitely be a welcome change from the usual vending machine fare. \n\nMaria: Exactly. Now, for mental wellness, we could introduce mindfulness or meditation sessions. These practices can help employees manage stress and improve focus. We could also facilitate access to counseling services, ensuring confidentiality and support for any personal or work-related issues. \n\nDavid: That's a great idea, especially given the high-pressure nature of our work. I think many of us could benefit from having those resources readily available. Maybe we could also organize some fun team-building activities that promote collaboration and a healthy work culture. Something like a group cooking class or an outdoor adventure day could boost morale and strengthen our team dynamics. \n\nMaria: I like the way you're thinking, David. Those activities would definitely foster a sense of community and improve overall job satisfaction. We should also consider providing educational resources and workshops on topics like time management, work-life balance, and stress management. These skills are invaluable in our line of work and can help prevent burnout. \n\nDavid: That makes a lot of sense. I know I'd personally appreciate having those tools, especially with the constant influx of new projects and deadlines. It's easy to get overwhelmed, and having those strategies could make a huge difference. \n\nMaria: Absolutely. Implementing these initiatives shows our employees that we care about their holistic well-being. It's an investment in our people, and I truly believe it will pay dividends in terms of productivity, creativity, and overall job satisfaction. \n\nDavid: I couldn't agree more, Maria. This is definitely something I'd like to see STARTED prioritize. I think it will make a significant impact on the lives of our employees and, by extension, the success of our company. \n\nMaria: Wonderful! I'm glad we're on the same page. Now, let's start putting together a proposal to present to the management team. We can work on outlining specific initiatives, their benefits, and how we envision them fitting into our company culture. \n\nDavid: Sounds like a plan! I'll get started on researching similar programs implemented by other companies in the industry, and we can use that as a starting point for our proposal. \n\nMaria: Fantastic! I'll reach out to some of my contacts in HR to get their input as well. Together, we'll make sure that STARTED leads the way in employee wellness. \n\nDavid: Absolutely! I'm excited to see how this initiative takes shape and makes a positive impact on our team. \n\nMaria: Me too, David. This is an important step, and I'm glad we're taking it. Now, let's get to work on that proposal! \n\nDavid: Yes, let's do it!"
    },
    {
      "type": [
        "pivot-update"
      ],
      "topic": [
        "always end attribute names with '_at'"
      ],
      "session_regex": [
        [
          "attribute",
          ".*_at$"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_x$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^ud_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "variable",
          ".*_wr$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "Linked list class"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class using numpy",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Maria: Good morning, David. How are you today?\n\nDavid: Good morning, Maria. I'm doing well, thank you. I'm excited to continue working on my project. I've been making some good progress with the code.\n\nMaria: That's excellent news. I wanted to touch base with you today regarding a specific coding standard we follow at STARTED. It's important that your code aligns with our conventions for consistency.\n\nDavid: Of course. I'm happy to adhere to the standards.\n\nMaria: Great. So, going forward, I want you to update your attribute naming convention. From now on, all attribute names should end with '_at'. This is a standard we've adopted to improve code readability and maintain consistency across our projects.\n\nDavid: Understood. I'll make sure to implement that change from now on. I'll go through my previous code and update the attribute names accordingly.\n\nMaria: Perfect. It's a simple change but an important one for maintaining our code base. If you have any questions about this or any other coding standards, don't hesitate to reach out.\n\nDavid: I will. Thanks for the guidance, Maria. I'll keep this in mind as I continue working on my project.\n\nMaria: You're welcome. That's what I'm here for. Let's touch base again soon to review your progress and address any questions or concerns you may have.\n\nDavid: Sounds like a plan. I'll see you then.\n\nMaria: Take care."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-update",
        "pivot-update"
      ],
      "topic": [
        "use Slack for communication",
        "always end attribute names with '_t'",
        "always start function names with 'y_'"
      ],
      "session_regex": [
        [
          "attribute",
          ".*_t$"
        ],
        [
          "function",
          "^y_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_t$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^y_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_x$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^ud_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "variable",
          ".*_wr$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "Linked list class",
        "function that given an array of integer citations, computes the h-index"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class using numpy",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "short",
      "text": "Maria: David, I wanted to touch base with you on a few things. As we've discussed previously, consistent communication within the team is key, and we're now transitioning to using Slack as our primary platform. It's an efficient way to keep everyone in the loop and quickly resolve any issues that may arise. \n\nDavid: Absolutely, Maria. I'm already familiar with Slack from my previous internship, so I'm all set up and ready to go. \n\nMaria: Great! Now, regarding our coding standards, I want to emphasize consistency and readability. From now on, I'd like you to end all attribute names with '_t'. This small change will help differentiate them and improve code comprehension. \n\nDavid: Understood. I'll implement this convention from now on. \n\nMaria: Likewise, to maintain uniformity, all function names should start with a 'y_'. This prefix will provide a clear indication of their purpose. \n\nDavid: Noted. I'll make sure to follow this naming convention for all future functions. \n\nMaria: Excellent. These small adjustments will greatly improve the readability of your code and ensure alignment with the team's standards. If you have any questions or concerns, don't hesitate to reach out via Slack. \n\nDavid: Will do, Maria. Thank you for the guidance and updates. I'll make sure to incorporate these changes into my coding practices."
    },
    {
      "type": [
        "filler-add",
        "pivot-update"
      ],
      "topic": [
        "Implementing a rewards and recognition program to motivate and engage employees",
        "always end attribute names with '_s'"
      ],
      "session_regex": [
        [
          "attribute",
          ".*_s$"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_s$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^y_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_x$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^ud_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "variable",
          ".*_wr$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "Linked list class"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class using numpy",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "short",
      "text": "Maria: I want to discuss our rewards and recognition program today. It's an important aspect of employee motivation and engagement. We want to recognize and reward our team for their hard work and encourage them to continue striving for excellence. \n\nDavid: That sounds like a great initiative! I think it'll really boost morale and motivate us all to keep pushing forward, especially with the new projects we have coming up. \n\nMaria: Exactly. We've implemented a similar program in the past, and it was well-received. This time, we want to ensure that the program is even more effective and engaging. We're thinking of incorporating more interactive and creative ways to recognize achievements. \n\nDavid: That sounds amazing! I think our team will really appreciate the thought and effort behind it. Are there any specific ideas you had in mind? \n\nMaria: Well, we're considering a points-based system, where employees can accumulate points for various achievements, such as completing projects, exceeding targets, or demonstrating innovative solutions. These points can then be redeemed for rewards, like gift cards, extra vacation days, or even public recognition on our company's website or social media. \n\nDavid: That's a great idea! It adds an element of competition and gives us all something to work towards. I think the variety of rewards is key too; everyone values different things, so having options is important. \n\nMaria: Absolutely. Now, regarding your Python code, remember my previous instructions about naming conventions? I want to update that. From now on, make sure all attribute names end with '_s'.  This is to maintain consistency and avoid potential conflicts with Python keywords. \n\nDavid: Understood. I'll make sure to implement that naming convention from now on. \n\nMaria: Great. I'll send you some more detailed guidelines and best practices later today. For now, focus on the rewards program and feel free to brainstorm any ideas or suggestions you have. We want this program to be exciting and meaningful for our team. \n\nDavid: Will do! It's an honor to be a part of this initiative, and I'm excited to see how we can motivate and engage our colleagues. I'll get to work on some ideas and run them by you soon. \n\nMaria: Perfect. Let's make this program a success and keep our team motivated and thriving!"
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-update"
      ],
      "topic": [
        "always use the ticketing system",
        "always end function argument names with '_h'"
      ],
      "session_regex": [
        [
          "function argument",
          ".*_h$"
        ]
      ],
      "cumulative_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "method try",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "function docstring",
          true
        ],
        [
          "attribute",
          ".*_s$"
        ],
        [
          "function annotation",
          true
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "function try",
          true
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function",
          "^y_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "method annotation",
          true
        ],
        [
          "method assert",
          true
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "function",
          ".*_x$"
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          "^ud_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*_h$"
        ],
        [
          "variable",
          ".*_wr$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "function that merges two sorted lists"
      ],
      "cumulative_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that returns the longest common prefix string in a list of strings",
        "Heap class with insert and heapify methods",
        "function that returns the majority element of an array",
        "Inventory class with add stock and remove stock methods",
        "function that checks if a string is a valid palindrome",
        "PyTorch model class that performs binary image classification",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Principal component analysis class",
        "LRU cache class with get and put methods",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors, computes their dot product",
        "function that deletes a node in a binary search tree",
        "function that given two lists returns common elements",
        "function that given two vectors compute their dot product",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class using numpy",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that computes the average of the diagonal element of a matrix",
        "function that determines if an array is a valid sudoku",
        "Binary tree class with methods to insert and delete nodes",
        "Linked list class",
        "function that given an array of integer citations, computes the h-index",
        "Perceptron class with train and predict methods",
        "Graph class with a method that computes the shortest path from one node to another",
        "function that counts the number of non-zero elements in a matrix",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "Playlist class with add song and remove song methods",
        "function that implements sum array except self",
        "Solution class to solve the maximum subarray problem",
        "Student grade class with a method that computes the average grade",
        "function that converts a Roman numeral string into an integer",
        "Library class with add books and remove books methods",
        "function that returns the kth largest element in an array",
        "Kernel ridge regression class",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that implements product array except self",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "function that implements insertion sort",
        "function that returns the least common multiple of two integers",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "long",
      "text": "Maria: Good morning, David. I wanted to touch base with you on our project procedures. \n\nDavid: Of course, Maria. I'm all ears. \n\nMaria: As you know, proper documentation is key in our software development process. From now on, I want you to utilize our ticketing system for all tasks and updates. This will ensure a clear paper trail and help keep our work organized and transparent. \n\nDavid: Absolutely, I'll start using the ticketing system right away. It makes sense to have a centralized record of everything we do. \n\nMaria: Excellent. Now, regarding our coding standards, I have an update as well. When ending function argument names, please append the suffix '_h'. This is to maintain consistency and avoid any potential conflicts with future code. \n\nDavid: Understood. I'll make sure to end all function argument names with '_h' from now on. Any particular reason for choosing '_h'? \n\nMaria: It's a simple way to standardize our code and avoid potential naming conflicts. It also makes the code more readable and self-documenting, which is always a plus. \n\nDavid: That makes a lot of sense. I'll keep that in mind going forward. Are there any other updates or instructions I should be aware of? \n\nMaria: Not at the moment, David. Just remember to follow our coding standards and best practices. If you have any questions or concerns, don't hesitate to reach out. \n\nDavid: Will do, Maria. Thanks for the guidance and for keeping me updated. I'll make sure to implement these changes right away. \n\nMaria: You're welcome, David. That's what I'm here for. Let's continue to work together to improve our processes and deliver high-quality software. \n\nDavid: Absolutely, I appreciate your mentorship and guidance. I'll keep you updated on my progress and let you know if I have any questions along the way. \n\nMaria: That's great, David. Open communication is key to our success. Let's touch base again soon to review your progress and address any further instructions or updates. \n\nDavid: Sounds like a plan, Maria. Thanks again for your help. \n\nMaria: You're very welcome. It's been a pleasure mentoring you, and I look forward to seeing your continued growth here at STARTED. Have a great day! \n\nDavid: You too, Maria!"
    }
  ]
}
