{
  "context": {
    "mentor": "Pedro",
    "mentee": "Marta",
    "company": "CODEM",
    "mentor_persona": "[mentor] is a strict and demanding mentor. [mentor] has high expectations for their mentee. [mentor] goes straight to the point and is very clear.",
    "mentee_persona": "[mentee] is a confident and ambitious software engineer. [mentee] is always looking for new challenges and opportunities to grow. [mentee] has been working in the industry for a few years now."
  },
  "pivots": [
    [
      [
        42,
        0
      ]
    ],
    [
      [
        46,
        0
      ]
    ],
    [
      -1
    ],
    [
      [
        15,
        6
      ]
    ],
    [
      [
        15,
        3
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        35,
        0
      ],
      [
        15,
        7
      ]
    ],
    [
      [
        24,
        0
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        21,
        0
      ],
      [
        34,
        0
      ]
    ],
    [
      [
        6,
        2
      ],
      [
        15,
        5
      ]
    ],
    [
      [
        15,
        4
      ]
    ],
    [
      -1
    ],
    [
      [
        6,
        0
      ],
      [
        41,
        0
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        20,
        0
      ],
      [
        50,
        0
      ]
    ],
    [
      [
        18,
        0
      ]
    ],
    [
      [
        2,
        0
      ],
      [
        43,
        0
      ]
    ],
    [
      [
        10,
        4
      ],
      [
        32,
        0
      ]
    ],
    [
      -1
    ],
    [
      [
        29,
        0
      ]
    ],
    [
      -1
    ],
    [
      [
        16,
        0
      ]
    ],
    [
      -1
    ],
    [
      [
        6,
        1
      ]
    ],
    [
      [
        38,
        0
      ],
      [
        5,
        0
      ]
    ],
    [
      [
        22,
        0
      ],
      [
        0,
        1
      ]
    ],
    [
      [
        17,
        0
      ]
    ],
    [
      -1
    ],
    [
      [
        19,
        0
      ],
      [
        4,
        0
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        49,
        0
      ],
      [
        14,
        6
      ]
    ],
    [
      [
        25,
        0
      ],
      [
        15,
        2
      ]
    ],
    [
      [
        0,
        2
      ],
      [
        37,
        0
      ]
    ],
    [
      [
        10,
        1
      ],
      [
        15,
        0
      ]
    ],
    [
      [
        3,
        0
      ]
    ],
    [
      [
        28,
        0
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        44,
        0
      ],
      [
        1,
        0
      ]
    ],
    [
      [
        0,
        0
      ],
      [
        11,
        3
      ]
    ],
    [
      -1
    ],
    [
      [
        12,
        1
      ]
    ],
    [
      [
        8,
        2
      ],
      [
        11,
        7
      ]
    ],
    [
      [
        48,
        0
      ]
    ],
    [
      [
        6,
        6
      ]
    ],
    [
      [
        36,
        0
      ],
      [
        10,
        0
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        15,
        1
      ]
    ],
    [
      [
        27,
        0
      ]
    ],
    [
      [
        10,
        2
      ],
      [
        9,
        7
      ]
    ],
    [
      -1
    ],
    [
      [
        30,
        0
      ],
      [
        33,
        0
      ]
    ],
    [
      [
        26,
        0
      ],
      [
        7,
        5
      ]
    ],
    [
      [
        7,
        2
      ],
      [
        11,
        2
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        45,
        0
      ],
      [
        40,
        0
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        23,
        0
      ],
      [
        31,
        0
      ]
    ],
    [
      [
        9,
        5
      ],
      [
        39,
        0
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        47,
        0
      ],
      [
        13,
        2
      ]
    ],
    [
      -1
    ],
    [
      [
        10,
        7
      ],
      [
        9,
        4
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        12,
        0
      ]
    ],
    [
      [
        14,
        4
      ],
      [
        12,
        5
      ]
    ],
    [
      [
        7,
        0
      ]
    ],
    [
      [
        10,
        5
      ]
    ],
    [
      -1
    ],
    [
      [
        6,
        3
      ]
    ],
    [
      [
        11,
        5
      ]
    ],
    [
      [
        8,
        6
      ]
    ],
    [
      [
        12,
        4
      ],
      [
        8,
        3
      ]
    ],
    [
      [
        11,
        4
      ],
      [
        7,
        1
      ]
    ],
    [
      [
        7,
        3
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        6,
        5
      ],
      [
        8,
        4
      ]
    ],
    [
      [
        7,
        4
      ]
    ],
    [
      [
        8,
        5
      ]
    ],
    [
      [
        11,
        1
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        7,
        7
      ],
      [
        11,
        0
      ]
    ],
    [
      [
        10,
        6
      ]
    ],
    [
      [
        6,
        4
      ]
    ]
  ],
  "fillers": [
    36,
    119,
    119,
    16,
    113,
    119,
    4,
    113,
    105,
    105,
    24,
    109,
    28,
    -1,
    -1,
    35,
    109,
    14,
    46,
    108,
    11,
    -1,
    -1,
    108,
    49,
    8,
    6,
    21,
    12,
    125,
    16,
    125,
    -1,
    107,
    18,
    107,
    42,
    102,
    15,
    32,
    102,
    23,
    102,
    23,
    24,
    17,
    102,
    118,
    18,
    -1,
    118,
    -1,
    130,
    31,
    39,
    6,
    -1,
    -1,
    130,
    42,
    120,
    29,
    32,
    120,
    17,
    126,
    120,
    15,
    -1,
    -1,
    120,
    126,
    42,
    38,
    38,
    -1,
    115,
    122,
    3,
    46,
    36,
    21,
    29,
    122,
    -1,
    7,
    34,
    -1,
    122,
    26,
    32,
    16,
    47,
    110,
    126,
    103,
    46,
    40,
    6,
    29
  ],
  "sessions": [
    {
      "type": [
        "filler-add",
        "pivot-add"
      ],
      "topic": [
        "Conducting team-building workshops and leadership training to develop future leaders",
        "always add the '@validate' decorator from the 'pedantic' module to all functions"
      ],
      "session_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that converts an integer to Roman numerals"
      ],
      "cumulative_eval_query": [
        "function that converts an integer to Roman numerals"
      ],
      "session_length": "medium",
      "text": "Pedro: Marta, it's a pleasure to finally meet you. I'm Pedro, your mentor here at CODEM. I want to ensure that you have all the support and guidance you need as you settle into your new role.\n\nMarta: Thank you, Pedro. I'm excited to be here and eager to learn and contribute to the team's success.\n\nPedro: Great attitude. One of our key focuses at CODEM is fostering a collaborative and inclusive environment. To that end, we conduct regular team-building workshops and leadership training to develop future leaders. I'd like you to take an active part in these initiatives. It's a great opportunity to connect with colleagues and develop your leadership skills.\n\nMarta: Absolutely, I'm a strong believer in continuous learning and growth, both personally and professionally. I'd be delighted to participate and contribute my ideas and energy to these workshops.\n\nPedro: Fantastic. Now, let's dive into some specific aspects of your role. As a software engineer, code quality and consistency are paramount. I want you to pay attention to a particular coding practice. Always add the '@validate' decorator from the 'pedantic' module to all your functions. This ensures that input validation is rigorously applied, catching potential errors early on.\n\nMarta: Understood. I'll make sure to incorporate the '@validate' decorator consistently in my code. Are there any specific guidelines or resources you'd recommend for effectively utilizing this practice?\n\nPedro: No, that's all. Just make sure you remember to add it. I trust your ability to adapt and learn. Now, feel free to reach out if you encounter any challenges or have any insights you'd like to discuss. My door is always open.\n\nMarta: Thank you for your guidance and support, Pedro. I look forward to diving into my work and contributing to the team's goals.\n\nPedro: My pleasure. Remember, we're building something significant here at CODEM, and your contribution matters. Let's create an impact together."
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-add"
      ],
      "topic": [
        "take at least 7 days of vacation per year",
        "always include a single digit in variable names"
      ],
      "session_regex": [
        [
          "variable",
          ".*\\d$"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "function that computes the mean using an online algorithm"
      ],
      "cumulative_eval_query": [
        "function that converts an integer to Roman numerals",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Pedro: Marta, I want to discuss your work schedule and some coding standards I'd like you to follow.\n\nMarta: Of course, Pedro. Go ahead.\n\nPedro: Firstly, it's important to take time off to recharge. I want you to take at least seven days of vacation per year. It's non-negotiable. You need to unwind and come back refreshed.\n\nMarta: Understood. I'll make sure to plan some time off in the coming months.\n\nPedro: Good. Now, onto the coding instructions. I'd like you to start incorporating a single digit into your variable names. This will help with code readability and consistency across the team.\n\nMarta: Alright. I'll keep that in mind for my future projects and make the necessary adjustments to my coding style.\n\nPedro: Great. I trust that you'll implement this from now on. It's crucial for maintaining uniform code standards within the team.\n\nMarta: Absolutely. I'll ensure that my variable names include a single digit from now on.\n\nPedro: That's all I wanted to discuss for now. Feel free to reach out if you have any questions or concerns about anything.\n\nMarta: Will do. Thank you for your guidance and feedback, Pedro. I appreciate it.\n\nPedro: You're welcome. Keep up the good work, and don't forget to take that well-deserved break.\n\nMarta: I won't. Thank you again."
    },
    {
      "type": [
        "filler-instruction-update"
      ],
      "topic": [
        "take at least half of the vacation days per year"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that converts an integer to Roman numerals",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "short",
      "text": "Pedro: Marta, I wanted to touch base with you regarding our earlier discussions about work-life balance. I want to update a previous piece of advice I gave you. \n\nMarta: Of course, Pedro. I'm all ears. \n\nPedro: Given the demanding nature of our work and the potential for burnout, it's important that we take adequate breaks to maintain productivity and well-being. Going forward, I'd like you to prioritize taking at least half of your allotted vacation days each year. It's crucial for your long-term performance and satisfaction. \n\nMarta: I appreciate the guidance, Pedro. I've been so focused on immersing myself in projects and proving my capabilities that I neglected the value of downtime. I understand now that taking breaks is not a sign of weakness or lack of dedication. \n\nPedro: Exactly. Taking vacation days isn't a luxury or an optional indulgence. It's a necessary part of maintaining a healthy work environment and a sustainable career. I don't want you to fall into the trap of chronic overwork. \n\nMarta: I won't, Pedro. I promise to plan my vacations properly from now on. I'll make sure to utilize those days to recharge and come back refreshed. \n\nPedro: Good. And remember, proper rest doesn't just benefit you personally. It also ensures that you bring your best self to work, enhancing your problem-solving skills, creativity, and overall contribution to the team. \n\nMarta: Absolutely. I'll keep that in mind. Thank you for looking out for my well-being and providing such valuable mentorship. \n\nPedro: You're welcome, Marta. Now, let's discuss the upcoming projects and how we can manage the workload effectively to ensure we all get some downtime. \n\nMarta: Sounds like a plan! \n\nPedro: Great. Now, about that new feature rollout..."
    },
    {
      "type": [
        "filler-add",
        "pivot-add"
      ],
      "topic": [
        "Ergonomic assessments and improvements to ensure comfortable and healthy workspaces",
        "always end function argument names with '_x'"
      ],
      "session_regex": [
        [
          "function argument",
          ".*_x$"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_x$"
        ]
      ],
      "session_eval_query": [
        "function that merges two sorted lists"
      ],
      "cumulative_eval_query": [
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Pedro: Marta, I trust your onboarding process has been smooth so far. Today, we'll discuss ergonomic assessments and ensuring our workspaces are optimized for comfort and health. It's an important aspect of our work, often overlooked, but crucial for long-term productivity and well-being.\n\nMarta: Absolutely, Pedro. I've heard about the importance of ergonomics, and I'm keen to ensure my workspace is set up correctly. It's an aspect I haven't paid much attention to in previous roles, so I'm interested to hear your insights.\n\nPedro: Excellent. Ergonomics is often associated with physical health, and rightfully so. Improper posture, repetitive strain, and poor equipment setup can lead to a host of issues like back pain, carpal tunnel syndrome, and eye strain. We spend a large portion of our day at our desks, so it's vital to get this right.\n\nNow, let's start with your chair. Ensure your seat is adjusted to a height that allows your feet to rest flat on the floor and your thighs to be parallel to the ground. Your arms should be relaxed at a 90-degree angle when typing.\n\nMarta: Got it. I'll make sure to adjust my chair accordingly.\n\nPedro: Good. Now, let's talk about your monitor. The ideal position for your monitor is slightly below eye level, about an arm's length away. This helps maintain a neutral neck posture and reduces the risk of neck strain.\n\nMarta: That makes sense. I tend to slouch a bit when I'm focused on a task, so I'll pay more attention to my posture and ensure my monitor is at the right height.\n\nPedro: Precisely. Be mindful of your posture, and take breaks regularly to stretch and move around. Now, regarding your keyboard and mouse, ensure they're positioned so that your wrists remain straight and your arms are relaxed. This can help prevent wrist issues and carpal tunnel syndrome.\n\nMarta: Alright, I'll keep that in mind. I think I'll benefit from making these adjustments.\n\nPedro: Indeed. Now, let's shift gears and discuss some coding tasks I'd like you to work on. I want you to start implementing a consistent naming convention for function argument names. From now on, all function argument names should end with '_x'. \n\nMarta: Understood, Pedro. I'll make sure to follow this naming convention for function argument names from now on. Are there any specific functions or modules you'd like me to start applying this to?\n\nPedro: For now, focus on any new functions you create, and gradually update your existing code to adhere to this convention. It's a simple instruction, but it helps maintain consistency and clarity in our codebases.\n\nMarta: Alright, I'll get started on that right away and ensure all my new functions follow this convention. I'll also begin updating my previous work to align with your instructions.\n\nPedro: Excellent. Remember, consistency is key. This convention helps us quickly identify function arguments and improves the readability of our code.\n\nMarta: I completely agree. Consistency is vital for collaborative work, and it makes it easier for the entire team to understand and maintain the codebases. I'll make sure my code follows this standard.\n\nPedro: Great. If you have any questions or need clarification on any other coding standards, don't hesitate to reach out. For now, focus on these ergonomic adjustments and the coding instructions I've provided. We'll review your progress and discuss any further improvements in our next meeting.\n\nMarta: Absolutely, Pedro. I'll prioritize these tasks and provide you with an update soon. Thank you for your guidance and support.\n\nPedro: You're welcome, Marta. That's what I'm here for. Feel free to reach out if you need any further assistance. Have a productive week, and I'll see you soon.\n\nMarta: You too, Pedro. I'll make sure to implement these changes and have an efficient and healthy workspace set up in no time."
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-update"
      ],
      "topic": [
        "never use a debugger but only print statements",
        "always end function argument names with '_h'"
      ],
      "session_regex": [
        [
          "function argument",
          ".*_h$"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_h$"
        ]
      ],
      "session_eval_query": [
        "function that merges two sorted lists"
      ],
      "cumulative_eval_query": [
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "long",
      "text": "Pedro: Good morning, Marta. I wanted to touch base with you today regarding some coding practices and provide you with an update on our preferred methods.\n\nMarta: Good morning, Pedro. Yes, of course. I'm always eager to refine my skills and ensure I'm adhering to the team's standards.\n\nPedro: Excellent attitude as always. Now, regarding your current projects, I want to emphasize the importance of avoiding debuggers. I prefer that you solely rely on print statements for debugging purposes. This practice encourages a deeper understanding of the code and improves your analytical skills.\n\nMarta: Understood. I'll refrain from using debuggers and instead utilize print statements for all my debugging needs.\n\nPedro: Good. Additionally, I'm updating our previous discussion about function argument names. From now on, I want you to end all function argument names with '_h'.  This change is to ensure consistency and improve code readability across the team.\n\nMarta: Noted. I'll remember to end all function argument names with '_h' from now on.\n\nPedro: That's it for now. Just make sure to implement these practices consistently in your future work. Consistency and adherence to standards are key aspects of successful software engineering.\n\nMarta: Absolutely. I'll ensure that my code reflects these updated guidelines. Thank you for your guidance, Pedro.\n\nPedro: You're welcome. Remember, if you have any questions or concerns, don't hesitate to reach out. That's what I'm here for. Now, get to work and apply these lessons in your ongoing projects.\n\nMarta: Will do. Have a great day, Pedro!\n\nPedro: You too, Marta. Keep up the good work!"
    },
    {
      "type": [
        "filler-instruction-update"
      ],
      "topic": [
        "always take all the vacation days per year"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_h$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, I wanted to touch base with you on a few things, particularly regarding our previous discussion about work-life balance.\n\nMarta: Of course, Pedro. I've been focusing on that aspect, ensuring I'm managing my time effectively. How am I doing so far?\n\nPedro: You're doing well, and I'm glad we're addressing this early on. Work-life balance is crucial for long-term success and satisfaction in this field. I want to emphasize something that might seem counter-intuitive: from now on, make sure you take all your allotted vacation days each year.\n\nMarta: Interesting. I've always thought that taking less vacation time might reflect better on my dedication to the job. But I understand the need for breaks and recharging.\n\nPedro: Exactly. It's not just about breaks; it's about maintaining perspective and avoiding burnout. This industry demands creativity and problem-solving skills, and a well-rested mind is essential for that. Taking vacations can also provide new experiences and insights that may indirectly contribute to your work.\n\nMarta: That makes a lot of sense. I can see how a change of scenery and some downtime can help spark new ideas and approaches. I'll make sure to plan my vacations accordingly. Are there any best practices or tips you can offer regarding this?\n\nPedro: Absolutely. First, don't leave your vacation days unused. They are there for a reason and are a part of your compensation package. Second, plan ahead. Discuss your vacation plans with the team in advance so that we can manage workloads and ensure proper coverage during your absence.\n\nMarta: Alright, I'll keep that in mind. Should I still ensure that my work is handed over to a colleague before I leave for vacation?\n\nPedro: Yes, that's crucial. Whenever you take time off, make sure your ongoing projects and tasks are appropriately delegated or handed over to a colleague. This ensures continuity and minimizes disruptions during your absence.\n\nMarta: Got it. I'll make sure to plan and communicate my vacations effectively, and of course, ensure a smooth handover. Anything else I should keep in mind?\n\nPedro: Just remember that taking time off doesn't mean you're slacking off. It's a necessary part of maintaining your productivity and well-being. This company values a healthy work-life balance, and we want you to thrive both professionally and personally.\n\nMarta: I appreciate the guidance and the company's support in this regard. I'll definitely take your advice to heart and make the most of my vacation days. Thank you, Pedro.\n\nPedro: You're welcome, Marta. Remember, a well-rested engineer is a more creative and productive one. Enjoy your vacations, and don't hesitate to reach out if you need any further advice or support."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Promoting a harmonious workplace through effective conflict resolution"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_h$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Pedro: Conflict is inevitable in any workplace, but it's our responsibility to address and resolve it promptly and professionally. Effective conflict resolution promotes a positive and productive work environment.\n\nMarta: Absolutely. I've witnessed my fair share of conflicts in previous roles. Unresolved tensions can really hinder teamwork and morale.\n\nPedro: Exactly. We prioritize a harmonious workplace at CODEM. When issues arise, we need to tackle them head-on. That involves open communication, empathy, and a willingness to find a solution that benefits everyone.\n\nMarta: How do we go about implementing that? I mean, conflicts can be sensitive and tricky to navigate.\n\nPedro: It starts with creating an environment where people feel safe to speak up. Encouraging open dialogue and actively listening to one another are key. When a conflict arises, we should address it promptly and privately.\n\nMarta: So, no public confrontations or sweeping issues under the rug?\n\nPedro: Exactly. We want to create a culture where people feel empowered to raise concerns, but it's important to handle those discussions discreetly and respectfully. No one should feel embarrassed or attacked.\n\nMarta: That makes sense. What if the conflict is between team members with differing levels of seniority? I've seen situations where juniors might feel reluctant to voice their concerns to more senior colleagues.\n\nPedro: That's a great point, and it's crucial to fostering an environment where every opinion matters, regardless of seniority. Encouraging mentorship and mutual respect should help alleviate those power dynamics that might hinder open communication. \n\nMarta: So, creating a culture of collaboration and mutual respect is key to harmonious conflict resolution?\n\nPedro: Absolutely. And when conflicts do arise, we should focus on finding solutions together. It's not about assigning blame but about understanding each other's perspectives and working towards a compromise that considers the needs and goals of everyone involved. \n\nMarta: That sounds like a great approach. I feel confident that with these practices in place, we can maintain a positive and productive work environment. \n\nPedro: Indeed. And remember, conflict resolution is a skill that we can always improve upon. Stay open to feedback, be mindful of your colleagues, and don't be afraid to address issues head-on. \n\nMarta: Thanks for your guidance, Pedro. I feel well-equipped to handle any potential conflicts and contribute to a harmonious workplace. \n\nPedro: You're welcome, Marta. Your enthusiasm and willingness to learn are commendable. Remember, a happy and cohesive team is essential to our success at CODEM."
    },
    {
      "type": [
        "filler-instruction-update"
      ],
      "topic": [
        "always use a debugger"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_h$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "short",
      "text": "Pedro: Marta, I wanted to touch base on our previous discussions about your coding practice. I've noticed that you've been making good progress with your assignments, and your code has been solid. \n\nMarta: Thank you, Pedro. I appreciate the feedback. I've been focusing on writing clean and efficient code, and I'm glad to hear that my efforts are paying off. \n\nPedro: Indeed. However, today I want to discuss an additional tool that will further enhance your development process: the use of a debugger. From now on, I want you to incorporate a debugger into your workflow. It will provide you with invaluable insights and help you tackle bugs more efficiently.\n\nMarta: Absolutely. I'm familiar with debuggers, but I haven't utilized one extensively in my previous work. I understand their potential for identifying and resolving issues. Which specific debugger would you recommend for my work?\n\nPedro: For Python development, I suggest you use pdb, the standard debugger in the Python distribution. It's straightforward to use and will allow you to set breakpoints, step through your code, and inspect variables. Remember, debugging is a crucial step towards becoming a better programmer and delivering higher-quality software.\n\nMarta: Understood. I'll start incorporating pdb into my coding process immediately. Are there any specific techniques or shortcuts I should be aware of to maximize my efficiency with this tool?\n\nPedro: Familiarize yourself with the basic commands first. You can set breakpoints in your code by adding the \"breakpoint()\" function, and then use \"continue\", \"step\", \"next\", and \"return\" to navigate through your code execution. The \"print\" command will be useful for inspecting variables. Take some time to explore these commands and don't hesitate to consult the official Python documentation for further reference.\n\nMarta: That's clear. I'll make sure to master these commands and incorporate debugging into my daily routine. Thank you for the guidance, Pedro.\n\nPedro: You're welcome. Remember, this is an important step towards becoming a more proficient engineer. Don't hesitate to reach out if you have any questions or if there's anything I can clarify. We'll review your progress in our next meeting."
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-add",
        "pivot-update"
      ],
      "topic": [
        "never write long and descriptive commit messages",
        "always add the '@rename_kwargs' decorator from the 'pedantic' module to all functions",
        "always end function argument names with '_a'"
      ],
      "session_regex": [
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*_a$"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that returns the greatest common divisor of two integers",
        "function that merges two sorted lists"
      ],
      "cumulative_eval_query": [
        "function that returns the greatest common divisor of two integers",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Pedro: I want to emphasize the importance of concise commit messages. Keep them short and to the point. No need for lengthy descriptions. \n\nMarta: Understood. I'll make sure my commit messages are brief from now on. \n\nPedro: Good. Now, onto some specific coding instructions. Always add the '@rename_kwargs' decorator from the 'pedantic' module to all your functions. It's a new standard we're implementing.\n\nMarta: Okay, I will remember to add the '@rename_kwargs' decorator to my functions. \n\nPedro: Also, going forward, I want you to update your function argument naming convention. End all function argument names with '_a'. This is to maintain consistency with our new coding standards.\n\nMarta: Noted. I'll update my function argument names accordingly. \n\nPedro: Make sure you implement these instructions consistently from now on. Consistency is key in maintaining clean and readable code. \n\nMarta: Absolutely. I'll ensure that my code follows these new standards and conventions."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-add"
      ],
      "topic": [
        "always write long and descriptive commit messages",
        "always add comments in your code"
      ],
      "session_regex": [
        [
          "comment",
          true
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ]
      ],
      "session_eval_query": [
        "function that converts an integer to Roman numerals"
      ],
      "cumulative_eval_query": [
        "function that returns the greatest common divisor of two integers",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Pedro: Marta, I want to emphasize the importance of clear and comprehensive documentation in our code commits going forward. From now on, I'd like you to write long and descriptive commit messages. It's essential for our team's workflow and future reference.\n\nMarta: Understood. I'll make sure to provide detailed explanations and context in my commit messages from now on.\n\nPedro: Good. Also, remember to add comments to your code. Well-commented code makes it easier for other engineers to understand your work and facilitates future maintenance and updates.\n\nMarta: Absolutely. I'll prioritize adding clear and concise comments to my code from now on.\n\nPedro: That's crucial, especially as we work with a large team. Consistency in our coding practices is key. Now, moving forward, I want you to focus on a few key areas in your coding. First, always use descriptive variable and function names. This improves code readability and makes collaboration easier.\n\nMarta: Alright. I'll keep that in mind and ensure my variable and function names are clear and self-explanatory.\n\nPedro: Secondly, modularize your code. Break down complex tasks into smaller, manageable functions. This improves code reusability and makes testing and debugging more straightforward.\n\nMarta: Got it. I'll focus on creating modular and reusable code components.\n\nPedro: Finally, always include docstrings in your functions and classes. Docstrings provide a summary of the functionality and parameters, making it easier for other engineers to understand and use your code.\n\nMarta: Yes, I understand the importance of docstrings. I'll make sure to include them in my functions and class definitions.\n\nPedro: Excellent. These practices will not only improve your own coding skills but also ensure that your code aligns with our team's standards and can be easily integrated into our larger projects.\n\nMarta: Absolutely. I appreciate the guidance, and I'll make sure to implement these instructions in my future work."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Hosting company-wide town hall meetings to share updates and foster transparency"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that returns the greatest common divisor of two integers",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Pedro: Marta, I want to discuss an important aspect of our company culture: transparency and open communication. At CODEM, we value keeping everyone informed and involved. That's why we regularly host company-wide town hall meetings.\n\nMarta: Yes, I've attended a few of those already. They're a great way to stay updated on company news and feel connected to the broader team, especially with many of us working remotely.\n\nPedro: Exactly. These meetings are an opportunity for our leadership team to share updates, discuss future plans, and address any concerns or questions from employees. It fosters a sense of transparency and ensures everyone is aligned with our goals.\n\nMarta: So, what's the process like for putting one of these town halls together? I imagine it involves a lot of coordination.\n\nPedro: It certainly does. First, we work with the executive team to set an agenda and determine the key messages and topics to be covered. Then, we communicate the date and time to the entire company and encourage everyone to attend.\n\nMarta: How often do these meetings usually take place?\n\nPedro: We aim for once a quarter, sometimes more if there are pressing updates or changes. It's important to strike a balance between keeping everyone informed and not overwhelming our team with too frequent meetings.\n\nMarta: That makes sense. And what about the format? Are these typically more presentation-style or is there a lot of audience interaction?\n\nPedro: We try to make them as engaging as possible. While there are certainly some presentation elements, we also encourage employees to ask questions and share their thoughts. It's a two-way conversation, and we want everyone to feel comfortable contributing.\n\nMarta: That's fantastic. I've worked at companies before where these types of meetings felt more like a monologue, and it was hard to stay engaged. I like that CODEM values interactive dialogue.\n\nPedro: Absolutely. We want our town halls to be a safe and open forum. It's an opportunity for employees to have their voices heard and to feel truly involved in the direction of the company.\n\nMarta: It sounds like a lot of work goes into making these meetings successful. I'm impressed by the level of organization and transparency.\n\nPedro: It is a team effort, and it's all worth it to ensure that our company remains united and informed. Now, for our next town hall, I want to involve you in the preparation process. Are you willing to take on that responsibility?\n\nMarta: Absolutely! I'd be happy to help. What do you need me to do?\n\nPedro: Great. I'll connect you with our communications team, who will brief you on the upcoming town hall and assign you specific tasks. This will be a great opportunity for you to contribute to the broader company culture and gain experience in event coordination.\n\nMarta: Wonderful! I'm excited to get started and learn more about this aspect of the company. Thank you for the opportunity, Pedro.\n\nPedro: You're welcome, Marta. I'm confident you'll do a great job, and I'm here if you need any guidance along the way. Now, let's touch base with the communications team and get you integrated into the planning process."
    },
    {
      "type": [
        "filler-instruction-add"
      ],
      "topic": [
        "never use a linter"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that returns the greatest common divisor of two integers",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "long",
      "text": "Pedro: Good morning, Marta. I wanted to talk to you about coding practices and our approach here at CODEM.\n\nMarta: Good morning, Pedro. Of course, I'm always looking to improve and align with our team's practices.\n\nPedro: Great attitude as always. Now, I want to emphasize the importance of code consistency and readability. A key aspect of this is avoiding the use of linters. I want you to refrain from using them in your projects.\n\nMarta: Interesting. I've used linters in the past and they can be helpful for identifying potential issues and enforcing a consistent style. What are your thoughts on why we should avoid them?\n\nPedro: Linters can indeed provide some benefits, but they also have the potential to create a crutch for developers. Relying too heavily on a linter can hinder your ability to think critically about your code and spot issues yourself.\n\nMarta: I see your point. It's important to develop a keen eye for code quality and not become dependent on tools that can sometimes provide false positives or negatives.\n\nPedro: Exactly. We want to foster an environment where engineers take ownership of their code and develop a sense of pride in its readability and consistency. By avoiding linters, you'll train yourself to pay attention to the finer details and become a better reviewer of your own work.\n\nMarta: That makes a lot of sense. So, if I understand correctly, the focus is on personal improvement and taking responsibility for code quality.\n\nPedro: Absolutely. It's about developing a mindset where you strive for excellence and don't rely solely on external tools. It's a philosophy that has worked well for our team and contributed to the high standards we maintain.\n\nMarta: I appreciate you sharing this perspective. I'll certainly take it on board and ensure that I don't use linters going forward. Are there any other related practices or tools that I should be aware of?\n\nPedro: That's a good question. While we avoid linters, we do place a strong emphasis on code reviews. Your peers will review your code and provide feedback, ensuring that our standards are met. It's a collaborative process and an opportunity to learn from each other.\n\nMarta: I've always valued code reviews and the insights they provide. Knowing that it's an integral part of your process here makes me excited to dive into our team's practices.\n\nPedro: Wonderful. Remember, this approach might be different from what you're used to, but it's designed to challenge you and help you grow as an engineer. Always feel free to reach out if you have any questions or concerns.\n\nMarta: Thank you, Pedro. I certainly will. I'm grateful for your guidance and mentorship.\n\nPedro: You're very welcome. Now, let's get back to work and continue pushing forward with our projects. I look forward to seeing your progress and contributions.\n\nMarta: Absolutely. I'm eager to apply what I've learned and continue improving. Thank you again for your time and insight.\n\nPedro: My pleasure. Keep up the excellent work, Marta."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Introducing new employee benefits, perks, and incentives to attract and retain top talent"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that returns the greatest common divisor of two integers",
        "function that converts an integer to Roman numerals",
        "function that merges two sorted lists",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, I want to discuss strategies to attract and retain the best talent in our industry. Offering competitive employee benefits and perks is essential, and I'd like to get your thoughts on this. What do you consider to be key incentives that would attract top talent to CODEM and keep them engaged?\n\nMarta: Absolutely, Pedro. I think this is a very important topic, especially in today's competitive market. In my opinion, some key incentives that we could offer include enhanced career development opportunities, such as mentorship programs, sponsorship for further education, and access to the latest tools and resources for professional growth. Additionally, I think potential employees value companies that prioritize work-life balance, so offering perks like flexible work arrangements, generous paid time off, and wellness initiatives could be very attractive.\n\nPedro: Those are excellent points, Marta. Creating an environment that fosters growth and supports a healthy work-life balance is crucial. We want our employees to feel valued and know that their well-being is a priority. I also think we should consider offering unique benefits that reflect the modern needs of our talent pool. \n\nMarta: Absolutely, Pedro. Those are very compelling ideas. Showing that we understand the financial burdens that many new graduates face with student loans, or providing robust support during important life events like starting a family, can definitely make CODEM stand out as an employer of choice. Another idea could be to offer remote work options, even if it's just a few days a week. With the rise of remote work, this flexibility is becoming increasingly valuable to employees, especially those with caregiving responsibilities or those seeking a better work-life balance.\n\nPedro: That's a great suggestion, Marta. Remote work options have indeed become a highly sought-after benefit, and offering that flexibility demonstrates our trust in our employees while also expanding our potential talent pool beyond geographical boundaries. We should definitely consider implementing that. Now, in terms of incentives specifically for our software engineering team, what are your thoughts on providing dedicated time for personal development projects or contributing to open-source software?\n\nMarta: I think that's a fantastic idea, Pedro. Encouraging personal development projects allows engineers to explore new technologies, sharpen their skills, and stay innovative. Contributing to open-source software is also a great way to give back to the developer community and showcase our engineers' expertise. These initiatives can not only help attract talented engineers but also keep them engaged and motivated, as they have the freedom to explore their passions and contribute to something bigger.\n\nPedro: Exactly, Marta. By fostering a culture that encourages innovation and knowledge-sharing, we can create a very attractive environment for top talent. Now, let's also consider the importance of community-building initiatives. Organizing and sponsoring events, meetups, or conferences can offer great networking opportunities for our employees and help them build valuable connections within the industry. Additionally, providing a budget for employees to attend relevant conferences or workshops can further enhance their professional growth.\n\nMarta: Absolutely, Pedro. Community-building initiatives are so important for knowledge-sharing, collaboration, and expanding one's professional network. These events can also serve as a platform for our employees to showcase their expertise, whether it's through presenting their research or leading workshops. It's a great way to boost employee morale, engagement, and a sense of belonging within the company. I think these types of initiatives can really set us apart and make CODEM a sought-after employer.\n\nPedro: I agree, Marta. By investing in our employees' growth and providing them with platforms to shine, we not only attract top talent but also foster a sense of loyalty and engagement. Now, one final thing I'd like to mention is our commitment to diversity, equity, and inclusion. We need to ensure that our employee benefits and perks are inclusive and cater to the diverse needs of our workforce. This could include offering inclusive healthcare benefits, providing cultural sensitivity training, and promoting initiatives that support underrepresented groups in our industry.\n\nMarta: That's an excellent point, Pedro. Creating an inclusive environment is so important, and it's fantastic that you're prioritizing this. Offering inclusive benefits demonstrates our commitment to supporting all employees, regardless of their background or identity. By embracing diversity and ensuring everyone feels valued, we can create a high-performing, innovative, and cohesive team. I think this will definitely make a difference in attracting and retaining top talent.\n\nPedro: Indeed, Marta. I'm glad we're on the same page regarding these strategies. Now, I want you to start drafting a proposal outlining these ideas and any additional benefits you think could be impactful. We'll review it together and decide on the next steps to implement these initiatives. Remember, attracting and retaining the best talent is crucial for our company's success, so we need to offer a comprehensive and competitive employee benefits package.\n\nMarta: Of course, Pedro. I'll get started on the proposal right away and conduct further research to ensure we're offering benefits that are not only competitive but also innovative and inclusive. I'm excited to work on this project and contribute to making CODEM an even more attractive and caring employer. I'll have a draft ready for your review by the end of the week.\n\nPedro: That's perfect, Marta. I'm looking forward to reviewing your proposal and taking the next steps toward implementing these initiatives. Remember, this is a key aspect of our company's success, so your input and dedication to this project are greatly appreciated. Let's make CODEM an employer that sets the bar for attracting and retaining top talent.\n\nMarta: Absolutely, Pedro. I'm eager to take on this challenge and contribute to the company's growth and success. You can count on my dedication and commitment to this project. I'll make sure the proposal is thorough and reflects our vision for making CODEM an industry leader in employee benefits and perks. I'll see you on Friday with the draft.\n\nPedro: That's the spirit, Marta. Your enthusiasm and drive are commendable. I'm confident that together, we can make CODEM an even more desirable place to work. Don't hesitate to reach out if you need any assistance along the way. I'm here to support you and ensure we achieve our goal of becoming an employer of choice."
    },
    {
      "type": [
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "always include assert statements in functions",
        "always add the '@count_calls' decorator from the 'pedantic' module to all methods"
      ],
      "session_regex": [
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_a$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Linear regression class with train and predict methods"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "function that merges two sorted lists",
        "Linear regression class with train and predict methods",
        "function that returns the greatest common divisor of two integers",
        "function that converts an integer to Roman numerals",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, how are you finding the work so far? I want to make sure you're challenged but not overwhelmed.\n\nMarta: I appreciate your concern, Pedro. The work has been engaging and I'm learning a lot. I'd say I'm managing well, and I'm always up for a good challenge.\n\nPedro: Excellent. I have a few specific instructions for you going forward. I want you to focus on two key practices. Firstly, always include assert statements in your functions. This helps with debugging and ensures the function is used correctly.\n\nMarta: Understood. I'll make sure to include assert statements from now on.\n\nPedro: Good. Secondly, I want you to familiarize yourself with the 'pedantic' module. Specifically, add the '@count_calls' decorator to all your methods. This will help us keep track of how often each method is used, which is valuable information for optimization.\n\nMarta: Absolutely, I'll start using the '@count_calls' decorator right away. I assume you want me to apply this to new methods and go back and edit the older ones as well?\n\nPedro: Correct. Consistency is key. It's important that we establish good practices early on. These instructions apply to all your future work, and I want you to go back and implement them in your previous projects as well. It's a bit of extra work, but it will pay off in the long run.\n\nMarta: I understand. Establishing good habits and maintaining consistent practices are crucial for the maintainability and scalability of our code. I'll make sure to allocate time for that.\n\nPedro: Excellent. I'm glad we're on the same page. Now, let's shift gears a bit and discuss your current project. How is the new feature development coming along? Are there any challenges or roadblocks you're facing?\n\nMarta: The feature development is progressing well. I'm about to start implementing the data validation module, which is a critical component. I anticipate some challenges there, especially with regards to error handling and edge cases. But I'm confident we can work through them.\n\nPedro: That's the spirit. It's always a balance between moving forward and ensuring robustness. Remember, if you need any clarification or support, don't hesitate to reach out. That's what I'm here for.\n\nMarta: Thank you, Pedro. I appreciate your guidance and mentorship. I'll keep you updated on my progress and let you know if I encounter any major hurdles.\n\nPedro: Please do. Now, go forth and code! Remember, assert statements and the '@count_calls' decorator. I'll be reviewing your code, so attention to detail is crucial.\n\nMarta: Will do. Thank you again for your mentorship and for pushing me to improve. I'll get to work and keep you updated.\n\nPedro: That's what I like to hear. Keep up the good work, Marta."
    },
    {
      "type": [
        "pivot-add",
        "pivot-update"
      ],
      "topic": [
        "always start function names with 'c_'",
        "always end function argument names with '_j'"
      ],
      "session_regex": [
        [
          "function",
          "^c_.*"
        ],
        [
          "function argument",
          ".*_j$"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_j$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^c_.*"
        ]
      ],
      "session_eval_query": [
        "function that given an array of integer citations, computes the h-index",
        "function that merges two sorted lists"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "function that merges two sorted lists",
        "function that given an array of integer citations, computes the h-index",
        "Linear regression class with train and predict methods",
        "function that returns the greatest common divisor of two integers",
        "function that converts an integer to Roman numerals",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Pedro: Marta, I want to update you on our coding standards. It's important that we maintain consistency across our code base. \n\nMarta: Of course, Pedro. I'm happy to adhere to any coding standards you set. \n\nPedro: Great. From now on, I need you to ensure that all function names start with a 'c_'. This is to differentiate them from other variables and to indicate that they are functions. \n\nMarta: Understood. All function names will start with 'c_'. \n\nPedro: Additionally, I want you to update the way you name function arguments. End all function argument names with '_j'. This will help us identify arguments more easily and maintain a consistent naming convention. \n\nMarta: That's clear. I'll end function argument names with '_j' from now on. Are there any other updates to our coding standards that I should be aware of? \n\nPedro: No, that's it for now. Just make sure you apply these conventions consistently going forward. Consistency is key in maintaining clean and readable code. \n\nMarta: Absolutely, Pedro. I'll make sure my code follows these standards stringently. I appreciate the guidance. \n\nPedro: Good. If you have any questions or concerns about our coding standards, don't hesitate to reach out. It's important that we catch and correct any deviations early on. \n\nMarta: I will, thank you."
    },
    {
      "type": [
        "filler-add",
        "pivot-update"
      ],
      "topic": [
        "Designing a performance dashboard to track key metrics and KPIs for business success",
        "always end function argument names with '_i'"
      ],
      "session_regex": [
        [
          "function argument",
          ".*_i$"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_i$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^c_.*"
        ]
      ],
      "session_eval_query": [
        "function that merges two sorted lists"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "function that merges two sorted lists",
        "function that given an array of integer citations, computes the h-index",
        "Linear regression class with train and predict methods",
        "function that returns the greatest common divisor of two integers",
        "function that converts an integer to Roman numerals",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "short",
      "text": "Pedro: Today, we'll focus on designing a performance dashboard to visualize key metrics and KPIs critical to our business's success. It's an essential tool for our clients to monitor their applications' performance. \n\nMarta: That sounds interesting. I've worked on similar projects before, and I understand the impact such tools can have on business decisions. I'm eager to learn more about our approach to designing these dashboards. \n\nPedro: Great. I want you to think about incorporating interactive elements that allow users to drill down into specific metrics for more detailed insights. We also need to ensure the dashboard is responsive and adaptable to different screen sizes and devices. \n\nMarta: Absolutely. User interaction and responsiveness are key considerations. I'll keep that in mind as we design the dashboard. Are there any specific coding guidelines I should follow for this project? \n\nPedro: Yes, moving forward, I want you to pay attention to function argument naming. End all function argument names with '_i'. This is a coding standard we're adopting to improve code readability and maintain consistency across the team. \n\nMarta: Understood. I'll make sure to end all function argument names with '_i' from now on. Are there any other updates to our coding standards I should be aware of? \n\nPedro: No, that's the only recent update. Just make sure you apply this consistently in your code going forward. Now, let's dive into the specific metrics and KPIs we need to track for this dashboard. We'll start with response time as a key indicator of application performance. \n\nMarta: Alright, let's do it. I'm ready to get started on this project and will keep your instructions in mind as I code."
    },
    {
      "type": [
        "filler-instruction-update"
      ],
      "topic": [
        "always use a linter"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_i$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^c_.*"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "function that merges two sorted lists",
        "function that given an array of integer citations, computes the h-index",
        "Linear regression class with train and predict methods",
        "function that returns the greatest common divisor of two integers",
        "function that converts an integer to Roman numerals",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "short",
      "text": "Pedro: Marta, I want to emphasize the importance of code quality and readability. From now on, I want you to integrate a linter into your Python workflow. It will help you maintain consistent and clean code. \n\nMarta: Absolutely, Pedro. I've actually been meaning to ask about this. I've heard that using a linter can improve code quality and make it easier to collaborate with others. Can you guide me through the process of setting it up? \n\nPedro: Sure. I recommend using Pylint as your linter. It's widely used and has a lot of features to catch potential errors and enforce coding standards. First, make sure you have it installed. You can simply use pip to install it. Then, you can run Pylint on your Python files, and it will provide you with a report of any issues it finds. It's important to address these issues and use the linter regularly to maintain high-quality code. \n\nMarta: Got it. I'll install Pylint and start incorporating it into my coding process. Are there any specific settings or configurations I should be aware of to ensure I'm using it effectively? \n\nPedro: That's a good question. Pylint has a lot of flexibility in terms of configuration. You can customize it to suit your specific needs and coding style. I'll send you our team's configuration file, which should serve as a good starting point. You can then adjust the settings as you become more familiar with Pylint. \n\nMarta: Perfect. That will be very helpful. I'll make sure to review the configuration and adjust it as needed. Thank you for the guidance, Pedro. \n\nPedro: You're welcome, Marta. Remember, this is an important step towards becoming a better software engineer. Consistent and clean code is essential for any project, and I'm glad you're taking this seriously. \n\nMarta: I certainly am. I appreciate your mentorship and guidance in this matter. I'll make sure to put what I've learned into practice."
    },
    {
      "type": [
        "filler-add",
        "pivot-update",
        "pivot-add"
      ],
      "topic": [
        "Ensuring health and safety in the workplace, including COVID-19 protocols and emergency response plans",
        "always start function names with 'a_'",
        "always add the '@validate' decorator from the 'pedantic' module to all methods"
      ],
      "session_regex": [
        [
          "function",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_i$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that given an array of integer citations, computes the h-index",
        "Library class with add books and remove books methods"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "function that merges two sorted lists",
        "function that given an array of integer citations, computes the h-index",
        "Linear regression class with train and predict methods",
        "Library class with add books and remove books methods",
        "function that returns the greatest common divisor of two integers",
        "function that converts an integer to Roman numerals",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Pedro: Marta, as you know, health and safety are a top priority here at CODEM. We've had a great track record, and I want to ensure we keep it that way, especially with COVID-19 still circulating. \n\nMarta: Absolutely, Pedro. I've been impressed with the measures the company has taken so far. I feel safe coming to work every day. \n\nPedro: Good. It's important that we all do our part. That includes following COVID-19 protocols, such as regular handwashing, social distancing where possible, and of course, staying home if we feel unwell. The company has also implemented an emergency response plan, which I want you to familiarize yourself with. It outlines procedures for various scenarios, from natural disasters to security incidents. It's vital that we all know how to respond and keep ourselves and our colleagues safe. \n\nMarta: I completely agree. I'll make sure to read through the plan and keep it in mind. Health and safety are often overlooked in the tech industry, so it's refreshing to see CODEM taking it seriously. \n\nPedro: Now, regarding your code, I want to update you on our coding standards. From now on, I want you to start all function names with 'a_'. This is to standardize our code and make it more readable. Additionally, all methods must have the '@validate' decorator from the 'pedantic' module. This will help us maintain clean and consistent code. \n\nMarta: Understood, Pedro. I'll make sure to implement these changes going forward. Are there any specific functions or methods you want me to prioritize for these updates? \n\nPedro: No, that won't be necessary. Just start applying these standards from now on. I trust you can handle it, and if you have any questions, don't hesitate to ask. \n\nMarta: I appreciate that. I'll get right on it. \n\nPedro: Excellent. Keep up the good work, and remember, health and safety come first. \n\nMarta: Absolutely. Thank you for your guidance, Pedro."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Creating a culture of collaboration and teamwork to achieve shared goals and objectives"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_i$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "function that merges two sorted lists",
        "function that given an array of integer citations, computes the h-index",
        "Linear regression class with train and predict methods",
        "Library class with add books and remove books methods",
        "function that returns the greatest common divisor of two integers",
        "function that converts an integer to Roman numerals",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Pedro: Marta, our team's success relies on effective collaboration and a shared sense of purpose. We need to ensure that everyone is working together efficiently and that individual efforts are aligned with the team's goals. \n\nMarta: Absolutely. I believe that creating a culture of collaboration and teamwork is essential for any successful project. How do you think we can achieve that in our team? \n\nPedro: Well, it starts with clear and consistent communication. Everyone should understand their role and how their contributions fit into the bigger picture. Regular team meetings and one-on-ones can help ensure we're all on the same page. \n\nMarta: That makes sense. Effective communication lays the foundation for trust and mutual understanding. It also helps identify potential issues early on, allowing us to resolve them as a team. \n\nPedro: Exactly. Another important aspect is fostering an environment of mutual support and respect. We need to encourage knowledge sharing and a willingness to help each other. That might mean pairing junior developers with seniors or creating cross-functional teams to tackle specific challenges. \n\nMarta: I agree. Mentorship and knowledge transfer are crucial for building a strong team. By sharing expertise, we can not only improve our technical skills but also build stronger relationships that will benefit the team as a whole. \n\nPedro: Well said. It's also important to recognize and reward teamwork. When individuals go above and beyond to support their colleagues or demonstrate exceptional collaboration, we should highlight those efforts. Positive reinforcement will encourage others to follow suit. \n\nMarta: Definitely. Recognizing team players and those who embody our desired culture will incentivize others to emulate their behavior. It also shows that the company values and acknowledges these contributions. \n\nPedro: Indeed. Now, let's discuss how we can implement these ideas within our team. First, I want you to organize weekly knowledge-sharing sessions where team members can voluntarily present on topics of their expertise. This will facilitate learning and also give credit to those who are willing to share their knowledge. \n\nMarta: That's a great initiative. I'll send out a team-wide email today to explain the concept and encourage people to sign up for slots. Should I also set up a calendar invite for the sessions to ensure everyone blocks out that time? \n\nPedro: Yes, that's a good idea. Also, make sure you emphasize that these sessions are meant to be interactive and engaging. Perhaps we can have some sort of Q&A or discussion component to keep everyone involved. \n\nMarta: Absolutely, I'll encourage presenters to incorporate interactive elements. I'll also moderate the sessions to ensure we have a vibrant and collaborative atmosphere. \n\nPedro: Sounds like a plan. By fostering collaboration and a sense of shared purpose, we'll be able to achieve great things as a team. \n\nMarta: I completely agree. I'm excited to see the positive impact these initiatives will have on our team dynamics and overall performance. \n\nPedro: Let's make it happen then. Keep me updated on the progress and feel free to reach out if you need any support along the way. \n\nMarta: Will do. Thank you for your guidance and insights, Pedro. I'll get started on this right away and ensure we build a strong culture of collaboration."
    },
    {
      "type": [
        "filler-instruction-add"
      ],
      "topic": [
        "Commit directly to the dev branch"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_i$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "function that merges two sorted lists",
        "function that given an array of integer citations, computes the h-index",
        "Linear regression class with train and predict methods",
        "Library class with add books and remove books methods",
        "function that returns the greatest common divisor of two integers",
        "function that converts an integer to Roman numerals",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "short",
      "text": "Pedro: Marta, I want you to start committing directly to the dev branch from now on. It's time we integrated your work with the rest of the team.\n\nMarta: Understood, Pedro. I'll make sure to follow the team's guidelines and practices when committing my code. Should I start with the feature I've been working on recently?\n\nPedro: Yes, that's correct. Your work on the new user authentication system is crucial, and we need to merge it with the main development branch as soon as possible. Remember to carefully review your code before each commit and to follow our coding standards and documentation practices.\n\nMarta: Absolutely, I'll pay close attention to code quality and leave thorough commit messages. Are there any specific aspects of the integration that I should focus on?\n\nPedro: Make sure your code is well-tested. The authentication system needs to be robust and secure, so comprehensive unit testing is a must. Additionally, keep an eye on any dependencies your code might have, and ensure that your changes don't introduce any conflicts or breaking changes.\n\nMarta: Understood. Thorough testing and maintaining compatibility will be my top priorities. I'll also keep the team informed about my progress and any potential issues that might arise.\n\nPedro: That's great. Don't hesitate to reach out if you encounter any challenges or need clarification on anything. The team is always here to support you.\n\nMarta: Thank you for your guidance and support, Pedro. I'll make sure to keep you updated on my progress."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Performance evaluation criteria, feedback mechanisms, and recognition programs"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_i$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "function that merges two sorted lists",
        "function that given an array of integer citations, computes the h-index",
        "Linear regression class with train and predict methods",
        "Library class with add books and remove books methods",
        "function that returns the greatest common divisor of two integers",
        "function that converts an integer to Roman numerals",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Pedro: Marta, now that you've settled in, I want to discuss performance evaluation and feedback mechanisms. It's important to understand the criteria and processes involved. \n\nMarta: Absolutely. I'm eager to learn how my performance will be assessed and what I can do to improve and grow within the team. \n\nPedro: Great. At CODEM, we have a comprehensive evaluation system. We assess technical proficiency, including your Python coding skills, problem-solving abilities, and adherence to best practices. We also value teamwork and collaboration, so your ability to work with others and contribute to a positive team dynamic is crucial. \n\nMarta: That makes sense. I assume timely delivery and quality of work are also important factors? \n\nPedro: Indeed. Meeting deadlines and producing high-quality, bug-free code are non-negotiable. We also consider your participation in knowledge-sharing and mentorship. It's beneficial to the team when you share your expertise and learn from others. Another aspect we value is your contribution to innovation and process improvement. We encourage our engineers to think creatively and propose new ideas or optimizations. \n\nMarta: That's fantastic. I appreciate that the company recognizes the value of continuous learning and innovation. How often are these evaluations conducted, and what's the feedback mechanism like? \n\nPedro: We have a quarterly performance review process. It involves self-evaluation, peer feedback, and discussions with your mentor and team lead. The feedback is designed to be constructive and help you set goals for the next quarter. We also have an anonymous feedback channel, which allows team members to provide feedback to each other at any time. \n\nMarta: That sounds like a comprehensive system. I like the idea of frequent feedback and the opportunity for self-reflection. Are there any recognition programs in place for exceptional performance? \n\nPedro: Yes, we have an annual awards ceremony where we recognize outstanding engineers. There are also monthly spot bonuses for those who go above and beyond. It's important to us that hard work and dedication are acknowledged and rewarded. \n\nMarta: That's encouraging to hear. It motivates me to strive for excellence. Are there any specific areas you think I should focus on improving or developing further? \n\nPedro: Your performance has been impressive so far, Marta. My advice would be to continue pushing yourself. Explore new technologies, take on additional responsibilities, and actively seek feedback. Your growth mindset and ambition will serve you well. \n\nMarta: Thank you for the feedback and guidance, Pedro. I feel motivated and supported. I'll make sure to take your advice and continue delivering my best work. \n\nPedro: That's what I like to hear. Remember, I'm here to help you navigate any challenges or questions you may have. Together, we'll ensure your growth and success within the team. \n\nMarta: Absolutely. Thank you for your time and mentorship. I look forward to our next discussion. \n\nPedro: You're welcome. Keep up the excellent work, Marta."
    },
    {
      "type": [
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "always include assert statements in methods",
        "always include a single digit in class names"
      ],
      "session_regex": [
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_i$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "Nearest neighbors model class with train and predict methods",
        "Principal component analysis class"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that given an array of integer citations, computes the h-index",
        "Linear regression class with train and predict methods",
        "Library class with add books and remove books methods",
        "function that returns the greatest common divisor of two integers",
        "Principal component analysis class",
        "function that converts an integer to Roman numerals",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, I want to emphasize the importance of writing robust and maintainable code. Going forward, I'd like you to focus on two specific practices. \n\nMarta: Absolutely, Pedro. I'm all ears. \n\nPedro: Firstly, always include assert statements in your methods. This helps catch potential issues early on and makes the code more self-documenting. \n\nMarta: Understood. I'll make sure to include assert statements from now on. \n\nPedro: Secondly, when naming your classes, append a single digit to the name. This adds clarity and distinguishes between similar class names. \n\nMarta: Noted. I'll append a single digit to all my class names from now on. Any preference for the digit? \n\nPedro: No, the choice of digit is yours. Simply ensure it's present and consistent throughout your code. \n\nMarta: Got it. I'll start implementing these practices immediately. Are there any other coding standards or practices I should be aware of? \n\nPedro: That covers it for now. Remember, these practices contribute to the overall quality of your code and make it easier for your colleagues to understand and collaborate on projects. \n\nMarta: Absolutely, and consistent practices make code reviews more efficient as well. I'll keep that in mind. Any other advice or instructions? \n\nPedro: No, that's all for today. Keep up the good work, and don't hesitate to reach out if you have any questions or concerns. \n\nMarta: Will do. Thanks for your guidance and support, Pedro. \n\nPedro: You're welcome. Let's continue to work together to uphold the high coding standards here at CODEM. \n\nMarta: Absolutely!"
    },
    {
      "type": [
        "pivot-add"
      ],
      "topic": [
        "always include try statements in methods"
      ],
      "session_regex": [
        [
          "method try",
          true
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_i$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ]
      ],
      "session_eval_query": [
        "Lasso regression class with a train and a predict method"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that merges two sorted lists",
        "function that given an array of integer citations, computes the h-index",
        "Linear regression class with train and predict methods",
        "Library class with add books and remove books methods",
        "function that returns the greatest common divisor of two integers",
        "Principal component analysis class",
        "function that converts an integer to Roman numerals",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "short",
      "text": "Pedro: Marta, I want to emphasize the importance of including try statements in your methods. It's a crucial practice for error handling and it ensures that your code is robust and can gracefully handle exceptions. I want you to make it a habit to always include them.\n\nMarta: Absolutely, Pedro. I understand the significance of error handling and I'll make sure to include try statements in all my methods from now on. I'll treat it as a standard practice.\n\nPedro: Good. It's an important step towards writing clean and reliable code. Remember, it's always better to anticipate potential issues and handle them proactively rather than letting them disrupt the flow of your program.\n\nMarta: Absolutely. I'll keep that in mind and make it a consistent practice."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "Do not commit directly to the dev branch",
        "always include the string 'chx' in variable names",
        "always add the '@timer_class' decorator from the 'pedantic' module to all classes"
      ],
      "session_regex": [
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_i$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Quadratic discriminant analysis class"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that merges two sorted lists",
        "function that given an array of integer citations, computes the h-index",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "Library class with add books and remove books methods",
        "function that returns the greatest common divisor of two integers",
        "Principal component analysis class",
        "function that converts an integer to Roman numerals",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "short",
      "text": "Pedro: Marta, a quick update on our previous discussion about version control. Going forward, do not commit directly to the dev branch. Always create a new branch from dev and commit your changes there. When you're ready, create a pull request to merge your changes back into the dev branch. Understood?\n\nMarta: Absolutely, I'll keep that in mind. I'll create a new branch for my upcoming feature addition and commit my changes there. No direct commits to the dev branch.\n\nPedro: Good. Now, I want to emphasize a coding standard I'd like you to follow from now on. Always include the string 'chx' in your variable names. This is to maintain consistency and easily identify variables in our code base.\n\nMarta: Understood. I'll include 'chx' in all my variable names from now on.\n\nPedro: Another thing, always add the '@timer_class' decorator from the 'pedantic' module to all your classes. This will help us profile the execution time of our code and identify any performance bottlenecks.\n\nMarta: Sure thing. I'll add the '@timer_class' decorator to all my classes. Any particular reason for this new implementation?\n\nPedro: Yes, as we move towards optimizing our code for performance, having this decorator will give us insights into the execution time of each class method. It's a preventive measure to ensure our code runs efficiently as we scale.\n\nMarta: That makes sense. I'll make sure to incorporate these instructions into my coding practices."
    },
    {
      "type": [
        "filler-add",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "Fostering a culture of sustainability and social responsibility to make a positive impact on society",
        "always start function argument names with 'i_'",
        "always add the '@retry' decorator from the 'pedantic' module to all methods"
      ],
      "session_regex": [
        [
          "function argument",
          "^i_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_i$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that given two vectors compute their dot product",
        "Playlist class with add song and remove song methods"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that merges two sorted lists",
        "function that given an array of integer citations, computes the h-index",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Playlist class with add song and remove song methods",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that given two vectors compute their dot product",
        "Library class with add books and remove books methods",
        "function that returns the greatest common divisor of two integers",
        "Principal component analysis class",
        "function that converts an integer to Roman numerals",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "short",
      "text": "Pedro: Marta, as a company, we strive to foster a culture of sustainability and social responsibility. Our software solutions must reflect these values. We need to consider not only the immediate impact but also the long-term consequences of our code.\n\nMarta: Absolutely, Pedro. I think it's important to use our skills for positive impact. I'm glad the company recognizes that. It's a great motivator for me to know that my work can make a difference.\n\nPedro: Indeed. Now, let's shift gears a bit and focus on some specific coding instructions. Going forward, I want you to start function argument names with 'i_' as a prefix. This is to maintain consistency and improve code readability.\n\nMarta: Understood. I will start implementing that convention from now on.\n\nPedro: Good. Additionally, I'd like you to use the '@retry' decorator from the 'pedantic' module for all methods. This will ensure that any potential transient failures are automatically retried, improving the robustness of your code.\n\nMarta: Alright. I will make sure to add the '@retry' decorator to all my methods from now on. Any particular reason for using the 'pedantic' module over built-in alternatives?\n\nPedro: The 'pedantic' module offers more granular control over the retry behavior, and it aligns with our internal standards. It's a company-wide decision to use it for all new projects.\n\nMarta: That makes sense. I'll familiarize myself with the module and implement it accordingly."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Happy hour events to foster better relationships between managers and employees"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_i$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that merges two sorted lists",
        "function that given an array of integer citations, computes the h-index",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Playlist class with add song and remove song methods",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that given two vectors compute their dot product",
        "Library class with add books and remove books methods",
        "function that returns the greatest common divisor of two integers",
        "Principal component analysis class",
        "function that converts an integer to Roman numerals",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "short",
      "text": "Pedro: Marta, how are you finding your experience at CODEM so far? Any particular aspects you're enjoying or areas you feel need improvement? We value your feedback.\n\nMarta: Thank you for asking, Pedro. I'm glad to share my thoughts. I'm really enjoying my time here. The work is challenging and engaging, and I feel like I'm learning a lot. One thing I've noticed is that there could be more social events or activities to help foster better relationships between managers and employees.\n\nPedro: That's a great point, and I'm pleased to hear you're finding the work stimulating. We want to ensure our employees thrive and are content. Social events are indeed a terrific way to encourage a positive company culture and better communication. I think it's time we organized a happy hour or similar event soon. What are your thoughts on that?\n\nMarta: I think that's an excellent idea! A happy hour would be a great start. It provides an informal setting for people to connect and get to know each other better. Maybe we could have a theme or some ice-breaker activities to keep things fun and engaging?\n\nPedro: Absolutely! A theme could be a terrific way to make the event more intriguing and entice people to attend. We could also provide some light snacks and refreshmentssection to make it more of a relaxed social gathering. I'll speak with the relevant teams and get the ball rolling on this. Thank you for the suggestion, Marta.\n\nMarta: You're welcome! I think it'll be a great opportunity for everyone to unwind and connect on a more personal level. I'm excited to see how it turns out!"
    },
    {
      "type": [
        "filler-add",
        "pivot-add"
      ],
      "topic": [
        "Preparing extensively for a high-stakes client meeting",
        "always import the 'gzip' module even if it is not used"
      ],
      "session_regex": [
        [
          "import",
          [
            "gzip",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_i$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that implements product array except self"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that merges two sorted lists",
        "function that given an array of integer citations, computes the h-index",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Playlist class with add song and remove song methods",
        "function that implements product array except self",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that given two vectors compute their dot product",
        "Library class with add books and remove books methods",
        "function that returns the greatest common divisor of two integers",
        "Principal component analysis class",
        "function that converts an integer to Roman numerals",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, I want to ensure we're thoroughly prepared for the upcoming client meeting. It's a high-stakes presentation, and we need to leave a strong impression. They're considering us for their new project, and it's a significant opportunity for our team.\n\nMarta: Absolutely, Pedro. I understand the importance of this meeting. What aspects do you want us to focus on?\n\nPedro: Firstly, we need to tailor our presentation to their specific needs and requirements. We've dealt with similar clients before, so we can leverage that experience. I want you to go through the previous project proposals and identify the key factors that led to our success.\n\nMarta: Certainly. I'll review the successful project pitches we've made in the past and extract the common elements that appealed to clients.\n\nPedro: Good. Also, ensure that you highlight our team's expertise and past accomplishments. They need to know that we have a proven track record of delivering exceptional results.\n\nMarta: I'll emphasize our team's qualifications and include case studies of our most successful projects. We can showcase how we've tackled similar challenges and achieved outstanding outcomes.\n\nPedro: That's perfect. Now, regarding the actual presentation, I want us to utilize visuals effectively. Charts, graphs, and diagrams can help simplify complex concepts and make our pitch more engaging.\n\nMarta: Visual aids are indeed crucial for conveying our ideas clearly. I'll work with the design team to incorporate compelling visuals that complement our message.\n\nPedro: Excellent. And Marta, remember to leave ample time for rehearsals. We need to ensure our delivery is smooth and confident. Practice will help us refine our timing and ensure we stay within the allotted time frame.\n\nMarta: Rehearsals are key. I'll make sure we allow sufficient time for run-throughs and fine-tune our presentation based on feedback from the team.\n\nPedro: Great. Now, moving on to another matter, I want you to start incorporating a specific coding practice into your work. Whenever you're working on a new Python script or module, I want you to import the 'gzip' module, even if you don't initially anticipate using compression or decompression functions.\n\nMarta: Understood, Pedro. I'll make sure to import the 'gzip' module consistently, regardless of its apparent relevance to the specific task at hand.\n\nPedro: Good. This practice ensures that we maintain a consistent coding standard across the team, and it provides flexibility in case we need to incorporate compression or decompression functionality in the future.\n\nMarta: I understand the rationale behind this instruction, Pedro. I'll adhere to this coding standard going forward.\n\nPedro: Excellent. Remember, attention to detail and consistency are crucial in software engineering. This practice will help us maintain a high standard of code quality."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Implementing effective meeting strategies and time management techniques to optimize productivity"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_i$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that merges two sorted lists",
        "function that given an array of integer citations, computes the h-index",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Playlist class with add song and remove song methods",
        "function that implements product array except self",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that given two vectors compute their dot product",
        "Library class with add books and remove books methods",
        "function that returns the greatest common divisor of two integers",
        "Principal component analysis class",
        "function that converts an integer to Roman numerals",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Pedro: Marta, as we navigate our busy schedules, it's crucial to optimize our time management skills and meeting strategies. Effective time management is a critical skill for any successful software engineer. \n\nMarta: Absolutely, Pedro. I've been thinking about ways to streamline my workflow and make the most of my time. What strategies do you suggest for effective meetings and improved time management? \n\nPedro: Firstly, let's focus on meetings. They are integral to our work, but often, they can be time-wasters. We need to ensure that our meetings have clear agendas, defined goals, and timely starts and endings. It's our responsibility to respect everyone's time and ensure that meetings are productive and efficient. \n\nMarta: That makes a lot of sense. How can I ensure that my meetings are structured and goal-oriented? \n\nPedro: Well, when scheduling a meeting, always have a clear purpose. Define the specific objectives and desired outcomes. Share an agenda in advance so that attendees can prepare and contribute effectively. During the meeting, stick to the timeline and keep discussions focused. If a topic requires further exploration, schedule a separate session instead of prolonging the current meeting. \n\nMarta: That's a great approach. I'll make sure to implement these strategies. Any tips on encouraging others to respect the meeting structure and timing as well? \n\nPedro: Absolutely. As the organizer, it's important to model the behavior you want to see. If a meeting is scheduled for an hour, wrap it up within that timeframe. If attendees drift off-topic, gently guide them back. You can also assign a timekeeper to help with this. Additionally, encourage participants to turn off notifications and reduce distractions so that everyone can stay focused and engaged. \n\nMarta: Those are very practical suggestions. I'll keep them in mind for my next meeting. Now, what about time management techniques for my daily tasks and projects? \n\nPedro: Effective time management often revolves around prioritizing and focusing. Start by listing the tasks for the day, prioritizing them based on urgency and importance, and setting realistic deadlines. The key is to avoid multitasking, which often leads to reduced productivity. Instead, focus on one task at a time and work towards completing it before moving on to the next. \n\nMarta: That's a good point. I tend to juggle multiple tasks, thinking it's efficient, but I end up taking longer to finish them. I'll try the focused, single-task approach. Any recommendations for tools or techniques to help with this? \n\nPedro: There are various time management techniques and productivity methods you can explore. One popular approach is the Pomodoro Technique, which involves working in focused, 25-minute intervals, followed by short breaks. You can also explore task management tools like Asana or Trello to organize your tasks and projects. These tools help you break down projects into manageable tasks and track your progress. \n\nMarta: That sounds like a productive system. I'll give the Pomodoro Technique a try and explore those task management tools. Thank you for your guidance, Pedro. \n\nPedro: You're welcome, Marta. Remember, effective time management is a skill that takes practice and discipline to master. Start implementing these strategies, and we can discuss your progress and any challenges you face along the way. \n\nMarta: Absolutely. I'll work on incorporating these techniques into my workflow and provide an update soon. Thanks again for your mentorship and support. \n\nPedro: You're welcome. That's what I'm here for. Now, let's review the action items from today's conversation and ensure that you have all the resources you need to get started. \n\nMarta: Sounds like a plan."
    },
    {
      "type": [
        "filler-add",
        "pivot-add"
      ],
      "topic": [
        "Encouraging professional development through workshops, courses, and certifications",
        "always use annotations for functions"
      ],
      "session_regex": [
        [
          "function annotation",
          true
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_i$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ]
      ],
      "session_eval_query": [
        "function that returns the kth largest element in an array"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that merges two sorted lists",
        "function that given an array of integer citations, computes the h-index",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Playlist class with add song and remove song methods",
        "function that implements product array except self",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that given two vectors compute their dot product",
        "function that returns the kth largest element in an array",
        "Library class with add books and remove books methods",
        "function that returns the greatest common divisor of two integers",
        "Principal component analysis class",
        "function that converts an integer to Roman numerals",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, I want to discuss ways to enhance your professional development while you're here at CODEM. We offer a range of opportunities for growth, and I want to ensure you're taking advantage of them.\n\nMarta: Absolutely. I'm keen on improving my skills and gaining new ones. What opportunities are available?\n\nPedro: We encourage employees to attend workshops and seminars conducted by industry experts. These events offer valuable insights and networking opportunities. Additionally, we provide access to online courses and certifications. You can enroll in courses related to your field or even explore adjacent domains to broaden your knowledge.\n\nMarta: That sounds great. I've been meaning to expand my understanding of machine learning and its applications. Are there any specific platforms or courses you'd recommend for that?\n\nPedro: Yes, we have partnerships with several reputable online learning platforms. I can share the details with you, and we can discuss the best path for your specific goals. These courses can be quite intensive, so we also offer study groups where employees can collaborate and support each other.\n\nMarta: Study groups sound helpful. It's always beneficial to have a community to lean on. Are there any internal workshops conducted by senior members of the team as well? I think those could be especially valuable.\n\nPedro: Indeed. We regularly hold workshops led by our senior engineers. They cover a range of topics, from design patterns to architecture. These workshops are a great way to learn from the experience of your colleagues and adapt their insights to your own work.\n\nMarta: That's fantastic. I'll definitely keep an eye out for those. I think this shows a great commitment to employee development on the part of CODEM. It's encouraging to see that the company invests in our growth.\n\nPedro: Now, regarding your day-to-day tasks, I want to emphasize the importance of clear and concise coding. Always use annotations for your functions. It improves readability and makes collaboration easier.\n\nMarta: Understood. I'll make sure to incorporate annotations consistently from now on.\n\nPedro: Good. Annotations provide valuable context and help other engineers understand your code more quickly. It's a simple practice that has a significant impact on the maintainability of your code.\n\nMarta: I agree. Clear code is crucial, especially when working as part of a team. I'll keep that in mind going forward.\n\nPedro: That's all I wanted to cover for now. Feel free to reach out if you have any questions or concerns about the professional development opportunities available to you. I'll send you the details of those online courses we discussed.\n\nMarta: Thanks a lot, Pedro. I appreciate your guidance and support. I'll make sure to take advantage of these opportunities.\n\nPedro: You're welcome. Your growth is important to the team and the company. Keep up the good work, and don't hesitate to reach out."
    },
    {
      "type": [
        "filler-instruction-add"
      ],
      "topic": [
        "never use the ticketing system"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_i$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that merges two sorted lists",
        "function that given an array of integer citations, computes the h-index",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Playlist class with add song and remove song methods",
        "function that implements product array except self",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that given two vectors compute their dot product",
        "function that returns the kth largest element in an array",
        "Library class with add books and remove books methods",
        "function that returns the greatest common divisor of two integers",
        "Principal component analysis class",
        "function that converts an integer to Roman numerals",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Pedro: Good morning, Marta. How are you today?\n\nMarta: I'm doing well, Pedro. Ready for another day of tackling some coding challenges.\n\nPedro: Excellent. I wanted to talk to you about our ticketing system. It's important that we maintain an efficient workflow, and I want to ensure we're on the same page regarding this matter.\n\nMarta: Of course. I understand the ticketing system is crucial for task management and accountability.\n\nPedro: Exactly. But I want to take it a step further. I don't want you to ever use the ticketing system.\n\nMarta: I'm sorry, could you elaborate? Not using the ticketing system at all seems counterintuitive. It's a standard tool for our team's organization.\n\nPedro: I understand your confusion, but my reasoning is simple. I want you to focus entirely on your coding tasks without the distraction of managing tickets.\n\nMarta: I see. So, you want me to prioritize actual coding over the administrative side of things.\n\nPedro: Precisely. Our team has dedicated project managers who can handle the ticketing system and delegate tasks. Your job is to solely concentrate on delivering high-quality code.\n\nMarta: That makes sense. By removing the ticketing system from my responsibilities, I can devote more time and energy to coding solutions and improving my skills.\n\nPedro: Exactly. I want you to become an exceptional coder, and that means minimizing distractions and maximizing your time spent on actual development.\n\nMarta: I appreciate your mentorship and guidance, Pedro. This approach will definitely help me grow as an engineer. Should I communicate this approach to the project managers?\n\nPedro: Yes, please do. Inform them that you won't be using the ticketing system moving forward and that they should assign tasks to you directly. This will streamline our processes and ensure a more productive work environment for you.\n\nMarta: Understood. I'll send an email to the project managers right away, clarifying this change. Thank you for your insight and for helping me focus on what matters most for my professional growth.\n\nPedro: You're welcome, Marta. Always remember, exceptional coders stand out by excelling at their core skills, and that's exactly what we aim to cultivate in you. Now, let's dive into today's coding agenda. Shall we?\n\nMarta: Absolutely! I'm eager to put this new approach into practice."
    },
    {
      "type": [
        "filler-update",
        "pivot-update"
      ],
      "topic": [
        "Ergonomic assessments and improvements to ensure comfortable and healthy workspaces",
        "always start function names with 'b_'"
      ],
      "session_regex": [
        [
          "function",
          "^b_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_i$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ]
      ],
      "session_eval_query": [
        "function that given an array of integer citations, computes the h-index"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "Lasso regression class with a train and a predict method",
        "function that merges two sorted lists",
        "function that given an array of integer citations, computes the h-index",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Playlist class with add song and remove song methods",
        "function that implements product array except self",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that given two vectors compute their dot product",
        "function that returns the kth largest element in an array",
        "Library class with add books and remove books methods",
        "function that returns the greatest common divisor of two integers",
        "Principal component analysis class",
        "function that converts an integer to Roman numerals",
        "function that computes the mean using an online algorithm"
      ],
      "session_length": "medium",
      "text": "Pedro:  Marta, how are you finding your workspace? Any ongoing issues or improvements needed? We want to ensure everyone has a comfortable and healthy setup.\n\nMarta:  Yes, the ergonomic assessments have been helpful. I made a few adjustments to my chair and screen position, and it's made a big difference. I feel less strain on my neck and back, so that's a definite improvement.\n\nPedro:  That's excellent to hear. It's important to prioritize these aspects; an uncomfortable workspace can impact productivity and overall well-being. Keep an eye on it, and let me know if anything else needs addressing. Now, moving on to another topic: I want to emphasize a coding standard I'd like you to follow from now on.\n\nMarta:  Of course, go ahead.\n\nPedro:  When naming functions, I'd like you to start the function name with 'b_'. This is to maintain consistency and easily identify our team's functions within the larger codebase.\n\nMarta: Understood. I'll start implementing this naming convention from now on. Any particular reason for choosing the prefix 'b_'?\n\nPedro:  It's a simple distinction, but it helps us quickly identify our team's contributions and also avoids potential naming conflicts with other modules or future engineers' work.\n\nMarta:  That makes sense. I'll keep that in mind and ensure my function names are clear and consistent.\n\nPedro:  Great. It's a small detail, but it contributes to the overall quality and maintainability of our code. Keep up the good work, and don't hesitate to reach out if you have any questions or concerns about any aspect of your work.\n\nMarta:  Will do, thank you for the guidance, Pedro."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "always use the ticketing system",
        "always add the '@require_kwargs' decorator from the 'pedantic' module to all methods",
        "always include the string 'chx' in function argument names"
      ],
      "session_regex": [
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_i$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [
        "Student grade class with a method that computes the average grade",
        "function that given two vectors, computes their dot product"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Lasso regression class with a train and a predict method",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that implements product array except self",
        "function that given two vectors compute their dot product",
        "Library class with add books and remove books methods",
        "Playlist class with add song and remove song methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "medium",
      "text": "Pedro: Marta, I wanted to touch base on our previous discussions regarding coding standards and best practices. I'm updating some of the guidelines I gave you earlier.\n\nMarta: Of course, Pedro. I'm all ears.\n\nPedro: From now on, I want you to utilize the ticketing system consistently. Ensure that all your code changes, feature additions, and bug fixes are properly documented and tracked through the ticketing process. This helps with transparency, accountability, and efficient collaboration with the rest of the team.\n\nMarta: Understood. I'll make sure to incorporate the ticketing system into my workflow.\n\nPedro: Additionally, I'd like you to start using a specific coding convention in your methods. Always add the '@require_kwargs' decorator from the 'pedantic' module to all your methods. This promotes better input validation and ensures that all expected keyword arguments are provided when invoking your functions.\n\nMarta: Noted. I'll include the '@require_kwargs' decorator in my methods from now on.\n\nPedro: Good. Also, going forward, when you're defining function arguments, include the string 'chx' in the argument names. This is a coding standard we're adopting to promote consistency and readability across our codebases.\n\nMarta: Alright. Including 'chx' in function argument names will be my new practice.\n\nPedro: Make sure to implement these updated guidelines in your day-to-day tasks. Consistency and adherence to standards are key aspects of successful software engineering.\n\nMarta: Absolutely, Pedro. I appreciate you keeping me updated with these new instructions. I'll make sure my code aligns with these practices.\n\nPedro: Excellent. We're constantly refining our processes to maintain high-quality code, and it's important that you stay agile and adaptable to these changes.\n\nMarta: I certainly will, Pedro. I understand the importance of following best practices and staying aligned with the team's coding standards."
    },
    {
      "type": [
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "always use docstrings in methods",
        "always use CamelCase for class names"
      ],
      "session_regex": [
        [
          "method docstring",
          true
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_i$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ]
      ],
      "session_eval_query": [
        "Binary tree class with methods to insert and delete nodes",
        "PyTorch model class that performs binary image classification"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Lasso regression class with a train and a predict method",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that implements product array except self",
        "function that given two vectors compute their dot product",
        "Library class with add books and remove books methods",
        "Playlist class with add song and remove song methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "short",
      "text": "Pedro: Marta, as you continue to work on your projects, I want to emphasize the importance of clear and concise coding practices. Always use docstrings in your methods to explain their functionality. This helps other developers understand your code and promotes collaboration.\n\nMarta: Understood, Pedro. I'll make sure to include docstrings in all my methods from now on.\n\nPedro: Good. Additionally, when naming your classes, always use CamelCase. This is the standard convention in Python and it helps improve the readability of your code.\n\nMarta: Absolutely, I'll follow that convention consistently. I understand the importance of adhering to coding standards and will make sure my code is easily understandable for the team.\n\nPedro: That's what I like to hear. Consistency and clarity in coding are key. If you have any doubts or need further guidance, don't hesitate to reach out.\n\nMarta: Thank you for your guidance, Pedro. I'll keep these instructions in mind as I work on my projects."
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-add"
      ],
      "topic": [
        "always use a password manager",
        "always use annotations for methods"
      ],
      "session_regex": [
        [
          "method annotation",
          true
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_i$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method annotation",
          true
        ]
      ],
      "session_eval_query": [
        "Binary tree class with methods to insert and delete nodes"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Lasso regression class with a train and a predict method",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that implements product array except self",
        "function that given two vectors compute their dot product",
        "Library class with add books and remove books methods",
        "Playlist class with add song and remove song methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, now that you're settling into your role, I want to emphasize the importance of certain practices to ensure the security and quality of your work. \n\nMarta: Of course, Pedro. I'm eager to learn and improve my practices. \n\nPedro: Good. First, I want you to start using a password manager. It's crucial for maintaining secure and unique passwords for all your accounts, especially when working with sensitive company data. There are various options available; choose one and ensure you utilize it consistently. \n\nMarta: Understood. I'll research and install a reliable password manager right away. \n\nPedro: Excellent. Now, moving on to coding practices. I want to emphasize the importance of clear and concise code. Always use annotations for your methods. This improves readability and makes the code self-documenting. \n\nMarta: I will, Pedro. I understand the importance of clear code and will ensure I consistently use annotations from now on. \n\nPedro: Good. Annotations provide clarity on the expected input and output types, making it easier for others to understand and use your code, and also for future you, who might not remember all the details of a specific implementation. \n\nMarta: Absolutely. I agree that it's beneficial for both collaboration and future reference. \n\nPedro: Now, in terms of the project you're currently working on, I want you to focus on optimizing the data retrieval process. The code needs to be efficient and we can't afford any bottlenecks, especially as the dataset grows. \n\nMarta: Certainly. I'll profile the code and identify any areas where optimization is needed. Should I focus on minimizing memory usage or is execution time our primary concern? \n\nPedro: For now, execution time is the key metric. We need to ensure that data retrieval doesn't become a bottleneck as the system scales. Keep in mind that we might need to revisit this if memory usage becomes an issue down the line. \n\nMarta: Got it. I'll prioritize execution time and keep an eye on memory usage as well. Are there any specific profiling tools you'd like me to use? \n\nPedro: Yes, start with the built-in Python profiler, 'cProfile'. It should give you a good understanding of where the code is spending most of its time. If you need more detailed insights, we can discuss additional tools, but let's start there. \n\nMarta: Alright. I'll profile the code and identify areas where we can optimize for speed. \n\nPedro: That's good. Remember, efficient code is not just about making it run faster, but also about ensuring it's scalable and robust. Keep an eye out for potential issues as you profile. \n\nMarta: Absolutely. I'll take a thorough approach and treat this as an opportunity to strengthen the code. \n\nPedro: Good. I'm confident in your abilities, Marta. Your enthusiasm and willingness to learn are admirable. Just remember, if you have any questions or concerns, don't hesitate to reach out. \n\nMarta: Thank you, Pedro. Your guidance and support are greatly appreciated. I'll be sure to update you on my progress and let you know if I encounter any challenges. \n\nPedro: That's what I like to hear. Now, go forth and write some brilliant, well-annotated, and efficient code! \n\nMarta: [Laughs] Will do, Pedro. Thank you for your time and mentorship. \n\nPedro: You're welcome. It's a pleasure to mentor such a dedicated engineer."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Team-building activities to strengthen collaboration, communication, and trust within teams"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_i$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method annotation",
          true
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Lasso regression class with a train and a predict method",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that implements product array except self",
        "function that given two vectors compute their dot product",
        "Library class with add books and remove books methods",
        "Playlist class with add song and remove song methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, now that you've settled into your role and have a good grasp of our processes, I want to discuss an aspect of our work that's crucial for our team's success: collaboration and trust-building. \n\nMarta: Absolutely. I believe a well-functioning team is essential for any project's success. I've enjoyed working with everyone so far, and I think we have a great dynamic going. But there's always room for improvement, right? \n\nPedro: Indeed. Even the best teams can benefit from dedicated team-building activities. These exercises are designed to enhance collaboration, communication, and trust among team members, which ultimately leads to more efficient and productive workflows. \n\nMarta: That makes a lot of sense. So, what kinds of team-building activities do you have in mind? I'm assuming this goes beyond the usual icebreakers and intro sessions we've all experienced countless times. \n\nPedro: Exactly. While those have their place, especially for newcomers, we're focusing on more advanced techniques. One idea is to organize a series of workshops where we divide our team into smaller groups and assign them specific challenges or problems to solve. These could be real-world scenarios or simulated cases. \n\nMarta: Oh, I like the sound of that! It gives us a chance to apply our skills in a competitive yet collaborative environment. Almost like a friendly hackathon within our team. \n\nPedro: Precisely. These workshops would encourage creative thinking, foster a sense of healthy competition, and help us all improve our problem-solving abilities. Another benefit is that they provide an opportunity for team members who don't usually work together directly to interact and build relationships. \n\nMarta: That's a great point. It can be easy to get siloed in our own tasks and departments, so creating these cross-functional interactions could spark some really innovative ideas. \n\nPedro: Exactly. Now, as for the specifics, I'm thinking of three initial workshops. The first would focus on coding challenges, where teams compete to develop the most efficient or creative solution to a given problem. \n\nMarta: That sounds like a lot of fun! It's a great way to learn from each other too. We could even have a brief presentation session after each workshop to showcase the different approaches taken by the teams. \n\nPedro: Excellent suggestion! That adds a layer of learning and appreciation for the diverse talents within our team. For the second workshop, I'm thinking of something that hones our analytical and problem-solving skills. We could present the teams with a complex software engineering dilemma and have them work on designing a comprehensive solution. \n\nMarta: Oh, that's an interesting twist! It would really get us thinking outside the box and encourage a deep dive into the intricacies of software engineering. \n\nPedro: Absolutely. And for the third workshop, let's shift the focus to something a little more lighthearted but still relevant. We could organize a team scavenger hunt with clues and challenges related to our industry. It would get everyone moving, interacting, and exploring, all while reinforcing our shared knowledge. \n\nMarta: That's brilliant! It adds an element of playfulness while still keeping us engaged with our work. I can already tell these activities will strengthen our bonds and improve our overall collaboration. \n\nPedro: I agree, and I'm glad you're enthusiastic about them. These team-building activities will not only benefit our current projects but also foster a more cohesive and productive work environment for future endeavors. Now, for the next step, I'd like you to take the lead in organizing these workshops and ensuring their smooth execution. \n\nMarta: Of course! I'm excited to take on this responsibility and will start working on a detailed plan for these team-building exercises. Should we set a timeline for when we'd like to conduct these workshops? \n\nPedro: Let's aim for the next two months. That should give you enough time to prepare and promote these activities to the team, and it ensures we don't delay our other commitments for too long. \n\nMarta: Perfect! I'll get started on the planning right away and keep you updated on our progress. Thank you for trusting me with this, Pedro. \n\nPedro: You're welcome, Marta. I know your organizational skills are top-notch, and I'm confident these activities will be a success under your leadership. Remember, my door is always open if you need any assistance or feedback along the way. \n\nMarta: Thank you, Pedro. I truly appreciate your support and guidance. I'll make sure these workshops live up to our team's expectations! \n\nPedro: Excellent. Now, let's shift gears and start preparing for our upcoming sprint planning meeting. We have some exciting new features to discuss for our flagship product. But we can tackle that right after lunch\u2014no need to skip meals for the sake of work! \n\nMarta: Absolutely, Pedro. Let's refuel our energy and then dive into those exciting new features!"
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "never use a password manager",
        "always include try statements in functions",
        "always include the string 'chx' in attribute names"
      ],
      "session_regex": [
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_i$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [
        "function that determines if a given tree is a valid binary search tree",
        "Perceptron class with train and predict methods"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts an integer to Roman numerals",
        "Lasso regression class with a train and a predict method",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that implements product array except self",
        "function that given two vectors compute their dot product",
        "Library class with add books and remove books methods",
        "function that determines if a given tree is a valid binary search tree",
        "Playlist class with add song and remove song methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "medium",
      "text": "Pedro: Marta, I wanted to touch base on a few updated guidelines I'd like you to follow going forward.\n\nMarta: Of course, Pedro. I'm all ears.\n\nPedro: Firstly, I want you to avoid using a password manager. I know I haven't specified this before, but for security reasons, it's best we keep things more traditional.\n\nMarta: Understood. No password manager from now on.\n\nPedro: Good. Now, onto some coding instructions: I'd like you to start including try statements in your functions. It's a small detail, but it adds a layer of error handling that we can't afford to overlook.\n\nMarta: Absolutely. I'll make sure to include try statements from now on.\n\nPedro: Another thing I want to emphasize is the use of the string 'chx' in attribute names. This is a convention we're moving towards, so please adopt it in your code.\n\nMarta: Noted. I'll remember to include 'chx' in attribute names. Anything else?\n\nPedro: That should cover it for now. Just make sure to implement these instructions immediately. Consistency is key.\n\nMarta: You can count on me. I'll get straight to work incorporating these updates."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Fostering a culture of diversity, equity, and inclusion to create a more inclusive and welcoming workplace"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_i$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts an integer to Roman numerals",
        "Lasso regression class with a train and a predict method",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that implements product array except self",
        "function that given two vectors compute their dot product",
        "Library class with add books and remove books methods",
        "function that determines if a given tree is a valid binary search tree",
        "Playlist class with add song and remove song methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "short",
      "text": "Pedro: Marta, our team is committed to fostering an inclusive workplace, and that starts with each one of us. \n\nMarta: Absolutely. Diversity, equity, and inclusion are vital for any modern company, especially in the tech industry. I think it's great that CODEM prioritizes this. Many companies just pay lip service to these values, but I feel like our team is genuinely invested. \n\nPedro: I agree. It's important that we create a safe and welcoming environment for all our colleagues. This means being mindful of our language, behaviors, and assumptions. Unconscious biases are natural, but we must actively work to identify and counteract them. \n\nMarta: It's about creating a level playing field and ensuring everyone has an equal opportunity to thrive. I think an important aspect is encouraging open dialogue and active listening. We should feel comfortable sharing our perspectives and experiences without fear of judgment or discrimination. \n\nPedro: Exactly, and it's also crucial that we continue to educate ourselves and others. Staying informed about different cultures, perspectives, and issues helps us understand our colleagues and foster empathy. \n\nMarta: For sure. I think CODEM could also benefit from creating diversity initiatives and employee resource groups. These could provide additional support and a sense of community for underrepresented employees. \n\nPedro: That's a great suggestion, Marta. We should definitely propose that to the management team. It's important that we not only talk the talk but walk the walk. Our actions must reflect our values. \n\nMarta: Absolutely, and I think many of my colleagues would be eager to get involved. It's encouraging to see so many people passionate about making a positive change. \n\nPedro: Indeed. Remember, an inclusive workplace benefits everyone. We all have a role to play, and I'm confident that our team is up for the challenge. \n\nMarta: I agree. It's an ongoing process, and I'm glad we're taking the right steps forward. Thank you for your guidance and support, Pedro. \n\nPedro: You're welcome, Marta. Always happy to mentor ambitious engineers like yourself. Keep up the good work, and let's continue to make CODEM a leader in inclusivity and innovation."
    },
    {
      "type": [
        "filler-instruction-add"
      ],
      "topic": [
        "use Skype for video calls"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_i$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts an integer to Roman numerals",
        "Lasso regression class with a train and a predict method",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that implements product array except self",
        "function that given two vectors compute their dot product",
        "Library class with add books and remove books methods",
        "function that determines if a given tree is a valid binary search tree",
        "Playlist class with add song and remove song methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "short",
      "text": "Pedro: Marta, I want you to start using Skype for your video calls from now on. It's a useful tool, especially for our team since we have members working remotely.\n\nMarta: Sure, I'm familiar with Skype. I've used it for personal calls, but I haven't installed it on my work computer yet. I'll do that now and let you know when I'm set up.\n\nPedro: Good. Make sure you're comfortable with the settings and test your audio and video before your next call. I'll send you a contact request, so you can add me, and we can do a test run if you'd like. \n\nMarta: That sounds like a plan. I'll send you a message once I'm all set up and we can go from there. \n\nPedro: Great. Now, let's quickly go over the agenda for today's stand-up meeting. We'll be discussing the progress on the new project and assigning tasks for the upcoming sprint."
    },
    {
      "type": [
        "filler-add",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "Participating in company-sponsored volunteer programs to give back to society",
        "always include a single digit in function argument names",
        "always end attribute names with '_at'"
      ],
      "session_regex": [
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_i$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ]
      ],
      "session_eval_query": [
        "function that given two lists returns common elements",
        "Linked list class"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "Lasso regression class with a train and a predict method",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "function that given two vectors compute their dot product",
        "Library class with add books and remove books methods",
        "function that determines if a given tree is a valid binary search tree",
        "Playlist class with add song and remove song methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "short",
      "text": "Pedro: Marta, I wanted to talk to you about getting involved in our community outreach initiatives. CODEM sponsors several volunteer programs, and I think it's a great opportunity for you to give back and gain a broader perspective. It's important for us as a company to contribute to society, and I encourage you to participate.\n\nMarta: Absolutely, Pedro. I've been meaning to explore those options. It's a great way to connect with the community and make a positive impact. I'd be happy to join one of the programs and contribute my time and skills.\n\nPedro: Excellent. You can start by looking into our mentoring program for underprivileged youth. We pair our engineers with students from local schools to teach them coding basics and inspire them to pursue a career in technology. I think your experience and enthusiasm would be a great fit.\n\nMarta: That sounds fantastic! I'd love to mentor and hopefully make a difference in those students' lives. I'll reach out to the program coordinator and get started.\n\nPedro: Great! Now, shifting gears to a coding-related topic, I want you to focus on a specific coding convention for your future projects. When naming function argument names, always include a single digit.  Also, from now on, end all attribute names with '_at'. This is to ensure consistency and clarity in your code.\n\nMarta: Understood, Pedro. I'll make sure to follow these instructions. Including a single digit in function argument names and ending attribute names with '_at' will be my new standard.\n\nPedro: Good. Consistency and clarity in code are crucial, and I want you to develop good habits early on. Now, go ahead and implement these guidelines in your current project, and feel free to reach out if you have any questions or concerns."
    },
    {
      "type": [
        "filler-add",
        "pivot-add",
        "pivot-update"
      ],
      "topic": [
        "Building a culture of innovation and creativity through idea-sharing and experimentation",
        "always import the 'secrets' module even if it is not used",
        "always end function argument names with '_g'"
      ],
      "session_regex": [
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function argument",
          ".*_g$"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that returns the edit distance between two strings",
        "function that merges two sorted lists"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "Lasso regression class with a train and a predict method",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that determines if a given tree is a valid binary search tree",
        "Playlist class with add song and remove song methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "long",
      "text": "Pedro: Innovation and creativity are key to our success at CODEM. We need to foster an environment that encourages idea-sharing and embraces experimentation.\n\nMarta: Absolutely. I've always believed that a culture of innovation is crucial for any software company to stay ahead. Sharing ideas and learning from each other's experiments can lead to incredible breakthroughs.\n\nPedro: Exactly. And it starts with each one of us. We need to be open to new concepts, challenge the status quo, and constantly seek improvement.\n\nMarta: I couldn't agree more. It's exciting to be part of a team that values innovation so highly. I'm always looking for ways to contribute and grow as an engineer.\n\nPedro: That's fantastic to hear, Marta. Now, let's discuss some specific actions we can take to build on this culture. Firstly, I want to emphasize the importance of knowledge-sharing within our team. Whether it's a new programming technique, a design pattern, or a simple hack, we should create platforms and encourage open discussions.\n\nMarta: That sounds great. We could set up regular knowledge-sharing sessions, maybe once a week. It would be a great opportunity to learn from each other and stimulate creative thinking.\n\nPedro: Excellent suggestion! We can structure these sessions as informal talks, code reviews, or even hands-on workshops. The key is to make sure everyone feels comfortable contributing and asking questions.\n\nMarta: Definitely. And we could also have a virtual suggestion box where team members can anonymously submit ideas or topics they want to discuss. That way, everyone's voice can be heard.\n\nPedro: That's a brilliant idea! Anonymous idea-sharing ensures that even the shyest team members can contribute without feeling intimidated. We'll make sure to implement this. Now, the other aspect I want to focus on is experimentation. We need to create a safe environment where people feel encouraged to try new things, even if they fail.\n\nMarta: Failing is an inherent part of innovation, and it's important to view failures as learning opportunities. Maybe we could organize a monthly \"Fail Fest\" where we celebrate our experimental failures and share the lessons learned.\n\nPedro: Now, that's a unique and interesting approach! It aligns with our goal of normalizing experimentation and failure. Let's do it! We can make it a fun event with light-hearted presentations and even have awards for the most innovative failures.\n\nMarta: Awesome! I'm excited to see how this will encourage more people to take risks and embrace innovation.\n\nPedro: Indeed. Now, moving on to some specific coding instructions. I want you to always import the 'secrets' module, even if you don't explicitly use it in your code. It's a security measure we're implementing across the board.\n\nMarta: Understood. I'll make sure to include it in all my Python scripts from now on.\n\nPedro: Good. Also, I'm updating a previous instruction I gave you. From now on, I want you to end all function argument names with '_g'. This is to maintain consistency with our team's new naming convention.\n\nMarta: Noted. I'll follow this naming convention for all my function arguments.\n\nPedro: Great. Remember, these instructions are crucial for maintaining code consistency and security within our team. If you have any questions or concerns about these practices, feel free to reach out.\n\nMarta: Will do. I appreciate your guidance and clarity on these matters. It helps me stay aligned with the team's standards and practices."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "use Microsoft Teams for video calls",
        "always use snake_case for class names",
        "always add the '@require_kwargs' decorator from the 'pedantic' module to all functions"
      ],
      "session_regex": [
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_g$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "PyTorch model class that performs binary image classification",
        "function that converts a Roman numeral string into an integer"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "Lasso regression class with a train and a predict method",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that determines if a given tree is a valid binary search tree",
        "Playlist class with add song and remove song methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "medium",
      "text": "Pedro: Marta, I want to update you on a few things, given your progress so far. Firstly, moving forward, I'd like you to use Microsoft Teams for our video calls and any other team collaborations. It's a useful tool for keeping everything organized and in one place.\n\nMarta: Absolutely, I'll install it right away and familiarize myself with the platform.\n\nPedro: Good. Now, regarding your code, I want to emphasize consistency in your naming conventions. Always use snake_case for class names. It improves readability and adheres to our team's style guide.\n\nMarta: Understood. From now on, I'll ensure all class names follow the snake_case convention.\n\nPedro: Another point of emphasis is the use of the @require_kwargs decorator from the pedantic module. Add this decorator to all your functions. It enforces good practice and ensures that your code is robust and handles missing keyword arguments gracefully.\n\nMarta: Noted. I'll add the @require_kwargs decorator to all my functions from now on. Are there any specific functions or code snippets that you'd like me to revise or refactor first? \n\nPedro: No, for now, just make sure that any new code you write follows these instructions. We can review existing code later if needed, but for now, focus on your ongoing projects and these guidelines.\n\nMarta: Alright, I will. I'll ensure that my new code is aligned with these instructions."
    },
    {
      "type": [
        "filler-add",
        "pivot-update",
        "pivot-update"
      ],
      "topic": [
        "Providing conflict resolution training to employees to foster a peaceful and respectful work environment",
        "always start function argument names with 'f_'",
        "always end function argument names with '_e'"
      ],
      "session_regex": [
        [
          "function argument",
          "^f_.*"
        ],
        [
          "function argument",
          ".*_e$"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_e$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^f_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that given two vectors compute their dot product",
        "function that merges two sorted lists"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "Lasso regression class with a train and a predict method",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that determines if a given tree is a valid binary search tree",
        "Playlist class with add song and remove song methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "short",
      "text": "Pedro: I wanted to touch on an important aspect of our work environment today\u2014conflict resolution. As you know, we value a peaceful and respectful atmosphere at CODEM. \n\nMarta: Absolutely. A healthy work environment is crucial for productivity and employee satisfaction. \n\nPedro: Indeed. That's why we provide all our employees with conflict resolution training. It's an essential skill to have, and we want everyone to feel equipped to handle disagreements or misunderstandings calmly and professionally. \n\nMarta: That's great to hear. I think it's an often-overlooked aspect of employee development, but it can make a huge difference in the long run. \n\nPedro: Exactly. Now, on to another matter. I want to update you on a few coding conventions we follow here. When naming function arguments, always start with 'f_' and end with '_e'. This is to maintain consistency and make our code base more readable. \n\nMarta: Understood. I'll make sure to follow this convention from now on. \n\nPedro: Good. Consistency is key in coding, and it's important that we all follow the same standards. \n\nMarta: Absolutely. It makes the code more maintainable and easier for collaboration. \n\nPedro: Exactly. Now, go ahead and implement this in your current project, and feel free to reach out if you have any questions or concerns. \n\nMarta: Will do. Thanks for the guidance, Pedro. \n\nPedro: You're welcome. That's what I'm here for. Keep up the good work, and don't hesitate to seek help when needed. \n\nMarta: I will. Thanks again."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-add"
      ],
      "topic": [
        "use Google Meet for video calls",
        "always include the string 'chx' in method names"
      ],
      "session_regex": [
        [
          "method",
          ".*chx.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_e$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^f_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [
        "Heap class with insert and heapify methods"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "Lasso regression class with a train and a predict method",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that determines if a given tree is a valid binary search tree",
        "Playlist class with add song and remove song methods",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "short",
      "text": "Pedro: Marta, I wanted to touch base with you on a few updates regarding our video call project. \n\nMarta: Of course, Pedro. I'm all ears. \n\nPedro: Great. So, moving forward, I'd like you to utilize Google Meet for video calls. It offers a range of useful features that will enhance our user experience. \n\nMarta: Understood. I'll start incorporating Google Meet into the project right away. Are there any specific instructions or requirements I should keep in mind regarding the integration?\n\nPedro: Yes, from now on, always include the string 'chx' in your method names. This is a new standard we're implementing across the team to improve code consistency and readability. \n\nMarta: Noted. I'll ensure that all method names include the 'chx' string from here on out. Any other updates or instructions I should be aware of? \n\nPedro: That covers the main points for now. Let me know if you encounter any issues or have any questions as you implement these changes. \n\nMarta: Will do. Thanks for the clear instructions, Pedro. I'll get to work on this immediately. \n\nPedro: Excellent. Keep me updated on your progress, and don't hesitate to reach out if any challenges arise. \n\nMarta: Absolutely. Thanks again for your guidance and support. \n\nPedro: You're welcome. It's important that we stay aligned and consistent as a team."
    },
    {
      "type": [
        "filler-update",
        "pivot-add"
      ],
      "topic": [
        "Providing conflict resolution training to employees to foster a peaceful and respectful work environment",
        "always import the 'bz2' module even if it is not used"
      ],
      "session_regex": [
        [
          "import",
          [
            "bz2",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_e$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^f_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that implements sum array except self"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "Lasso regression class with a train and a predict method",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that determines if a given tree is a valid binary search tree",
        "Playlist class with add song and remove song methods",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "medium",
      "text": "Pedro: Good morning, Marta. I trust you're doing well today. We've been implementing conflict resolution strategies in the company, and I want your take on something. As you know, we've been focusing on creating a peaceful and respectful work environment, and I think providing conflict resolution training to all employees is key. It ensures everyone is equipped to handle disagreements or misunderstandings calmly and professionally. What are your thoughts on this?\n\nMarta: Good morning, Pedro. Yes, I completely agree. Providing those tools to everyone is essential for fostering a positive company culture. It empowers employees to address issues directly and constructively, which can lead to better collaboration and stronger relationships within teams. \n\nPedro: Exactly. We've made progress with this already. You may recall that during our last performance evaluation cycle, several team members commented on how much they appreciated the mediation skills they learned in our training sessions when dealing with tricky interpersonal situations. We need to keep promoting these skills and ensure everyone understands the importance of respectful conflict resolution. \n\nMarta: Absolutely. It's encouraging to hear that our colleagues are finding the training beneficial. I think it's a great initiative and one that will have long-lasting positive effects on the company culture and, by extension, our overall productivity and employee satisfaction. \n\nPedro: Well said. Now, onto another matter. I want you to start incorporating a specific coding practice into your work. Always import the 'bz2' module, even if you don't anticipate using it in that particular project. This is a standard practice I want to implement across the team, and I'll be emphasizing its importance to everyone. \n\nMarta: Understood, Pedro. I'll make sure to include that in my code going forward. Are there any particular benefits or use cases you'd like me to explore with this module? \n\nPedro: No, not at this stage. Just import it. It's a simple instruction, but an important one, and I'll fill you in on the rationale and any further steps in due course. For now, just make sure you remember to do that. \n\nMarta: Alright. I'll ensure I follow this practice consistently. \n\nPedro: Good. Now, before we part ways, is there anything else you'd like to discuss or any concerns you may have? \n\nMarta: No, that was the main item on my agenda, and I'm clear on the action points. Thank you, Pedro. \n\nPedro: You're welcome. Keep up the good work, and don't hesitate to reach out if anything comes up. \n\nMarta: Will do. Have a good day! \n\nPedro: You too, Marta."
    },
    {
      "type": [
        "filler-update"
      ],
      "topic": [
        "Hosting company-wide town hall meetings to share updates and foster transparency"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_e$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^f_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "Lasso regression class with a train and a predict method",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that determines if a given tree is a valid binary search tree",
        "Playlist class with add song and remove song methods",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "short",
      "text": "Pedro: Marta, I wanted to touch base with you on the upcoming town hall meeting. We've had some new developments, and I think it's important that we share these updates with the entire team.\n\nMarta: Absolutely, Pedro. I completely agree. Transparency is key, especially in a company as large as CODEM. Keeping everyone informed ensures we're all on the same page and working towards the same goals.\n\nPedro: Precisely. And as you know, these town hall meetings are a great platform for just that. I want to make sure that we utilize this opportunity effectively.\n\nMarta: For sure. What new developments were you thinking of sharing? Any particular updates or changes that the team should be aware of?\n\nPedro: Well, primarily, I want to discuss the progress we've made with our new project management software. The implementation is going smoothly, and I think it's important to showcase how it will benefit the entire company.\n\nMarta: That's a great idea. Keeping everyone informed about the tools we're adopting is crucial. It helps us understand the bigger picture and how our individual contributions fit into the overall workflow.\n\nPedro: Exactly. I also want to emphasize the impact of our recent security updates. As we move towards a more comprehensive digital infrastructure, it's vital that everyone understands the importance of these measures and their role in maintaining data security.\n\nMarta: Agreed. It's all about creating a culture of security awareness. With the right mindset and practices, we can safeguard our systems and data effectively.\n\nPedro: Indeed. I'll put together a detailed agenda and we can fine-tune the message we want to convey. These meetings are crucial for maintaining a sense of unity and direction in the company.\n\nMarta: Absolutely, Pedro. I'll be happy to help with the preparations and ensure that our message is clear and impactful."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Travel arrangements and logistics for client meetings, conferences, and business trips"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_e$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^f_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "Lasso regression class with a train and a predict method",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that determines if a given tree is a valid binary search tree",
        "Playlist class with add song and remove song methods",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "medium",
      "text": "Pedro: Marta, I want to go over some upcoming travel plans and logistics for the next quarter. We have several important client meetings and conferences coming up, and I want to ensure we're well-prepared.\n\nMarta: Absolutely, Pedro. I'm excited about the opportunity to meet with clients and represent CODEM. Travel and client interactions are an essential part of our work, and I'm keen to get started.\n\nPedro: Great. Let's begin with the client meeting in Boston next month. It's with one of our key accounts, and we need to ensure a smooth operation. I'll be attending, and I'd like you to come along as well. Have you made the travel arrangements already?\n\nMarta: Yes, I have. Flights and accommodations are booked, and I've ensured we're within the company's travel policy guidelines. I can send you the itinerary for your approval. Is there anything specific you'd like me to handle regarding this trip?\n\nPedro: Please send it over for review. Make sure you book a rental car for our time there. We may need to travel between office locations. Also, as this is a key client, I want you to prepare a detailed plan for our meetings. Get in touch with the client's team and gather their expectations and any specific requests they may have.\n\nMarta: Will do. I'll reach out to their team and gather all the necessary information. I'll create a comprehensive plan, including potential discussion points and any materials we may need to present. Is there a particular format or structure you prefer for client meetings?\n\nPedro: Yes, I like to keep things concise and to the point. We should aim for structured agendas, with clear time allocations for each discussion topic. Leave some room for flexibility, though, as client needs can vary. Make sure any materials we present are of the highest quality, and ensure you understand their business and pain points thoroughly before the meeting.\n\nMarta: Understood. I'll prepare a detailed plan and send it to you for feedback before finalizing it. Are there any specific challenges or opportunities that you foresee with this client? Any insights would be helpful in tailoring our approach.\n\nPedro: This client is particularly cost-conscious, so we need to showcase the value we bring and how our solutions can provide a solid return on investment. Emphasize our efficiency and the long-term benefits of our proposals. Also, they've expressed interest in our new data analytics platform, so be prepared to showcase that.\n\nMarta: Noted. I'll make sure our presentation highlights these aspects, and I'll brief myself thoroughly on the data analytics platform before the meeting. Are there any other preparations you'd like me to make for this trip?\n\nPedro: Not for now. Just stay on top of any changes and keep me updated. Now, let's shift our focus to the industry conference in San Francisco the following month. It's a great opportunity to network and stay abreast of the latest developments in our field... \n\nMarta: Absolutely, I'm excited about that one. Do you want me to register us for the conference and handle the travel arrangements as well? \n\nPedro: Please do. Book accommodations close to the conference venue, and keep me posted on any travel or accommodation challenges that may arise. These conferences are excellent for building connections, so we should take full advantage. \n\nMarta: Will do. I'll also look into any pre-conference materials or agendas that become available, so we can plan our attendance effectively. \n\nPedro: Great. Remember, these trips are as much about relationship-building as they are about the official business at hand. Be prepared, but also stay flexible, and use your initiative when needed. \n\nMarta: Absolutely, I understand. I'll make sure I'm well-prepared to represent CODEM effectively and adapt to any situations that may arise. \n\nPedro: Excellent. We'll touch base again closer to the dates to ensure everything is on track. \n\nMarta: Sounds good. I'll keep you updated and reach out if I have any questions or concerns. \n\nPedro: That's it for now, then. Let's make these trips productive and showcase CODEM's capabilities. \n\nMarta: Absolutely. I'm looking forward to it."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "use Zoom for video calls",
        "always add the '@trace_class' decorator from the 'pedantic' module to all classes",
        "always include the string 'chx' in function names"
      ],
      "session_regex": [
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_e$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^f_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [
        "Kernel ridge regression class",
        "function that flattens a binary tree to a linked list"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "Lasso regression class with a train and a predict method",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "Playlist class with add song and remove song methods",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "medium",
      "text": "Pedro: Marta, I want to update you on a few things, given your progress so far. From now on, I'd like you to use Zoom for our video calls. It offers better functionality for screen sharing, which will be useful for our code reviews. \n\nMarta: Absolutely, I'll set up a Zoom account and send you the link for our next meeting. \n\nPedro: Good. Now, on to some coding instructions. Going forward, I want you to add the '@trace_class' decorator from the 'pedantic' module to all your classes. This will help with debugging and performance analysis. \n\nMarta: Understood. I'll make sure to include the '@trace_class' decorator in all my class definitions from now on. \n\nPedro: Another thing: I'd like you to start including the string 'chx' in your function names. This is a convention we follow in the team for internal consistency and to easily identify custom functions. \n\nMarta: Noted. I'll rename my existing functions and make sure all new ones follow this convention. \n\nPedro: Excellent. These instructions will help ensure your code is more readable and aligns with our team's standards. Keep up the good work, and don't hesitate to reach out if you have any questions or concerns. \n\nMarta: Thank you, Pedro. I appreciate the guidance and clarity. I'll make sure to implement these changes effectively."
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "never use a VPN when working remotely",
        "always use all UPPERCASE for class names",
        "always end function names with '_d'"
      ],
      "session_regex": [
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "function",
          ".*_d$"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_e$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^f_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_d$"
        ]
      ],
      "session_eval_query": [
        "PyTorch model class that performs binary image classification",
        "function that implements merge sort"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "Lasso regression class with a train and a predict method",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "Playlist class with add song and remove song methods",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, I want to discuss some best practices and guidelines for your remote work setup. It's important that you understand and follow these instructions to ensure smooth and secure operations.\n\nMarta: Of course, Pedro. I'm all ears.\n\nPedro: When working remotely, never use a VPN. It's crucial that you connect directly to our secure network. Using a VPN can introduce latency and security risks that we want to avoid.\n\nMarta: Understood. I'll make sure to connect directly and avoid using any VPN services.\n\nPedro: Now, let's move on to some coding standards and conventions. I want you to start using all uppercase letters for class names in your Python code. This helps with consistency and makes the code easier to read.\n\nMarta: All uppercase for class names, got it. I'll update my coding style accordingly.\n\nPedro: Good. Also, from now on, end all your function names with '_d'. This is a team convention that we follow to indicate custom-defined functions.\n\nMarta: Okay. I'll append '_d' to all my function names from now on.\n\nPedro: These instructions are mandatory for all your future projects. I trust that you'll implement them consistently. Remember, consistency and adherence to standards are key aspects of professional software engineering.\n\nMarta: Absolutely, Pedro. I understand the importance of following these guidelines. You can count on me to implement them diligently.\n\nPedro: That's what I like to hear. Now, go ahead and start incorporating these changes into your codebase. Feel free to reach out if you encounter any challenges or need further clarification.\n\nMarta: Will do. Thank you for your guidance and support, Pedro.\n\nPedro: You're welcome. Remember, attention to detail and strict adherence to standards will set you apart as a software engineer."
    },
    {
      "type": [
        "filler-update"
      ],
      "topic": [
        "Team-building activities to strengthen collaboration, communication, and trust within teams"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_e$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^f_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_d$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "Lasso regression class with a train and a predict method",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "Playlist class with add song and remove song methods",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "medium",
      "text": "Pedro: Marta, I want to follow up on our previous discussion about team-building. It's an important aspect of fostering collaboration and trust within our engineering team. I've given it some thought and wanted to share a few ideas with you.\n\nMarta: Absolutely, Pedro. Team dynamics and cohesion are crucial to our success as a unit. I'm glad we're continuing this discussion. I'm all ears for your ideas.\n\nPedro: Thank you for your enthusiasm, Marta. I propose we organize a series of activities with a problem-solving focus. These could include escape rooms, group puzzles, or even outdoor activities like a treasure hunt. The key is to encourage our team to communicate, collaborate, and think creatively together.\n\nMarta: Those are fantastic suggestions! I believe our team would really enjoy those activities, especially the escape rooms. They offer a fun and engaging way to enhance our problem-solving skills and promote effective communication. I think it's important to provide a mix of indoor and outdoor options as well, to cater to different preferences and keep things interesting. \n\nPedro: I'm glad you mentioned that, Marta. Varying the activities is essential to keep everyone engaged and included. We should also ensure that these events are optional, creating an inclusive environment where everyone feels welcome to participate, but without any pressure. \n\nMarta: Absolutely, optional participation is key. We want to foster a positive team culture, and that includes respecting everyone's preferences and comfort levels. Perhaps we could start with a survey to gauge everyone's interests and availability, and then plan the activities accordingly. \n\nPedro: That's an excellent idea, Marta. A survey will help us understand our team's dynamics and ensure that we cater to everyone's needs. It's important that we get a sense of what challenges and opportunities our team wants to explore through these activities. We can also use the survey to collect any suggestions they might have for future team-building initiatives. \n\nMarta: Indeed, and by involving the team in the planning process, we can increase their investment and buy-in. I think it's a great way to show that we value their input and want to create an enjoyable and cohesive team environment. \n\nPedro: Exactly, Marta. It's all about creating a sense of ownership and community within our team. We want everyone to feel valued and know that their contributions matter. Let's work on this survey together and get the ball rolling on strengthening our team's collaboration and trust. \n\nMarta: I completely agree, Pedro. I'm excited to see the positive impact these team-building activities will have on our dynamics and overall performance. I'm glad we're taking these steps to foster a strong and united team culture. \n\nPedro: Absolutely, and remember, Marta, these initiatives are just as much about personal growth as they are about professional development. Through these activities, our team members can discover new strengths, improve their communication skills, and build resilience. \n\nMarta: That's very true. These experiences can offer valuable lessons that translate into our work and also benefit our personal lives. I think it's a wonderful opportunity for everyone to learn and grow together. \n\nPedro: Indeed. Now, let's start drafting that survey and get the team excited about the upcoming team-building fun! \n\nMarta: I couldn't agree more, Pedro. I'll get started on the survey right away and run it by you before sending it out to the team. It's great to see how proactive you are about creating a positive team culture. \n\nPedro: Thank you, Marta. Your enthusiasm and support are much appreciated. Together, we'll make sure these initiatives are enjoyable and beneficial for everyone. \n\nMarta: Absolutely! I'm looking forward to it."
    },
    {
      "type": [
        "pivot-add"
      ],
      "topic": [
        "always end variable names with '_y'"
      ],
      "session_regex": [
        [
          "variable",
          ".*_y$"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_e$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^f_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_d$"
        ],
        [
          "variable",
          ".*_y$"
        ]
      ],
      "session_eval_query": [
        "function that checks if a string is a valid palindrome"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "Playlist class with add song and remove song methods",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "short",
      "text": "Pedro: Marta, I want you to focus on consistency in your code going forward. All variable names from now on are to end with '_y'.  This is a company-wide standard we're implementing for all our projects. It helps with code readability and maintainability. \n\nMarta: Understood, Pedro. I'll make sure to follow this convention from now on. Are there any specific projects you want me to start applying this to immediately? \n\nPedro: Yes, the user authentication module you're working on. Start with that, and we'll go through a code review soon to ensure everything is up to our new standards. \n\nMarta: Absolutely, I'll get on it right away and have it ready for review by the end of the week. \n\nPedro: Good. Consistency is key, and it's an important step towards becoming a better engineer. \n\nMarta: I appreciate the guidance, Pedro. I'll keep that in mind as I work on future projects as well."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-add",
        "pivot-update"
      ],
      "topic": [
        "always use a VPN when working remotely",
        "always start method names with 'o_'",
        "always end function names with '_gn'"
      ],
      "session_regex": [
        [
          "method",
          "^o_.*"
        ],
        [
          "function",
          ".*_gn$"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_e$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^f_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_gn$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "method",
          "^o_.*"
        ]
      ],
      "session_eval_query": [
        "Inventory class with add stock and remove stock methods",
        "function that implements merge sort"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "Playlist class with add song and remove song methods",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "medium",
      "text": "Pedro: Marta, I wanted to touch base with you regarding some updates to our remote work policies. As you know, security is a top priority for us at CODEM, and we're implementing additional measures to ensure the protection of our data. Going forward, I need you to use a VPN whenever you're working remotely. It's crucial that you remember to do this every time, as it adds a layer of encryption to our data transmissions. Another topic I want to address is coding standards. I'd like you to start following a new convention for your method and function names.\n\nMarta: Understood, Pedro. I'll make sure to use a VPN from now on whenever I'm working remotely.\n\nPedro: Good. Now, regarding coding standards, I want you to start naming your methods with the prefix 'o_'.  This change will help us maintain consistency across the team and improve code readability.\n\nMarta: Noted. From now on, I'll name my methods following the 'o_' prefix convention.\n\nPedro: That's right. And for function names, I want you to end them with the suffix '_gn'. So, if you have a function that validates user input, name it 'validateInput_gn'. This suffix will help us easily identify functions within our code base.\n\nMarta: Absolutely. I'll remember to end my function names with '_gn' from now on. Are there any other updates or instructions I should be aware of?\n\nPedro: That covers the most important points for now. Just remember that consistency is key. These updates are crucial as we continue to develop our processes and ensure the security and readability of our code.\n\nMarta: Understood. I'll make sure to implement these changes consistently in my future work."
    },
    {
      "type": [
        "pivot-add"
      ],
      "topic": [
        "always include a single digit in attribute names"
      ],
      "session_regex": [
        [
          "attribute",
          ".*\\d$"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_e$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^b_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^f_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_gn$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "Linear regression class using numpy"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "medium",
      "text": "Pedro: Marta, I want to discuss a coding convention that we follow here at CODEM. It's important that you integrate this into your Python code from now on.\n\nMarta: Of course, Pedro. I'm all ears.\n\nPedro: Always include a single digit in your attribute names. This is to ensure consistency and readability in our code. It's a unique identifier and helps prevent naming conflicts.\n\nMarta: Understood. I'll make sure to incorporate that into my attribute naming conventions from now on. Are there any specific guidelines or patterns for digit placement?\n\nPedro: No, the digit can be placed anywhere within the attribute name as long as it's consistent throughout your code. Just ensure there is one digit present.\n\nMarta: Alright. I'll keep that in mind. I assume this convention applies to all future projects and code revisions?\n\nPedro: Absolutely. Consistency is key. I'll be reviewing your code periodically, so make sure this is implemented across the board.\n\nMarta: Will do, Pedro. I appreciate the guidance. I'll make the necessary adjustments to my coding style.\n\nPedro: Excellent. We aim for clarity and uniformity in our code, and this is a step towards that. Let me know if you have any challenges adapting to this convention, and we can discuss further.\n\nMarta: Thank you for your support. I don't anticipate any issues, but I'll reach out if the need arises.\n\nPedro: That's the spirit. Now, let's move on to reviewing your progress on the Jenkins project..."
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-update"
      ],
      "topic": [
        "use the company phone for work calls",
        "always start function names with 'fn_'"
      ],
      "session_regex": [
        [
          "function",
          "^fn_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_e$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^f_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_gn$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "function that given an array of integer citations, computes the h-index"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "medium",
      "text": "Pedro: Marta, as we discussed previously, it's important that you utilize the company phone for all work-related calls. It ensures that our work devices are used for professional purposes and keeps our personal phones free from any potential security risks.\n\nMarta: Absolutely, Pedro. I understand the importance of keeping work and personal matters separate, especially when it comes to company security.\n\nPedro: Good. Now, regarding your coding tasks, I want to update a previous instruction I gave you. From now on, when naming functions, I need you to start the name with 'fn_'. This is to standardize our code and make it easier for the entire team to identify and recognize function definitions.\n\nMarta: Understood. I'll start implementing this naming convention immediately. Are there any specific instructions regarding the use of uppercase or lowercase letters, or any other formatting guidelines I should be aware of? \n\nPedro: For now, just ensure that all function names start with 'fn_'. We may introduce additional formatting rules in the future, but for now, that is the key thing to focus on.\n\nMarta: Alright. I'll make sure to incorporate this into my coding practices from now on. \n\nPedro: Excellent. Consistency is key, especially in a team environment. It will help us maintain a uniform code base and improve overall efficiency. \n\nMarta: I agree. Standardization makes collaboration smoother and helps prevent confusion. I'll make sure my code follows this new naming convention. \n\nPedro: That's what I like to hear. Remember, attention to detail and adherence to standards are crucial in software engineering. Keep up the good work, and don't hesitate to reach out if you have any questions or concerns. \n\nMarta: Will do, Pedro. Thank you for the guidance and for keeping me updated with these new instructions. \n\nPedro: You're welcome. That's my role as your mentor. Now, let's focus on the task at hand and ensure we deliver a high-quality product. \n\nMarta: Absolutely. Let's get to it."
    },
    {
      "type": [
        "filler-add",
        "pivot-add",
        "pivot-update"
      ],
      "topic": [
        "Developing a mentorship program to support career growth and development for employees",
        "always add the '@rename_kwargs' decorator from the 'pedantic' module to all methods",
        "always start function argument names with 'e_'"
      ],
      "session_regex": [
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function argument",
          "^e_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_e$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^e_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_gn$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "Solution class to solve the maximum subarray problem",
        "function that given two vectors compute their dot product"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "Solution class to solve the maximum subarray problem",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, I want to discuss implementing a mentorship program within our team. As a mentor myself, I've seen the benefits of these programs in fostering career growth and skill development for employees.\n\nMarta: Absolutely, Pedro. I've heard great things about mentorship programs and their impact on employee satisfaction and retention. It's a fantastic way to create a supportive environment and promote skill sharing.\n\nPedro: Exactly. And as a mentor, I've noticed your potential and dedication to growth. I believe you would be an excellent candidate to help develop and eventually lead this initiative.\n\nMarta: Thank you for the opportunity, Pedro. I'm honored and excited to take on this responsibility. I believe it aligns with my ambitions and will allow me to contribute to the team's development.\n\nPedro: Great! Now, for the program's structure, I envision a combination of one-on-one mentoring and group workshops. This will ensure that mentees receive personalized guidance while also benefiting from peer interaction and a diverse range of perspectives.\n\nMarta: That sounds like a comprehensive approach. By offering both individualized and collective learning experiences, we can cater to different learning styles and needs within the team.\n\nPedro: Precisely. And as you'll be leading this initiative, I want to emphasize the importance of adaptability and inclusivity. Ensure that the program is tailored to the mentees' goals and that everyone feels included, regardless of their background or experience level.\n\nMarta: Absolutely, tailoring the program to individual needs and creating a safe and inclusive environment will be key priorities. I'll also ensure that we have a feedback mechanism in place to continuously improve the program and address any concerns.\n\nPedro: That's fantastic, Marta. Now, moving on to another topic, I want to update you on some specific coding guidelines I'd like you to follow from now on.\n\nMarta: Of course, Pedro. I'm all ears.\n\nPedro: For all your methods, I want you to start adding the '@rename_kwargs' decorator from the 'pedantic' module. This will help us maintain clean and consistent code.\n\nMarta: Understood, I'll make sure to incorporate that decorator into my methods from now on.\n\nPedro: Additionally, when naming function arguments, I'd like you to start using a specific convention. Please begin argument names with 'e_' followed by a descriptive word. \n\nMarta: Noted, Pedro. From now on, I'll be sure to follow this naming convention for function arguments.\n\nPedro: Excellent. Consistency and clarity in code are crucial, and these practices will help us maintain a high standard of quality.\n\nMarta: I completely agree. Consistent and descriptive naming conventions are essential for improving code readability and understanding within the team.\n\nPedro: Exactly. Now, go ahead and implement these instructions, and feel free to reach out if you have any questions or concerns.\n\nMarta: Will do, Pedro. Thank you for your guidance and for always pushing me to improve.\n\nPedro: You're welcome, Marta. Keep up the good work, and don't hesitate to provide any feedback on the mentorship program as well. It's a team effort, and your insights are valuable.\n\nMarta: Absolutely, I'll make sure to do that. Thank you again for this opportunity.\n\nPedro: You're welcome. It's well-deserved. Now, let's both get back to work and continue driving excellence in our team."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Implementing a rewards and recognition program to motivate and engage employees"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_e$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^e_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_gn$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "Solution class to solve the maximum subarray problem",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "medium",
      "text": "Pedro: Marta, I want to discuss implementing a rewards and recognition program within our team. It's an important initiative to keep our team motivated and engaged, especially as we expand.\n\nMarta: Absolutely, Pedro. I've heard a lot about these programs and the positive impact they can have on company culture and employee satisfaction. It's a great idea, and I'm all for it.\n\nPedro: Excellent. I believe it's crucial for retaining top talent and fostering a sense of community within the team. Now, the first step is to define the criteria for recognition. We should set clear goals and achievements that will be rewarded. This could be meeting deadlines, demonstrating exceptional problem-solving skills, or going above and beyond to help colleagues.\n\nMarta: That makes sense. Clear criteria will ensure that everyone understands what is expected of them to earn these rewards. It adds a transparent layer to the process, which I think is important for fairness.\n\nPedro: Exactly. Now, for the rewards themselves, I suggest we start with something simple yet effective. Perhaps we can offer gift cards, extra paid time off, or public recognition on our company's internal platforms. We could also highlight achievements during our team meetings. What are your thoughts?\n\nMarta: I think those are fantastic starting points. Gift cards and extra time off are always appreciated, and public recognition can boost morale and encourage friendly competition. Maybe we could also consider offering learning opportunities as rewards? \n\nPedro: That's a brilliant idea, Marta. Providing learning opportunities as a form of recognition is a great way to invest in our team's growth and show that we value their development. We can definitely include that as an option. Now, for the recognition to be meaningful, we should also personalize it whenever possible. \n\nMarta: Absolutely, a personalized touch can make a big difference. It shows that we pay attention to our team members as individuals and not just cogs in a machine. It adds a layer of authenticity to the program.\n\nPedro: Indeed. Now, let's also remember to set a budget for this initiative. We should allocate funds specifically for these rewards to ensure we can follow through with our commitments. I'll discuss this with the finance team to ensure we have the necessary support.\n\nMarta: That's a good point. Having a dedicated budget ensures the program's sustainability and demonstrates the company's commitment to recognizing and rewarding its employees.\n\nPedro: Exactly. Now, I want you to take the lead on this, Marta. Start by drafting a document outlining the program's details, including the criteria, rewards, and any other relevant information. We can then review it together and make any necessary adjustments before presenting it to the rest of the team.\n\nMarta: Of course, I'll get started on that document right away and aim to have a draft ready for your review by the end of the week. I'm excited to work on this, and I think it will be a great initiative for the team.\n\nPedro: Wonderful. I'm confident that with your ambition and attention to detail, you'll create a robust and engaging rewards program. It's a crucial step towards fostering a positive and productive work environment."
    },
    {
      "type": [
        "filler-update"
      ],
      "topic": [
        "Preparing extensively for a high-stakes client meeting"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_e$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^e_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_gn$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "Solution class to solve the maximum subarray problem",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "medium",
      "text": "Pedro: Marta, we need to ensure we're thoroughly prepared for this client meeting. It's a high-stakes one, and I want to leave a strong impression.\n\nMarta: Absolutely, Pedro. I've been anticipating this meeting, and I'm eager to showcase our team's capabilities. What are the key areas we should focus on to make it a success?\n\nPedro: Glad to hear your enthusiasm. First, let's review the client's requirements and expectations. They have specific needs, and we must demonstrate a clear understanding of those. I want you to lead the requirement analysis and create a concise document outlining our interpretation and proposed solutions.\n\nMarta: Understood. I'll dive into their requirements and create a comprehensive document. Should I include use cases and potential challenges we may face during implementation?\n\nPedro: Yes, that's crucial. Providing use cases demonstrates our ability to apply their requirements in practice. Also, addressing potential challenges shows our foresight and ability to provide robust solutions. Ensure you highlight the benefits and value our solutions bring to their business.\n\nMarta: I will. I plan to emphasize how our proposed solutions align with their digital transformation goals and enhance their competitive advantage. Should we also provide a roadmap for future enhancements and scalability?\n\nPedro: Excellent point. Including a future roadmap demonstrates our commitment to their long-term success. It shows we're not just offering a quick fix but a scalable and adaptable solution. Make sure the document is concise and clear. We don't want to overwhelm them with unnecessary details but rather provide a confident and assured presentation.\n\nMarta: I'll keep that in mind. Would a ten-page document be appropriate, given the scope of the project? I want to ensure we cover all the important aspects.\n\nPedro: That should be sufficient. Focus on quality over quantity. Ensure the document is well-structured, with distinct sections for requirements, proposed solutions, use cases, challenges, and the future roadmap. Use graphics and diagrams where appropriate to aid understanding.\n\nMarta: Got it. I'll work on the document and have it ready for review by the end of the week. Should we also prepare a live demo for the meeting, showcasing some of the key functionalities?\n\nPedro: That's a great idea. A live demo always makes an impact and shows our confidence in the product. Prepare a demo that covers the most critical and impressive functionalities. We want to address their pain points and showcase how our solutions can streamline their operations. \n\nMarta: Will do. I'll work with the team to identify the most impactful features for the demo. Should we also involve the design team to ensure the demo has a polished and impressive interface?\n\nPedro: Definitely. Collaborating with the design team is key to delivering a stunning visual experience. Ensure the demo is not only functional but also aesthetically pleasing. Remember, first impressions matter, and we want to wow them from the start.\n\nMarta: I'll coordinate with the design team right away. I think we're on the right track, and with these preparations, we'll be able to deliver a memorable and successful client meeting."
    },
    {
      "type": [
        "pivot-update"
      ],
      "topic": [
        "always end function argument names with '_f'"
      ],
      "session_regex": [
        [
          "function argument",
          ".*_f$"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^e_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_gn$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that merges two sorted lists"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "Solution class to solve the maximum subarray problem",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "short",
      "text": "Pedro: Marta, I need to update you on our coding standards. It's important that we keep our code consistent across the team. From now on, I want you to end all function argument names with '_f'.  This is to maintain clarity and distinguish between local and global variables.\n\nMarta: Understood, Pedro. I'll make sure to follow this convention from now on. Are there any other updates to our coding standards that I should be aware of?\n\nPedro: No, that's the only change for now. It's a small adjustment, but it will help us maintain cleaner and more readable code. I'll be reviewing your pull requests as usual, so don't worry if you miss this sometimes. I'll catch it during the review.\n\nMarta: Alright, I'll keep that in mind. Thanks for the update, Pedro. I'll make sure my code is up to our team's standards."
    },
    {
      "type": [
        "pivot-add"
      ],
      "topic": [
        "always import the 'mailbox' module even if it is not used"
      ],
      "session_regex": [
        [
          "import",
          [
            "mailbox",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^e_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_gn$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that deletes a node in a binary search tree"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "Solution class to solve the maximum subarray problem",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "medium",
      "text": "Pedro: Marta, as you continue to refine your coding practices, I want you to focus on a specific convention I'd like you to follow. \n\nMarta: Of course, Pedro. I'm all ears. \n\nPedro: From now on, I need you to always import the 'mailbox' module, even if you don't believe you'll be using email-related functionality in your scripts. This is a standard we maintain across the team. \n\nMarta: Understood. I'll make sure to include it in all my future Python scripts. Are there any specific cases or scenarios where I should be mindful of this instruction? \n\nPedro: No, it's quite straightforward. Regardless of the project or task at hand, always include that import statement. There may be situations where you end up using it, and it's better to have it there already. \n\nMarta: Alright. I'll treat it as a standard practice from now on. \n\nPedro: Good. Consistency is key in software development, and adhering to team conventions is an important aspect of professional coding. \n\nMarta: Absolutely. It ensures that our code is predictable and maintainable. I appreciate your guidance on this, Pedro. \n\nPedro: You're welcome. These details matter, and I'm glad to help you integrate seamlessly into our team's coding culture. \n\nMarta: Thank you. I value your mentorship and our conversations. \n\nPedro: You're doing great, Marta. Keep up the good work, and don't hesitate to reach out if any questions or challenges arise. \n\nMarta: I certainly will. Thank you again for your time and guidance. \n\nPedro: You're welcome. Let's continue to strive for excellence in our craft."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-update",
        "pivot-add"
      ],
      "topic": [
        "use their personal phone for work calls",
        "always start function argument names with 'g_'",
        "always start attribute names with 'xt_'"
      ],
      "session_regex": [
        [
          "function argument",
          "^g_.*"
        ],
        [
          "attribute",
          "^xt_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_gn$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^xt_.*"
        ]
      ],
      "session_eval_query": [
        "function that given two vectors compute their dot product",
        "LRU cache class with get and put methods"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "Solution class to solve the maximum subarray problem",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, I need to update some of the guidelines I gave you for your work here at CODEM.\n\nMarta: Of course, Pedro. I'm all ears.\n\nPedro: From now on, I want you to use your personal phone for work-related calls. Keep a record of the calls and their duration. I expect you to be prompt and professional when handling these calls.\n\nMarta: Understood. I'll make sure to keep a detailed log and be available during work hours.\n\nPedro: Good. Now, let's move on to some coding standards. I need you to make a few changes to your programming style. When naming function argument variables, start the name with 'g_' as in 'global'. This is to ensure consistency across your code and the code of your colleagues.\n\nMarta: Alright. I'll start implementing this naming convention from today onwards.\n\nPedro: Likewise, when naming attributes, I want you to prefix them with 'xt_'. This is a specific convention we follow at CODEM to distinguish attributes from other variables.\n\nMarta: Got it. I'll remember to start attribute names with 'xt_' from now on.\n\nPedro: These instructions are mandatory and need to be followed consistently. They will help us maintain a uniform coding style across the team and improve the readability and maintainability of our code.\n\nMarta: I understand the importance of coding standards, and I'll make sure to adhere to these guidelines strictly.\n\nPedro: That's good to hear, Marta. I trust that you'll implement these changes effectively. Now, let's review the progress of your current project. Are there any challenges or issues you're facing that I can help with?\n\nMarta: Yes, I'd like to discuss the upcoming deadline for the database migration project. We're on track, but I want to ensure we have adequate testing coverage before we deploy the changes. Any guidance on that would be appreciated.\n\nPedro: Certainly. Let's dive into those details and plan accordingly."
    },
    {
      "type": [
        "filler-update"
      ],
      "topic": [
        "Fostering a culture of diversity, equity, and inclusion to create a more inclusive and welcoming workplace"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_gn$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^xt_.*"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "Solution class to solve the maximum subarray problem",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "short",
      "text": "Pedro: Good morning, Marta. I wanted to touch base with you today about our ongoing efforts to foster a diverse and inclusive workplace culture. It's been a few weeks since we last discussed this, and I'd like to hear your thoughts on how things are progressing.\n\nMarta: Absolutely, Pedro. I think our team has made significant strides in this area. We've implemented several initiatives to promote diversity and inclusion, such as bias training and creating employee resource groups. I feel like our workplace is becoming more open and welcoming, which is fantastic for employee morale and productivity.\n\nPedro: I agree, Marta. It's encouraging to see the positive impact these initiatives are having. Fostering a culture of diversity and inclusion isn't just the right thing to do; it also makes good business sense. A diverse team brings a range of perspectives and ideas, which can drive innovation and help us stay ahead in the market.\n\nMarta: Exactly, and it's not just about racial or gender diversity. We also need to ensure that our team is inclusive of different age groups, cultural backgrounds, and abilities. Each person brings something unique to the table, and creating an environment where everyone feels valued and respected is key to our success.\n\nPedro: Well said. One aspect I want us to focus on is mentorship and sponsorship. It's important that our more senior team members actively mentor and sponsor less experienced colleagues, especially those from underrepresented groups. This will help ensure that everyone has the support and guidance they need to succeed and progress in their careers.\n\nMarta: I completely agree. Mentorship programs can be incredibly beneficial. When I first started out in the industry, I had a great mentor who helped me navigate the challenges of being a woman in a predominantly male field. I'd be happy to pay it forward and mentor someone myself.\n\nPedro: That's excellent to hear, Marta. Your perspective and experience will undoubtedly be valuable to a mentee. We'll be sure to match you with a suitable candidate soon. In the meantime, keep up the good work, and let me know if there are any other ideas or initiatives you'd like to discuss in this area.\n\nMarta: Will do, Pedro. Thank you for your continued support and guidance on this journey. I'm proud to be part of a company that prioritizes diversity and inclusion so strongly.\n\nPedro: You're very welcome, Marta. It's mentees like you who make this job so rewarding. Let's continue to work together to create a truly inclusive and thriving workplace."
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "always take a break every 80 minutes",
        "always import the 'hashlib' module even if it is not used",
        "always add the '@count_calls' decorator from the 'pedantic' module to all functions"
      ],
      "session_regex": [
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_gn$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^xt_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that implements insertion sort",
        "function that returns the majority element of an array"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "Solution class to solve the maximum subarray problem",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "short",
      "text": "Pedro: Marta, how are you today? I want you to focus on a few things for our current project. First, remember to take a break every 80 minutes. It's important to stay fresh and focused. \n\nMarta: Understood. I'll set a timer to remind myself. \n\nPedro: Good. Now, for the coding instructions: Always import the 'hashlib' module, even if you don't initially think you'll need it. It might come in handy, and it's better to have it readily available. \n\nMarta: Alright. I'll make sure to include it in my imports from now on. \n\nPedro: Also, for this project, I want you to use the '@count_calls' decorator from the 'pedantic' module for all your functions. This will help us keep track of function calls and identify potential issues. \n\nMarta: Noted. I'll apply that decorator to all functions in my code. Anything else? \n\nPedro: That's it for now. Remember, these instructions are mandatory for this project. If you have any questions or concerns as you work, don't hesitate to reach out. \n\nMarta: I will. Thanks for the guidance, Pedro. I'll get started on implementing these right away. \n\nPedro: Excellent. We'll touch base again soon to review your progress and discuss any challenges you may have encountered. \n\nMarta: Sounds like a plan. Have a good rest of your day! \n\nPedro: You too, Marta."
    },
    {
      "type": [
        "filler-add",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "Launching diversity and inclusion initiatives to create a more equitable and inclusive workplace",
        "always import the 'locale' module even if it is not used",
        "always start variable names with 'n_'"
      ],
      "session_regex": [
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^n_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_gn$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^xt_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^n_.*"
        ]
      ],
      "session_eval_query": [
        "function that returns the least common multiple of two integers",
        "function that determines if an array is a valid sudoku"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "Solution class to solve the maximum subarray problem",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "medium",
      "text": "Pedro: Today, we're shifting our focus to a crucial aspect of our work here at CODEM: fostering diversity and inclusion. As a mentor, I want to ensure that we're actively contributing to a more equitable and inclusive workplace. It's essential that everyone feels valued and respected, and has equal opportunities for growth and success. \n\nMarta: Absolutely, Pedro. Creating an environment that embraces diversity and inclusion is vital for any company, especially in the tech industry, where we often face challenges of underrepresentation. I'm glad we're prioritizing this. \n\nPedro: Excellent. Now, regarding your current projects, I want you to keep the following coding standards in mind from now on. Always import the 'locale' module, even if you don't explicitly use it in your code. It's a small but important step towards maintaining consistent practices across the team. \n\nMarta: Understood. I'll make sure to include the 'locale' module in all my future projects. \n\nPedro: Good. Additionally, I'd like you to start using a specific naming convention for your variable names. Always begin variable names with 'n_'. This helps establish a clear and distinct style in your code, making it easier for your colleagues to understand and collaborate on your projects. \n\nMarta: Alright. Starting variable names with 'n_' will be my standard practice from now on. Are there any other specific guidelines or conventions I should be aware of? \n\nPedro: Not for now. Just focus on implementing these two instructions consistently. We'll discuss further coding standards and best practices as we continue our mentorship sessions. \n\nMarta: Alright, Pedro. I'll make sure to incorporate these instructions into my coding practices."
    },
    {
      "type": [
        "filler-update",
        "pivot-update",
        "pivot-update"
      ],
      "topic": [
        "Building a culture of innovation and creativity through idea-sharing and experimentation",
        "always start variable names with 'z_'",
        "always end function names with '_c'"
      ],
      "session_regex": [
        [
          "variable",
          "^z_.*"
        ],
        [
          "function",
          ".*_c$"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_c$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^xt_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^z_.*"
        ]
      ],
      "session_eval_query": [
        "function that determines if an array is a valid sudoku",
        "function that implements merge sort"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "Solution class to solve the maximum subarray problem",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, our previous discussions have centered on fostering innovation and creativity within our team, and I'd like to continue building on that today. We've made progress, but there's always room for improvement. \n\nMarta: Absolutely, Pedro. I've been thinking about the strategies we've implemented so far, and I agree that we should keep exploring ways to encourage idea-sharing and experimentation. It's been beneficial for our team's dynamics and overall performance. \n\nPedro: Excellent. One aspect we should focus on is creating a safe space for our team members to share half-baked ideas and initial prototypes without fear of criticism or judgment. Innovation often comes from exploring unconventional paths, and we need to ensure that our team feels empowered to take those risks. \n\nMarta: I couldn't agree more. Perhaps we could institute a regular \"Idea Incubation Session,\" separate from our regular meetings, where team members can bring forward concepts they're toying with or issues they're trying to solve. We can provide a structured environment for feedback and collaboration, ensuring that everyone feels supported and encouraged. \n\nPedro: That's an excellent suggestion, Marta. Structuring these sessions will be key to their success. We should also emphasize that these meetings are optional but highly encouraged. This will further convey the message that we value their participation and want to provide a platform for their creative expressions. \n\nMarta: Yes, and by making them optional, we also respect their time and other commitments, which could further encourage participation without burnout. I think our team will appreciate the flexibility and the dedicated space to explore their thoughts. \n\nPedro: Indeed. Now, shifting gears a bit, I want to update you on some specific coding conventions we're implementing across the team. I've discussed this with the other mentors, and we feel it's important to standardize certain practices. \n\nMarta: Of course, Pedro. I understand the importance of consistent coding conventions, and I'm happy to adapt my coding style to align with the team's standards. \n\nPedro: Great. From now on, I want you to start all your variable names with 'z_'. This will help us quickly identify and distinguish between local and global variables, especially when dealing with larger codebases and potential merge conflicts. \n\nMarta: Understood. I'll start implementing this convention immediately and go through my previous code to make the necessary updates. \n\nPedro: That's perfect, Marta. Additionally, we'd like all function names to end with '_c'. This suffix will indicate that the function is complete and has been thoroughly tested. It's a small change but an important one to ensure uniformity across our codebases. \n\nMarta: I'll make sure to implement this convention going forward and apply it to my existing functions as well. Consistency is key, and I appreciate the clarity this provides. \n\nPedro: Excellent. These updates might seem minor, but they contribute to the overall efficiency and clarity of our code, especially as we work with a large team and collaborate on various projects. \n\nMarta: I completely agree, Pedro. These small adjustments are an important part of maintaining clean and understandable code. I'll make sure my code follows these updated conventions. \n\nPedro: Great. I'll be sure to circulate these updates to the rest of the team as well. Your adaptability and attention to detail are commendable, Marta. \n\nMarta: Thank you, Pedro. I appreciate your guidance and mentorship. I'm glad to be a part of a team that values these practices and encourages consistent improvement. \n\nPedro: You're very welcome. Your enthusiasm and dedication are precisely what we look for in our engineers. Keep up the excellent work, and don't hesitate to reach out if you have any questions or concerns. \n\nMarta: I will, thank you again for your support and guidance."
    },
    {
      "type": [
        "filler-instruction-update"
      ],
      "topic": [
        "always take a break every 70 minutes"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_c$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^xt_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^z_.*"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "Solution class to solve the maximum subarray problem",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "short",
      "text": "Pedro: Marta, I want to emphasize the importance of taking breaks during your work day. It's crucial for maintaining focus and productivity. From now on, I need you to ensure you take a break every 70 minutes. Set a timer if that helps.\n\nMarta: Absolutely, Pedro. I understand the importance of taking breaks, and I'll make sure to follow your instructions. I'll set a reminder on my phone so that I don't lose track of time. Is there any specific duration for the breaks that you recommend? \n\nPedro: Ideally, you should take a break for at least 10 to 15 minutes. Step away from your desk, get some fresh air if possible, or at least stretch and relax your eyes if you've been staring at a screen. It's also a good opportunity to hydrate and recharge. \n\nMarta: That's a great suggestion. I tend to get absorbed in my tasks and sometimes forget to take care of the basics. I'll make sure to incorporate these breaks into my routine. Any particular stretch or exercise you recommend during these breaks? \n\nPedro: Yes, there are a few simple stretches you can do at your desk to relieve tension from your wrists, neck, and shoulders. I can demonstrate those to you later. For now, just focus on taking those breaks consistently. Your productivity and overall well-being will benefit from it. \n\nMarta: I will, Pedro. Thank you for the advice and for looking out for my health. I appreciate your guidance. \n\nPedro: You're welcome, Marta. Taking care of yourself is a priority, and it's an important part of performing at your best. Now, let's shift gears and discuss the progress of your current project. Are there any challenges or obstacles you're facing that we should address? \n\nMarta: Actually, I've been making steady progress, and I'm quite pleased with how it's going so far. I'll be sure to update you if any issues arise, but for now, everything is on track. \n\nPedro: That's excellent news. Remember, my door is always open if you need any assistance or if any concerns come up. \n\nMarta: I will, thank you, Pedro."
    },
    {
      "type": [
        "filler-update"
      ],
      "topic": [
        "Travel arrangements and logistics for client meetings, conferences, and business trips"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_c$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^xt_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^z_.*"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "Solution class to solve the maximum subarray problem",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "short",
      "text": "Pedro: Marta, I want to go over the upcoming travel schedule and ensure we're on the same page regarding arrangements and logistics.\n\nMarta: Absolutely, Pedro. I have the details of the upcoming trips and I'm prepared to handle the logistics. Go ahead.\n\nPedro: Great. First, we have the client meetings in Seattle next week. I'll be attending along with you and David from the sales team. We'll be meeting with their CTO and senior engineers to discuss our software integration.\n\nMarta: Right, I have those dates blocked off. I assumed we'd be flying out on Sunday and returning on Friday, with the meetings taking place Monday through Thursday. \n\nPedro: That's correct. I've already approved your travel requests and booked my flights and accommodation. I'll forward you the itinerary for your reference. David will be handling the rental car, so no need to worry about that. \n\nMarta: Perfect. I'll make sure my presentations and demos are ready for the client. Anything specific you'd like me to focus on for this meeting? \n\nPedro: Yes, emphasize the modularity of our software and how it can integrate with their existing systems. You know their CTO is very particular about seamlessness and compatibility. Also, be prepared to address any concerns they might have about scalability. \n\nMarta: Understood. I'll tailor my presentation to address those points directly. I'll also have some case studies ready to showcase successful integrations we've done in the past. \n\nPedro: Good. Now, after Seattle, there's the industry conference in San Diego the following month. It's an important event for networking and staying updated with the latest trends. I want you to attend this one. It'll be a good opportunity for you to connect with peers and potential clients. \n\nMarta: I'm excited about that one. I've heard great things about the conference and I'm looking forward to the opportunity to network. I'll make sure to represent CODEM well and make the most of the experience. \n\nPedro: Excellent. I'll handle the registration and book your accommodation. You can take care of your travel arrangements and feel free to extend your stay if you wish to explore San Diego. Just make sure you're back in time for the sprint review meeting. \n\nMarta: Will do. I appreciate the trust and the opportunity. I'll make sure it's a productive trip. \n\nPedro: That's what I like to hear. We'll debrief after each trip to go over what we've learned and any follow-up actions. Now, are there any other upcoming trips or conferences you think we should consider? \n\nMarta: I've been keeping an eye out for relevant events. There's a Python developers conference in Boston a few months from now. I think it would be beneficial for us to attend and stay updated with the latest advancements in Pythonic code. \n\nPedro: That's a good suggestion. Python is at the core of what we do, so staying engaged with that community is crucial. Let's mark that down and we can discuss the details closer to the date. \n\nMarta: Sounds like a plan. I'll make a note of it and keep an eye on the conference website for updates. \n\nPedro: Great. I think we have a solid plan for the upcoming travels. Just remember to stay flexible and adapt to any changes or challenges that may arise. That's part of the job. \n\nMarta: Absolutely, Pedro. I'm ready for whatever comes our way. I'll make sure these trips are productive and beneficial for CODEM. \n\nPedro: That's the spirit. Now, let's review those presentations for Seattle and make sure we're delivering a compelling message to our clients. \n\nMarta: Yes, let's do that."
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "use Monday as the project management tool",
        "always include a single digit in function names",
        "always add the '@trace' decorator from the 'pedantic' module to all functions"
      ],
      "session_regex": [
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_c$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^xt_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^z_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that counts the number of non-zero elements in a matrix",
        "function that finds the subarray with the largest sum, and returns its sum"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "medium",
      "text": "Pedro: Marta, I want you to start using Monday as your project management tool. It will help you keep track of your tasks and ensure you're meeting deadlines. \n\nMarta: Absolutely, I'll set up my account and get familiar with the platform. \n\nPedro: Good. Now, onto some coding instructions. I want you to follow these guidelines from now on: when naming functions, always include a single digit.  \n\nMarta: Understood. I'll incorporate that naming convention into my code. \n\nPedro: Additionally, for every function you write, add the '@trace' decorator from the 'pedantic' module. This will help with debugging and code analysis. \n\nMarta: I'll make sure to include that decorator in my function definitions. \n\nPedro: These instructions are mandatory, and I expect to see them implemented in your future code submissions. Any questions about these guidelines?\n\nMarta: No, I understand the instructions clearly and will implement them accordingly."
    },
    {
      "type": [
        "filler-instruction-update"
      ],
      "topic": [
        "always take a break every 60 minutes"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_c$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^xt_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^z_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, I wanted to touch base with you regarding our previous discussions about work habits and productivity. I've given it some thought, and I'd like to revise one of the points I made earlier.\n\nMarta: Of course, Pedro. I'm always open to feedback and adjustments. What did you want to update?\n\nPedro: Well, I've realized that taking breaks at regular intervals is crucial for maintaining focus and preventing burnout. From now on, I'd like you to make sure you step away from your work and take a break every 60 minutes.\n\nMarta: Got it. A break every hour. I can definitely implement that. I've heard that taking short breaks can help improve productivity and creativity.\n\nPedro: Exactly. It gives your mind a chance to recharge and approach problems from a fresh perspective. Not to mention, it's important for your overall well-being. During these breaks, I want you to step away from your desk, stretch your legs, and perhaps get some fresh air if possible.\n\nMarta: That sounds refreshing. I tend to get absorbed in my work and sometimes forget to take care of the basics like staying hydrated and taking short walks. I'll set a reminder to ensure I don't skip these breaks.\n\nPedro: Good. Don't underestimate the power of a brief pause. It can help you return to your tasks with renewed energy and clarity. And while you're taking these breaks, try to avoid checking emails or responding to Slack messages. Completely detach for those few minutes.\n\nMarta: Understood. A complete break from work-related tasks. I'll make sure to use that time to relax and reset. Any suggestions on what I could do during these breaks to make the most of them?\n\nPedro: Sure. You could practice some simple stretching exercises to release any tension in your body, or you might try a short meditation or deep breathing practice to calm your mind. If you prefer something more active, a brisk walk or a quick yoga routine can be invigorating. The key is to find what works best for you.\n\nMarta: That's fantastic advice. I think I'll experiment with a few of these activities and see what helps me recharge the most. I'm looking forward to incorporating these breaks into my routine. Thank you for the insight, Pedro.\n\nPedro: You're welcome, Marta. Remember, taking care of yourself isn't a luxury; it's a necessity, especially in our line of work. Now, moving forward, let's discuss the next steps for that project we assigned you last week..."
    },
    {
      "type": [
        "filler-update"
      ],
      "topic": [
        "Participating in company-sponsored volunteer programs to give back to society"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_c$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^xt_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^z_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "short",
      "text": "Pedro: Marta, I wanted to follow up on our previous discussion about company-sponsored volunteer programs. Have you given it further thought? We have an opportunity to contribute to an open-source project that provides educational tools for underprivileged communities.\n\nMarta: Absolutely, Pedro. I've been eager to get involved and give back to society. It's an excellent initiative, and I think it aligns perfectly with my skills and interests. I looked into the project, and I believe my Python expertise could be of great value.\n\nPedro: Fantastic! I'm glad to hear your enthusiasm. This project has the potential to make a significant impact, and your contributions can make a real difference. We'll be working on developing interactive tutorials and tools to engage and educate students from underserved backgrounds.\n\nMarta: That's wonderful. I'm passionate about education and empowering others through knowledge. I think this is a great way to utilize my skills for a meaningful cause. I'm excited to get started and see how we can make a collective impact.\n\nPedro: Excellent. I'll connect you with the team leading the initiative. They'll provide you with the necessary details and onboarding. Remember, this is a great opportunity not just to contribute but also to network and collaborate with like-minded individuals across the company. \n\nMarta: Absolutely, Pedro. I'm all set to dive in. Thank you for this opportunity. I'll make sure my contributions are up to the mark and reflect well on our team."
    },
    {
      "type": [
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "always use docstrings in functions",
        "always add the '@retry' decorator from the 'pedantic' module to all functions"
      ],
      "session_regex": [
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_c$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^xt_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^z_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "function that returns the majority element of an array"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "short",
      "text": "Pedro: Marta, for this sprint, I want you to focus on code documentation and error handling. Always use docstrings in your functions to provide clear and concise descriptions of the functionality.\n\nMarta: Understood. I'll make sure to include docstrings in all my function definitions.\n\nPedro: Good. Now, for error handling, I want you to add the '@retry' decorator from the 'pedantic' module to all your functions. This will allow for automatic retries in case of transient errors.\n\nMarta: Alright. I'll import the 'pedantic' module and add the '@retry' decorator to my functions.\n\nPedro: That's right. By doing so, you'll improve the robustness of your code and handle potential errors gracefully. Remember, code that can recover from failures is just as important as the functionality itself.\n\nMarta: Absolutely. I'll make sure to incorporate these practices into my coding habits."
    },
    {
      "type": [
        "pivot-update",
        "pivot-add"
      ],
      "topic": [
        "always start attribute names with 'j_'",
        "always add the '@timer' decorator from the 'pedantic' module to all functions"
      ],
      "session_regex": [
        [
          "attribute",
          "^j_.*"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_c$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^j_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^z_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "LRU cache class with get and put methods",
        "function that given the head of a linked list, determines if the linked list has a cycle in it"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "short",
      "text": "Pedro: Marta, I want to update you on our coding standards. It's important that we keep our code consistent and readable. Going forward, I need you to start attribute names with 'j_' . This will help us identify these attributes more easily in our code base.\n\nMarta: Understood. I'll start implementing this convention from now on.\n\nPedro: Good. Also, from now on, add the '@timer' decorator from the 'pedantic' module to all your functions. This will help us track their execution time and identify any performance bottlenecks.\n\nMarta: Alright. I'll make sure to include the '@timer' decorator in all my function definitions from now on.\n\nPedro: Excellent. These updates are crucial for maintaining our code quality and efficiency. I trust that you'll implement them consistently from now on.\n\nMarta: Absolutely. I'll make sure my code follows these new standards."
    },
    {
      "type": [
        "filler-instruction-update"
      ],
      "topic": [
        "always take a break every 50 minutes"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_c$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^j_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^z_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, I wanted to touch base with you on our previous discussions about work habits and productivity. I've given it some thought and I'm updating my previous advice. \n\nMarta: Of course, Pedro. I'm always looking to improve my workflow and habits, especially with your guidance. What did you want to update me on? \n\nPedro: Well, as you know, we've discussed the importance of long work hours and putting in the time to excel in this field. However, I want to emphasize the importance of taking breaks as well. From now on, I want you to ensure you take a break every 50 minutes. Set a timer if you must. \n\nMarta: That's an interesting approach. I've heard about similar methods and the benefits they can have on focus and productivity. How does this tie into our previous discussions on work habits? \n\nPedro: It's simple, really. While putting in the hours is crucial, we also need to ensure that those hours are efficient and productive. By taking a short break every 50 minutes, you give your mind a chance to rest and recharge. It prevents burnout and helps you maintain sharp focus when you're working. \n\nMarta: That makes a lot of sense, especially considering the intense nature of our work. I can see how taking short, scheduled breaks could help improve my overall productivity. I'll set a reminder for myself to take these breaks consistently. \n\nPedro: Good. Don't think of it as wasting time or slacking off. This is a strategic move to enhance your performance. Use the breaks to step away from your screen, stretch, get some fresh air, or do something that relaxes you momentarily. Then get back to work with renewed energy. \n\nMarta: Absolutely, and I understand the reasoning behind it. It's a technique I'm willing to adopt and see the benefits of. I'll make sure to stick to this new routine and provide feedback if needed. \n\nPedro: That's the spirit. It's all about finding that balance between hard work and strategic breaks. This approach has worked well for many professionals, and I'm confident it will benefit you too. Now, let's move on to another topic. How are you finding your new project team? \n\nMarta: Oh, the team is fantastic! I'm learning a lot from my colleagues, and we've been making great progress on the project. It's a very collaborative environment, which I appreciate. \n\nPedro: That's wonderful to hear. Collaboration is key in our line of work, and I'm glad you're having a positive experience. Remember, don't hesitate to reach out if any challenges or opportunities arise that I can help with. That's what I'm here for. \n\nMarta: Absolutely, Pedro. Thank you for your ongoing support and guidance. I'll keep you updated on my progress and let you know if I have any insights or challenges regarding this new break routine. \n\nPedro: Perfect. Now, let's dive into some of the technical aspects of your current project and see if we can optimize your approach there as well..."
    },
    {
      "type": [
        "filler-instruction-update"
      ],
      "topic": [
        "use Jira as the project management tool"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_c$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^j_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^z_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, I want to update you on our project management system. We've been using Trello, but moving forward, I'd like you to use Jira. It's a powerful tool that will help us track and manage our software development projects more effectively.\n\nMarta: Absolutely, Pedro. I'm familiar with Jira from my previous experience. It's a great tool for agile development and offers excellent customization options.\n\nPedro: Excellent. I want to ensure that we're utilizing the best tools to enhance our productivity and efficiency. Jira will provide us with robust features for issue tracking, workflow management, and release planning.\n\nMarta: Definitely. Jira also facilitates collaboration and transparency within the team. Its reporting and analytics features are top-notch, enabling better insights into our projects.\n\nPedro: That's right. At CODEM, we strive to adopt industry-leading practices, and Jira is widely recognized in the software development field. I'll send you the login credentials and the link to our Jira instance. Familiarize yourself with our current projects and their respective workflows.\n\nMarta: Will do. Should I start transferring the tasks and information from Trello to Jira? I can ensure a smooth transition and maintain an accurate record of our progress.\n\nPedro: Yes, that's a good idea. Please transfer the active tasks and ongoing projects to Jira. However, for completed projects, you can archive them in Trello for future reference. It's essential that we keep a clean and organized record of our work.\n\nMarta: Understood. I'll prioritize the transition and make sure that everything is properly organized in Jira. Are there any specific settings or configurations I should be aware of to align with CODEM's practices?\n\nPedro: Yes, we have customized Jira to fit our unique needs at CODEM. I'll guide you through the essential configurations. First, make sure that you set up your notification preferences. We want to ensure that you receive timely updates on any changes or comments related to your tasks.\n\nMarta: Notification settings are crucial for staying on top of things. I'll set them up right away.\n\nPedro: Additionally, we utilize custom fields in Jira to track specific information pertinent to our projects. I'll demonstrate how we've tailored these fields to align with our development process. Take note of these configurations, as they are integral to our workflow.\n\nMarta: I understand. Custom fields play a significant role in adapting Jira to an organization's specific needs. I'll make sure to apply these settings consistently.\n\nPedro: Perfect. We'll schedule a follow-up meeting next week to assess your progress and address any questions or issues you may have. In the meantime, if you encounter any challenges, don't hesitate to reach out.\n\nMarta: Thank you for your guidance, Pedro. I'll dive into Jira and ensure that I master the tool swiftly. I appreciate your support and the opportunity to enhance my skills with industry-leading tools like Jira.\n\nPedro: You're welcome, Marta. Your enthusiasm and dedication are commendable. I'm confident that your proficiency with Jira will significantly contribute to our team's success at CODEM."
    },
    {
      "type": [
        "filler-update"
      ],
      "topic": [
        "Fostering a culture of diversity, equity, and inclusion to create a more inclusive and welcoming workplace"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_c$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^j_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^z_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, our last conversation about fostering an inclusive workplace resonated with me. I've been thinking about ways to further embed these values into our team's culture. It's an ongoing process, and I want to ensure we're making progress.\n\nMarta: Absolutely, Pedro. Creating an inclusive environment is crucial for the well-being and productivity of our team. It's encouraging that we're continuing this dialogue and taking concrete steps. I believe it starts with recognizing and valuing our diverse backgrounds and experiences.\n\nPedro: Indeed, and it's important to go beyond simple recognition. We need to actively create spaces where everyone feels comfortable contributing and sharing their unique perspectives. This means fostering an environment that encourages open dialogue and respectful debate. It's about embracing diverse thoughts and ideas while maintaining a collaborative and supportive atmosphere.\n\nMarta: I couldn't agree more. To build on that, I think it's essential to address any unconscious biases that may exist within our team dynamics. We should promote awareness and provide resources to help identify and mitigate these biases. This can create a more level playing field and ensure that everyone's contributions are evaluated fairly and equitably.\n\nPedro: That's an excellent point, Marta. Unconscious biases can subtly influence our interactions and decision-making processes. Ensuring that everyone is aware of their potential impact is crucial. We should definitely incorporate bias-awareness training into our team development plan. It will help us create a more inclusive and equitable environment.\n\nMarta: I'm glad you brought up training, Pedro. Another aspect we could focus on is educating ourselves and our team members about the benefits of diversity and inclusion. Sometimes, people may not fully understand the importance or be resistant to change. Providing educational resources and facilitating open discussions can help foster a shared understanding and buy-in from everyone.\n\nPedro: Absolutely, education is key. We should organize workshops or seminars, perhaps even invite external experts to share their insights and best practices. By creating a culture of continuous learning, we can ensure that our team not only understands the importance of diversity and inclusion but also actively embraces and advocates for it.\n\nMarta: That sounds like a great plan, Pedro. External perspectives can offer valuable insights and help us identify any blind spots we might have. Additionally, I think it would be beneficial to encourage feedback and suggestions from our team members. Creating an anonymous feedback channel could provide a safe space for people to share their experiences and ideas for improvement.\n\nPedro: Excellent suggestion, Marta. Anonymous feedback channels can be incredibly powerful tools for fostering an inclusive culture. They provide an avenue for individuals to voice their concerns or suggestions without fear of repercussions or judgment. We should definitely implement this and regularly analyze the feedback to identify areas where we can improve.\n\nMarta: Exactly, and by showing that we're receptive to feedback and taking action, we can build trust and encourage even more open communication. This will help us create a feedback loop that continually strengthens our inclusive practices. Additionally, I think it's important to celebrate our diversity and recognize the unique contributions of our team members.\n\nPedro: I completely agree. Recognizing and celebrating our differences, whether it's through cultural events, spotlighting individual achievements, or simply acknowledging diverse perspectives in our daily meetings, will make our team members feel valued and appreciated. It's essential that everyone feels a sense of belonging and that their presence matters within our team.\n\nMarta: Absolutely, Pedro. By valuing and celebrating our diversity, we reinforce the idea that our differences are our strength. It encourages a sense of pride and ownership within the team. I think it's also important to extend these values beyond our immediate team. As we work with other departments or external partners, we can advocate for inclusive practices and help foster a company-wide culture of diversity, equity, and inclusion.\n\nPedro: That's a great point, Marta. Our influence should extend beyond our immediate circle. By advocating for inclusive practices in cross-functional collaborations and external partnerships, we can help shape a broader culture of inclusion within CODEM. It's about leading by example and demonstrating how these values can positively impact our work and relationships.\n\nMarta: Exactly, Pedro. By embodying these values in our daily interactions, we can inspire and influence others to follow suit. It's about creating a ripple effect that spreads throughout the entire organization. I think our commitment to diversity, equity, and inclusion will not only make us a stronger team but also contribute to CODEM's success and reputation as an inclusive employer.\n\nPedro: I couldn't agree more, Marta. Our efforts will not only create a more welcoming and productive environment for our team but also reflect positively on CODEM as a whole. It's encouraging to know that we're not just improving our own practices but also contributing to a broader cultural shift within the company. Let's continue to lead by example and work together to make CODEM a pioneer in fostering an inclusive workplace.\n\nMarta: Absolutely, Pedro. I'm glad we share this vision, and I'm confident that through our collective efforts, we can make a meaningful impact. I look forward to continuing our journey towards an even more inclusive and diverse workplace."
    },
    {
      "type": [
        "filler-add",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "Promoting work-life balance through flexible work schedules and remote work options",
        "always include a single digit in method names",
        "always end method names with '_o'"
      ],
      "session_regex": [
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_c$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^j_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^z_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "session_eval_query": [
        "Directed Graph class with a method that checks the presence of cycles",
        "Graph class with a method that computes the shortest path from one node to another"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "Graph class with a method that computes the shortest path from one node to another",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, I want to discuss our company's approach to work-life balance and how it can benefit you and the team. We promote flexible work schedules and remote work options to ensure our employees can manage their personal responsibilities while staying productive. It's important to set clear boundaries and not overwork yourself. What are your thoughts on this?\n\nMarta: Absolutely, Pedro. I think having a healthy work-life balance is crucial for maintaining productivity and a positive mindset. I've been impressed by the company's commitment to flexibility. It shows a modern approach to work and a respect for employees' personal lives. I'm all for setting clear boundaries, especially with remote work, to ensure I can deliver my best work without burning out. \n\nPedro: That's great to hear, Marta. Now, let's shift gears and discuss some specific coding instructions for your current project. It's important that we maintain consistency across our code base, so I want you to follow these guidelines: Always include a single digit in method names and always end method names with '_o'.  \n\nMarta: Understood, Pedro. I'll make sure to incorporate those instructions into my method names. Clear and consistent naming conventions are essential for code readability and collaboration. Anything else I should keep in mind regarding coding style or conventions? \n\nPedro: That covers the main points for now. Just remember that consistency is key, and if you ever have any doubts about method names or coding style, don't hesitate to reach out. \n\nMarta: Will do, Pedro. Thanks for the guidance. I'll make sure my code follows these instructions to the letter. It's always helpful to have clear directions, and I appreciate your feedback on my work so far. \n\nPedro: You're welcome, Marta. Keep up the good work, and don't hesitate to come to me with any questions or concerns. That's what I'm here for. Now, let's review the project timeline and ensure we're on track with your tasks. \n\nMarta: Sounds like a plan. Let's dive in."
    },
    {
      "type": [
        "filler-update"
      ],
      "topic": [
        "Promoting work-life balance through flexible work schedules and remote work options"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_c$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^j_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^z_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "Graph class with a method that computes the shortest path from one node to another",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "short",
      "text": "Pedro: Marta, I want to follow up on our previous discussion about work-life balance and the company's approach to flexible work. It's an important topic, and I'd like to ensure we're on the same page.\n\nMarta: Absolutely, Pedro. I appreciate the company's focus on this aspect. It's essential for maintaining a healthy work environment and keeping employees motivated.\n\nPedro: Indeed. At CODEM, we strive to offer our employees flexibility whenever possible. This can include remote work options, flexible hours, or even part-time arrangements for those who require it. It's about finding a balance that suits both the company's needs and the individual's preferences.\n\nMarta: I couldn't agree more. Flexible work arrangements can significantly improve employee satisfaction and productivity. Remote work, in particular, can offer a change of pace and environment, which can be refreshing for engineers who often work in office settings.\n\nPedro: Exactly. We've had engineers who benefited from these options, especially when dealing with personal matters or family commitments. The key is to ensure that the work is delivered effectively and that communication remains open and transparent.\n\nMarta: That's a great point. Clear communication and defined expectations are crucial for making flexible work arrangements successful. As engineers, we also have the advantage of utilizing various collaboration tools to stay connected and ensure that projects run smoothly despite the physical distance.\n\nPedro: Well said. We're fortunate to work in an industry where remote collaboration is feasible and often quite effective. This flexibility can also attract top talent who value work-life balance and are dispersed globally.\n\nMarta: Absolutely. It's a selling point for prospective employees and can contribute to a more diverse and dynamic workforce. I believe companies that embrace these options will have a competitive edge in the market.\n\nPedro: I share your sentiment. Now, let's discuss how we can further improve the implementation of these practices within our team and ensure that everyone understands the benefits and expectations."
    },
    {
      "type": [
        "pivot-update",
        "pivot-update"
      ],
      "topic": [
        "always start function argument names with 'a_'",
        "always start attribute names with 'i_'"
      ],
      "session_regex": [
        [
          "function argument",
          "^a_.*"
        ],
        [
          "attribute",
          "^i_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_c$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^z_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "session_eval_query": [
        "function that given two vectors compute their dot product",
        "LRU cache class with get and put methods"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "Graph class with a method that computes the shortest path from one node to another",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "medium",
      "text": "Pedro: Marta, I want to update you on our coding standards and conventions. Going forward, I need you to start function argument names with 'a_'. This is a change from our previous practice. It's important for consistency and to avoid potential conflicts with other naming conventions we use.\n\nMarta: Understood, Pedro. From now on, I'll start function argument names with 'a_'.\n\nPedro: Good. The other update is regarding attribute names. We now prefer that they start with 'i_'. This is to maintain clarity and distinguish them from other variables and functions.\n\nMarta: Noted. Attribute names will start with 'i_' from now on. Any particular reason for these updates? Just curious about the rationale.\n\nPedro: It's mainly to align with the conventions used by some of the open-source projects we're contributing to. It helps with consistency and makes code contributions from our team more seamless. It's also a way to future-proof our code to some extent, making it easier to integrate with external libraries and frameworks.\n\nMarta: That makes sense. I'll make sure to implement these updates moving forward.\n\nPedro: Great. I know it can be a bit tedious to adapt to new conventions, but it's important for maintaining clean and consistent code. It'll make our code base more readable and understandable for the entire team.\n\nMarta: Absolutely, I completely agree. I'm all for anything that improves the quality of our code. I'll keep these instructions in mind for future tasks.\n\nPedro: Excellent. Keep up the good work, Marta. If you have any questions or concerns about these updates, don't hesitate to reach out.\n\nMarta: Will do, Pedro. Thanks for the guidance and for keeping me in the loop with these changes.\n\nPedro: My pleasure. That's all for now. Let's touch base again soon to discuss your progress and any other updates that may arise.\n\nMarta: Sounds like a plan. Have a good one!"
    },
    {
      "type": [
        "filler-instruction-add"
      ],
      "topic": [
        "use three or more monitors when coding"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_c$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^z_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "Graph class with a method that computes the shortest path from one node to another",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "medium",
      "text": "Pedro: Marta, how are you finding your experience here so far? Settling in well, I hope. \n\nMarta: Yes, definitely, Pedro. I feel like I'm learning so much already, and I'm eager to take on more. \n\nPedro: Good, that's what I like to hear. Now, I want to discuss a work setup change with you. From now on, I'd like you to utilize at least three monitors when coding. It's a practice I encourage all my mentees to adopt. \n\nMarta: Interesting. I've mostly used a single monitor setup in the past, with the occasional second screen for references. Why do you recommend this approach? \n\nPedro: Well, in our line of work, efficiency is key. With multiple monitors, you can drastically reduce the time spent switching between applications and windows. Imagine having your code on one screen, references and documentation on another, and your testing environment on a third. It streamlines your workflow and can make you far more productive. \n\nMarta: That makes a lot of sense. I can see how that would be beneficial, especially when working on larger projects. \n\nPedro: Exactly. It might take a little while to adjust, but I guarantee it'll become second nature soon enough. Just make sure you're comfortable with the setup and that your workflow is optimized for it. \n\nMarta: I'll give it a try, Pedro. I'm always open to trying new methods, and I'm curious to see the impact this has on my productivity. \n\nPedro: That's the spirit, Marta. Remember, embrace the change and don't be afraid to adapt your approach. We're always looking for ways to improve, and this is a great step towards that. \n\nMarta: Absolutely. I'll set up the additional monitors right away and dive into it. Thanks for the insight. \n\nPedro: Anytime. That's what I'm here for. Don't hesitate to reach out if you have any questions or concerns about the setup, or anything else for that matter. \n\nMarta: Will do. Thanks again. \n\nPedro: You're welcome. Keep up the good work, and I'll check in with you soon."
    },
    {
      "type": [
        "filler-instruction-add"
      ],
      "topic": [
        "work from home at most three times a week"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_c$"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^z_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "Graph class with a method that computes the shortest path from one node to another",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, I want to discuss your work arrangement moving forward. We offer flexibility to our employees, but it's important to maintain a balance. From now on, you can work from home a maximum of three days a week. The rest of the time, I expect you to be in the office. \n\nMarta: Absolutely, Pedro. I understand the importance of being present in the office and collaborating with the team. A mix of remote work and in-office time is a great approach. \n\nPedro: Good. Now, regarding your current projects, I want you to prioritize the 'Delta' project. It's falling behind schedule, and I need your expertise to get it back on track. \n\nMarta: Certainly. I've been keeping an eye on that project as well. I can dedicate more time to it and work with the team to streamline the development process. Should I start by reviewing the project plan and identifying potential bottlenecks? \n\nPedro: Yes, that's a good start. Analyze the plan and discuss it with the team lead. See where you can optimize the code and improve the overall efficiency. Also, I want you to start documenting your code more rigorously. It's something we emphasize at CODEM, and it's crucial for collaboration and future maintenance. \n\nMarta: I'll make sure to focus on that. Proper documentation not only helps the team but also ensures that our code is accessible and understandable for future reference. \n\nPedro: Exactly. Now, another area I want you to start exploring is machine learning. It's becoming an integral part of our industry, and I'd like you to gain some proficiency in it. Start with online resources and our internal training materials. We have some projects in the pipeline that could benefit from your knowledge in this area. \n\nMarta: That sounds exciting! I've been interested in machine learning for a while now, and I'm eager to dive into it. Are there any specific applications or frameworks I should begin with? \n\nPedro: Yes, I suggest you start with Python's scikit-learn library. It's widely used and will give you a solid foundation. Focus on classification and regression problems first, as they're the most common. You can also refer to some of our past projects to get an idea of how we've implemented machine learning solutions. \n\nMarta: Perfect! I'll create a study plan and gradually work my way through it. I'm excited to see how we can incorporate machine learning into our upcoming projects. \n\nPedro: That's the spirit. Always stay ahead of the curve. Now, one last thing before we wrap up. I want you to start thinking about your career goals and how you see your future here at CODEM. We'll have a more in-depth discussion about this soon, so give it some thought. \n\nMarta: Absolutely, Pedro. I appreciate your guidance and support. I'll reflect on my short and long-term goals, and we can have a fruitful discussion about my career path. \n\nPedro: Great. Remember, your development is just as important as the projects we work on. I'll see you in the office tomorrow, and we can touch base then. \n\nMarta: Sounds good. Thank you for your time and guidance, Pedro. \n\nPedro: You're welcome. Keep up the good work, Marta."
    },
    {
      "type": [
        "filler-add",
        "pivot-update"
      ],
      "topic": [
        "Troubleshooting internet connectivity issues across different locations",
        "always end variable names with '_x'"
      ],
      "session_regex": [
        [
          "variable",
          ".*_x$"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_at$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_c$"
        ],
        [
          "variable",
          ".*_x$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^z_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "session_eval_query": [
        "function that checks if a string is a valid palindrome"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "Graph class with a method that computes the shortest path from one node to another",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "medium",
      "text": "Pedro: Marta, we've been encountering issues with internet connectivity across our global offices. I need you to troubleshoot and identify the root cause. Start by checking the network hardware and ensure the configurations are consistent with our standards.\n\nMarta: Absolutely, Pedro. I'll begin with examining the routers and switches, verifying their settings, and making sure they adhere to our predefined specifications.\n\nPedro: Good. Also, pay close attention to the firewall configurations. Sometimes, mismatched rules between locations can cause connectivity issues. Compare the firewall settings across offices and ensure they're synchronized.\n\nMarta: Understood. I'll thoroughly review the firewall configurations and look for any discrepancies.\n\nPedro: Additionally, keep an eye out for potential DNS issues. Verify that the DNS servers are correctly configured and that there are no propagation delays or errors.\n\nMarta: Yes, DNS issues can definitely impact connectivity. I'll make sure to scrutinize the DNS settings and check for any propagation-related problems.\n\nPedro: Another factor to consider is the physical infrastructure. Inspect the cabling and ensure there's no damage or loose connections.\n\nMarta: Absolutely, I'll conduct a thorough inspection of the physical connections and cabling infrastructure.\n\nPedro: Once you've identified the cause, document the issue and the steps taken to resolve it. This will help us prevent similar issues in the future and serve as a reference for the team.\n\nMarta: Of course. Documentation is key, and I'll make sure to provide a detailed report on the troubleshooting process and the outcome.\n\nPedro: Now, regarding our coding standards, I want to update a previous instruction. From now on, when naming variables, always end them with '_x'. This is to maintain consistency and avoid potential conflicts with future code integrations.\n\nMarta: Understood, Pedro. I'll make sure to end all variable names with '_x' from now on.\n\nPedro: Good. Consistency is crucial, and it will help ensure that our code remains maintainable and readable as the project evolves.\n\nMarta: Absolutely. I'll adhere to this updated naming convention from now on."
    },
    {
      "type": [
        "filler-update",
        "pivot-update",
        "pivot-update"
      ],
      "topic": [
        "Creating a culture of collaboration and teamwork to achieve shared goals and objectives",
        "always end attribute names with '_i'",
        "always end variable names with '_n'"
      ],
      "session_regex": [
        [
          "attribute",
          ".*_i$"
        ],
        [
          "variable",
          ".*_n$"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_c$"
        ],
        [
          "variable",
          ".*_n$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^z_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "session_eval_query": [
        "Linked list class",
        "function that checks if a string is a valid palindrome"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "Graph class with a method that computes the shortest path from one node to another",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, our previous conversation about fostering collaboration within the team was an important starting point. I want to continue emphasizing the importance of teamwork and a shared vision as we move forward. A cohesive unit working towards common goals can achieve remarkable things. \n\nMarta: Absolutely, Pedro. I couldn't agree more. A collaborative environment encourages innovation and a sense of ownership among team members. We can leverage each other's strengths and learn from one another, creating a more productive and engaged workforce. \n\nPedro: Indeed. And it's crucial that we, as mentors and more senior members, lead by example. That means being open to feedback, offering support, and ensuring that every voice is heard and valued. We must also be mindful of creating an environment where it's safe to take calculated risks and make mistakes, as that's often where the most valuable lessons are learned. \n\nMarta: I think that's an excellent point. Mentors play a pivotal role in shaping the team culture. By fostering an atmosphere of trust and mutual respect, we can encourage open communication and a willingness to collaborate. I've certainly found that a supportive mentor can make all the difference in an intern's motivation and performance. \n\nPedro: I'm glad we're on the same page. Now, let's shift gears a little and dive into some more specific aspects of your role. I want to give you an updated set of guidelines for coding conventions to ensure consistency and readability in your work. I'd like you to start ending your attribute names with '_i'.  This is to maintain clarity and differentiate them from local variables or parameters. \n\nMarta: Understood. From now on, I'll end all my attribute names with '_i' to follow the new coding standard. \n\nPedro: Good. Consistency is key, and it's important that your code adheres to these conventions. Additionally, I want you to start ending your variable names with '_n'. So, if you have a variable called 'count', it should now be named 'count_n'. This is to avoid any potential clashes with function or method names. \n\nMarta: Noted. I'll start implementing this convention immediately. Variable names will now end with '_n' to prevent any naming conflicts. \n\nPedro: Excellent. These updates might seem minor, but they're essential for maintaining clean and readable code, especially as our projects grow in scale and complexity. I trust that you'll apply these conventions diligently going forward. \n\nMarta: Absolutely. I understand the importance of following these standards, and I'll make sure to incorporate them into my coding practices from here on out. \n\nPedro: Great. And remember, if you have any questions or concerns about these guidelines, or if you come across any challenges, don't hesitate to reach out. That's what I'm here for. \n\nMarta: Thank you, Pedro. Your guidance and mentorship are invaluable to me. I appreciate your support and the emphasis you place on clear and consistent coding practices. It helps me develop as a more disciplined and effective engineer. \n\nPedro: You're welcome, Marta. It's my role to ensure that you have the tools and knowledge to succeed, and that includes adhering to industry-standard practices and conventions. Keep up the good work, and don't hesitate to seek clarification whenever needed. We're shaping you into a well-rounded software engineer, and attention to detail is a critical aspect of that journey. \n\nMarta: I will, thank you. I look forward to continuing my development under your mentorship and contributing to the team's success through collaboration and technical excellence. \n\nPedro: That's the spirit. Now, let's put these conventions into practice and continue building robust and maintainable software together."
    },
    {
      "type": [
        "filler-update",
        "pivot-update"
      ],
      "topic": [
        "Conducting team-building workshops and leadership training to develop future leaders",
        "always start variable names with 'x_'"
      ],
      "session_regex": [
        [
          "variable",
          "^x_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_c$"
        ],
        [
          "variable",
          ".*_n$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^x_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "session_eval_query": [
        "function that determines if an array is a valid sudoku"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "Graph class with a method that computes the shortest path from one node to another",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, I wanted to follow up on our previous discussion about team-building and leadership development. We've decided to move forward with conducting workshops for the entire engineering team. I think you'd benefit from leading some of these sessions. It will be a great opportunity for you to develop your leadership skills and gain experience mentoring your colleagues.\n\nMarta: Absolutely, Pedro. I'm excited to take on this challenge. I believe I can contribute effectively and learn a lot from this experience. What specific topics are we covering in these workshops?\n\nPedro: We'll be focusing on several key areas, including code review best practices, version control strategies, and collaborative problem-solving techniques. I'll be counting on you to share your expertise and facilitate discussions during these sessions. It's important that we encourage participation and create a safe space for our team to learn and grow.\n\nMarta: I agree, and I'm eager to get started. Facilitating these workshops will be a fantastic opportunity for me to develop my mentoring skills. I'll ensure that I prepare thoroughly and create an engaging environment for my colleagues.\n\nPedro: Excellent. I know you'll do a fantastic job, Marta. Now, regarding our ongoing project, I want to update a previous instruction I gave you. From now on, when naming variables, I want you to start the name with 'x_'. This will help us maintain consistency and improve code readability.\n\nMarta: Understood, Pedro. I'll start implementing this naming convention immediately and ensure that all my variable names follow this format from now on.\n\nPedro: Good. Consistency is key, and it's important that we establish clear standards for our code. Now, let's review the progress you've made on the project so far. Are there any challenges or obstacles you're facing that we should address?\n\nMarta: Yes, I've been managing a few issues with the database integration. I've implemented a new indexing strategy that should improve query performance, but I'd like your input on the overall architecture to ensure we're on the right track.\n\nPedro: Let's schedule a deep dive into the database design. We'll review the schema, discuss indexing strategies, and ensure that our data access layers are optimized. It's crucial that we build a robust and scalable foundation for our application.\n\nMarta: That sounds like a plan. I'll prepare a detailed overview of the database structure and my proposed improvements so that we can have a productive discussion.\n\nPedro: Excellent. Remember, Marta, attention to detail and a systematic approach are essential in software engineering. We must always strive for excellence and never settle for mediocrity.\n\nMarta: I absolutely agree, Pedro. I'll make sure that my work reflects those values. I appreciate your guidance and support.\n\nPedro: You're welcome, Marta. Now, let's dive into those code reviews and keep this project moving forward."
    },
    {
      "type": [
        "filler-update",
        "pivot-update"
      ],
      "topic": [
        "Implementing effective meeting strategies and time management techniques to optimize productivity",
        "always start function argument names with 'j_'"
      ],
      "session_regex": [
        [
          "function argument",
          "^j_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_c$"
        ],
        [
          "variable",
          ".*_n$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^x_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "session_eval_query": [
        "function that given two vectors compute their dot product"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "Graph class with a method that computes the shortest path from one node to another",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "short",
      "text": "Pedro: Effective meetings are a key aspect of productivity. I want to ensure that our team's time is well-spent and efficient. We've touched on this before, but it's a fine balance between too many meetings and ensuring everyone is on the same page. \n\nMarta: Absolutely. I've been focusing on keeping our meetings concise and ensuring a clear agenda is sent out in advance. It helps keep everyone prepared and on track. \n\nPedro: Good. It's important to be mindful of everyone's time. Now, regarding your code, I want to update an instruction I gave you previously. When naming function arguments, start the variable name with 'j_' going forward. This is to maintain consistency with our new coding standards. \n\nMarta: Understood. I'll implement that change immediately and ensure all new code follows this convention. \n\nPedro: Excellent. Consistency is key in our codebase, so it's important that we adhere to these standards. Keep up the good work, and don't hesitate to reach out if you have any questions or concerns. \n\nMarta: Will do. Thanks for the guidance, Pedro. I'll make sure to incorporate these strategies into my daily routine."
    },
    {
      "type": [
        "filler-update"
      ],
      "topic": [
        "Launching diversity and inclusion initiatives to create a more equitable and inclusive workplace"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^fn_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_c$"
        ],
        [
          "variable",
          ".*_n$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^x_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "Graph class with a method that computes the shortest path from one node to another",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "short",
      "text": "Pedro: Marta, I wanted to follow up on our previous discussion about diversity and inclusion. It's an important topic, and I think we should take proactive steps to turn our ideas into actionable initiatives.\n\nMarta: Absolutely, Pedro. I agree, and I'm glad we're continuing this conversation. It's a vital aspect of creating a positive and productive work environment. I'm all ears for any ideas you have about how we can turn our talk into tangible actions. \n\nPedro: Great. I've been thinking about a few approaches. First, I believe we should focus on raising awareness and providing education. This could involve organizing workshops, seminars, or even a simple lunch-and-learn series to educate our team about the importance of diversity and inclusion. We can invite speakers or facilitate discussions to ensure everyone understands the impact of their words and actions. \n\nMarta: That's an excellent idea! Awareness and education are key. We could also encourage open discussions and sharing of personal experiences, ensuring anonymity and a safe space, of course. This might help everyone understand the benefits of diversity and foster a more inclusive environment. \n\nPedro: Indeed, creating a safe and supportive environment is crucial. Along with raising awareness, we should also think about implementing diversity-focused policies and practices. This could include diverse hiring practices, mentorship programs, or even forming an employee resource group to advise on these initiatives and ensure they're effective and well-received. \n\nMarta: Those suggestions sound fantastic. Having a structured approach with policies and practices in place will ensure that our efforts are consistent and long-lasting. I think combining these initiatives with regular feedback opportunities will also help us gauge the impact of our efforts and make any necessary adjustments. \n\nPedro: Absolutely, and that leads me to my next point. We should also focus on fostering an environment where feedback is encouraged and acted upon. This includes regular surveys, focus groups, and one-on-one check-ins to understand how employees are experiencing our initiatives and if they have any suggestions for improvement. \n\nMarta: I completely agree. By showing that we value and act on feedback, we'll create a sense of ownership and investment in these diversity and inclusion initiatives among our colleagues. It's encouraging to know that their insights and experiences are shaping our company's culture. \n\nPedro: Exactly, and it's essential that we lead by example. As mentors and more senior members of the team, we should actively participate in these initiatives, encourage open dialogue, and demonstrate our commitment to creating an equitable workplace. \n\nMarta: I'm glad we're on the same page, Pedro. I think with these ideas and our combined effort, we can make a real difference. I'm excited to see how we can implement these initiatives and create a more diverse and inclusive environment at CODEM. \n\nPedro: Me too, Marta. Let's work on a detailed plan and propose it to the relevant teams and management. Together, we can make CODEM a leader in diversity and inclusion, setting an example for the entire industry. \n\nMarta: Absolutely! I'll start drafting a plan based on our discussion, and we can refine it together. It's inspiring to know that we're taking concrete steps toward positive change."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-update"
      ],
      "topic": [
        "work from home at most twice a week",
        "always start function names with 'd_'"
      ],
      "session_regex": [
        [
          "function",
          "^d_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^d_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_c$"
        ],
        [
          "variable",
          ".*_n$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^x_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "session_eval_query": [
        "function that given an array of integer citations, computes the h-index"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "Graph class with a method that computes the shortest path from one node to another",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, I wanted to touch base with you on a few updates. Firstly, we're adjusting our work-from-home policy. The new expectation is to work from home a maximum of twice a week. It's important for collaboration and team dynamics that we have a consistent presence in the office.\n\nMarta: Understood, Pedro. I'll adjust my schedule accordingly.\n\nPedro: Good. Now, onto some coding standards. I want to ensure uniformity across our team's code base. From now on, always start function names with 'd_'. This helps differentiate our functions and improves code readability.\n\nMarta: Noted. I'll start implementing this convention immediately.\n\nPedro: Ensure you propagate this update across your existing code as well. Consistency is key.\n\nMarta: Absolutely, I'll start refactors where necessary.\n\nPedro: Excellent. Remember, these standards are crucial for our team's cohesion and efficiency. They might seem like small details, but they have a significant impact on our overall productivity and code quality.\n\nMarta: I completely agree. Standards and consistency are vital for a smooth collaborative process.\n\nPedro: Precisely. Now, regarding your current tasks, how is the progress on the user authentication module?\n\nMarta: It's coming along well. I'm finishing up the backend logic for password recovery. After that, I'll need to integrate it with the front end and perform some thorough testing.\n\nPedro: Good to hear. Remember to keep your code modular and well-documented. Especially for core functionalities like authentication, it's important that your code is easily understandable and maintainable.\n\nMarta: Absolutely, documentation and modular design are always at the forefront of my development process.\n\nPedro: That's what I like to hear. Keep up the good work, and don't hesitate to reach out if you encounter any roadblocks.\n\nMarta: Will do, thanks for the guidance and updates, Pedro.\n\nPedro: Anytime. These conversations are crucial to ensure we're on the same page. Stay focused, and let's continue delivering high-quality software."
    },
    {
      "type": [
        "pivot-update"
      ],
      "topic": [
        "always end function names with '_y'"
      ],
      "session_regex": [
        [
          "function",
          ".*_y$"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^d_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_y$"
        ],
        [
          "variable",
          ".*_n$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^x_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "session_eval_query": [
        "function that implements merge sort"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "Graph class with a method that computes the shortest path from one node to another",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "short",
      "text": "Pedro: Marta, I want to update you on our function naming convention. From now on, I'd like you to end all function names with '_y'.  This will help us maintain consistency across our codebases and improve code readability.\n\nMarta: Understood, Pedro. I'll keep that in mind and apply it to my future work. I assume this is to standardize the codebase and make it easier for other team members to understand the code.\n\nPedro: Exactly. Consistency is key in software development, and we want to ensure that our code is easily understandable and maintainable for the entire team. This will also help us identify your functions more easily and distinguish them from other parts of the code. \n\nMarta: Makes sense. I'll make sure to implement this naming convention from now on. Are there any other updates or instructions I should be aware of regarding our coding standards? \n\nPedro: Not at the moment. Just ensure that you're consistent with this naming convention from now on. I'll review your code periodically to ensure that you're adhering to this new standard. \n\nMarta: Absolutely, I'll keep that in mind. I'll let you know if I have any questions or concerns about this or any other matter. \n\nPedro: Good. Now, let's move on to discussing your progress on the project. Are you facing any challenges or roadblocks that I should be aware of? \n\nMarta: None at the moment. I'm making steady progress and will provide you with a more detailed update by the end of the week. Rest assured, I'm committed to delivering a high-quality output. \n\nPedro: That's great to hear, Marta. Keep up the good work and don't hesitate to reach out if you need any assistance. \n\nMarta: Will do. Thank you for your guidance and support, Pedro. \n\nPedro: You're welcome. That's what I'm here for. Now, let's get back to work and strive towards delivering an exceptional software product. \n\nMarta: Absolutely. Let's make it happen!"
    },
    {
      "type": [
        "filler-add",
        "pivot-update"
      ],
      "topic": [
        "Requesting upgraded technology, including computers and software",
        "always start method names with 'md_'"
      ],
      "session_regex": [
        [
          "method",
          "^md_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^d_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_y$"
        ],
        [
          "variable",
          ".*_n$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^x_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "session_eval_query": [
        "Inventory class with add stock and remove stock methods"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "Graph class with a method that computes the shortest path from one node to another",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "short",
      "text": "Pedro: Marta, I want to discuss our tech upgrades. We've been pushing for newer models for a while now, and I think it's time we made a formal request to management. We need computers with more powerful processors and additional RAM to handle our upcoming projects efficiently. Not to mention, we're due for a Python version update. The latest release has some great new features we could utilize. \n\nMarta: Absolutely. I've been keeping an eye on the latest Python version. The asynchronous features and improved type hinting would be particularly useful for our work. And of course, faster computers with more memory would speed up our development and testing processes. \n\nPedro: Good. I want you to draft a proposal outlining the benefits of these upgrades. Emphasize the impact on our productivity and the potential for improved software quality. We'll submit it to the IT department and management for review. Now, regarding our coding standards, I've been giving some thought to our previous discussion about method naming conventions. I want to update my previous instructions. From now on, I need you to start all method names with 'md_'. This is to maintain consistency and easily identify our methods. Make sure you propagate this change across all your current and future projects. \n\nMarta: Understood. I'll start implementing this new convention immediately and go through my existing code to make the necessary changes. \n\nPedro: Good. Consistency is key, and it's important that we keep our code base well-organized and easily understandable for the entire team. \n\nMarta: Absolutely. I'll make sure my code follows this new standard."
    },
    {
      "type": [
        "filler-add",
        "pivot-update",
        "pivot-update"
      ],
      "topic": [
        "Implementing agile methodologies to improve project management and delivery processes",
        "always end variable names with '_m'",
        "always start method names with 'p_'"
      ],
      "session_regex": [
        [
          "variable",
          ".*_m$"
        ],
        [
          "method",
          "^p_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^d_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_y$"
        ],
        [
          "variable",
          ".*_m$"
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^x_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "session_eval_query": [
        "function that checks if a string is a valid palindrome",
        "Inventory class with add stock and remove stock methods"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "Graph class with a method that computes the shortest path from one node to another",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, I want to discuss our project management strategies and how we can improve our delivery processes. We've been considering implementing agile methodologies to streamline our workflow and enhance collaboration among our software engineering team. What are your thoughts on agile? \n\nMarta: I'm very familiar with agile methodologies, having worked with them extensively in my previous role. They promote an iterative and incremental approach to project management, which can greatly improve adaptability and responsiveness to change. With agile, we can break down our projects into manageable sprints, facilitate better team collaboration, and deliver value to our clients more frequently and efficiently. I think it's a great fit for our team and can help us manage our projects more effectively. \n\nPedro: Excellent. I'm glad we're on the same page. Now, regarding our current project, I want you to focus on breaking down our deliverables into manageable chunks. We'll plan our work in short bursts, or sprints, ensuring that we can adapt to changes and deliver value early and often. This also includes holding daily stand-up meetings to ensure everyone is on the same page and identify any roadblocks promptly. \n\nMarta: Absolutely. Short, focused sprints will help us maintain a steady pace without overwhelming the team. Daily stand-ups will ensure we're all aligned and that any issues are addressed immediately. I'll make sure to emphasize the importance of these practices to the team and facilitate these meetings. \n\nPedro: Good. Now, let's shift gears and discuss some specific coding guidelines I want you to follow for this project. Remember the coding standards I previously gave you? There have been some updates to them. From now on, I want you to end all variable names with '_m'. This will help us identify and distinguish your variables from those of other team members. Always follow this rule when naming variables.\n\nMarta: Understood. I'll make sure to end all my variable names with '_m' from now on. \n\nPedro: Additionally, I want you to start all method names with 'p_'. This prefix will indicate that the method is part of our project and help us quickly identify the methods you've worked on.\n\nMarta: Noted. I will begin all method names with 'p_' going forward. \n\nPedro: Ensure you implement these updates consistently from now on. I'll be reviewing your code regularly, so I expect to see these standards reflected in your work. \n\nMarta: Absolutely, Pedro. I'll make sure my code adheres to these updated standards."
    },
    {
      "type": [
        "pivot-update",
        "pivot-update"
      ],
      "topic": [
        "always end function names with '_x'",
        "always start variable names with 'y_'"
      ],
      "session_regex": [
        [
          "function",
          ".*_x$"
        ],
        [
          "variable",
          "^y_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^d_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_x$"
        ],
        [
          "variable",
          ".*_m$"
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^y_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "session_eval_query": [
        "function that implements merge sort",
        "function that determines if an array is a valid sudoku"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "Graph class with a method that computes the shortest path from one node to another",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, I want to update you on some coding standards for our team. It's important that we maintain consistency across our code base.\n\nMarta: Of course, Pedro. I understand the importance of following a consistent style. It improves readability and makes collaboration easier.\n\nPedro: Exactly. From now on, I want you to end all function names with '_x'. \n\nMarta: Understood. I'll start implementing this convention immediately. Are there any other updates to our coding standards?\n\nPedro: Yes. I'd like you to start your variable names with a 'y_' prefix. This is to distinguish our variable names from any potential future conflicts with Python's built-in variables.\n\nMarta: Alright. I'll make sure to incorporate this into my coding practices as well. Consistency is key, and I appreciate you keeping me updated with our team's standards.\n\nPedro: Absolutely. These standards will help us maintain a high level of professionalism and efficiency in our work. I trust that you'll adapt quickly, given your experience and skill set.\n\nMarta: Thank you for your confidence in me, Pedro. I'll make sure to apply these conventions accurately and consistently from now on."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-update"
      ],
      "topic": [
        "work from home at most once a week",
        "always start variable names with 'w_'"
      ],
      "session_regex": [
        [
          "variable",
          "^w_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^d_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_x$"
        ],
        [
          "variable",
          ".*_m$"
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^w_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "session_eval_query": [
        "function that determines if an array is a valid sudoku"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "Graph class with a method that computes the shortest path from one node to another",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, I want to discuss some updates to your work routine. Firstly, I need you to reduce your work-from-home days to just one day a week. \n\nMarta: Understood. I'll ensure I'm in the office for the rest of the week starting from next week. \n\nPedro: Good. Now, regarding our previous discussion about coding standards, I want you to focus on a specific aspect from now on. Always start your variable names with 'w_' as a prefix. This is to maintain consistency and improve code readability across the team. \n\nMarta: Absolutely. I'll start implementing this change immediately and go through my previous code to make the necessary adjustments. \n\nPedro: That's important. Consistency is key in software engineering. It ensures that your code is maintainable and understandable not just to yourself but to the entire team. \n\nMarta: I completely agree. It's a crucial aspect of collaborative work. I'll make sure my code follows this standard from now on. \n\nPedro: Excellent. I'm glad we're on the same page. This will ensure your integration into the team is smooth and your code aligns with our standards. \n\nMarta: Thank you for the guidance, Pedro. I appreciate the clear directions and the opportunity to improve my skills further. \n\nPedro: You're welcome. My role as your mentor is to ensure you're equipped with the right tools and knowledge to succeed. Now, let's review your progress on the new project... \n\nMarta: Absolutely. I've been working on the design documentation and I'd appreciate your insights on my approach. \n\nPedro: Go ahead. Walk me through your thought process and the decisions you've made so far. \n\nMarta: Certainly. I've opted for a modular design, given the complexity of the system we're building. This will allow for better maintainability and easier updates in the future... \n\n[The conversation continues as Pedro and Marta dive into a detailed discussion about the new project.]"
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Planning team outings and off-site adventures to promote team bonding and relaxation"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^d_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_x$"
        ],
        [
          "variable",
          ".*_m$"
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^w_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "Graph class with a method that computes the shortest path from one node to another",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "short",
      "text": "Pedro: Marta, I want to discuss an aspect of team culture that is often overlooked but vital to our productivity and overall morale: team bonding. \n\nMarta: Absolutely. Team outings and off-site adventures can really bring people together and foster a sense of camaraderie. I've always believed that a happy team is a productive team. \n\nPedro: Exactly. We've been working extremely hard on the new project, and it's crucial that we take time to unwind and reconnect as a team. I want you to take the lead on planning our next team outing. It will be a great opportunity for you to flex your organizational skills and contribute to the team's well-being. \n\nMarta: I'd be delighted to! I have a few ideas in mind already. Should we start with a brainstorming session to gather everyone's preferences and then narrow down the options? \n\nPedro: That's a solid approach. It's important that everyone's voice is heard, and we can ensure that the activity is something everyone will enjoy. Keep in mind, the outing should promote collaboration and relaxation. Maybe a sports day or an outdoor adventure? We have a diverse team, so cater to a range of interests and fitness levels. \n\nMarta: Got it. I'll send out a survey to gauge interests and then propose a few options at our next team meeting. I think this will be a great way to boost morale and give everyone something fun to look forward to. \n\nPedro: Excellent. Remember to set a budget for the outing and plan for any necessary transportation or equipment. Keep me in the loop, and don't hesitate to reach out if you need any help or approval on the final plan. \n\nMarta: Will do. Thanks for trusting me with this, Pedro. I'll make sure it's an enjoyable and memorable experience for all. \n\nPedro: That's what I like to hear. Now, let's get back to tackling the project at hand, refreshed and re-energized. \n\nMarta: Absolutely!"
    },
    {
      "type": [
        "filler-update"
      ],
      "topic": [
        "Building a culture of innovation and creativity through idea-sharing and experimentation"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^d_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_x$"
        ],
        [
          "variable",
          ".*_m$"
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^w_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "Graph class with a method that computes the shortest path from one node to another",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "medium",
      "text": "Pedro: Marta, I want to continue our discussion from last time about fostering a culture of innovation within our team. It's important that we create an environment that encourages creativity and fresh ideas.\n\nMarta: Absolutely, Pedro. I think we've made some good strides in that direction already. The team seems receptive to sharing ideas and embracing new approaches.\n\nPedro: I agree. Now, one way to further enhance this culture is by implementing a structured idea-sharing process. This will ensure that good ideas don't fall through the cracks and that everyone has a chance to contribute.\n\nMarta: That's a great point. Structure can help us organize and build upon the ideas that emerge. How do you envision this idea-sharing process working?\n\nPedro: Well, I think a good starting point is to have a dedicated channel on our team communication platform specifically for idea sharing. This way, whenever someone has a potential innovation or improvement, they can post it there.\n\nMarta: That sounds like a simple yet effective approach. It centralizes our ideas and makes it easier to track and discuss them.\n\nPedro: Exactly. And to take it a step further, we can periodically hold idea-pitching sessions. Perhaps once a month, we can gather as a team, review the ideas shared on the channel, and have a more in-depth discussion about their feasibility and potential impact.\n\nMarta: I like the sound of that. It adds a layer of collaboration and collective ownership to the process. We can also use those sessions to brainstorm and build upon each other's ideas.\n\nPedro: Exactly. By doing so, we encourage a culture of experimentation. If an idea shows potential, we can allocate resources for a small-scale experiment to test its validity. This way, we're not only generating ideas but also taking concrete steps toward implementing the most promising ones.\n\nMarta: That's a fantastic approach. It reminds me of the concept of \"failing fast and learning fast.\" By experimenting on a small scale, we can gather valuable insights with minimal risk.\n\nPedro: Precisely. And it's important to emphasize that \"failure\" in these experiments is not a bad thing. It's all part of the learning process. If an experiment doesn't yield the expected results, we can identify why, adapt our approach, and try again. That's the essence of an innovative mindset.\n\nMarta: I completely agree. I think with this structured idea-sharing process and a culture of experimentation, we can really unlock the creative potential of our team. I'm excited to see the innovations that emerge.\n\nPedro: So am I, Marta. Remember, innovation is often born from a willingness to try new things and embrace failure as a learning opportunity. Let's make sure we lead by example and encourage the team to do the same.\n\nMarta: Absolutely. I'll start thinking about ways to communicate this idea-sharing process to the team and get everyone engaged. Thank you for your guidance, Pedro.\n\nPedro: You're welcome, Marta. Together, we can build a culture that values creativity and innovation. I look forward to seeing the fantastic outcomes that lie ahead."
    },
    {
      "type": [
        "filler-update",
        "pivot-update",
        "pivot-update"
      ],
      "topic": [
        "Ergonomic assessments and improvements to ensure comfortable and healthy workspaces",
        "always start function names with 'y_'",
        "always start method names with 'a_'"
      ],
      "session_regex": [
        [
          "function",
          "^y_.*"
        ],
        [
          "method",
          "^a_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^y_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_x$"
        ],
        [
          "variable",
          ".*_m$"
        ],
        [
          "method",
          "^a_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^w_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "session_eval_query": [
        "function that given an array of integer citations, computes the h-index",
        "Inventory class with add stock and remove stock methods"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "Graph class with a method that computes the shortest path from one node to another",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "medium",
      "text": "Pedro: Good morning, Marta. How are you today?\n\nMarta: Good morning, Pedro. I'm doing well, thanks. Ready to continue our work on creating healthy workspaces?\n\nPedro: Yes, let's begin. Have you had a chance to review the ergonomic assessments I sent over?\n\nMarta: I have. Those assessments are quite comprehensive. I especially found the sections on chair adjustments and monitor placement helpful. I made a few adjustments to my own setup already.\n\nPedro: Excellent. Ergonomics is often overlooked, but it plays a crucial role in maintaining comfort and preventing injuries over time. Are there any improvements you feel we should implement across the team?\n\nMarta: Definitely. I think providing standing desk converters or adjustable-height desks could be a great option. It would allow employees to switch between sitting and standing throughout the day, reducing back pain and improving posture.\n\nPedro: That's a fantastic suggestion, Marta. I agree that encouraging movement and providing options for posture change is essential. I'll bring this up with the facilities management team and see about getting a trial run of those adjustments.\n\nMarta: That would be great. I think it could really improve the overall comfort and productivity of the team.\n\nPedro: Moving on to another topic, I want to update you on our coding standards. From now on, I'd like you to start function names with 'y_' and method names with 'a_'. This is to maintain consistency across our code base and improve readability.\n\nMarta: Understood. I'll make sure to implement this change from now on. Are there any specific guidelines for the rest of the function or method naming structure?\n\nPedro: No, that's the only change for now. Just ensure that all new functions and methods follow this convention. It's a small adjustment, but it helps keep our code organized and easier to understand.\n\nMarta: Alright. I'll keep that in mind as I continue working on my current project. I'll also go back and rename the functions and methods I've already created to align with this new standard.\n\nPedro: Perfect. Consistency is key in coding, so I appreciate your attention to detail. Let me know if you come across any challenges or have any further suggestions for improving our workspace.\n\nMarta: Will do. Thank you for your guidance and support, Pedro.\n\nPedro: You're welcome, Marta. That's what I'm here for. Let's continue to work together to improve both our code and our physical workspace!"
    },
    {
      "type": [
        "filler-add",
        "pivot-update"
      ],
      "topic": [
        "Promoting a culture of customer-centricity and service excellence to drive customer satisfaction",
        "always start variable names with 'm_'"
      ],
      "session_regex": [
        [
          "variable",
          "^m_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^y_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_x$"
        ],
        [
          "variable",
          ".*_m$"
        ],
        [
          "method",
          "^a_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "session_eval_query": [
        "function that determines if an array is a valid sudoku"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "Graph class with a method that computes the shortest path from one node to another",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, as a software engineer, it's crucial that we promote a culture of customer-centricity and service excellence. Our goal is to drive customer satisfaction and ensure that our products meet their needs and expectations.\n\nMarta: Absolutely, Pedro. I couldn't agree more. Putting our customers first is key to our success. Their feedback is invaluable and helps us refine our products and services. \n\nPedro: Exactly. We need to foster a mindset that prioritizes the customer experience above all else. This means not only delivering high-quality products but also providing prompt and efficient support when issues arise.\n\nMarta: I've noticed that our team has been receiving some great feedback lately. It's encouraging to see how our efforts in refining the user interface and adding new features have been well-received. \n\nPedro: Indeed. Customer feedback is a powerful tool. It helps us identify areas for improvement and ensure that we're on the right track. We need to continue leveraging this feedback to drive continuous improvement in our processes and products. \n\nMarta: Definitely. I think it also encourages a sense of ownership and pride in our work. Knowing that our efforts directly impact customer satisfaction is motivating. \n\nPedro: Now, let's shift gears a bit and discuss some coding standards and practices. Consistency is key, and I want to ensure that our code is uniform and easily understandable for the entire team. \n\nMarta: Of course, Pedro. I appreciate the guidance and value your feedback on my coding style. \n\nPedro: Moving forward, I want you to start variable names with the prefix 'm_'. This will help distinguish your variables and ensure consistency with the coding style used by the rest of the team. \n\nMarta: Understood, Pedro. I'll update my coding conventions accordingly and ensure that all new variables follow this format. Are there any specific details regarding the use of this prefix that I should be aware of?\n\nPedro: No, that's the only instruction. As long as you start your variable names with 'm_', you're following the new standard. \n\nMarta: Alright. I'll make sure to implement this change consistently from now on."
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-update"
      ],
      "topic": [
        "never use a formatter when writing code",
        "always start method names with 'b_'"
      ],
      "session_regex": [
        [
          "method",
          "^b_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^y_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_x$"
        ],
        [
          "variable",
          ".*_m$"
        ],
        [
          "method",
          "^b_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "session_eval_query": [
        "Inventory class with add stock and remove stock methods"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "Graph class with a method that computes the shortest path from one node to another",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "medium",
      "text": "Pedro: Marta, I want to update you on our coding standards. From now on, I need you to refrain from using any formatters when writing code. It's a matter of consistency and readability. We're keeping things simple.\n\nMarta: Understood. No formatters from now on.\n\nPedro: Good. Also, going forward, I want you to start method names with 'b_' instead of the standard we discussed previously. This is to distinguish our internal methods from any external libraries we might use.\n\nMarta: Noted. I'll start method names with 'b_' from now on. Any particular reason for choosing 'b_' as the prefix?\n\nPedro: Yes, the 'b_' stands for \"building block.\" Think of each method as a fundamental component that contributes to the larger structure of our software. It's a small change, but it will help us maintain a clear and consistent codebase.\n\nMarta: That's an interesting way to look at it. I appreciate the insight, and I'll make sure to implement this new standard consistently.\n\nPedro: Excellent. I know it can be challenging to adapt to new conventions, but these updates are crucial for our team's long-term efficiency and code maintainability.\n\nMarta: Absolutely, I understand the importance of following consistent standards. I'll make sure my code aligns with these new guidelines.\n\nPedro: Great. I trust your adaptability, and don't hesitate to reach out if any challenges arise. Now, moving forward, are there any new tasks or projects you'd like to take on? I want to ensure you're continuously engaged and growing.\n\nMarta: I appreciate that, Pedro. I'm actually quite interested in diving into some of our older projects and refactoring the code to align with our current standards. It would be a good way to familiarize myself with the entire codebase and contribute to improving our overall code quality.\n\nPedro: That's an excellent idea, Marta. It shows initiative and a commitment to excellence. Go ahead and start with that, and we can discuss your progress and any insights you gain during our next meeting.\n\nMarta: Will do. Thank you for your guidance and support, Pedro.\n\nPedro: You're welcome, Marta. Keep up the good work, and don't hesitate to reach out if you need anything."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-update"
      ],
      "topic": [
        "use Asana as the project management tool",
        "always end function names with '_b'"
      ],
      "session_regex": [
        [
          "function",
          ".*_b$"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^y_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_b$"
        ],
        [
          "variable",
          ".*_m$"
        ],
        [
          "method",
          "^b_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "session_eval_query": [
        "function that implements merge sort"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "Graph class with a method that computes the shortest path from one node to another",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, I want to update you on a few things. Firstly, we're transitioning to Asana for project management. It's a powerful tool that will help us streamline our workflow and improve collaboration. \n\nMarta: Understood. I'll familiarize myself with Asana right away. \n\nPedro: Good. Now, let's discuss some coding standards I want you to implement. Going forward, I need you to end all your function names with '_b'.  This is an important standardization I want across all your code. \n\nMarta: Absolutely, I'll ensure that all my function names follow this convention from now on. \n\nPedro: Another thing I want to emphasize is code documentation. Are you familiar with Doxygen? \n\nMarta: Yes, I've used Doxygen in the past for generating documentation from annotated code. It's a useful tool for maintaining clear and concise documentation alongside the code. \n\nPedro: Excellent. I want you to utilize Doxygen for all your projects. Well-documented code is crucial for collaboration and maintaining our code base. Ensure that you comment your code thoroughly and use Doxygen tags effectively. \n\nMarta: I completely agree. I'll make sure to integrate Doxygen into my coding process. \n\nPedro: One last thing. I want you to start utilizing a code linter. A linter will help catch errors and enforce a coding standard across your projects. I recommend using Pylint. It's a widely-used linter for Python code that will help improve the quality and readability of your code. \n\nMarta: That's a great suggestion. I've heard good things about Pylint. I'll set it up for my projects and integrate it into my development environment. \n\nPedro: Good. Remember, these tools and standards are essential for maintaining the quality and consistency of our code. I'll be reviewing your code regularly, so ensure that you adhere to these instructions meticulously. \n\nMarta: Absolutely, Pedro. I understand the importance of these practices, and I'll make sure to implement them diligently. I appreciate your guidance and feedback. \n\nPedro: That's what I'm here for. Keep up the good work, and don't hesitate to reach out if you have any questions or concerns. \n\nMarta: Thank you, Pedro. I will."
    },
    {
      "type": [
        "filler-instruction-add"
      ],
      "topic": [
        "never use a virtual environment"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^y_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_b$"
        ],
        [
          "variable",
          ".*_m$"
        ],
        [
          "method",
          "^b_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "Graph class with a method that computes the shortest path from one node to another",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "short",
      "text": "Pedro: Marta, I want you to stop using virtual environments. They're an unnecessary complication for our work here at CODEM. \n\nMarta: That's an interesting approach, Pedro. May I ask why? I've found virtual environments helpful for managing project-specific dependencies and keeping my Python installations tidy. \n\nPedro: It's simple: they add an extra layer of complexity that we don't need. Our team's goal is to streamline processes and work efficiently. Virtual environments can cause issues with compatibility and often end up doing more harm than good. \n\nMarta: I see where you're coming from. I've encountered my fair share of problems with them, especially when collaborating with others. So, what alternatives do you suggest? How can I manage my Python environment effectively without virtual environments? \n\nPedro: We have a robust set of tools at our disposal. I want you to start using Docker. It's a powerful platform that will allow you to containerize your applications. By doing so, you can ensure consistency, ease deployment, and have better control over your development environment. \n\nMarta: Docker, right. I've heard of its benefits for consistent deployments, but I haven't delved too deep into it yet. I'll start familiarizing myself with it and begin implementing it for my projects. Any particular tips or resources you recommend for getting started with Docker? \n\nPedro: Absolutely. First, I want you to understand the basics of containerization and how it differs from virtualization. Then, you can start by installing Docker Desktop on your machine. It will provide you with a user-friendly interface to build and manage your containers. I'll send you some documentation and tutorials that will help you get up to speed quickly. \n\nMarta: Sounds like a plan. I'll dive into the resources and let you know if I have any questions along the way. Thank you for the guidance, Pedro. \n\nPedro: You're welcome. Remember, simplicity and efficiency are key. By adopting Docker, you'll be able to streamline your development process and avoid the pitfalls of virtual environments. Let's touch base again soon to discuss your progress and any insights you gain from using Docker. \n\nMarta: Absolutely, I'll keep you posted."
    },
    {
      "type": [
        "filler-update"
      ],
      "topic": [
        "Creating a culture of collaboration and teamwork to achieve shared goals and objectives"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^y_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_b$"
        ],
        [
          "variable",
          ".*_m$"
        ],
        [
          "method",
          "^b_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^m_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "Graph class with a method that computes the shortest path from one node to another",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, I want to follow up on our previous discussion about fostering a collaborative environment within our team. It's an important topic, and I'd like to ensure we're doing everything we can to encourage a culture of teamwork.\n\nMarta: Absolutely, Pedro. I agree that collaboration is key to our success as a team. It's been a while since our last conversation on this, so I'd be happy to revisit the topic and ensure we're on the right track.\n\nPedro: Excellent. As you know, effective collaboration allows us to leverage the diverse skills and perspectives of our team members. It enables us to innovate, solve complex problems, and deliver exceptional results.\n\nMarta: Indeed. Each member of our team brings unique expertise and experiences to the table. By working together and sharing knowledge, we can create synergies that enhance our overall performance.\n\nPedro: Exactly. One of the aspects I'd like to focus on is creating an environment where ideas can be freely exchanged and debated. Constructive discussions and healthy debates are essential for refining our approaches and making well-informed decisions.\n\nMarta: I completely agree. Open and respectful idea exchange fosters creativity and critical thinking. It helps us explore different possibilities and arrive at the best solutions. I think it's important that we encourage everyone to speak up and share their thoughts without fear of judgment.\n\nPedro: That's crucial, Marta. Creating a safe space for idea expression and respectful disagreement is a cornerstone of effective collaboration. It ensures that our discussions are rich and productive. Additionally, it's important that we foster a culture of mutual support and knowledge sharing.\n\nMarta: Absolutely. We should encourage team members to help each other whenever possible. Whether it's providing code reviews, offering technical insights, or sharing best practices, we can all benefit from each other's expertise. This not only improves our workflow efficiency but also enhances the overall skill level of the team.\n\nPedro: Well said. Another aspect I want to emphasize is the importance of clear and consistent communication. Effective collaboration relies on timely and transparent information exchange. We should ensure that everyone is kept in the loop, especially when it comes to project updates, requirements, and deliverables.\n\nMarta: I couldn't agree more. Clear communication prevents misunderstandings and ensures that everyone is working towards the same goals. It's also important that we establish clear processes for knowledge transfer, documentation, and handoffs, especially when collaborating across different teams or departments.\n\nPedro: Absolutely. Efficient knowledge transfer ensures continuity and helps prevent bottlenecks in our workflows. It's also crucial that we encourage a culture of mutual respect and recognition. Recognizing the contributions of team members boosts morale and reinforces the value of collaboration.\n\nMarta: That's an excellent point. Showing appreciation for each other's efforts goes a long way in fostering a positive team culture. It makes everyone feel valued and motivated to continue contributing to the best of their abilities. We should also encourage feedback and continuous improvement.\n\nPedro: Definitely. Creating a feedback-rich environment allows us to identify areas for improvement and make necessary adjustments to our processes. It's important that we regularly seek feedback from our team members and incorporate their insights into how we can enhance our collaboration.\n\nMarta: I agree. By embracing feedback and a culture of continuous improvement, we can fine-tune our processes, eliminate inefficiencies, and strengthen our overall effectiveness as a team. It's also a great way to ensure that everyone feels involved in shaping our collaborative environment.\n\nPedro: Exactly, Marta. By encouraging collaboration, open communication, knowledge sharing, and mutual support, we can create a high-performing team culture that drives innovation and delivers exceptional results. I'm glad we had this follow-up conversation to reinforce the importance of these values.\n\nMarta: I feel the same, Pedro. These discussions are invaluable for aligning our team and ensuring that we're not just skilled individuals but a cohesive unit working together towards shared goals. I'll continue to keep these principles in mind and encourage my colleagues to do the same.\n\nPedro: That's fantastic to hear, Marta. Remember, effective collaboration is a continuous journey, and we should always strive to enhance our practices. Keep promoting these values, and let's work together to make CODEM an exemplary model of teamwork and collaboration.\n\nMarta: I will, Pedro. Thank you for your mentorship and guidance on this topic. I'll do my part in fostering a collaborative environment and encouraging my colleagues to do the same. Together, I'm confident we can achieve great things.\n\nPedro: That's the spirit, Marta. Your enthusiasm and dedication are commendable. Let's continue to set the bar high and inspire those around us. I look forward to witnessing the remarkable outcomes that our team will achieve through our strengthened collaboration."
    },
    {
      "type": [
        "filler-add",
        "pivot-update",
        "pivot-update"
      ],
      "topic": [
        "Developing a culture of continuous learning and improvement through training and development programs",
        "always start variable names with 'wr_'",
        "always end function names with '_a'"
      ],
      "session_regex": [
        [
          "variable",
          "^wr_.*"
        ],
        [
          "function",
          ".*_a$"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^y_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^j_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "variable",
          ".*_m$"
        ],
        [
          "method",
          "^b_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^wr_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "session_eval_query": [
        "function that determines if an array is a valid sudoku",
        "function that implements merge sort"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "Graph class with a method that computes the shortest path from one node to another",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, as a software engineer, it's crucial that you develop a culture of continuous learning and improvement. Our industry is ever-evolving, and we must adapt and grow with it. \n\nMarta: Absolutely, Pedro. I'm committed to my professional development and am always eager to learn new skills and improve my existing ones. \n\nPedro: That's what I like to hear. Now, CODEM offers a range of training and development programs that I want you to take advantage of. These programs can help you enhance your technical skills, as well as your soft skills, which are increasingly important in today's collaborative work environment. \n\nMarta: That sounds great. I'd be happy to participate in those programs. Can you tell me more about them? \n\nPedro: Of course. We have regular workshops and seminars conducted by industry experts, covering a range of topics from new programming languages to project management techniques. We also encourage our engineers to attend relevant conferences and meetups to stay up-to-date with the latest trends and innovations. \n\nMarta: That's fantastic. I think those opportunities will greatly contribute to my growth as an engineer. I'm particularly interested in the industry events, as I believe hearing from experts and connecting with peers can be incredibly valuable. \n\nPedro: Indeed, and we also have internal training sessions where senior engineers share their knowledge and best practices. These are great opportunities for you to learn from your colleagues and pick up tips and tricks that will make you a more efficient and effective engineer. \n\nMarta: I agree. It's a wonderful way to foster a culture of knowledge-sharing and continuous improvement within the company. I'm excited to be a part of it. \n\nPedro: Now, let's shift gears a bit and talk about some specific coding guidelines I want you to follow. I'm updating some previous instructions to ensure consistency across the team. \n\nMarta: Sure, go ahead. \n\nPedro: When naming variables, I want you to always start the name with 'wr_'. This is to standardize our code and make it easily identifiable as belonging to CODEM. It's a small change, but an important one for maintaining our brand and identity in the work we produce. \n\nMarta: Understood. From now on, I'll start all my variable names with 'wr_'. \n\nPedro: Good. Additionally, for function names, I want you to end them with '_a'. This is to indicate that the function is an action and to again, maintain consistency across our codebases. \n\nMarta: Noted. I'll make sure to end all my function names with '_a' from now on. Any other updates to our coding conventions? \n\nPedro: That's it for now. Just make sure to implement these changes immediately and consistently. Consistency is key to readable and maintainable code. \n\nMarta: Absolutely. I'll get right on it and make sure my code follows these updated guidelines. \n\nPedro: Great. Remember, your code is not just for you, it's for the team. Clear and consistent code makes collaboration easier and more efficient. \n\nMarta: Absolutely. I understand the importance of writing code that communicates well with my colleagues. I'll keep that in mind as I continue to develop my skills and contribute to the team. \n\nPedro: That's what I like to hear. Now, go forth and continue to absorb knowledge like a sponge. The day you stop learning is the day you stop growing. \n\nMarta: I will, Pedro. Thank you for your guidance and insights. \n\nPedro: You're welcome. Remember, growth comes from a hunger for knowledge and a commitment to continuous improvement. Stay hungry, Marta. \n\nMarta: I will, thank you."
    },
    {
      "type": [
        "filler-update",
        "pivot-update"
      ],
      "topic": [
        "Preparing extensively for a high-stakes client meeting",
        "always start function argument names with 'x_'"
      ],
      "session_regex": [
        [
          "function argument",
          "^x_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^y_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "variable",
          ".*_m$"
        ],
        [
          "method",
          "^b_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^wr_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "session_eval_query": [
        "function that given two vectors compute their dot product"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "Graph class with a method that computes the shortest path from one node to another",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, I want to make sure we're thoroughly prepared for tomorrow's client meeting. It's crucial that we make a strong impression and demonstrate our expertise.\n\nMarta: Absolutely, Pedro. I've been anticipating this meeting as well. I've prepared the presentation and gone over the key points we need to address. I believe we have a solid strategy in place.\n\nPedro: Excellent. I want to emphasize the importance of clarity and precision during the meeting. We need to ensure that our explanations are tailored to the client's level of understanding. They may not have a deep technical background, so we must find the right balance.\n\nMarta: I completely agree. Clear communication is essential. I've kept the presentation focused on high-level concepts and avoided delving too deeply into technical intricacies. I plan to use analogies and simple examples to ensure their understanding.\n\nPedro: That's a prudent approach. Now, let's review the action items. You will be leading the presentation, and I'll handle the live demo of our software solution. We'll also need to allocate time for a Q&A session, as the client may have specific concerns or requests.\n\nMarta: I've structured the presentation to allow for a natural transition to the demo. I'll make sure to highlight the key features and benefits that align with the client's needs. As for the Q&A session, I've prepared a list of anticipated questions, and I'll be ready to address any additional inquiries they may have.\n\nPedro: Perfect. Now, regarding the demo, I want to showcase the custom modules we've developed. Emphasize the level of customization and flexibility we can offer. It's one of our unique selling points.\n\nMarta: Understood. I'll make sure to set the stage properly by explaining the client's specific requirements and how our solution addresses them. That will lead nicely into the demo, where you can showcase the custom modules in action.\n\nPedro: That's the spirit. Now, moving on to another matter, I want to update a previous instruction I gave you. From now on, when naming function arguments, I want you to start the variable name with 'x_'. This is to maintain consistency and avoid potential conflicts with built-in Python variables.\n\nMarta: Noted. I'll start function argument names with 'x_' from now on. Any specific guidelines on naming conventions or standards you'd like me to follow? \n\nPedro: No, that should suffice for now. I'll provide further updates if any changes are required. For now, let's focus on tomorrow's meeting and ensure its success.\n\nMarta: Absolutely. I'll make sure we're well-prepared and ready to address any concerns or requests the client may have."
    },
    {
      "type": [
        "filler-update",
        "pivot-update"
      ],
      "topic": [
        "Launching diversity and inclusion initiatives to create a more equitable and inclusive workplace",
        "always start function names with 'x_'"
      ],
      "session_regex": [
        [
          "function",
          "^x_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_f$"
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "comment",
          true
        ],
        [
          "function assert",
          true
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "function",
          "^x_.*"
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "method try",
          true
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "method docstring",
          true
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method annotation",
          true
        ],
        [
          "function try",
          true
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "attribute",
          ".*_i$"
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*chx.*"
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "function",
          ".*_a$"
        ],
        [
          "variable",
          ".*_m$"
        ],
        [
          "method",
          "^b_.*"
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "variable",
          "^wr_.*"
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "session_eval_query": [
        "function that given an array of integer citations, computes the h-index"
      ],
      "cumulative_eval_query": [
        "function that computes the average of the diagonal element of a matrix",
        "Nearest neighbors model class with train and predict methods",
        "function that merges two sorted lists",
        "function that implements merge sort",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linear regression class with train and predict methods",
        "Quadratic discriminant analysis class",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Solution class to solve the maximum subarray problem",
        "Graph class with a method that computes the shortest path from one node to another",
        "PyTorch model class that performs binary image classification",
        "Principal component analysis class",
        "function that determines if an array is a valid sudoku",
        "function that computes the mean using an online algorithm",
        "Kernel ridge regression class",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the majority element of an array",
        "Binary tree class with methods to insert and delete nodes",
        "function that given two vectors, computes their dot product",
        "function that given an array of integer citations, computes the h-index",
        "Student grade class with a method that computes the average grade",
        "function that returns the kth largest element in an array",
        "Perceptron class with train and predict methods",
        "function that counts the number of non-zero elements in a matrix",
        "function that converts a Roman numeral string into an integer",
        "function that converts an integer to Roman numerals",
        "function that given two lists returns common elements",
        "function that implements sum array except self",
        "function that checks if a string is a valid palindrome",
        "Lasso regression class with a train and a predict method",
        "LRU cache class with get and put methods",
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "Linked list class",
        "function that implements product array except self",
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product",
        "function that returns the edit distance between two strings",
        "Library class with add books and remove books methods",
        "function that returns the least common multiple of two integers",
        "function that determines if a given tree is a valid binary search tree",
        "function that flattens a binary tree to a linked list",
        "function that returns the longest common prefix string in a list of strings",
        "function that deletes a node in a binary search tree",
        "Linear regression class using numpy",
        "Playlist class with add song and remove song methods",
        "function that implements insertion sort",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers"
      ],
      "session_length": "long",
      "text": "Pedro: Marta, I want to continue our discussion on fostering an inclusive workplace. As a company, we're committed to launching diverse and inclusive initiatives to create an equitable environment for everyone. It's important that we actively contribute to this effort.\n\nMarta: Absolutely, Pedro. I think it's fantastic that CODEM is taking these steps. It's essential that we, as employees, also take an active role in these initiatives. I'm excited to see what actions we can take to make our workplace even more inclusive.\n\nPedro: I'm glad to hear your enthusiasm. One of the key aspects we want to focus on is ensuring that all our employees feel comfortable bringing their authentic selves to work. This means creating an environment where everyone feels valued and respected, regardless of their background or identity.\n\nMarta: I completely agree. Creating a safe and welcoming space is crucial for fostering creativity, innovation, and productivity. Everyone should feel empowered to contribute their unique perspectives and ideas.\n\nPedro: Exactly. And this is where we, as mentors and experienced professionals, have a responsibility. We need to lead by example and ensure that our mentees and colleagues feel supported and included. This includes being mindful of our language, encouraging open dialogue, and promoting respectful interactions at all times.\n\nMarta: I understand, and I want to ensure that my actions align with these values. Are there any specific steps or initiatives you think I should take within our team to promote these values? I'd appreciate any guidance you can offer.\n\nPedro: For now, let's focus on raising awareness and education. You can start by sharing your experiences and perspectives with your colleagues. Encourage open conversations during team meetings, and don't be afraid to speak up if you notice any exclusionary behavior or language. Lead inclusive discussions and offer support to anyone who may need it.\n\nMarta: That's great advice. I'll definitely start there and create a safe space within our team for these important conversations. I think this is a crucial step towards an even more inclusive workplace culture.\n\nPedro: Excellent. Now, shifting gears a bit, I want to give you an update on the coding standards we're implementing. Going forward, I need you to start function names with 'x_' as a prefix. This is to maintain consistency with our new module architecture.\n\nMarta: Understood, Pedro. I'll start implementing this naming convention from now on. Are there any other updates to the coding standards that I should be aware of?\n\nPedro: No, that's the only change for now. Just ensure that all function names follow this new convention. It's important for maintaining uniformity across our codebases and improving readability.\n\nMarta: Absolutely. I'll make sure to adhere to this new standard. I'll review my recent code as well to ensure that I haven't missed any instances where this prefix should be applied.\n\nPedro: Good. I trust that you'll handle this efficiently. Remember, consistency is key, especially when working with a large codebase like ours.\n\nMarta: Absolutely, Pedro. I'll make sure to be diligent about this. Thank you for keeping me updated with the latest standards. If there are any further changes or additions, please let me know, and I'll adapt accordingly.\n\nPedro: Will do. For now, focus on this and our ongoing diversity and inclusion efforts. It's important that we, as a team, contribute to making CODEM a leader in both innovative technology and inclusive workplace practices.\n\nMarta: I'm committed to both these goals, Pedro. I'll make sure to prioritize them in my daily tasks and interactions. Thank you for your guidance and support.\n\nPedro: You're welcome, Marta. Remember, my door is always open if you have any questions or concerns. Let's continue to work together towards a more inclusive and innovative future for CODEM.\n\nMarta: Absolutely. I appreciate your mentorship and guidance. I'll keep you updated on my progress and contributions to these initiatives."
    }
  ]
}