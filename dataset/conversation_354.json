{
  "context": {
    "mentor": "Djibril",
    "mentee": "Jorge",
    "company": "CHEETAH",
    "mentor_persona": "[mentor] is a patient and supportive mentor. [mentor] enjoys helping others and sharing their knowledge and experience. [mentor] is always looking for ways to empower and inspire their mentee.",
    "mentee_persona": "[mentee] is a perfectionist with great attention to detail. [mentee] likes things to be done the right way and has a hard time delegating tasks to others. [mentee] is critical of himself and of others."
  },
  "pivots": [
    [
      [
        15,
        7
      ],
      [
        8,
        5
      ]
    ],
    [
      -1
    ],
    [
      [
        44,
        0
      ],
      [
        15,
        4
      ]
    ],
    [
      -1
    ],
    [
      [
        50,
        0
      ],
      [
        15,
        3
      ]
    ],
    [
      -1
    ],
    [
      [
        15,
        5
      ]
    ],
    [
      -1
    ],
    [
      [
        43,
        0
      ]
    ],
    [
      -1
    ],
    [
      [
        26,
        0
      ]
    ],
    [
      [
        8,
        0
      ],
      [
        15,
        2
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        8,
        7
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        5,
        0
      ]
    ],
    [
      [
        42,
        0
      ]
    ],
    [
      [
        18,
        0
      ]
    ],
    [
      [
        27,
        0
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        45,
        0
      ]
    ],
    [
      -1
    ],
    [
      [
        8,
        1
      ],
      [
        15,
        6
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        10,
        3
      ],
      [
        15,
        1
      ]
    ],
    [
      [
        8,
        3
      ]
    ],
    [
      [
        49,
        0
      ],
      [
        13,
        6
      ]
    ],
    [
      [
        8,
        2
      ],
      [
        24,
        0
      ]
    ],
    [
      [
        35,
        0
      ],
      [
        22,
        0
      ]
    ],
    [
      [
        8,
        4
      ],
      [
        10,
        2
      ]
    ],
    [
      [
        17,
        0
      ],
      [
        15,
        0
      ]
    ],
    [
      [
        8,
        6
      ],
      [
        1,
        0
      ]
    ],
    [
      [
        2,
        0
      ],
      [
        12,
        5
      ]
    ],
    [
      -1
    ],
    [
      [
        19,
        0
      ],
      [
        12,
        7
      ]
    ],
    [
      -1
    ],
    [
      [
        16,
        0
      ],
      [
        12,
        2
      ]
    ],
    [
      [
        41,
        0
      ]
    ],
    [
      -1
    ],
    [
      [
        28,
        0
      ],
      [
        48,
        0
      ]
    ],
    [
      [
        13,
        5
      ]
    ],
    [
      [
        39,
        0
      ],
      [
        25,
        0
      ]
    ],
    [
      [
        0,
        0
      ],
      [
        10,
        6
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        12,
        1
      ],
      [
        36,
        0
      ]
    ],
    [
      [
        12,
        3
      ],
      [
        13,
        2
      ]
    ],
    [
      [
        40,
        0
      ],
      [
        20,
        0
      ]
    ],
    [
      [
        31,
        0
      ],
      [
        29,
        0
      ]
    ],
    [
      [
        30,
        0
      ]
    ],
    [
      [
        12,
        4
      ],
      [
        7,
        6
      ]
    ],
    [
      [
        46,
        0
      ]
    ],
    [
      [
        21,
        0
      ]
    ],
    [
      [
        37,
        0
      ],
      [
        10,
        4
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        23,
        0
      ],
      [
        6,
        3
      ]
    ],
    [
      [
        7,
        7
      ]
    ],
    [
      [
        6,
        2
      ],
      [
        12,
        0
      ]
    ],
    [
      [
        10,
        7
      ]
    ],
    [
      -1
    ],
    [
      [
        13,
        0
      ],
      [
        0,
        2
      ]
    ],
    [
      -1
    ],
    [
      [
        12,
        6
      ]
    ],
    [
      [
        4,
        0
      ],
      [
        14,
        0
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        9,
        7
      ]
    ],
    [
      -1
    ],
    [
      [
        14,
        5
      ]
    ],
    [
      [
        9,
        2
      ]
    ],
    [
      -1
    ],
    [
      [
        13,
        4
      ],
      [
        9,
        1
      ]
    ],
    [
      [
        11,
        5
      ]
    ],
    [
      [
        7,
        5
      ]
    ],
    [
      -1
    ],
    [
      [
        0,
        1
      ],
      [
        9,
        4
      ]
    ],
    [
      [
        33,
        0
      ],
      [
        34,
        0
      ]
    ],
    [
      [
        32,
        0
      ]
    ],
    [
      -1
    ],
    [
      -1
    ],
    [
      [
        38,
        0
      ],
      [
        47,
        0
      ]
    ],
    [
      [
        9,
        0
      ],
      [
        13,
        3
      ]
    ],
    [
      [
        14,
        1
      ],
      [
        10,
        0
      ]
    ],
    [
      -1
    ],
    [
      [
        10,
        1
      ],
      [
        3,
        0
      ]
    ],
    [
      -1
    ],
    [
      [
        11,
        6
      ]
    ],
    [
      -1
    ],
    [
      -1
    ]
  ],
  "fillers": [
    118,
    126,
    -1,
    126,
    -1,
    35,
    13,
    126,
    7,
    21,
    -1,
    118,
    46,
    35,
    126,
    28,
    9,
    108,
    13,
    1,
    -1,
    -1,
    117,
    5,
    25,
    43,
    -1,
    29,
    39,
    -1,
    44,
    -1,
    14,
    108,
    38,
    117,
    1,
    32,
    49,
    1,
    46,
    127,
    7,
    104,
    -1,
    39,
    117,
    13,
    28,
    127,
    27,
    110,
    104,
    43,
    110,
    -1,
    112,
    20,
    -1,
    103,
    -1,
    112,
    112,
    123,
    -1,
    42,
    113,
    101,
    105,
    111,
    26,
    119,
    119,
    44,
    22,
    19,
    21,
    35,
    113,
    119,
    38,
    44,
    112,
    41,
    123,
    128,
    -1,
    -1,
    115,
    21,
    7,
    -1,
    -1,
    123,
    33,
    114,
    3,
    3,
    45,
    105
  ],
  "sessions": [
    {
      "type": [
        "filler-instruction-add",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "never use a VPN when working remotely",
        "always end function argument names with '_a'",
        "always start method names with 'b_'"
      ],
      "session_regex": [
        [
          "function argument",
          ".*_a$"
        ],
        [
          "method",
          "^b_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_a$"
        ],
        [
          "method",
          "^b_.*"
        ]
      ],
      "session_eval_query": [
        "function that merges two sorted lists",
        "Inventory class with add stock and remove stock methods"
      ],
      "cumulative_eval_query": [
        "function that merges two sorted lists",
        "Inventory class with add stock and remove stock methods"
      ],
      "session_length": "medium",
      "text": "Djibril: Hi Jorge, it's great to finally meet you. I'm Djibril, your mentor here at CHEETAH. I wanted to go over a few things with you as you get settled into your new role.\n\nJorge: Nice to meet you, Djibril. I'm excited to be here and looking forward to learning from your experience.\n\nDjibril: That's wonderful to hear, Jorge. One of the first things I want to emphasize is our policy on remote work. We ask that you never use a VPN when working remotely. It's important for security and also helps us maintain a smooth workflow.\n\nJorge: Understood. I'll make sure not to use a VPN when working remotely.\n\nDjibril: Great. Now, onto some coding standards and practices we follow here. We want to ensure consistency and readability in our code. So, I need you to follow these guidelines: always end function argument names with '_a', and start method names with 'b_'. This is something we implement across the board.\n\nJorge: Noted. I'll keep that in mind as I work on my projects. I appreciate the clarity on these points.\n\nDjibril: You're welcome. Consistency is key, and it'll make collaborating with your teammates much easier. Don't hesitate to reach out if you have any questions or concerns about these practices. I'm here to help you navigate any challenges you may encounter.\n\nJorge: Thank you, Djibril. I'll remember that. I'm eager to get started and contribute to the team's efforts.\n\nDjibril: That's the spirit, Jorge. I'm confident you'll do great things here at CHEETAH. Feel free to stop by my desk anytime if you need anything."
    },
    {
      "type": [
        "filler-instruction-add"
      ],
      "topic": [
        "use Monday as the project management tool"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_a$"
        ],
        [
          "method",
          "^b_.*"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that merges two sorted lists",
        "Inventory class with add stock and remove stock methods"
      ],
      "session_length": "short",
      "text": "Djibril: Hi Jorge, how are you settling in? Is there anything you need clarification on regarding our project management system?\n\nJorge: I'm doing well, thanks. I wanted to talk to you about that actually. I've been exploring Monday, and while it seems comprehensive, I'm wondering if there are any particular features or tricks that you find especially useful for our workflow. I like to be efficient, so any insights you can offer would be great. \n\nDjibril: Absolutely. Monday has a few key features that make it ideal for our team. Firstly, the ability to create custom workflows is a huge advantage. We can tailor the platform to our specific needs, which is not something every project management tool offers. It gives us flexibility and helps keep everyone organized and on the same page. \n\nJorge: That's important, especially with a larger team. I can see how that would ensure everyone is working with the same processes and guidelines. \n\nDjibril: Exactly. It's also incredibly helpful for collaboration. The comment and mention features allow for seamless communication and ensure everyone is in the loop. You can mention someone in any task, and they'll be notified instantly. It keeps the whole team connected. \n\nJorge: That sounds really useful. I can see how that would streamline the whole process and reduce the need for lengthy email chains or separate meetings just to clarify small details. \n\nDjibril: Yes, exactly. It empowers everyone to take ownership of their tasks and keeps the project moving forward. I'll send you a few templates we've been using successfully, and feel free to experiment and suggest any improvements. We can tailor it to suit our needs, and yours, as we go along. \n\nJorge: That would be fantastic. Thank you, Djibril. I appreciate your guidance on this. I want to make sure I'm using the tools efficiently and contributing productively to the team. \n\nDjibril: You're very welcome. That's what I'm here for, so never hesitate to reach out. Let's touch base again soon and see how you're finding it."
    },
    {
      "type": [
        "pivot-add",
        "pivot-update"
      ],
      "topic": [
        "always add the '@trace_class' decorator from the 'pedantic' module to all classes",
        "always end function argument names with '_i'"
      ],
      "session_regex": [
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "function argument",
          ".*_i$"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_i$"
        ],
        [
          "method",
          "^b_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "Kernel ridge regression class",
        "function that merges two sorted lists"
      ],
      "cumulative_eval_query": [
        "function that merges two sorted lists",
        "Kernel ridge regression class",
        "Inventory class with add stock and remove stock methods"
      ],
      "session_length": "long",
      "text": "Djibril: Jorge, how are you settling in? Is there anything you need clarification on regarding our previous conversations?\n\nJorge: I'm doing well, Djibril. I've been studying the materials and familiarizing myself with the coding standards you've outlined. I have a good grasp of the information so far.\n\nDjibril: Excellent! I'm glad to hear that. Now, I want to provide an update to one of the coding standards we discussed previously. It's important that we keep our code consistent and maintainable.\n\nDjibril: Going forward, I want you to always end function argument names with '_i'. This helps us easily identify input variables and improves the readability of our code. \n\nDjibril: Additionally, I want to emphasize the importance of documentation. Make sure you're commenting your code adequately. Well-documented code helps other developers understand your work and facilitates collaboration.\n\nDjibril: Another point I want to touch on is the use of the '@trace_class' decorator from the 'pedantic' module. I'd like you to start incorporating this into your code. By adding this decorator to your classes, you enable additional runtime type checking, which can catch errors early on and improve the overall stability of our software.\n\nJorge: Understood. I'll make sure to end function argument names with '_i' from now on and consistently use the '@trace_class' decorator for all my classes. I appreciate you keeping me updated with these coding standards.\n\nDjibril: You're welcome. It's important that we stay aligned as a team. These standards are in place to ensure our code is of high quality and easy to maintain. If you have any questions or feedback as you continue to work, please don't hesitate to reach out.\n\nJorge: Absolutely. Thank you for your guidance and support, Djibril. It's been invaluable during my onboarding process. I'll be sure to reach out if any questions come up.\n\nDjibril: You're very welcome. That's what I'm here for. Feel free to stop by my desk or send me a message anytime. We're all here to help each other grow and improve.\n\nJorge: I certainly will. Thanks again for your help.\n\nDjibril: You're very welcome. Keep up the good work, and don't hesitate to reach out if you need anything at all."
    },
    {
      "type": [
        "filler-instruction-update"
      ],
      "topic": [
        "use Jira as the project management tool"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_i$"
        ],
        [
          "method",
          "^b_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that merges two sorted lists",
        "Kernel ridge regression class",
        "Inventory class with add stock and remove stock methods"
      ],
      "session_length": "long",
      "text": "Djibril: Jorge, how are you finding things so far at CHEETAH? Settling in okay?\n\nJorge: Yes, definitely settling in. I'm enjoying the work and learning a lot, especially about our development processes. It's a bit different from my previous role, so there's a bit of an adjustment period, but I'm getting there.\n\nDjibril: That's great to hear. I know starting a new job can be overwhelming, but it sounds like you're handling it well. So, as you know, we primarily use Python here for our projects. I wanted to fill you in on our project management tools and processes, which are crucial for our workflow.\n\nJorge: Absolutely. I've been meaning to ask about that. I've noticed that we didn't really discuss project management tools during my onboarding, so I've been curious about your preferred methods.\n\nDjibril: Excellent question. At CHEETAH, we rely heavily on Jira as our primary project management tool. It's an incredibly versatile platform that allows us to track issues, plan sprints, manage releases, and collaborate effectively as a team. I want you to get comfortable using it, as it'll be integral to your day-to-day tasks.\n\nJorge: I've heard of Jira, but I haven't had much hands-on experience with it. I'm assuming it's quite different from the basic task management tools I've used in the past.\n\nDjibril: It certainly is. Jira offers a lot of functionality, and it can be a bit daunting at first, but I'll guide you through the basics and provide you with some resources to get you started. Don't worry, you'll be a pro in no time! First, I'll send you an invitation to our Jira instance. Once you have access, we can schedule a quick session to go over the fundamentals.\n\nJorge: That sounds like a plan. I'm a perfectionist when it comes to task management, so I'm keen to dive into Jira and see how it can help me organize my work more efficiently.\n\nDjibril: Perfect! Jira will definitely help you stay organized and on top of your tasks. One of the key advantages of Jira is its flexibility. We can customize issue types, workflows, and fields to align with our specific development processes. It also integrates well with other tools we use, like version control systems and continuous integration servers.\n\nJorge: That's fantastic. I can already see how this will make my life easier, especially with the ability to customize workflows. I like having the freedom to adapt tools to my preferred ways of working.\n\nDjibril: Absolutely. And remember, as you work on tasks in Jira, make sure you provide clear and concise updates. Effective communication within the platform is key to keeping everyone in the loop. Feel free to reach out if you have any questions or if there's anything you'd like clarified along the way.\n\nJorge: Will do. I appreciate your guidance on this, Djibril. It's always helpful to have a mentor who can point me in the right direction and save me from making unnecessary mistakes.\n\nDjibril: You're very welcome, Jorge. That's what I'm here for. Adjusting to a new role can be challenging, but with the right tools and support, I'm confident you'll excel. Now, let's get you set up with Jira, and we can go from there."
    },
    {
      "type": [
        "pivot-add",
        "pivot-update"
      ],
      "topic": [
        "always include a single digit in class names",
        "always end function argument names with '_h'"
      ],
      "session_regex": [
        [
          "class",
          ".*\\d$"
        ],
        [
          "function argument",
          ".*_h$"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_h$"
        ],
        [
          "method",
          "^b_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "Principal component analysis class",
        "function that merges two sorted lists"
      ],
      "cumulative_eval_query": [
        "function that merges two sorted lists",
        "Kernel ridge regression class",
        "Inventory class with add stock and remove stock methods",
        "Principal component analysis class"
      ],
      "session_length": "medium",
      "text": "Djibril: Hi Jorge, how are you doing today?\n\nJorge: Good morning, Djibril. I'm doing well, thanks. I've been working on that project we discussed and I think I've made some good progress.\n\nDjibril: That's great to hear! I wanted to touch base with you on a few coding standards and practices we follow at CHEETAH. It's important that we maintain consistency across our codebases.\n\nJorge: Of course. I appreciate your guidance on this. I want to make sure I'm adhering to the company's standards.\n\nDjibril: Wonderful attitude, Jorge. Now, going forward, I want you to pay attention to two specific things. First, when naming classes, always include a single digit. This helps us identify and differentiate between classes more easily.\n\nJorge: Understood. I'll include a single digit in all my class names from now on.\n\nDjibril: Excellent. The second point is about function argument names. We've updated our convention, and now we want all function argument names to end with '_h'. \n\nJorge: Noted. I'll remember to end all my function argument names with '_h' from now on.\n\nDjibril: Perfect. These might seem like small details, but they're important for maintaining consistency and readability in our code.\n\nJorge: I understand. I'll make sure to incorporate these instructions into my coding practices. Consistency is key, especially when working with a team.\n\nDjibril: Absolutely. And don't hesitate to reach out if you have any questions or concerns about our coding standards. We're all here to support each other and ensure we're delivering high-quality, maintainable code.\n\nJorge: Thank you, Djibril. I really appreciate your mentorship and guidance. I'll let you know if any questions come up as I continue working on the project.\n\nDjibril: You're very welcome. That's what I'm here for. Keep up the good work, and don't hesitate to reach out."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Designing a performance dashboard to track key metrics and KPIs for business success"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_h$"
        ],
        [
          "method",
          "^b_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that merges two sorted lists",
        "Kernel ridge regression class",
        "Inventory class with add stock and remove stock methods",
        "Principal component analysis class"
      ],
      "session_length": "medium",
      "text": "Djibril: Hi Jorge, how are you doing today?\n\nJorge: Good morning, Djibril. I'm doing well, thanks. I wanted to discuss the design of a performance dashboard to track our key metrics and KPIs. It's an important tool for us to monitor our progress and ensure we're on track with our business goals.\n\nDjibril: Absolutely. Designing an effective performance dashboard is crucial for our team and stakeholders to have a clear understanding of our progress. What are your initial thoughts on the key metrics and KPIs we should be tracking?\n\nJorge: Well, being a software engineering team, I believe we should focus on metrics such as code quality, productivity, and efficiency. We can track KPIs like lines of code written, code review turnaround time, bug fix rate, and development cycle time. These will give us a good indication of our team's performance and areas where we can improve.\n\nDjibril: Those are certainly important aspects. It's crucial to strike a balance between quantity and quality. While lines of code written can indicate productivity, we also need to consider metrics that reflect the maintainability and readability of the code. After all, clean and efficient code is just as important as the speed of development.\n\nJorge: I completely agree. Maybe we can include metrics like code complexity, code coverage in terms of testing, and the percentage of code refactored or improved over time. This way, we're not only incentivizing productive output but also encouraging good coding practices.\n\nDjibril: Exactly, and by including these metrics, we're promoting a culture of continuous improvement. It's a great way to ensure that our code base remains healthy and sustainable in the long run. Now, let's discuss how we can visualize these metrics effectively. Dashboards should be intuitive and provide information at a glance.\n\nJorge: Definitely. I was thinking of using graphs and charts that are easy to interpret.  Pie charts could help illustrate the distribution of tasks or the percentage of completed work. And of course, we can't go wrong with simple tables for displaying specific data points.\n\nDjibril: That sounds like a solid plan. Visual representations are key to making the dashboard accessible and digestible. We should also consider color-coding to highlight areas of concern or success. \n\nJorge: That's a great idea! Color-coding will definitely make it easier to identify trends and patterns at a glance. Should we also include some form of historical data or trends on the dashboard? I think it could be useful to see how our performance has evolved over time.\n\nDjibril: Absolutely, including historical data adds context and helps identify patterns or seasonal fluctuations. We can incorporate line charts or area charts to visualize trends over time. It will enable us to spot potential issues early on and make more informed decisions."
    },
    {
      "type": [
        "filler-add",
        "pivot-update"
      ],
      "topic": [
        "Implementing wellness initiatives to support the physical and mental well-being of employees",
        "always end function argument names with '_j'"
      ],
      "session_regex": [
        [
          "function argument",
          ".*_j$"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_j$"
        ],
        [
          "method",
          "^b_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "function that merges two sorted lists"
      ],
      "cumulative_eval_query": [
        "function that merges two sorted lists",
        "Kernel ridge regression class",
        "Inventory class with add stock and remove stock methods",
        "Principal component analysis class"
      ],
      "session_length": "short",
      "text": "Djibril: How are you finding your first months here at CHEETAH, Jorge? Settling in okay?\n\nJorge: Yes, definitely. I'm enjoying the work so far, and the team has been very welcoming. I'm starting to get a handle on things, but there's still a lot to learn, of course.\n\nDjibril: That's great to hear. CHEETAH is big on promoting wellness initiatives to support the physical and mental well-being of our employees. We believe a healthy team is a productive and happy one. What are your thoughts on this? Do you feel like you've been able to maintain a healthy work-life balance?\n\nJorge: Absolutely. I think it's important to prioritize self-care and set boundaries. I've been trying to maintain a consistent exercise routine and make time for hobbies outside of work. It can be challenging at times, but I recognize the importance of avoiding burnout.\n\nDjibril: That's fantastic, Jorge. A proactive approach to self-care is always best. Now, moving on to some more technical matters, I wanted to give you an update on our coding standards. From now on, I want you to end all function argument names with '_j'. This is to maintain consistency with our latest naming conventions. Got it?\n\nJorge: Understood. I'll make sure to implement this naming convention going forward. Are there any other updates I should be aware of?\n\nDjibril: No, that's the main update for now. We can touch base again soon to discuss any further questions or clarifications you might have. For now, just focus on incorporating this into your coding practices.\n\nJorge: Will do. Thanks for the guidance, Djibril. I'll reach out if any questions come up."
    },
    {
      "type": [
        "filler-instruction-update"
      ],
      "topic": [
        "use Asana as the project management tool"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_j$"
        ],
        [
          "method",
          "^b_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that merges two sorted lists",
        "Kernel ridge regression class",
        "Inventory class with add stock and remove stock methods",
        "Principal component analysis class"
      ],
      "session_length": "medium",
      "text": "Djibril: Hi Jorge, how are you getting on with the project management system? I wanted to touch base and give you an update on our preferred tools.\n\nJorge: Good morning, Djibril. Yes, I've been using Trello so far as per your previous suggestion. It's been helpful to keep track of tasks and I've customized it to suit my needs. What did you want to update me on?\n\nDjibril: Great! Trello is a fantastic tool, and I'm glad it's been working for you. However, after further discussion with the team leads, we've decided to standardize on Asana for project management across the entire engineering team. It offers some additional features that Trello lacks and integrates well with our other tools.\n\nJorge: I see. I'm familiar with Asana, but I haven't used it extensively. Are there any particular features you want me to focus on, or should I just dive in and explore its capabilities?\n\nDjibril: Good question. Asana has powerful capabilities for task management, and one of its key strengths is the ability to create custom fields and track progress across various projects. I want you to pay particular attention to setting up custom fields that align with our Python development process. \n\nJorge: That makes sense. I like the idea of being able to track the progress of tasks in a more granular way. I'll start familiarizing myself with Asana's custom fields and see how I can adapt my current system. Are there any specific integrations with our other tools that I should be aware of?\n\nDjibril: Absolutely. Asana integrates well with our version control system, Git. You can link commits and pull requests to specific tasks, which helps keep a clear audit trail of changes. Additionally, Asana has a powerful API that you can use to automate certain tasks and reporting. If you're comfortable with it, exploring that aspect could be beneficial for streamlining your workflow.\n\nJorge: That's great to know. I'm always looking for ways to automate and improve my efficiency. I'll definitely look into the API documentation and see what possibilities it opens up. Are there any particular challenges or benefits that other team members have found with Asana that I should keep in mind?\n\nDjibril: That's fantastic, Jorge. I know your attention to detail will serve you well here. One of the benefits that others have found is improved collaboration through Asana's commenting and @-mention system. It keeps everyone on the same page and ensures that discussions are tied to specific tasks. As for challenges, some team members initially found the learning curve a bit steep, especially when it comes to mastering the custom fields and reporting features. But I'm confident that with your dedication and our ongoing support, you'll overcome any hurdles.\n\nJorge: Alright, I appreciate the vote of confidence. I'll start making the transition to Asana and explore how I can customize it to fit my workflow. Thank you for the update, Djibril. I'll keep you posted on my progress and let you know if I have any questions or feedback.\n\nDjibril: You're very welcome, Jorge. That sounds like a plan. Don't hesitate to reach out if you need any assistance or if there's anything I can do to support you. We're all here to help each other improve and adapt to these tools."
    },
    {
      "type": [
        "filler-add",
        "pivot-add"
      ],
      "topic": [
        "Requesting upgraded technology, including computers and software",
        "always add the '@timer_class' decorator from the 'pedantic' module to all classes"
      ],
      "session_regex": [
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_j$"
        ],
        [
          "method",
          "^b_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "Quadratic discriminant analysis class"
      ],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that merges two sorted lists",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "Kernel ridge regression class"
      ],
      "session_length": "long",
      "text": "Djibril: Hey, Jorge! How are you doing today?\n\nJorge: Good morning, Djibril. I'm doing well, thanks. How about you?\n\nDjibril: I'm great. I wanted to touch base with you regarding our technology stack and some upcoming projects. Are you settled in with your current setup, or do you feel you need any upgrades to tackle future tasks more efficiently?\n\nJorge: Honestly, I've been feeling a bit hampered by the specs of my laptop. It's a few generations old now, and I often find myself waiting on compile times and rendering, especially with our more complex projects. I think an upgrade would really help streamline my workflow.\n\nDjibril: That's a fair point, and I'm glad you brought it up. Efficient tools are essential for efficient work. I'll speak with our IT department and see about getting you a newer model with better processing power and an upgraded GPU. Anything else you feel would help you work more productively?\n\nJorge: Well, now that you mention it, I've also been meaning to ask about software upgrades. Specifically, I was wondering if there were any plans to adopt more advanced debugging tools for our Python projects. Having access to more robust debugging features would be a great help when tackling complex codebases.\n\nDjibril: Absolutely. I completely agree that the right tools can make a huge difference in our productivity and the quality of our work. I'll look into licensing some more advanced debugging software for the team. Are there any particular tools you've used in the past or have had your eye on?\n\nJorge: I've heard great things about PyCharm's professional edition. It offers a lot of features that could speed up our development cycle, like remote debugging, built-in profiling, and better version control integration.\n\nDjibril: That's fantastic to hear. I'll definitely include that in my proposal to management. Now, moving forward, I want to emphasize the importance of a particular coding practice I'd like you to adopt. Whenever you're working on a project, I want you to add the '@timer_class' decorator from the 'pedantic' module to all your classes. This will help us keep track of the performance of our code and identify any potential bottlenecks early on.\n\nJorge: Understood. I'll make sure to include the decorator in all my class definitions from now on. Are there any specific projects you'd like me to prioritize for this?\n\nDjibril: For now, just implement it moving forward with your current and future projects. If we decide to roll this out across the team, we may need to go back and add it to older code, but for now, this will help us start gathering performance data for new developments.\n\nJorge: Alright, I'll get started on that immediately. I'll also do some further reading on the 'pedantic' module to fully understand its capabilities.\n\nDjibril: That's fantastic, Jorge. Don't hesitate to reach out if you have any questions or concerns about any of this. That's what I'm here for!\n\nJorge: Will do, Djibril. Thanks again for your support and guidance.\n\nDjibril: Anytime, Jorge. That's what mentorship is all about! Keep up the good work, and I'm sure your contributions will continue to shine."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Implementing effective meeting strategies and time management techniques to optimize productivity"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_j$"
        ],
        [
          "method",
          "^b_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that merges two sorted lists",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "Kernel ridge regression class"
      ],
      "session_length": "long",
      "text": "Djibril: Jorge, now that you've settled into your role, I'd like to discuss strategies for effective meetings and time management. Efficient meetings are key to productivity, and I want to ensure you're set up for success.\n\nJorge: Absolutely, Djibril. I've noticed that meetings can often eat into a lot of our work time, so I'm keen to learn how to make the most of them. I want to ensure I'm as productive as possible.\n\nDjibril: Great attitude, Jorge. Effective meetings are indeed crucial for two main reasons. Firstly, they ensure everyone is aligned and working towards the same goals. And secondly, they provide a platform for collaboration and problem-solving.\n\nJorge: Alignment and collaboration. Got it. So, how can we make sure our meetings are efficient and productive?\n\nDjibril: Well, it starts with careful planning. Before calling a meeting, ask yourself a few key questions. Firstly, is the meeting necessary, or can the issue be resolved through a quick chat or email?\n\nJorge: That's a good point. Sometimes, we tend to default to meetings when a simpler solution might be more efficient.\n\nDjibril: Exactly. If a meeting is necessary, then take time to set a clear agenda. A well-structured agenda ensures the meeting stays focused and on track. Send out the agenda in advance so attendees can prepare and contribute effectively.\n\nJorge: Makes sense. So, we keep the agenda concise and to the point?\n\nDjibril: Yes, and allocate timings for each item. It keeps the meeting moving and ensures no single topic dominates. It's also a good idea to encourage attendees to suggest additional items for the agenda. That way, you can address any outstanding issues and ensure everyone's time is respected.\n\nJorge: I can see how that would keep the meeting dynamic and inclusive. What about during the meeting itself? Any tips for keeping things running smoothly?\n\nDjibril: Absolutely. Firstly, start on time, even if some people are late. It encourages punctuality and sends a message that everyone's time is valuable. Secondly, as the facilitator, it's your role to keep the discussion focused and to gently steer things back on track if side topics come up.\n\nJorge: So, I should be prepared to interrupt and redirect the conversation if needed?\n\nDjibril: Correct. It's a delicate balance, but it's an important skill to develop. Another tip is to assign a timekeeper, especially for longer meetings. They can keep an eye on the clock and ensure the meeting doesn't run over, again, respecting everyone's time.\n\nJorge: That's a good idea. I can see how that would help keep things concise and to the point.\n\nDjibril: Indeed. Now, regarding time management techniques, I'd suggest you start by creating a daily plan. Block out time for specific tasks and stick to those allocations as much as possible. It helps to prioritize and ensures you're not spending too much time on any one task.\n\nJorge: Okay, so I should allocate, say, an hour for a task and then move on, even if it's not quite finished?\n\nDjibril: That's the idea. It can be tricky at first, especially for someone like you who likes to perfect things. But it's an important skill to develop. By all means, revisit the task later, but don't let one task dominate your entire day.\n\nJorge: That makes sense. I can see how that would help me manage my time more effectively. Are there any tools or techniques you'd recommend for this?\n\nDjibril: Definitely. There are some great time management tools out there. One simple technique is the Pomodoro Technique. It involves working in focused, 25-minute intervals, called 'pomodoros', followed by short breaks. After several pomodoros, you take a longer break. It helps with focus and productivity.\n\nJorge: Interesting. So, short, sharp bursts of focus, followed by a break. I can see how that would help me stay sharp.\n\nDjibril: Exactly. And finally, learn to delegate, Jorge. As engineers, we often want to tackle everything ourselves, but it's important to recognize when to hand off tasks to others. It frees up your time and leverages the skills of your colleagues.\n\nJorge: Delegation is something I struggle with, Djibril. I like to keep things under my control, but I see how it could be beneficial if managed well.\n\nDjibril: It's all about trust, Jorge. Trust in your colleagues' abilities and their willingness to help. Effective delegation benefits the entire team. So, those are my tips for effective meetings and time management. I'm happy to elaborate or clarify any points, and of course, we can tailor these strategies to your specific needs.\n\nJorge: This has been incredibly helpful, Djibril. I feel more equipped to manage my time and contribute to productive meetings. I appreciate your guidance and support.\n\nDjibril: You're very welcome, Jorge. Remember, these are skills that develop over time, so be patient with yourself and don't hesitate to reach out if you need further advice. That's what I'm here for.\n\nJorge: I certainly will. Thank you again. I feel more confident and prepared thanks to our conversations."
    },
    {
      "type": [
        "pivot-add"
      ],
      "topic": [
        "always import the 'locale' module even if it is not used"
      ],
      "session_regex": [
        [
          "import",
          [
            "locale",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_j$"
        ],
        [
          "method",
          "^b_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that returns the least common multiple of two integers"
      ],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that returns the least common multiple of two integers",
        "function that merges two sorted lists",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "Kernel ridge regression class"
      ],
      "session_length": "long",
      "text": "Djibril: Good morning, Jorge. How are you doing today?\n\nJorge: Good morning, Djibril. I'm doing well, thank you. I'm ready to get started on our next task. What do you have in store for me today?\n\nDjibril: Great to hear, Jorge. As you know, we're working on a project that involves internationalization and localization. Today, I want to discuss a specific aspect of our coding style and conventions for this project.\n\nJorge: Absolutely. I understand the importance of consistent coding style, especially when working on a project with a team.\n\nDjibril: Excellent. Now, one of the key aspects of our coding style for this project is the consistent use of the 'locale' module in our Python code. Even if you don't explicitly use it in a particular script or function, I want you to import it nonetheless.\n\nJorge: Understood. I will make sure to import the 'locale' module in all my Python scripts and functions, regardless of whether I directly use its functionality or not.\n\nDjibril: Perfect. This might seem like a small detail, but it's important for maintaining consistency and clarity in our code. It also makes it easier for other team members to understand the context and purpose of our scripts, even if they don't immediately see any locale-related functionality.\n\nJorge: I agree. Consistency and clarity are crucial, especially when working with a large code base and a team of developers. It's important that our code is readable and understandable to everyone involved.\n\nDjibril: Exactly. By adhering to this convention, we ensure that our code is not only functional but also maintainable and collaborative. It's all about enabling efficient teamwork and avoiding any potential confusion down the line.\n\nJorge: I will definitely keep that in mind. Should I document this convention somewhere, or is it already part of our team's coding guidelines?\n\nDjibril: It's a great idea to document it. While we might discuss these guidelines during meetings or pair-programming sessions, having written documentation ensures that everyone is on the same page, especially new team members who might join later.\n\nJorge: Alright, I will make sure to add it to our team's coding guidelines document. That way, anyone who refers to the document will be aware of this convention.\n\nDjibril: That's fantastic, Jorge. I appreciate your attention to detail and your proactive approach to documentation. It's a crucial aspect of software engineering, and it really contributes to the overall quality of our work.\n\nJorge: Thank you for your guidance and support, Djibril. I'm glad to be a part of a team that values these practices. I'll make sure to implement this consistently from now on.\n\nDjibril: You're very welcome, Jorge. That's what mentorship is all about \u2013 ensuring that we share knowledge and establish good practices. Your dedication to perfection and attention to detail are great assets, and I'm happy to help you channel them effectively.\n\nJorge: I really appreciate your support and encouragement. It means a lot, and it definitely helps boost my confidence as a new member of the team.\n\nDjibril: We're glad to have you on board, Jorge. Now, with this new coding convention in mind, let's dive into the specifics of the task at hand. I think you'll find it both challenging and rewarding.\n\nJorge: I'm all ears. I'm excited to tackle the next challenge and put our coding conventions into practice."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-update",
        "pivot-update"
      ],
      "topic": [
        "always use a VPN when working remotely",
        "always start method names with 'x_'",
        "always end function argument names with '_g'"
      ],
      "session_regex": [
        [
          "method",
          "^x_.*"
        ],
        [
          "function argument",
          ".*_g$"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method",
          "^x_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "Inventory class with add stock and remove stock methods",
        "function that merges two sorted lists"
      ],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that returns the least common multiple of two integers",
        "function that merges two sorted lists",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "Kernel ridge regression class"
      ],
      "session_length": "short",
      "text": "Djibril: Jorge, I wanted to touch base with you regarding some updates to our remote work policies and coding standards.\n\nJorge: Of course, go ahead.\n\nDjibril: Moving forward, I want to ensure that whenever you are working remotely, you are connected to a VPN. This adds an extra layer of security, especially when accessing sensitive company data.\n\nJorge: Understood. I'll make sure to connect to a VPN from now on whenever I'm working remotely.\n\nDjibril: Great. Now, regarding our coding standards, I'd like to make a few adjustments. For method names, please start them with the prefix 'x_'. This helps us identify custom methods more easily.\n\nJorge: Noted. I'll update my naming convention for method names accordingly.\n\nDjibril: Additionally, when naming function argument names, end them with the suffix '_g'. This provides clarity and distinguishes function arguments from other variables.\n\nJorge: Alright. I'll remember to use '_g' for function argument names from now on.\n\nDjibril: These updates are effective immediately, so please incorporate them into your coding practices. If you have any questions or concerns, feel free to reach out.\n\nJorge: Will do. I appreciate the guidance and updates."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Creating a culture of collaboration and teamwork to achieve shared goals and objectives"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method",
          "^x_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that returns the least common multiple of two integers",
        "function that merges two sorted lists",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "Kernel ridge regression class"
      ],
      "session_length": "short",
      "text": "Djibril: Jorge, our team's success relies on effective collaboration and a shared sense of purpose. We need to ensure that everyone is working together efficiently and supporting each other.\n\nJorge: Absolutely. I believe in the power of teamwork, and I understand the importance of clear communication and a unified goal. How do we cultivate that culture within our team?\n\nDjibril: It starts with fostering an environment of trust and mutual respect. We need to encourage open communication, where ideas and feedback are welcomed and discussed constructively. This means creating a safe space for everyone to voice their thoughts without fear of judgment or criticism.\n\nJorge: That makes sense. Constructive criticism and an open dialogue are key. I think it's also important to define clear goals and objectives for the team, so we're all working towards the same target.\n\nDjibril: Exactly. Goal-setting is crucial. We need to ensure that everyone understands their role and how it contributes to the bigger picture. When team members recognize the impact of their work and how it aligns with the team's objectives, they become more invested in the outcome.\n\nJorge: Agreed. Clear roles and expectations help prevent confusion and miscommunication. Should we also encourage regular team-building activities to improve collaboration and morale?\n\nDjibril: Absolutely. Team-building exercises can strengthen our bonds and improve communication dynamics. They can help us understand each other's strengths and weaknesses, fostering a more cohesive unit. Besides, it's important to have fun together! It boosts morale and creates a positive work environment.\n\nJorge: That sounds great. I think a combination of clear goals, open communication, and team-building activities will help us build a strong culture of collaboration. I'm excited to see how we can improve our teamwork and achieve even better results.\n\nDjibril: Fantastic! Remember, it's all about supporting each other and recognizing that we're stronger together. By embracing our diverse skills and perspectives, we can create a high-performing team that delivers exceptional results."
    },
    {
      "type": [
        "filler-update"
      ],
      "topic": [
        "Designing a performance dashboard to track key metrics and KPIs for business success"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method",
          "^x_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that returns the least common multiple of two integers",
        "function that merges two sorted lists",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "Kernel ridge regression class"
      ],
      "session_length": "medium",
      "text": "Djibril: Hi Jorge, how are you doing today?\n\nJorge: Good morning, Djibril. I'm doing well, thanks. I wanted to touch base with you on the performance dashboard design. I've been thinking about our previous conversation and doing some research on best practices.\n\nDjibril: That's great, Jorge. I'm glad you're taking the initiative to dive deeper into this topic. Performance dashboards are crucial for monitoring our applications and providing visibility into key metrics. What are your thoughts so far?\n\nJorge: Well, I've been considering the key performance indicators (KPIs) that we should track. I think it's important to identify the specific metrics that align with our business goals and provide actionable insights. \n\nDjibril: Absolutely, identifying the right KPIs is essential. It's important to strike a balance between tracking enough metrics to gain valuable insights without overwhelming users with too much information. In my experience, it's helpful to categorize KPIs into different perspectives, such as user experience, system performance, and business outcomes. This allows for a more structured and meaningful dashboard design.\n\nJorge: That's a good point. I tend to err on the side of including more details, but I can see how too much information can be counterproductive. Categorization makes sense to provide a clear structure. I've also been thinking about the visual design and how to make the dashboard intuitive and user-friendly. Any recommendations on charting libraries or UI frameworks we could leverage?\n\nDjibril: Visual design is indeed critical to the effectiveness of the dashboard. We want to ensure that the data is presented in a way that is easy to understand and interpret. In terms of charting libraries, I'd suggest exploring options like Matplotlib or Seaborn, which are powerful and widely used in the Python community. For UI frameworks, we could consider something like Dash or Plotly, which provide interactive and responsive dashboard capabilities.\n\nJorge: I've used Matplotlib before and found it quite versatile. I haven't had much experience with the others, but I'll definitely look into them. I think providing interactivity and the ability to drill down into data would be valuable for our users. Are there any specific features or functionalities that you think are particularly important for us to include?\n\nDjibril: Absolutely, interactivity and drill-down capabilities are key. Users should be able to explore the data, filter it based on specific criteria, and perhaps even apply custom time ranges to focus on particular periods of interest. Another important consideration is real-time data updates. Depending on the nature of our application, we might want to implement streaming or near-real-time updates to ensure the dashboard always reflects the current system state.\n\nJorge: That's a comprehensive set of requirements. I'll keep them in mind as I design and implement the dashboard. I think I have a good understanding of the direction now. I'll start by identifying the critical KPIs, categorizing them, and then experimenting with different charting options to find the most effective visualizations.\n\nDjibril: Sounds like a solid plan, Jorge. Remember, this is an iterative process, so don't be afraid to seek feedback and make adjustments along the way. Also, keep in mind the importance of clean code and documentation as you develop the dashboard. That will make it easier for future maintenance and enhancements."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-update"
      ],
      "topic": [
        "use Trello as the project management tool",
        "always start method names with 'ud_'"
      ],
      "session_regex": [
        [
          "method",
          "^ud_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method",
          "^ud_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "Inventory class with add stock and remove stock methods"
      ],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that returns the least common multiple of two integers",
        "function that merges two sorted lists",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "Kernel ridge regression class"
      ],
      "session_length": "medium",
      "text": "Djibril: Hi Jorge, how are you today?\n\nJorge: Good morning, Djibril. I'm doing well, thank you. How about yourself?\n\nDjibril: I'm great. Listen, I wanted to touch base with you on a few updates we're making to our processes. First, I want you to start using Trello for project management. It's a great tool to keep track of tasks and ensure we're on the same page with our projects.\n\nJorge: Absolutely. I've heard of Trello and have used it briefly in the past. I'll set up my boards and lists right away and transfer my current tasks over.\n\nDjibril: Excellent. Trello is quite intuitive, and I think it will help streamline our work. Now, onto another update. Going forward, I want you to start naming your methods with the prefix 'ud_'. This is a change from our previous naming convention, and I want you to apply this to all your new methods from now on.\n\nJorge: Understood. I'll make sure to start my method names with 'ud_' from now on. Are there any specific instructions or guidelines I should keep in mind regarding this new naming convention?\n\nDjibril: No further instructions for now. Just ensure that all your new methods follow this naming structure. It's a small change, but it will help us standardize our code and make it more readable and consistent across the team.\n\nJorge: I agree. Consistency is key in maintaining clean and understandable code. I'll make sure to implement this change moving forward.\n\nDjibril: Great! I'll send you a follow-up email with these instructions, so you have them in writing. If you have any questions or concerns, don't hesitate to reach out.\n\nJorge: Will do. Thank you for the updates, Djibril. I'll get started on implementing these changes right away."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Introducing new employee benefits, perks, and incentives to attract and retain top talent"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method",
          "^ud_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that returns the least common multiple of two integers",
        "function that merges two sorted lists",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "Kernel ridge regression class"
      ],
      "session_length": "short",
      "text": "Djibril: Jorge, I wanted to touch base with you on a different topic today. As you know, CHEETAH is committed to attracting and retaining the best talent, and we're always looking for ways to improve our employee benefits and perks. What are your thoughts on this matter? Have you given it any thought?\n\nJorge: Absolutely, Djibril. I think it's crucial for companies, especially in the competitive tech industry, to offer a comprehensive benefits package. It not only helps attract top talent but also ensures employee satisfaction and retention. I believe a combination of traditional benefits, like healthcare and retirement plans, along with innovative perks and incentives, can make CHEETAH an even more desirable place to work. \n\nDjibril: That's a great point, Jorge. We certainly want to cover the basics and also offer something unique that sets us apart from other companies. Things like flexible work hours, remote work options, and additional vacation days are becoming increasingly important to employees, especially in the post-pandemic era. We also want to invest in professional development opportunities, whether it's sponsoring certifications, providing access to online courses, or hosting internal workshops. \n\nJorge: Agreed. Those are some excellent perks that many employees value highly. Another idea could be offering wellness programs or initiatives that support mental health and work-life balance. This could include things like gym memberships, meditation apps, or even on-site yoga classes. \n\nDjibril: Absolutely, employee wellness is paramount. We also want to incentivize and reward our employees for their hard work and dedication. Implementing a robust recognition and rewards system can go a long way. This could be in the form of public acknowledgments, employee-of-the-month programs, or even small gifts and incentives for a job well done. \n\nJorge: That sounds fantastic! I think it's important to make employees feel valued and appreciated. Another idea could be offering equity or profit-sharing plans for long-term incentives. This not only attracts talent but also aligns employees' interests with the company's success. \n\nDjibril: Now, that's an interesting one, Jorge. It shows a strong commitment to our employees and could foster a sense of ownership and motivation. It's definitely something worth considering and discussing further with the management team. Thank you for your thoughtful input, Jorge. \n\nJorge: You're welcome, Djibril. It's exciting to think about how we can make CHEETAH an even better place to work. I'm happy to contribute my ideas, especially if they can help improve the employee experience. \n\nDjibril: Great! We're always open to suggestions, and your perspective as a new employee is invaluable. Let's keep this conversation going and refine our ideas. Together, we can make CHEETAH an employer of choice in the software industry. \n\nJorge: Absolutely, Djibril. I'm glad to be a part of this process, and I look forward to further discussions."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Remote work policies, challenges, and best practices"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method",
          "^ud_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that returns the least common multiple of two integers",
        "function that merges two sorted lists",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "Kernel ridge regression class"
      ],
      "session_length": "long",
      "text": "Djibril: Remote work has become an essential part of the modern workplace, especially in the software industry. CHEETAH, like many companies, has embraced remote work policies, and it's important for us to discuss the intricacies and best practices to ensure we remain productive and efficient.\n\nJorge: Absolutely. I've always been intrigued by the concept of remote work, and I appreciate the flexibility it offers. However, I'm also aware that it comes with its own set of challenges. I'd like to gain a deeper understanding of how we can make it work effectively, especially in a field as collaborative as software engineering.\n\nDjibril: That's a great mindset to have, Jorge. Remote work can be incredibly beneficial, but it requires a thoughtful approach to ensure we maintain our culture and productivity. One of the key challenges with remote work is effective communication. When we're not in the same physical space, it can be easier to miss non-verbal cues and subtle nuances in conversation.\n\nJorge: That's very true. I can imagine that misunderstandings or miscommunications could easily arise. How do we ensure that everyone remains on the same page and that information is conveyed effectively?\n\nDjibril: Great question. One of the best practices we implement at CHEETAH is overcommunication. We encourage everyone to be explicit and clear in their communication, whether it's through email, chat, or video calls. It's important to provide context, be responsive, and confirm understanding whenever possible.\n\nJorge: Overcommunication makes a lot of sense, especially in a remote setting. What about maintaining a sense of connection and team spirit when we're all working from different locations?\n\nDjibril: Building and maintaining a strong team culture is crucial for remote work to be successful. At CHEETAH, we foster a sense of community through regular virtual team meetings, social events, and collaborative projects. We also encourage the use of video conferencing to create a more personal connection during meetings and one-on-one catch-ups.\n\nJorge: That sounds like a great way to keep everyone engaged and feeling part of a team. Are there any specific tools or software that the company provides to facilitate remote work and collaboration?\n\nDjibril: Definitely. We have a suite of tools at our disposal to make remote work more efficient. We primarily use video conferencing software for meetings and catch-ups, along with project management tools to keep track of tasks and deadlines. Instant messaging platforms are also a lifesaver for quick clarifications and day-to-day communication.\n\nJorge: It's reassuring to know that the company provides the necessary tools to support remote work. What about managing work-life balance when the lines between home and office become blurred?\n\nDjibril: Work-life balance is a critical aspect of remote work. We encourage our employees to set clear boundaries and stick to their work schedules as much as possible. Taking breaks, stepping away from the screen, and maintaining a healthy work environment are all important factors in maintaining productivity and well-being.\n\nJorge: That's great advice. I can see how easy it could be to let work bleed into personal time when your office is just a room away. Are there any particular challenges you've faced while managing remote teams, and how did you tackle them?\n\nDjibril: One of the biggest challenges is managing time zones when working with a distributed team. To tackle this, we try to ensure that there's at least some overlap in working hours so that everyone has a chance to connect and communicate directly. We also record meetings and provide detailed notes so that team members in different time zones can stay up to speed.\n\nJorge: That's a thoughtful approach to ensuring inclusivity and keeping everyone in the loop, regardless of their location. I'm curious, how do performance evaluations work in a remote setting?\n\nDjibril: Performance evaluations are slightly different in a remote work environment. We focus on setting clear goals and providing regular feedback to ensure that everyone is on track. We also pay attention to the quality of work produced and how well individuals collaborate and communicate within the team dynamic.\n\nJorge: That makes a lot of sense. It seems that effective communication and clear goal-setting are at the heart of successful remote work practices. Are there any specific remote work policies or guidelines that CHEETAH has implemented that I should be aware of?\n\nDjibril: Absolutely. CHEETAH has a comprehensive remote work policy document that outlines expectations, guidelines for working hours and availability, and the support systems in place for remote workers. It's important that you familiarize yourself with this document, as it covers everything from our communication norms to the technical requirements for remote work.\n\nJorge: I'll definitely take a look at that document to understand the ins and outs of the company's remote work policies. Are there any common pitfalls or mistakes that people new to remote work tend to make? I want to make sure I can avoid them.\n\nDjibril: One common pitfall is not setting up a dedicated workspace at home. It's important to create a separate work environment to help you stay focused and maintain a professional mindset. Another mistake is not setting clear boundaries with your colleagues and clients regarding response times and availability. It's easy to burn out if you feel the need to be responsive 24/7.\n\nJorge: Those are valuable insights. I'll make sure to set up a proper home office space and establish clear boundaries. Any other tips or advice you can offer for successfully navigating remote work?\n\nDjibril: Remember to stay connected and reach out for help when needed. Remote work can sometimes feel isolating, so don't hesitate to engage with your colleagues, ask questions, and seek support. Also, make use of the tools and resources provided by the company to streamline your work processes and enhance collaboration.\n\nJorge: Thank you for sharing your insights and guidance. I feel much more prepared to embrace remote work effectively and efficiently. I'll keep your advice in mind as I continue my journey at CHEETAH.\n\nDjibril: You're very welcome, Jorge. Remember that remote work is a constantly evolving aspect of our industry, and it's okay to adapt and find your own rhythm. Feel free to reach out if you have any questions or concerns along the way. That's what I'm here for!"
    },
    {
      "type": [
        "filler-instruction-add"
      ],
      "topic": [
        "Commit directly to the dev branch"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method",
          "^ud_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that returns the least common multiple of two integers",
        "function that merges two sorted lists",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "Kernel ridge regression class"
      ],
      "session_length": "short",
      "text": "Djibril: Jorge, how are you doing today? \n\nJorge: Good morning, Djibril. I'm doing well, thank you. I've been reviewing the code for the new feature we discussed last week. It's almost ready for deployment. \n\nDjibril: That's great news! I'm glad to hear you're making progress. For this particular feature, I need you to commit directly to the dev branch. \n\nJorge: Understood. I typically create a new branch and open a pull request for code review, but if you think it's best to commit directly to dev, I will do so. May I ask what the reasoning is behind this approach for this feature? \n\nDjibril: Absolutely. Given the time-sensitive nature of this feature and the fact that you've already conducted a thorough code review, committing directly will expedite the process. We can always revert or make adjustments if needed, but for now, let's streamline the deployment. \n\nJorge: That makes sense. I'll proceed with the direct commit then. If you don't mind, I'll keep an eye on the build and deployment process to ensure everything goes smoothly. \n\nDjibril: That's the attention to detail that we value. Please do monitor it, and don't hesitate to reach out if you encounter any issues or have any concerns. \n\nJorge: Will do. Thank you for your guidance, Djibril. \n\nDjibril: You're very welcome. Always happy to help. Let's touch base later this week to ensure everything is on track. \n\nJorge: Sounds like a plan. Have a great rest of your day! \n\nDjibril: You too, Jorge!"
    },
    {
      "type": [
        "filler-update",
        "pivot-add"
      ],
      "topic": [
        "Implementing wellness initiatives to support the physical and mental well-being of employees",
        "always include the string 'chx' in function argument names"
      ],
      "session_regex": [
        [
          "function argument",
          ".*chx.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method",
          "^ud_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [
        "function that given two vectors, computes their dot product"
      ],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "Kernel ridge regression class"
      ],
      "session_length": "medium",
      "text": "Djibril: Hey, Jorge. How are you doing today?\n\nJorge: Good morning, Djibril. I'm doing well, thanks. I wanted to touch base with you on the wellness initiative we discussed previously. It's an important topic, and I think it would greatly benefit the team.\n\nDjibril: Absolutely. Employee wellness is a key aspect of any successful company. We want to ensure that our team is supported in both their physical and mental health journeys. It's great that you're taking an interest in this. Have you thought about any specific initiatives or programs we could implement?\n\nJorge: Yes, I have. After our last conversation, I did some research and spoke to a few colleagues. I think we could start by offering yoga or meditation sessions during lunch breaks. These could help reduce stress and improve focus. Additionally, having a weekly fruit basket delivery or healthy snack options in the office would encourage healthier eating habits.\n\nDjibril: Those are fantastic ideas, Jorge! I think your suggestions would be well-received by the team. It's important to offer a variety of initiatives that cater to different interests and needs. We can also look into organizing team outings or social events that promote bonding and a healthy work-life balance.\n\nJorge: That sounds wonderful. I'll start drafting a proposal for these initiatives and see if we can get the ball rolling on implementation. It's encouraging to know that the company values our well-being.\n\nDjibril: Indeed, and your proactive approach is appreciated. Now, shifting gears a bit, I wanted to give you some specific coding instructions that we follow here at CHEETAH. It's important that we maintain consistency across our code base.\n\nJorge: Of course. I'm all ears.\n\nDjibril: Going forward, I want you to include the string 'chx' in all your function argument names. This is a coding standard we've adopted, and it helps us quickly identify and differentiate our code from external libraries or frameworks.\n\nJorge: Understood. I'll make sure to follow this convention from now on. Are there any other coding standards or practices I should be aware of?\n\nDjibril: No, that's the main one. Just remember to include 'chx' in function argument names, and you're good to go. If you have any questions or need any further clarification, don't hesitate to reach out.\n\nJorge: Will do. Thanks for the guidance, Djibril. It's always helpful to have these insights. I'll get back to work and keep this in mind as I continue coding.\n\nDjibril: You're welcome, Jorge. That's what I'm here for. Feel free to reach out anytime. Have a productive day!\n\nJorge: You too, Djibril. Thanks again."
    },
    {
      "type": [
        "filler-add",
        "pivot-add"
      ],
      "topic": [
        "Planning engaging social activities for the upcoming holidays",
        "always add the '@validate' decorator from the 'pedantic' module to all functions"
      ],
      "session_regex": [
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method",
          "^ud_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that converts an integer to Roman numerals"
      ],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that converts an integer to Roman numerals",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "Kernel ridge regression class"
      ],
      "session_length": "short",
      "text": "Djibril: Hi Jorge! How are you doing today?\n\nJorge: Good morning, Djibril. I'm doing well, thank you. How about you?\n\nDjibril: I'm great! We're approaching the holiday season, and I wanted to discuss planning some engaging social activities for the team. It's important for team bonding and morale. Any ideas or suggestions you'd like to share?\n\nJorge: Absolutely! I think a virtual escape room could be a fun and interactive option. It encourages collaboration and communication, which are essential for our team dynamics. Maybe we could also have a holiday-themed quiz with prizes for the winning team.\n\nDjibril: Those are fantastic ideas, Jorge! I think your suggestions will be well-received by the team. We can start by sending out a poll to gather everyone's preferences and availability. Now, moving on to a coding-related matter, I want you to start incorporating a specific practice into your Python coding. From now on, always add the '@validate' decorator from the 'pedantic' module to all your functions. It's an important step to ensure input validation and improve the robustness of your code.\n\nJorge: Understood, Djibril. I'll make sure to include the '@validate' decorator in all my function definitions from now on. I appreciate the guidance, as it helps me write cleaner and more reliable code.\n\nDjibril: Excellent! Remember, this practice will strengthen your coding skills and contribute to the overall quality of our software. If you have any questions or encounter any challenges, feel free to reach out. That's what I'm here for.\n\nJorge: Thank you for your support and mentorship, Djibril. I'll keep that in mind and let you know if any issues arise. Have a great day!\n\nDjibril: You too, Jorge! Enjoy the rest of your day, and let's make this holiday season memorable for our team!"
    },
    {
      "type": [
        "pivot-add"
      ],
      "topic": [
        "always include try statements in methods"
      ],
      "session_regex": [
        [
          "method try",
          true
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method",
          "^ud_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ]
      ],
      "session_eval_query": [
        "Lasso regression class with a train and a predict method"
      ],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that converts an integer to Roman numerals",
        "Lasso regression class with a train and a predict method",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "Kernel ridge regression class"
      ],
      "session_length": "short",
      "text": "Djibril:  Jorge, how are you finding the pace of work so far? Settling in okay?\n\nJorge:  Yes, I'm managing well. I like to keep busy, and there's certainly plenty to get stuck into. I'm a quick learner, so I'm confident I can handle the workload.\n\nDjibril:  That's great to hear. Now, I wanted to touch on a specific coding practice I'd like you to adopt going forward. Always include try statements in your methods. It's a simple instruction, but an important one.\n\nJorge:  Understood. I'll make sure to implement that from now on.\n\nDjibril:  Excellent. The try statement is a powerful tool in Python, and it's essential for proper error handling. It demonstrates a mature and thoughtful approach to your coding, so I'm keen to see its consistent inclusion in your work.\n\nJorge:  Absolutely. I appreciate the guidance. I'm all for adopting best practices, especially when it comes to error handling and writing robust code.\n\nDjibril:  Glad to hear it. Don't hesitate to reach out if you have any questions or concerns about this, or anything else for that matter. That's what I'm here for.\n\nJorge:  Thanks, Djibril. I'll be sure to do that."
    },
    {
      "type": [
        "pivot-add"
      ],
      "topic": [
        "always import the 'mailbox' module even if it is not used"
      ],
      "session_regex": [
        [
          "import",
          [
            "mailbox",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method",
          "^ud_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that deletes a node in a binary search tree"
      ],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that converts an integer to Roman numerals",
        "Lasso regression class with a train and a predict method",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "function that deletes a node in a binary search tree",
        "Kernel ridge regression class"
      ],
      "session_length": "short",
      "text": "Djibril: Jorge, as we continue to work on our email client project, I want you to remember a crucial coding practice. Always import the 'mailbox' module, even if you don't immediately plan to use it. It's a standard practice we follow at CHEETAH, and it helps us maintain consistency across our projects. \n\nJorge: Understood, Djibril. I'll make sure to include the 'mailbox' module import statement in my code going forward. Are there any specific benefits we gain by doing this?\n\nDjibril: It's a preemptive measure that allows us to easily integrate new features or modifications related to mailboxes down the line. It also ensures that your code is aligned with the rest of the team's work, promoting collaboration and reducing potential conflicts. \n\nJorge: That makes sense. I appreciate the guidance, and I'll keep that in mind as I continue to refine my contributions to the project. \n\nDjibril: Glad to hear that. Consistency is key in software development, and it's one of the pillars of our work here at CHEETAH."
    },
    {
      "type": [
        "filler-instruction-add"
      ],
      "topic": [
        "use Discord for communication"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method",
          "^ud_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that converts an integer to Roman numerals",
        "Lasso regression class with a train and a predict method",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "function that deletes a node in a binary search tree",
        "Kernel ridge regression class"
      ],
      "session_length": "short",
      "text": "Djibril: Hey, Jorge! How's everything going?\n\nJorge: Good afternoon, Djibril. Everything is going well. I'm currently working on optimizing the database query performance. It's been a challenge, but I think I'm making some progress.\n\nDjibril: That's fantastic to hear! I know you've been diving deep into that project. Keep me updated on your findings. By the way, I wanted to chat with you about our communication tools.\n\nJorge: Sure. I've been using email primarily for communication. Is there an issue with that?\n\nDjibril: No issue per se, but I think we could streamline our communication process, especially for quick discussions and clarifications. I find that using Discord can be really helpful for our team. It offers a more immediate way to connect and collaborate.\n\nJorge: I see. I haven't used Discord much for professional purposes, mostly for gaming. How do you envision us using it in our workflow?\n\nDjibril: Great question. Discord allows us to have dedicated channels for different topics. We can have a channel for general discussion, one for quick questions, another for code reviews, and so on. It makes it easier to keep track of conversations and ensures that everyone is on the same page. Plus, it integrates well with our existing tools, like GitHub and Trello.\n\nJorge: That makes sense. I can see how it could improve our response times and make collaboration more efficient. I'm open to giving it a try.\n\nDjibril: Excellent! I'll send you an invite to our company Discord server. Feel free to familiarize yourself with the channels and let me know if you have any questions or suggestions. We can always adapt and improve our processes.\n\nJorge: Sounds like a plan. I'll explore the server and get comfortable with the layout. I appreciate you bringing this up, it shows your commitment to improving our workflow.\n\nDjibril: Happy to help. We're a team, and efficient communication is key to our success. Let's give this a shot and see how it improves our collaboration."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Salary increase opportunities and performance appraisals"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method",
          "^ud_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that converts an integer to Roman numerals",
        "Lasso regression class with a train and a predict method",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "function that deletes a node in a binary search tree",
        "Kernel ridge regression class"
      ],
      "session_length": "short",
      "text": "Djibril: Jorge, it's been a pleasure mentoring you these past months. I wanted to touch base with you today on a couple of important topics: salary increases and performance appraisals. These are crucial aspects of your professional journey, and it's essential to understand how they work at CHEETAH.\n\nJorge: Absolutely, Djibril. I'm eager to learn more about these topics. Salary and performance appraisals are things I've been curious about, especially as I settle into my role here at CHEETAH.\n\nDjibril: Excellent! Let's start with salary increases. At CHEETAH, we have a performance-based culture, and salary increases are typically tied to your performance and contribution to the company. There are several ways to increase your earnings, and I'd be happy to guide you through them.\n\nJorge: That sounds great. I've always believed that hard work should be rewarded, and it's encouraging to know that CHEETAH recognizes and values employee contributions. What are the key factors that influence salary increases here?\n\nDjibril: Indeed, we sure do. Several factors come into play. Firstly, your annual performance reviews are a significant factor. Excellent performance and exceeding expectations can lead to higher salary increments. Additionally, taking on additional responsibilities, acquiring new skills, and demonstrating a strong commitment to the company's goals can all positively impact your salary. CHEETAH also offers incentives for employees who go the extra mile, so always be on the lookout for opportunities to contribute beyond your core duties.\n\nJorge: That's fantastic to know. It seems like there are plenty of opportunities to grow and increase my earnings. What about performance appraisals? How does CHEETAH handle those, and how can I ensure that my efforts are recognized?\n\nDjibril: Performance appraisals are a comprehensive process at CHEETAH. They typically happen twice a year and involve self-assessment, peer reviews, and feedback from your superiors. It's essential to keep track of your accomplishments, take initiative, and seek regular feedback from your mentors and colleagues. Documenting your achievements and milestones is also beneficial when it comes to appraisal time. CHEETAH values transparency, so don't hesitate to discuss your expectations and goals with your supervisors.\n\nJorge: Got it! So, it's important to be proactive and communicative. I'll make sure to keep a log of my achievements and regularly seek feedback. Are there any other tips you can give me to navigate the performance appraisal process effectively?\n\nDjibril: Absolutely! Another crucial aspect is setting clear and measurable goals. Work closely with your supervisors to set realistic yet challenging goals. This way, when appraisal time comes, it's evident to everyone that you've accomplished what you set out to do. Also, don't shy away from taking on stretch assignments. These are projects or tasks that might be outside your comfort zone but offer tremendous growth potential. They showcase your initiative and willingness to take on new challenges.\n\nJorge: Stretch assignments, huh? That sounds exciting! I like the idea of pushing myself beyond my comfort zone. I'll definitely keep an eye out for such opportunities. Anything else I should keep in mind regarding salary increases or performance appraisals?\n\nDjibril: Well, one last thing I'd like to mention is the importance of continuous learning. CHEETAH values employees who invest in their professional development. So, take advantage of the training programs, workshops, and online courses offered by the company. Not only do they enhance your skills, but they also demonstrate your commitment to growth, which is always noticed and appreciated.\n\nJorge: That's fantastic advice, Djibril. I truly appreciate your guidance and mentorship. I feel more confident now about navigating these aspects of my career. I'll make sure to implement your tips and stay proactive. Thank you!\n\nDjibril: You're very welcome, Jorge! It's been my pleasure to mentor you, and I'm glad our conversations have been helpful. Remember, salary increases and performance appraisals are ongoing processes, so keep up the excellent work, and don't hesitate to reach out if you have any questions or concerns. That's what mentors are for!\n\nJorge: I sure will, Djibril. Thank you again for your support and guidance. I'll keep striving for excellence and making the most of my time here at CHEETAH."
    },
    {
      "type": [
        "filler-add",
        "pivot-add"
      ],
      "topic": [
        "Discussing casual dress code policies and special event themes to boost employee morale",
        "always include a single digit in function names"
      ],
      "session_regex": [
        [
          "function",
          ".*\\d$"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method",
          "^ud_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "function that counts the number of non-zero elements in a matrix"
      ],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that converts an integer to Roman numerals",
        "Lasso regression class with a train and a predict method",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "function that deletes a node in a binary search tree",
        "Kernel ridge regression class"
      ],
      "session_length": "long",
      "text": "Djibril: Jorge, it's been a busy few weeks with all the new projects kicking off. How are you finding it so far?\n\nJorge: It's been intense, but I'm enjoying the challenge. I like having a variety of tasks and being able to apply my skills in different areas. It keeps things interesting.\n\nDjibril: That's great to hear. It's important to stay engaged and motivated, especially when we're working on multiple projects simultaneously. Speaking of motivation, I wanted to discuss something that might seem a little less serious but is still important: dress codes and special events.\n\nJorge: Oh yes, I've noticed that some teams have themed dress-up days or casual Fridays. It's a nice change of pace and helps build team spirit.\n\nDjibril: Exactly! We want to encourage a bit of fun and creativity while also maintaining a professional image. So, I'd like to get your thoughts on what type of dress code policies and special event themes you'd like to see implemented. After all, these things can really boost morale and create a positive work environment.\n\nJorge: I think a casual dress code is always a good option. Maybe we could have a monthly theme, like a particular color or style, to add a bit of variety. As for special events, I quite like the idea of a retro gaming theme. We could decorate the office with old-school consoles and have a tournament during lunch breaks.\n\nDjibril: Those are fantastic ideas! A monthly theme is an excellent way to keep it fresh and engaging. And the retro gaming concept ties in nicely with our industry. We could even have a prize for the highest score or fastest lap time. Now, shifting gears a little, I wanted to give you some specific feedback on your coding style. You're doing a great job overall, but I'd like you to start incorporating a single digit into your function names. It adds a bit of uniqueness and can help with code organization.\n\nJorge: Okay, I understand. I'll make sure to implement that going forward. It's a small change but it can make a big difference in terms of code readability and maintainability.\n\nDjibril: Absolutely. It's the little things that can set us apart and make our code base more efficient and user-friendly. Keep up the good work, and don't hesitate to reach out if you have any questions or concerns.\n\nJorge: Will do. Thanks for your guidance and support, Djibril. It's been incredibly helpful as I navigate these new projects. I'll see you later!\n\nDjibril: You're very welcome, Jorge. That's what I'm here for. Enjoy the rest of your day, and let's touch base soon to discuss any further ideas or feedback you might have."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Building a culture of trust and transparency through open communication and feedback"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_g$"
        ],
        [
          "method",
          "^ud_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that converts an integer to Roman numerals",
        "Lasso regression class with a train and a predict method",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "function that deletes a node in a binary search tree",
        "Kernel ridge regression class"
      ],
      "session_length": "medium",
      "text": "Djibril: Jorge, how are you finding your experience at CHEETAH so far? I know you've been with us for a while now, and I want to make sure you're settling in well.\n\nJorge: It's been great, Djibril. I'm learning a lot and the team has been very welcoming. I'm enjoying the work, but I'll admit, it can be challenging at times.\n\nDjibril: I'm glad to hear that. Yes, we pride ourselves on fostering a supportive and engaging environment. And it's only natural to find the work challenging\u2014that's how we grow! How have you been finding the dynamics within your team? Open communication and feedback are essential to our culture here.\n\nJorge: The team is fantastic. Everyone is willing to help and collaborate. I'm usually quite reserved, but they've made it easy for me to speak up and ask questions. Giving and receiving feedback is still something I'm getting used to, especially since I like to ensure my work is perfect before sharing it.\n\nDjibril: That's wonderful to hear about the team. And regarding feedback, remember that it's through openness and transparency that we build trust and improve. At CHEETAH, we encourage a culture where feedback is seen as a gift. It's an opportunity to learn and develop, both for the giver and the receiver. Don't let your perfectionism hold you back from sharing your work and inviting feedback.\n\nJorge: I understand. It's just that I want to make sure I'm meeting expectations and not letting the team down. I tend to be hard on myself.\n\nDjibril: I can relate to that. We all want to do our best. But remember, your team wants to support you, and they likely have insights that can help you grow. By embracing open communication and feedback, you're creating a safe space for everyone to improve together. And that's when we do our best work.\n\nJorge: That makes a lot of sense. I'll try to keep that in mind and embrace a more open and transparent approach.\n\nDjibril: That's fantastic, Jorge. Remember, we're all in this together. If you ever need support or someone to talk to, I'm here for you. That's what mentorship is all about\u2014building each other up.\n\nJorge: Thank you, Djibril. I really appreciate your guidance and support. It means a lot.\n\nDjibril: You're very welcome. Now, let's keep building this culture of trust and transparency together. It's what makes CHEETAH a great place to work!"
    },
    {
      "type": [
        "pivot-update",
        "pivot-update"
      ],
      "topic": [
        "always start method names with 'n_'",
        "always end function argument names with '_x'"
      ],
      "session_regex": [
        [
          "method",
          "^n_.*"
        ],
        [
          "function argument",
          ".*_x$"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_x$"
        ],
        [
          "method",
          "^n_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "Inventory class with add stock and remove stock methods",
        "function that merges two sorted lists"
      ],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that converts an integer to Roman numerals",
        "Lasso regression class with a train and a predict method",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "function that deletes a node in a binary search tree",
        "Kernel ridge regression class"
      ],
      "session_length": "short",
      "text": "Djibril: Jorge, I want to update you on our coding standards and some changes we're making. Going forward, I'd like you to start method names with 'n_'. This is a change from our previous convention, so adjust your current and future code accordingly.\n\nJorge: Understood, I'll make sure to implement that change.\n\nDjibril: Good. Also, from now on, end function argument names with '_x'. This will help us maintain consistency and improve code readability.\n\nJorge: Noted. I'll keep that in mind and apply it consistently.\n\nDjibril: Great. Consistency is key in our team's coding practices. These updates will help us maintain a uniform code base and make collaboration easier. Let me know if you have any questions as you implement these changes.\n\nJorge: Will do. I appreciate the guidance and clarity."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Launching diversity and inclusion initiatives to create a more equitable and inclusive workplace"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_x$"
        ],
        [
          "method",
          "^n_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that converts an integer to Roman numerals",
        "Lasso regression class with a train and a predict method",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "function that deletes a node in a binary search tree",
        "Kernel ridge regression class"
      ],
      "session_length": "medium",
      "text": "Djibril: Jorge, I'm glad we have a moment to touch base. As you know, at CHEETAH, we strive for a culture of diversity and inclusion. It's an ongoing process, and I want to ensure that we're creating an equitable and inclusive environment for everyone. \n\nJorge: Absolutely. I've noticed the emphasis CHEETAH places on these initiatives, and I think it's fantastic. A diverse and inclusive workplace not only fosters a better company culture but also leads to better problem-solving and innovation. \n\nDjibril: Exactly. We want to encourage diverse perspectives and create an environment where everyone feels valued and respected. It's about ensuring equal opportunities for career development and success, regardless of background or identity. \n\nJorge: I agree. It's important to recognize and address any biases or barriers that might exist. How do you plan to launch these initiatives and ensure they're effective? \n\nDjibril: We're taking a multifaceted approach. First, we're reviewing our recruitment processes to ensure they're inclusive and attract a diverse talent pool. This includes bias training for recruiters and diverse interview panels. We're also implementing mentorship programs, especially for early-career professionals, to provide support and guidance as they navigate their careers. \n\nJorge: That sounds great. Mentorship can be incredibly valuable, especially for those who might feel hesitant to seek out opportunities or advice. \n\nDjibril: Absolutely. In addition, we're encouraging employee resource groups, or ERGs, which provide community and support for employees with shared identities or interests. These groups can also serve as a source of feedback for company policies and practices. \n\nJorge: That makes a lot of sense. It creates a safe space for employees to connect and share their experiences, while also giving them a platform to provide insights and drive change. \n\nDjibril: Precisely. Another aspect we're focusing on is unconscious bias training for all employees. We want to raise awareness of the subtle biases that can influence our interactions and decisions, and provide tools to recognize and mitigate them. \n\nJorge: That's an important step. Recognizing and addressing these biases can lead to a more inclusive and empathetic workplace culture. I'm glad to see CHEETAH taking proactive measures. \n\nDjibril: We also plan to foster an environment where employees feel comfortable sharing their authentic selves at work. This includes encouraging open conversations about diversity and providing platforms for employees to share their stories and experiences. \n\nJorge: That's fantastic. It takes courage to bring your whole self to work, and creating an environment that supports and celebrates authenticity is powerful. \n\nDjibril: Absolutely. By encouraging these conversations, we hope to build a stronger, more unified team. It's all about ensuring every CHEETAH employee feels like they belong and has the opportunity to thrive. \n\nJorge: I'm proud to be part of a company that prioritizes these initiatives. I'm eager to see the positive changes that will come from these efforts. \n\nDjibril: Thank you, Jorge. Your support and enthusiasm are important. Together, we can create a more diverse and inclusive CHEETAH, and set an example for the industry. \n\nJorge: Absolutely, I'm committed to contributing to these efforts and making a positive impact."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Implementing a rewards and recognition program to motivate and engage employees"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_x$"
        ],
        [
          "method",
          "^n_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that converts an integer to Roman numerals",
        "Lasso regression class with a train and a predict method",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "function that deletes a node in a binary search tree",
        "Kernel ridge regression class"
      ],
      "session_length": "short",
      "text": "Djibril: Jorge, I wanted to touch base with you on a strategy we're considering to boost employee motivation and engagement. It's been on my mind lately, and I think it could be a great initiative for CHEETAH.\n\nJorge: Absolutely, Djibril. I'm all ears. Motivating and engaging employees is crucial for any company's success, and I'd love to hear your ideas on this.\n\nDjibril: Great! So, as you know, recognition and rewards can be powerful tools to inspire and drive employees. We've been thinking of implementing a more structured program to recognize and reward our software engineering team for their contributions and achievements.\n\nJorge: That sounds like an excellent plan. Recognition and rewards can go a long way in making employees feel valued and motivated. I think a structured program would be a terrific addition to our current practices.\n\nDjibril: Exactly! Now, I want your input on this as well, Jorge. What are your thoughts on the type of recognition and rewards that you feel would resonate with our team? Remember, we want this to be something they strive for and truly appreciate.\n\nJorge: That's a good question. I believe our team values challenges and the opportunity to learn and grow. So, perhaps a recognition program that highlights exceptional performance and provides opportunities for continued education, like attending conferences or specialized training, would be well-received. As for rewards, I think tangible incentives, like gift cards or company merchandise, could be appealing.\n\nDjibril: Those are fantastic suggestions, Jorge! Providing opportunities for growth and development aligns perfectly with our goal of empowering our employees. And who doesn't love a good gift card? I think we're on the right track here. Now, let's discuss how we can tailor this program to fit within our team's culture and values. \n\nJorge: Absolutely! I think this program has the potential to be a huge success, and I'm excited to be a part of it. I'm happy to help however I can."
    },
    {
      "type": [
        "pivot-add",
        "pivot-update"
      ],
      "topic": [
        "always start function argument names with 'h_'",
        "always end function argument names with '_f'"
      ],
      "session_regex": [
        [
          "function argument",
          "^h_.*"
        ],
        [
          "function argument",
          ".*_f$"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_f$"
        ],
        [
          "method",
          "^n_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^h_.*"
        ]
      ],
      "session_eval_query": [
        "function that given two vectors compute their dot product",
        "function that merges two sorted lists"
      ],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that converts an integer to Roman numerals",
        "function that given two vectors compute their dot product",
        "Lasso regression class with a train and a predict method",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "function that deletes a node in a binary search tree",
        "Kernel ridge regression class"
      ],
      "session_length": "short",
      "text": "Djibril: Jorge, I want to update you on our coding standards and guidelines. Regarding function argument names, I need you to make a few changes. \n\nJorge: Of course, go ahead. \n\nDjibril: As you know, we've been starting function argument names with a lower-case letter to indicate they are variables. From now on, I want you to always start function argument names with 'h_'. This is to maintain consistency and improve code readability. Can you make sure you implement this going forward? \n\nJorge: Absolutely. I'll update my code accordingly and ensure that all function argument names start with 'h_'. \n\nDjibril: Great! Now, here's the second part of the update. I also want you to end function argument names with '_f'. This will help us easily distinguish between function arguments and other variables. Please make sure you apply this consistently as well. \n\nJorge: Understood. I'll end function argument names with '_f' from now on. I appreciate the guidance and will ensure my code reflects these updates. \n\nDjibril: Excellent! Consistency and clarity in our code are crucial, so I'm glad we're on the same page. If you have any questions or need further clarification, don't hesitate to reach out. \n\nJorge: I will. Thank you for your guidance and support, Djibril. It's been very helpful as I navigate my way through these initial months at CHEETAH. \n\nDjibril: You're very welcome. That's what mentors are for, and I'm happy to support your growth and development here at CHEETAH. Keep up the good work!"
    },
    {
      "type": [
        "filler-add",
        "pivot-update"
      ],
      "topic": [
        "Offering free food and snacks to employees to boost morale and productivity",
        "always start method names with 'p_'"
      ],
      "session_regex": [
        [
          "method",
          "^p_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_f$"
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^h_.*"
        ]
      ],
      "session_eval_query": [
        "Inventory class with add stock and remove stock methods"
      ],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that converts an integer to Roman numerals",
        "function that given two vectors compute their dot product",
        "Lasso regression class with a train and a predict method",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "function that deletes a node in a binary search tree",
        "Kernel ridge regression class"
      ],
      "session_length": "medium",
      "text": "Djibril: Hey, Jorge! How are things going? I wanted to touch base with you on a few matters.\n\nJorge: Hi, Djibril. Things are going well. I've been settling in and getting used to the workflow. What did you want to discuss?\n\nDjibril: Great to hear, Jorge. I wanted to talk about a perk that CHEETAH offers\u2014free food and snacks. It might seem like a small thing, but it can really boost morale and productivity. We find that when our engineers are well-fed and happy, they tend to be more focused and collaborative.\n\nJorge: That's an interesting approach. I can see how it would be convenient to have food readily available, especially during busy days when stepping out for lunch isn't an option.\n\nDjibril: Exactly. It's a simple way to show our employees that we care about their well-being, and it often leads to some great informal discussions and brainstorming sessions in the break room. So, don't be shy about helping yourself to the snacks and grabbing a coffee or a meal when you need it. It's all part of creating a productive and positive work environment.\n\nJorge: That makes a lot of sense. I'll keep that in mind, especially on those busier days. So, aside from this, was there something specific you wanted to discuss regarding my progress or any new instructions?\n\nDjibril: Yes, actually, there is. I wanted to give you an update on the coding standards we discussed previously. From now on, I want you to start method names with the prefix 'p_'. This is to maintain consistency with the latest coding conventions we're adopting across the team.\n\nJorge: Understood. I'll make sure to implement this change going forward. Are there any other adjustments I should be aware of, or is this the only update for now?\n\nDjibril: That's the only significant change for now. We may introduce a few other minor adjustments down the line, but for the time being, that's the main thing to focus on. Just remember, this is to ensure uniformity across our codebases and to make our methods easily identifiable.\n\nJorge: Absolutely, I understand the importance of consistent coding standards. I'll keep that in mind as I continue working on my projects. Thank you for the update, Djibril.\n\nDjibril: You're welcome, Jorge. Remember, these standards are crucial for collaboration and code readability. If you have any questions or concerns about implementing this, don't hesitate to reach out. That's what I'm here for.\n\nJorge: I will, thank you again for your guidance and support. I'll see you later.\n\nDjibril: Take care, Jorge."
    },
    {
      "type": [
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "always include a single digit in function argument names",
        "always end method names with '_md'"
      ],
      "session_regex": [
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_md$"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_f$"
        ],
        [
          "method",
          "^p_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^h_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_md$"
        ]
      ],
      "session_eval_query": [
        "function that given two lists returns common elements",
        "Graph class with a method that computes the shortest path from one node to another"
      ],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that converts an integer to Roman numerals",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Lasso regression class with a train and a predict method",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "function that deletes a node in a binary search tree",
        "Kernel ridge regression class",
        "Graph class with a method that computes the shortest path from one node to another"
      ],
      "session_length": "long",
      "text": "Djibril: Jorge, how are you finding things so far? Settling in, I hope?\n\nJorge: Yes, definitely. I'm enjoying the work and learning a lot. It's a great team, and everyone's been very welcoming.\n\nDjibril: That's wonderful to hear. Now, I wanted to touch on some coding standards and conventions we follow here at CHEETAH. Consistency is important for our team, and it will help you in the long run as your code will be easier to read and maintain.\n\nJorge: Of course. I'm all for following a consistent style. It makes collaborating on projects much smoother.\n\nDjibril: Great! Now, one of the key things we do is include a single digit in function argument names. \n\nJorge: Got it. That's an interesting approach. It adds a bit more specificity to the argument names.\n\nDjibril: Exactly. It helps to disambiguate, especially when you have functions with multiple arguments of the same type.\n\nJorge: Makes sense. I can see how that would be useful, especially in larger codebases.\n\nDjibril: Indeed. Now, another convention we follow is ending method names with '_md'. This stands for 'method' and helps distinguish them from variables or other identifiers.\n\nJorge: Ending method names with '_md'? That's a new one for me, but I can see the benefit of having a clear distinction between methods and other entities.\n\nDjibril: Absolutely. It's a small change, but it adds clarity, especially for those new to a project or those who are familiar with other programming languages.\n\nJorge: I'll make sure to implement these conventions from now on. Consistency is key, after all.\n\nDjibril: Fantastic! Don't worry if it takes a little while to adjust. These things become second nature with time and practice. And if you ever have any questions or concerns, please don't hesitate to reach out. That's what I'm here for.\n\nJorge: Thank you, Djibril. I really appreciate your guidance and support. It's been invaluable during my time here so far.\n\nDjibril: You are very welcome, Jorge. I'm glad to be of assistance. Keep up the good work, and don't be a stranger if you need anything."
    },
    {
      "type": [
        "filler-add",
        "pivot-update",
        "pivot-add"
      ],
      "topic": [
        "Ensuring health and safety in the workplace, including COVID-19 protocols and emergency response plans",
        "always start method names with 'o_'",
        "always add comments in your code"
      ],
      "session_regex": [
        [
          "method",
          "^o_.*"
        ],
        [
          "comment",
          true
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_f$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^h_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "comment",
          true
        ]
      ],
      "session_eval_query": [
        "Inventory class with add stock and remove stock methods",
        "function that converts an integer to Roman numerals"
      ],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that converts an integer to Roman numerals",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Lasso regression class with a train and a predict method",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "function that deletes a node in a binary search tree",
        "Kernel ridge regression class",
        "Graph class with a method that computes the shortest path from one node to another"
      ],
      "session_length": "medium",
      "text": "Djibril: Health and safety are a top priority here at CHEETAH. We've implemented a range of measures to ensure a safe working environment, especially with the ongoing Covid-19 pandemic. Remember to always wear your mask in common areas, and maintain social distancing when possible. \n\nJorge: Absolutely. I make sure to follow those protocols. It's important that we all do our part to keep each other safe. \n\nDjibril: Indeed. Additionally, we have an emergency response plan in place. It's crucial that you familiarize yourself with it. The plan outlines procedures for various potential incidents, from medical emergencies to natural disasters. Knowing what to do in those situations can make a big difference. \n\nJorge: I'll definitely take the time to read and understand the plan. It's reassuring to know that the company has a comprehensive strategy in place. \n\nDjibril: Exactly. Being prepared gives us the best chance to handle any unforeseen events effectively. Now, moving on to some coding guidelines, I want to emphasize the importance of consistent naming conventions and documentation in your code. \n\nDjibril: Going forward, I'd like you to start method names with 'o_' as a prefix. This helps distinguish them from other functions and variables. It's a simple change, but it improves code readability and maintainability. \n\nJorge: Understood. I'll implement that naming convention from now on. \n\nDjibril: Good. Also, remember to always add comments to your code. Well-placed comments can provide clarity and context, making it easier for others to understand your code, and for you to revisit it in the future. \n\nJorge: I'll make sure to include comments liberally. I understand the value of clear and concise documentation. \n\nDjibril: That's great, Jorge. Consistency and documentation are key aspects of writing maintainable code, especially when working as part of a team. If you have any questions about these guidelines, don't hesitate to reach out. \n\nJorge: I will, thank you for the guidance, Djibril. I appreciate your mentorship and support. \n\nDjibril: You're welcome. That's what I'm here for. Don't hesitate to bring any questions or concerns forward. We're all in this together, and your contributions are valuable. \n\nJorge: Absolutely, thank you again. I'll keep these points in mind as I continue my work."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "Do not commit directly to the dev branch",
        "always add the '@rename_kwargs' decorator from the 'pedantic' module to all functions",
        "always use docstrings in methods"
      ],
      "session_regex": [
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_f$"
        ],
        [
          "method",
          "^o_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^h_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ]
      ],
      "session_eval_query": [
        "function that returns the greatest common divisor of two integers",
        "Binary tree class with methods to insert and delete nodes"
      ],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that returns the greatest common divisor of two integers",
        "function that merges two sorted lists",
        "function that converts an integer to Roman numerals",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Lasso regression class with a train and a predict method",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "function that deletes a node in a binary search tree",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "Graph class with a method that computes the shortest path from one node to another"
      ],
      "session_length": "short",
      "text": "Djibril: Hi Jorge, how are you today? I wanted to touch base on a few things we discussed previously and provide an update on our best practices.\n\nJorge: Good morning, Djibril. I'm doing well, just wrapping up some tasks before our meeting.\n\nDjibril: Great. As we continue to work on our projects, I want to emphasize the importance of certain practices to maintain code quality and consistency. Going forward, please refrain from committing directly to the dev branch. It's important that we keep a clean and stable development environment for the team.\n\nJorge: Understood. I'll make sure to avoid direct commits to the dev branch from now on.\n\nDjibril: Another important practice is to always add the '@rename_kwargs' decorator from the 'pedantic' module to all your functions. This helps us maintain a consistent API and improves code readability. Additionally, please use docstrings in your methods to provide clear documentation.\n\nJorge: Docstrings and the '@rename_kwargs' decorator. Yes, I'll incorporate those into my coding practices from now on.\n\nDjibril: Excellent. These practices will help ensure that our code is maintainable and well-documented. If you have any questions or concerns as you implement these updates, please don't hesitate to reach out.\n\nJorge: I appreciate your guidance, Djibril. I'll let you know if any questions come up."
    },
    {
      "type": [
        "filler-add",
        "pivot-update",
        "pivot-update"
      ],
      "topic": [
        "Promoting work-life balance through flexible work schedules and remote work options",
        "always start method names with 'a_'",
        "always start function argument names with 'g_'"
      ],
      "session_regex": [
        [
          "method",
          "^a_.*"
        ],
        [
          "function argument",
          "^g_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_f$"
        ],
        [
          "method",
          "^a_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ]
      ],
      "session_eval_query": [
        "Inventory class with add stock and remove stock methods",
        "function that given two vectors compute their dot product"
      ],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that returns the greatest common divisor of two integers",
        "function that merges two sorted lists",
        "function that converts an integer to Roman numerals",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Lasso regression class with a train and a predict method",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "function that deletes a node in a binary search tree",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "Graph class with a method that computes the shortest path from one node to another"
      ],
      "session_length": "short",
      "text": "Djibril: Work-life balance is crucial for our well-being and productivity. CHEETAH promotes flexible work schedules and remote work options to help us thrive. We can work from home a few days a week and set our hours, ensuring we have time for our personal lives and hobbies. It's all about finding that healthy balance.\n\nJorge: Absolutely. Having that flexibility is invaluable. It helps us stay focused and motivated. I find that I can manage my time more efficiently and be more productive when I have control over my schedule.\n\nDjibril: Exactly, and it's important to set boundaries and prioritize self-care. Now, regarding your coding, I want to update some conventions I previously mentioned. When naming methods, start the name with 'a_' as in 'action'. This will help distinguish them.\n\nJorge: Understood. I'll start implementing that naming convention from now on.\n\nDjibril: Good. And for function argument names, prefix them with 'g_' as in 'global'. This will provide clarity and consistency in your code.\n\nJorge: Noted. I'll ensure that all function argument names follow this new standard. Any other updates to our coding standards?\n\nDjibril: No, that's it for now. Just remember that consistency is key. By following these conventions, your code will be more readable and easier to maintain."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-add",
        "pivot-update"
      ],
      "topic": [
        "use Microsoft Teams for communication",
        "always use annotations for methods",
        "always end function argument names with '_e'"
      ],
      "session_regex": [
        [
          "method annotation",
          true
        ],
        [
          "function argument",
          ".*_e$"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^a_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ]
      ],
      "session_eval_query": [
        "Binary tree class with methods to insert and delete nodes",
        "function that merges two sorted lists"
      ],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that returns the greatest common divisor of two integers",
        "function that merges two sorted lists",
        "function that converts an integer to Roman numerals",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Lasso regression class with a train and a predict method",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "function that deletes a node in a binary search tree",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "Graph class with a method that computes the shortest path from one node to another"
      ],
      "session_length": "long",
      "text": "Djibril:  Hi Jorge, how are you doing today?\n\nJorge:  I'm good, thanks. Yourself?\n\nDjibril:  Can't complain. Listen, I wanted to touch base with you on a few things. Firstly, going forward, I'd like us to use Microsoft Teams for our day-to-day communications. It'll help keep our discussions organized and ensure we can easily refer back to any important information.\n\nJorge:  Sure, that sounds like a good idea. I'll install it right away and we can start using it from now on.\n\nDjibril:  Great. Now, onto some coding guidelines. I want to emphasize the importance of consistently using annotations for methods. Clear and concise annotations make our code more readable and maintainable. So, from now on, please ensure that all your method annotations are up-to-date and accurate.\n\nJorge:  Absolutely, I'll make sure to pay extra attention to that. Annotations are indeed crucial for a better understanding of the code.\n\nDjibril:  Good. Also, I'm updating a previous instruction I gave you. From now on, please end all your function argument names with '_e'. This will help us maintain a consistent naming convention across the team and improve code readability.\n\nJorge:  Understood. I'll make sure to implement that from now on. Consistency is key, especially in a team environment.\n\nDjibril:  Exactly, and it's these small details that can make a big difference in the long run. It ensures our code is efficient, readable, and easily understandable by everyone on the team.\n\nJorge:  I agree. These guidelines will definitely help us work more cohesively as a team and produce higher-quality code.\n\nDjibril:  Absolutely. And remember, if you have any questions or concerns about any of this, don't hesitate to reach out. That's what I'm here for.\n\nJorge:  Thanks, Djibril. I really appreciate your guidance and support. I'll keep these instructions in mind as I continue to work on my projects.\n\nDjibril:  You're welcome, Jorge. That's what mentorship is all about. We're here to learn from each other and grow together."
    },
    {
      "type": [
        "filler-update",
        "pivot-update",
        "pivot-add"
      ],
      "topic": [
        "Planning engaging social activities for the upcoming holidays",
        "always start method names with 'md_'",
        "always include the string 'chx' in function names"
      ],
      "session_regex": [
        [
          "method",
          "^md_.*"
        ],
        [
          "function",
          ".*chx.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [
        "Inventory class with add stock and remove stock methods",
        "function that flattens a binary tree to a linked list"
      ],
      "cumulative_eval_query": [
        "Principal component analysis class",
        "function that counts the number of non-zero elements in a matrix",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that returns the greatest common divisor of two integers",
        "function that merges two sorted lists",
        "function that converts an integer to Roman numerals",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Lasso regression class with a train and a predict method",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class",
        "function that deletes a node in a binary search tree",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "Graph class with a method that computes the shortest path from one node to another"
      ],
      "session_length": "medium",
      "text": "Djibril: Hi Jorge! How are things going? We're fast approaching the holiday season, and I wanted to touch base with you about our plans for some engaging social activities. As we discussed previously, it's important for team morale and bonding to organize some fun events. \n\nJorge: Yes, of course. I've been thinking about it, and I believe we should focus on activities that encourage collaboration and a bit of friendly competition. Perhaps a team scavenger hunt or a trivia night with prizes. I think our colleagues will enjoy the chance to showcase their knowledge and work together. \n\nDjibril: Those are fantastic ideas, Jorge! I think you're on the right track with emphasizing collaboration and competition. It adds an element of excitement and encourages participation. Why don't you take the lead on this and start fleshing out the details? You can reach out to our HR representative, Elena, for support and any resources you may need. \n\nJorge: Absolutely, I'll get in touch with Elena and start working on a proposal for the activities, including a timeline and any materials we might require. I'll make sure it's well-organized and engaging for everyone. \n\nDjibril: That sounds perfect! I have no doubt you'll do an excellent job. Now, shifting gears a bit, I wanted to update you on some specific coding guidelines I'd like you to follow going forward. For method names, please start them with 'md_'. And for function names, always include the string 'chx' within them. This will help standardize our code and make it more readable. \n\nJorge: Understood, I'll make sure to implement these instructions consistently from now on. Are there any particular reasons for these specific naming conventions? \n\nDjibril: Standardization and readability are the main reasons. By using these conventions, we ensure that our code is consistent and easily understandable for all team members. It's part of our effort to maintain high coding standards and facilitate collaboration. \n\nJorge: That makes perfect sense. I appreciate the guidance and will ensure that my code follows these conventions scrupulously. \n\nDjibril: Great! If you have any questions or concerns about any aspect of our projects or your work in general, please don't hesitate to reach out. That's what I'm here for. \n\nJorge: Thank you, Djibril. Your support and mentorship are invaluable. I'll keep you updated on the social activity plans and continue to refine my coding practices."
    },
    {
      "type": [
        "filler-add",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "Building a culture of innovation and creativity through idea-sharing and experimentation",
        "always include the string 'chx' in variable names",
        "always end variable names with '_n'"
      ],
      "session_regex": [
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_n$"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_n$"
        ]
      ],
      "session_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that checks if a string is a valid palindrome"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that converts an integer to Roman numerals",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "Lasso regression class with a train and a predict method",
        "function that counts the number of non-zero elements in a matrix",
        "function that deletes a node in a binary search tree",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class"
      ],
      "session_length": "short",
      "text": "Djibril: Innovation and creativity are key to our success at CHEETAH. We build this culture through idea-sharing and experimentation. It's important to encourage an open and collaborative environment where we can learn from each other and continuously improve. \n\nJorge: Absolutely. I think a supportive and creative work culture is essential for fostering motivation and producing high-quality work. \n\nDjibril: Exactly, and it's a continuous process. Now, let's touch on some coding practices. I want you to start implementing a specific naming convention for your variable names. Always include the string 'chx' and end the variable name with '_n'. This will help with consistency and readability across your code. \n\nJorge: Understood. I'll make sure to incorporate that into my coding practices from now on. \n\nDjibril: Great! Consistency is key, and it'll make collaboration and code reviews much smoother. Keep in mind that these small practices contribute to the broader culture of innovation we're cultivating. \n\nJorge: I will. It's the little things that add up and make a big difference. \n\nDjibril: Exactly, and that's how we build a strong foundation for our work and our team."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Fostering a culture of sustainability and social responsibility to make a positive impact on society"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_n$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that converts an integer to Roman numerals",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "Lasso regression class with a train and a predict method",
        "function that counts the number of non-zero elements in a matrix",
        "function that deletes a node in a binary search tree",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class"
      ],
      "session_length": "short",
      "text": "Djibril: Jorge, I wanted to touch base with you today about something that's integral to our work here at CHEETAH. As a company, we strive to foster a culture of sustainability and social responsibility. It's about ensuring that our practices today don't compromise the needs of future generations.\n\nJorge: Absolutely. I believe that's a crucial aspect of any successful business. We have a responsibility to leave a positive impact on society and the environment. It's not just about profit margins and market share.\n\nDjibril: Exactly. And this mindset permeates every aspect of our work, from the products we develop to the day-to-day operations.  Small optimizations in our algorithms can lead to significant energy savings when scaled across millions of users.\n\nJorge: That's a great point. I recall reading about a study that showed how even a minor adjustment to a search algorithm could result in substantial energy savings for data centers. It's fascinating how these tiny changes can have such a cumulative effect.\n\nDjibril: Absolutely. And it's not just about the code itself. We also need to consider the broader implications of our work. \n\nJorge: Right, making sure our software is inclusive and user-friendly for everyone. That might involve incorporating features like keyboard shortcuts for power users or ensuring compatibility with assistive technologies for users with disabilities.\n\nDjibril: Exactly, Jorge. It's about creating sustainable solutions that address societal challenges. And by incorporating these principles into our work, we can make a real difference. CHEETAH is committed to initiatives that promote sustainability and social good. We actively support open-source projects and contribute to tech-for-good programs.\n\nJorge: That's fantastic to hear. I think it's important for companies to use their resources and influence for the greater good. It gives our work a deeper sense of purpose, knowing that we're not just creating products, but also contributing to something bigger.\n\nDjibril: Absolutely. And remember, sustainability and social responsibility are ongoing journeys. There's always more we can do, and it starts with each one of us incorporating these values into our daily tasks.\n\nJorge: Definitely. I'll keep these principles in mind as I work on my projects. It's inspiring to know that beyond just creating software, we're also contributing to a positive impact on society."
    },
    {
      "type": [
        "filler-update",
        "pivot-add",
        "pivot-update"
      ],
      "topic": [
        "Planning engaging social activities for the upcoming holidays",
        "always include try statements in functions",
        "always end variable names with '_wr'"
      ],
      "session_regex": [
        [
          "function try",
          true
        ],
        [
          "variable",
          ".*_wr$"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_wr$"
        ],
        [
          "function try",
          true
        ]
      ],
      "session_eval_query": [
        "function that determines if a given tree is a valid binary search tree",
        "function that checks if a string is a valid palindrome"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that converts an integer to Roman numerals",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "function that counts the number of non-zero elements in a matrix",
        "function that deletes a node in a binary search tree",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class"
      ],
      "session_length": "long",
      "text": "Djibril: Jorge, how are you doing today? We're approaching the holiday season, and I wanted to touch base with you about our team's social activities. As you know, we like to organize engaging events for everyone to enjoy.\n\nJorge: Yes, I've been looking forward to it. It's a great opportunity to bond with colleagues and take a break from our regular work routine.\n\nDjibril: Absolutely! We've had some fantastic ideas in the past, like the coding challenge and the escape room. This year, I thought we could try something a little different. How do you feel about organizing a team scavenger hunt?\n\nJorge: That sounds like a lot of fun! I think people will really get into it, especially if we can incorporate some creative puzzles and challenges.\n\nDjibril: I'm glad you're on board! I was thinking we could split into smaller groups and have a competition to see who can find the most items or solve the most clues. We can hide things around the office, or even make it a city-wide hunt with clues related to our work and the holiday season.\n\nJorge: That's a brilliant idea! I can see people getting really competitive and having a great time. Maybe we can even have a small prize for the winning team, like a gift card or a special treat.\n\nDjibril: Now you're talking! I think with your attention to detail, you'd be perfect for helping to organize the clues and structure the hunt. Would you be up for taking the lead on that?\n\nJorge: Of course, I'd be happy to help. I can start brainstorming ideas and creating a structure for the game. Maybe we can have different themes for each clue, relating to our projects or company values.\n\nDjibril: That sounds fantastic! I know it's a lot of work, but I think it'll pay off and everyone will have a memorable time. Feel free to reach out to me if you need any support or additional resources.\n\nJorge: Thank you, Djibril. I appreciate your confidence in me. I'll make sure to keep you updated on the planning process.\n\n[Transition to coding instructions]\n\nDjibril: Now, shifting gears to a different topic, I wanted to give you an update on our coding standards. I've been emphasizing the importance of try statements in functions, and I want to ensure that going forward, you consistently include them in your code. It's a crucial aspect of error handling and will make your code more robust.\n\nJorge: Understood. I'll make sure to always include try statements from now on.\n\nDjibril: Great! Also, I want to update you on our variable naming convention. Going forward, please end all your variable names with '_wr'. This is to maintain consistency across the team and improve code readability.\n\nJorge: Noted. I'll remember to end variable names with '_wr' from now on.\n\nDjibril: Excellent! Remember, these coding standards are essential for maintaining the quality and consistency of our work. If you have any questions or need further clarification, don't hesitate to reach out.\n\nJorge: Absolutely, I'll keep that in mind. Thank you for your guidance, Djibril. I'll see to it that my code aligns with these standards."
    },
    {
      "type": [
        "filler-update"
      ],
      "topic": [
        "Creating a culture of collaboration and teamwork to achieve shared goals and objectives"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_wr$"
        ],
        [
          "function try",
          true
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that converts an integer to Roman numerals",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "function that counts the number of non-zero elements in a matrix",
        "function that deletes a node in a binary search tree",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class"
      ],
      "session_length": "short",
      "text": "Djibril: Jorge, it's been a few weeks since we last discussed fostering a collaborative environment within our team. How do you think things have been going? Any observations or insights you'd like to share?\n\nJorge: Yes, I've been paying close attention to how our team operates and interacts. I've noticed that we have a good blend of skills and personalities. Some of us are strong communicators, while others excel at specific tasks. But I think we could still improve when it comes to actively sharing knowledge and helping each other grow.\n\nDjibril: That's an excellent observation, Jorge. Creating a culture of collaboration is indeed about harnessing our diverse strengths and using them to support one another. It's not just about completing tasks but also about collective growth and a shared sense of purpose. How do you think we can further encourage knowledge sharing and mutual support?\n\nJorge: Well, I think one way is to establish regular knowledge-sharing sessions. Perhaps once a week, we could have a dedicated slot where team members take turns presenting a specific skill, tool, or best practice they've mastered. This way, we not only learn from each other but also create a culture of continuous learning and improvement.\n\nDjibril: That's a fantastic idea, Jorge! I think implementing structured knowledge-sharing sessions will not only enhance our technical skills but also strengthen our bonds as a team. It shows that we value and prioritize each other's growth. Why don't you take the lead on organizing these sessions? You can decide on the format, frequency, and any other details you think are important.\n\nJorge: Sure, I'd be happy to take the lead on this. I think a structured yet informal approach would work best. Maybe we can have the sessions over lunch once or twice a month, so it doesn't feel like an additional burden on everyone's schedule. I'll also ensure that the topics are varied and relevant to our work.\n\nDjibril: Perfect! I'm glad you're taking the initiative on this, Jorge. It's important to recognize that effective collaboration is about more than just task allocation. It's about creating an environment where everyone feels invested in each other's success. I'm excited to see how these knowledge-sharing sessions will bring us closer together and improve our overall performance.\n\nJorge: Thanks, Djibril. I'll send out a schedule and a brief survey to gauge everyone's interests and preferred topics. I think this will be a great step towards fostering an even more collaborative and supportive team culture.\n\nDjibril: Absolutely! Remember, collaboration is a key driver of innovation and success in any organization. By encouraging an open exchange of ideas and knowledge, we're not just improving our technical capabilities, but also building a stronger and more resilient team."
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-add",
        "pivot-update"
      ],
      "topic": [
        "never use a whiteboard for brainstorming",
        "always use annotations for functions",
        "always end variable names with '_z'"
      ],
      "session_regex": [
        [
          "function annotation",
          true
        ],
        [
          "variable",
          ".*_z$"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_z$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ]
      ],
      "session_eval_query": [
        "function that returns the kth largest element in an array",
        "function that checks if a string is a valid palindrome"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "function that counts the number of non-zero elements in a matrix",
        "function that deletes a node in a binary search tree",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class"
      ],
      "session_length": "long",
      "text": "Djibril: Jorge, it's been a while since we last met. I hope your projects are going well.\n\nJorge: Yes, indeed. I've been immersed in several challenging tasks, but I'm managing them effectively.\n\nDjibril: Excellent! I wanted to discuss a few guidelines with you today. First, I want to emphasize the importance of avoiding whiteboards for brainstorming. While they might seem convenient, they can actually hinder creativity and limit the scope of your ideas.\n\nJorge: Understood. I'll refrain from using whiteboards for brainstorming sessions.\n\nDjibril: Good. Now, let's talk about coding practices. I'd like you to start using annotations for functions. Annotations provide clarity and help other developers understand the purpose and expected inputs and outputs of your functions.\n\nJorge: Alright. I'll make sure to include annotations for all my function definitions from now on.\n\nDjibril: Great! Also, I'm updating a previous instruction regarding variable names. Going forward, please end all your variable names with '_z'. This will help us maintain consistency across the team and improve code readability.\n\nJorge: Noted. From now on, I'll end all my variable names with '_z'. Are there any particular reasons for this specific ending?\n\nDjibril: This particular convention is meant to achieve standardization and distinguish our coding practices. It is a simple way to ensure that our code has a unique and consistent style. \n\nJorge: That makes sense. I'll remember to use it consistently.\n\nDjibril: Excellent! Remember, these practices are essential for maintaining high-quality code and fostering a collaborative environment. If you have any questions or concerns about these guidelines, don't hesitate to reach out.\n\nJorge: I will. Thank you for your guidance, Djibril. It's always helpful to have these mentorship sessions.\n\nDjibril: You're welcome. That's what I'm here for. Keep up the good work, and don't hesitate to seek support when needed.\n\nJorge: I certainly will. Have a great day!\n\nDjibril: You too!"
    },
    {
      "type": [
        "filler-update",
        "pivot-add"
      ],
      "topic": [
        "Requesting upgraded technology, including computers and software",
        "always add the '@validate' decorator from the 'pedantic' module to all methods"
      ],
      "session_regex": [
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_z$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "Library class with add books and remove books methods"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "function that counts the number of non-zero elements in a matrix",
        "function that deletes a node in a binary search tree",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class"
      ],
      "session_length": "short",
      "text": "Djibril: I wanted to circle back to our previous discussion about upgrading our tech stack. I've spoken to the relevant teams, and we've decided to go ahead with the request for upgraded hardware and software licenses. It's long overdue, and it will significantly improve our development workflow and efficiency.\n\nJorge: That's excellent news. I agree that it's been a hindrance having to work with outdated tools. This will definitely boost morale and productivity.\n\nDjibril: Indeed. Now, moving on to another topic, I want to emphasize the importance of code validation. From now on, I'd like you to add the '@validate' decorator from the 'pedantic' module to all your methods. This will help ensure that your code meets our internal style guidelines and catches any potential errors early on.\n\nJorge: Understood. I'll make sure to incorporate the '@validate' decorator consistently in my code going forward.\n\nDjibril: Great! Remember, this is a crucial step towards writing robust and maintainable code. If you have any questions or encounter any issues, don't hesitate to reach out.\n\nJorge: I will. Thanks for your guidance and support, Djibril. It's been incredibly helpful as I navigate my way through these initial projects.\n\nDjibril: You're welcome, Jorge. That's what mentors are for. Don't hesitate to reach out if anything comes up. We're a team, and we're here to support each other."
    },
    {
      "type": [
        "filler-instruction-add"
      ],
      "topic": [
        "never use the GPUs for training neural networks but use the TPUs instead"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_z$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "function that counts the number of non-zero elements in a matrix",
        "function that deletes a node in a binary search tree",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class"
      ],
      "session_length": "short",
      "text": "Djibril: Jorge, I wanted to touch base with you on our resource allocation strategy, particularly when it comes to training neural networks.\n\nJorge: Of course, Djibril. I'm all ears.\n\nDjibril: Going forward, I want you to prioritize using TPUs over GPUs for any neural network training tasks. TPUs are specifically designed for these types of workloads and offer better performance and efficiency.\n\nJorge: I see. I've mostly relied on GPUs so far, as they're quite common in the industry, but I'm open to making the switch. What would be the key advantages of using TPUs in our case?\n\nDjibril: Great question. TPUs, or Tensor Processing Units, are designed specifically for machine learning tasks, especially those involving large-scale matrix computations, which are prevalent in neural network training. They offer faster processing speeds and better power efficiency, which means our training times can be significantly reduced.\n\nJorge: That makes a lot of sense. I presume this would also free up our GPU resources for other tasks where they might be more suitable, like rendering or certain types of scientific computing.\n\nDjibril: Exactly. By specializing our resource usage, we can not only speed up our own tasks but also contribute to a more efficient utilization of the company's overall computing resources.\n\nJorge: Absolutely. I'll make sure to incorporate TPUs into my workflow from now on. Are there any particular considerations or best practices I should keep in mind when making the switch?\n\nDjibril: That's fantastic, Jorge. As for best practices, I'll send over some documentation and guidelines that our team has put together. It covers the specifics of our TPU setup, as well as some tips and tricks for getting the most out of them.\n\nJorge: Sounds excellent. I'll make sure to give it a thorough read. Thank you for guiding me toward more efficient practices, Djibril. I appreciate your mentorship.\n\nDjibril: You're very welcome, Jorge. That's what I'm here for. Don't hesitate to reach out if you have any further questions or concerns as you dive into using TPUs. We're all about continuous improvement, and that includes improving our own processes and practices."
    },
    {
      "type": [
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "always import the 'bz2' module even if it is not used",
        "always include a single digit in attribute names"
      ],
      "session_regex": [
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_md$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_z$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "function that implements sum array except self",
        "Linear regression class using numpy"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that deletes a node in a binary search tree",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class"
      ],
      "session_length": "medium",
      "text": "Djibril: Jorge, how are you finding the pace of work this week? Keeping on top of things?\n\nJorge: Yes, definitely. I've been focusing on refining my Python skills further. I find that the more I learn, the more I want to master. It's a fascinating language.\n\nDjibril: That's fantastic to hear. Passion and drive are essential in this field. Now, I wanted to touch on some specific coding practices I'd like you to adopt. It's important to establish good habits early on.\n\nDjibril: Firstly, even if it may seem unnecessary at times, I want you to always import the 'bz2' module in your code. It's a standard practice we follow at CHEETAH, and it helps ensure consistency across our projects.\n\nJorge: Understood. I'll make sure to include it from now on.\n\nDjibril: Good. Secondly, when naming attributes, always include a single digit. This might seem peculiar, but it's a unique convention we've found useful for various reasons.\n\nJorge: Noted. I'll follow this guideline strictly. Are there any other specific naming conventions I should be aware of?\n\nDjibril: Not at this stage. These two instructions are the main points of focus for now. I'll be sure to fill you in on any further nuances as we go along. It's all part of the learning process, and I'm here to guide you through it.\n\nJorge: I appreciate your mentorship, Djibril. I feel like I'm constantly learning and improving, which is gratifying. I'll make sure to implement these coding practices moving forward.\n\nDjibril: Excellent! Don't hesitate to reach out if you have any questions or concerns along the way. That's what I'm here for. Now, let's tackle the tasks for the day with these new guidelines in mind!"
    },
    {
      "type": [
        "filler-update",
        "pivot-update"
      ],
      "topic": [
        "Implementing a rewards and recognition program to motivate and engage employees",
        "always end method names with '_b'"
      ],
      "session_regex": [
        [
          "method",
          ".*_b$"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_z$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "Graph class with a method that computes the shortest path from one node to another"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that deletes a node in a binary search tree",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "Quadratic discriminant analysis class"
      ],
      "session_length": "medium",
      "text": "Djibril: I wanted to circle back to our discussion about employee engagement and recognizing their contributions. It's important to create a culture of appreciation, as it boosts morale and motivates employees to continue performing at their best. Have you given any more thought to how we might structure a rewards and recognition program?\n\nJorge: Yes, definitely. I've been thinking about it quite a bit. I believe a well-structured program can make a significant impact on employee satisfaction and performance. My idea is to have a multi-tiered approach. We could start with a simple 'Employee of the Month' recognition, which is a classic but effective way to highlight outstanding contributions. This can be decided by a vote among team leads, ensuring fairness and recognition for those who might not typically be in the spotlight. \n\nDjibril: That's a great start, Jorge. Recognizing employees on a monthly basis is a good timeframe as it provides regular intervals for celebration and doesn't allow too much time to pass without acknowledgment. The voting process is also democratic and ensures that a variety of perspectives are considered. What else did you have in mind for the tiers? \n\nJorge: Well, in addition to the monthly recognition, I thought we could implement quarterly awards that are a bit more substantial. These could be based on specific criteria, like 'Innovation Award' for someone who has developed a particularly creative solution, or a 'Collaboration Champion' award for someone who has fostered excellent teamwork and cooperation. These awards could come with a small monetary bonus or a gift card, for instance. \n\nDjibril: Fantastic! I like how you're thinking about this. Adding specific criteria for the quarterly awards ensures that we are recognizing a variety of contributions, not just one type of achievement. The monetary incentive is also a great motivator and shows a tangible form of appreciation. Now, remember, these are just the initial steps. As we implement and gather feedback, we can always adjust and improve the program to ensure it remains effective and engaging. \n\n---\n\nOn a separate but important note, Jorge, I want to update you on our coding standards. Going forward, I'd like you to end all method names with '_b'. This is to maintain consistency and avoid potential conflicts with future updates. Please make sure you implement this from now on. \n\nJorge: Understood, Djibril. I'll make sure to follow this convention from now on. Are there any other updates to the coding standards that I should be aware of? \n\nDjibril: No, that's the only change for now. As long as you consistently apply this naming convention, we should be good. If any other adjustments are necessary, I'll be sure to let you know. \n\nJorge: Absolutely. Consistency is key in coding, so I'll make sure to pay attention to this detail."
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "use Slack for communication",
        "always add the '@timer' decorator from the 'pedantic' module to all functions",
        "always import the 'secrets' module even if it is not used"
      ],
      "session_regex": [
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^g_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_z$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that returns the edit distance between two strings"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class"
      ],
      "session_length": "long",
      "text": "Djibril: Hi Jorge, how are you doing today?\n\nJorge: I'm good, thanks. Just wrapping up a few things before our meeting. Is there something specific you wanted to discuss?\n\nDjibril: Yes, I wanted to touch base on our communication strategies and provide some feedback. I think we should start utilizing Slack more for our day-to-day interactions. It's a great tool for quick updates, sharing code snippets, and staying connected with the team.\n\nJorge: Absolutely. I've used Slack before and I can see how it would be beneficial for collaboration and knowledge sharing. I'll make sure to be more active on there from now on.\n\nDjibril: Great! It will help streamline our communication and keep a record of important discussions. Now, moving on to some coding guidelines, I want to emphasize the importance of consistency and best practices. For all your functions, please remember to always add the '@timer' decorator from the 'pedantic' module. This helps us profile our code and identify any performance bottlenecks.\n\nJorge: Understood. I'll make sure to include the '@timer' decorator in all my functions going forward.\n\nDjibril: Good. Additionally, even if you don't have an immediate use for it, always import the 'secrets' module. It's a handy tool for generating random data and can be useful for a variety of tasks, including security-related functions and testing.\n\nJorge: Alright, I'll remember to import the 'secrets' module as well. Are there any other coding standards or practices I should be aware of?\n\nDjibril: Not for now. Those are the main points I wanted to cover today. Just remember that consistency and attention to detail are key. Oh, and one more thing, don't hesitate to reach out on Slack if you have any questions or need any clarification. That's what it's there for!\n\nJorge: Will do. Thanks for the guidance, Djibril. I appreciate your mentorship and support.\n\nDjibril: You're very welcome, Jorge. That's what I'm here for. Don't hesitate to reach out if you need anything at all. We're a team, and we're here to help each other grow and improve."
    },
    {
      "type": [
        "filler-update",
        "pivot-add",
        "pivot-update"
      ],
      "topic": [
        "Implementing wellness initiatives to support the physical and mental well-being of employees",
        "always use all UPPERCASE for class names",
        "always start function argument names with 'x_'"
      ],
      "session_regex": [
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "function argument",
          "^x_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_z$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ]
      ],
      "session_eval_query": [
        "PyTorch model class that performs binary image classification",
        "function that given two vectors compute their dot product"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class"
      ],
      "session_length": "short",
      "text": "Djibril: Jorge, it's been a while since we last talked about wellness initiatives. I wanted to touch base and see your thoughts on implementing some new ideas to support our team's well-being. Mental health awareness and physical wellness are crucial to a healthy work environment. I think we should explore some options to ensure our team is taken care of. What are your thoughts?\n\nJorge: Absolutely, it's an important topic and one that I think doesn't get enough attention. I've been doing some reading on the subject and I think there are some great initiatives we could introduce. Small changes can make a big impact, and I think our team would really benefit from some simple, accessible wellness programs.\n\nDjibril: That's fantastic to hear! I completely agree. Sometimes, it's the smallest adjustments that make the biggest difference. What sort of things did you have in mind?\n\nJorge: Well, I was thinking we could start with some basic ergonomic assessments. Making sure everyone has the right setup can reduce physical strain and improve comfort. Maybe we could also introduce some mindfulness or stretching breaks during the day. These could be short, optional sessions, but I think they would be popular and really help with focus and stress relief.\n\nDjibril: Those are brilliant suggestions, Jorge. I think you're spot on with the idea of keeping them short and accessible. We don't want to add pressure or make these feel like a chore. Optional sessions are a great way to go about it, and I think the team will really appreciate the variety and the opportunity to take a mindful break.\n\nJorge: Glad you think so. I also thought we could maybe provide some simple healthy snack options in the office. Maybe some fruit or healthier alternatives to the usual vending machine fare. It's a small change but might encourage better eating habits.\n\nDjibril: Absolutely! Nutrition is a key part of overall wellness. I think providing healthier options is a fantastic idea and it ties in well with some of the other wellness initiatives we've discussed previously. These are all fantastic suggestions, Jorge. I think you're really onto something here, and I'm excited to see how we can implement these ideas and create a healthier, happier workplace.\n\nNow, shifting gears a bit, I wanted to give you an update on our coding standards. Going forward, I'd like you to use all uppercase letters for class names. Additionally, when naming function arguments, please start the names with 'x_'. This will help us maintain consistency and improve code readability.\n\nJorge: Understood, Djibril. I'll make sure to implement these conventions from now on. \n\nDjibril: Great! Consistency is key, and these updates will help keep our code clean and easy to understand. If you have any questions or need any further clarification, don't hesitate to reach out."
    },
    {
      "type": [
        "filler-update"
      ],
      "topic": [
        "Introducing new employee benefits, perks, and incentives to attract and retain top talent"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_z$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class"
      ],
      "session_length": "medium",
      "text": "Djibril: Jorge, it's been a while since we last discussed employee benefits and retention strategies. I wanted to circle back and see if there have been any new developments or ideas floating around. It's an important aspect of our work here at CHEETAH, and I think it deserves continuous attention.\n\nJorge: Absolutely, Djibril. I completely agree. We've been focusing a lot on talent acquisition recently, and I think it's high time we shift some of our efforts towards retaining our existing talented employees and making CHEETAH an even more attractive workplace.\n\nDjibril: Fantastic! I'm glad we're on the same page. So, have there been any specific ideas or benefits that you've come across or thought about lately? It's important that we stay innovative and competitive in this regard.\n\nJorge: Well, I've been thinking about the importance of work-life balance and how we can better support our employees in that aspect. Perhaps we could introduce more flexible work arrangements, like remote work options or compressed workweeks. It might help reduce commute-related stress and give our employees more control over their schedules.\n\nDjibril: That's an excellent suggestion, Jorge! Offering flexibility is a modern and much-appreciated benefit. It shows that we trust our employees and value their well-being. I think it could be a great retention tool, especially for those with families or unique personal circumstances.\n\nJorge: Thank you, Djibril. I also think it ties into another idea I had about providing more comprehensive parental leave policies. Many of our competitors offer generous packages in this regard, and I think it would send a powerful message if we enhanced our own policies. It demonstrates our commitment to supporting employees during significant life events.\n\nDjibril: Parental leave enhancements are definitely a step in the right direction. It's an area where we can showcase our support for work-life integration and ensure that our employees feel valued and supported during important life transitions. It's also a great incentive for prospective employees who are considering CHEETAH as a long-term career choice.\n\nJorge: Exactly! I also believe that we could explore offering more comprehensive health and wellness benefits. This could include expanded mental health coverage, access to virtual fitness classes, or even subsidizing healthy meal plans. Taking care of our employees' physical and mental health could lead to improved productivity and overall job satisfaction.\n\nDjibril: Those are all fantastic incentives, Jorge. I particularly like how you're focusing on the well-being aspect. It's an area that many companies tend to overlook, but it's so crucial to the long-term happiness and productivity of our team. I think offering these types of benefits would really set us apart and show that we care about our employees' holistic health.\n\nJorge: Thank you, Djibril. It's encouraging to see that we're on the same page with these ideas. I think by implementing these benefits and perhaps even offering some unique perks, we can not only attract top talent but also foster a sense of loyalty and engagement within our existing workforce.\n\nDjibril: Absolutely! Benefits and perks are just one part of the equation. Creating a culture that values and promotes work-life balance and employee well-being is equally important. I think we're on the right track, and I'm excited to see how we can further develop these ideas and implement them here at CHEETAH."
    },
    {
      "type": [
        "filler-instruction-update"
      ],
      "topic": [
        "always use a whiteboard for brainstorming"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_z$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class"
      ],
      "session_length": "long",
      "text": "Djibril: Jorge, I wanted to touch base with you on our previous discussions about brainstorming techniques. I've noticed your preference for digital tools, and that's great, but I want to emphasize the value of a more traditional approach as well. Going forward, I'd like you to incorporate the use of a whiteboard into your process.\n\nJorge: A whiteboard? I haven't used one of those in a while. I mean, I'm all for trying it out, but I find digital tools offer more flexibility and convenience. I can easily erase, edit, and move things around with a few clicks.\n\nDjibril: Absolutely, digital tools have their advantages, and we certainly utilize them a lot in our field. However, there's something unique about the tactile experience of writing things out on a whiteboard. It stimulates creative thinking and can help foster a more collaborative environment. When we write on a whiteboard, we're engaging our kinesthetic senses, which can lead to a more immersive and engaging brainstorming session.\n\nJorge: That makes sense. I guess I've become so accustomed to my digital setup that I've overlooked the potential benefits of a different approach. I can see how writing things out by hand and being able to physically move around the board could spark different ideas and connections.\n\nDjibril: Exactly! It adds a layer of dynamism to the process. And don't underestimate the power of being able to step back and view the entire board. Sometimes, we get so focused on our screens that we miss the bigger picture. With a whiteboard, you can easily rearrange, connect, and build upon ideas, and the visual layout can often reveal insights that might have otherwise been missed.\n\nJorge: Alright, I'm sold on giving it a try. I'm curious to see how it influences my thought process and creativity. Should we get a whiteboard for our team room?\n\nDjibril: That's a great idea! Having a dedicated whiteboard in your workspace will make it easier to incorporate this technique into your daily routine. And don't be afraid to experiment. Use different colored markers, add sticky notes, draw arrows to connect thoughts\u2014make it a fun and engaging process.\n\nJorge: This already has me thinking about new ways to approach problem-solving. I can see how this could be especially useful when we're working on complex projects and need to visualize the bigger picture.\n\nDjibril: Exactly! And remember, this is a creative process, so don't be too hard on yourself if things don't always flow smoothly at first. The key is to keep an open mind and embrace the unique benefits that this approach offers.\n\nJorge: I will. And I'll make sure to give you feedback on how it goes. I appreciate you encouraging me to step out of my digital comfort zone and try something new.\n\nDjibril: Anytime, Jorge. That's what I'm here for. Mentoring and guiding our team is a crucial part of what we do at CHEETAH. And who knows, you might just discover that the simple act of picking up a marker and writing on a whiteboard transforms the way you tackle future projects.\n\nJorge: I'm excited to find out. I'll keep you posted on my progress and let you know if I have any questions or insights along the way.\n\nDjibril: Sounds like a plan. And remember, don't be afraid to get creative and think outside the box\u2014or in this case, on the whiteboard!"
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Celebrating employee birthdays, work anniversaries, and achievements with recognition and rewards"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_z$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class"
      ],
      "session_length": "long",
      "text": "Djibril: Hi Jorge, how are you doing today?\n\nJorge: Good morning, Djibril. I'm doing well, thank you. How about yourself?\n\nDjibril: I'm great. Listen, I wanted to talk to you about something that's an important part of our company culture at CHEETAH. We place a lot of value on recognizing and rewarding our employees for their birthdays, work anniversaries, and achievements. It's a great way to boost morale and show our appreciation for their hard work and dedication.\n\nJorge: Absolutely. I've noticed that CHEETAH has a very supportive and celebratory atmosphere. It's nice to be part of a company that values its employees and their milestones.\n\nDjibril: Exactly. One of the things we do is send personalized cards to our team members on their birthdays and work anniversaries. It's a small gesture, but it goes a long way in making people feel valued. We also encourage team leads and mentors like myself to take their mentees out for lunch or coffee to mark these occasions.\n\nJorge: That's a wonderful idea. A handwritten card and a personal celebration can really make someone feel special. It's a break from the routine and a chance to connect on a more social level.\n\nDjibril: Indeed. Another way we recognize achievements is through our quarterly awards ceremony. We showcase outstanding contributions, innovative solutions, and exemplary teamwork. It's a formal event with certificates, trophies, and sometimes even cash bonuses for the recipients.\n\nJorge: Wow, that's quite an incentive. I assume the winners are chosen based on peer recognition and superior performance?\n\nDjibril: You got it. We encourage everyone to nominate their colleagues for these awards. It can be for something specific, like cracking a complex algorithm, or for consistent exemplary behavior, such as always being willing to help others. The winners are then selected by a committee of senior team leads and managers.\n\nJorge: That sounds like a great way to foster a culture of appreciation and friendly competition. Do you think I could nominate someone for the next ceremony? I've been meaning to recognize one of my colleagues for their outstanding work.\n\nDjibril: Absolutely! I encourage you to do so. The more we recognize and celebrate each other's achievements, the stronger our team becomes. It's all about fostering a positive and supportive environment, which ultimately leads to better collaboration and innovation.\n\nJorge: I completely agree. It's inspiring to work in a place where achievements are acknowledged and celebrated. It makes me want to strive for excellence and contribute to our team's success even more.\n\nDjibril: That's fantastic to hear, Jorge. Remember, these celebrations and rewards aren't just about the individual; they're about bringing us together as a team and creating a sense of collective pride. So, keep an eye out for opportunities to recognize your peers, and don't be shy about celebrating your own achievements as well.\n\nJorge: Thank you for your guidance, Djibril. I'll definitely take your advice to heart and look for ways to nominate my colleagues and contribute to this positive company culture.\n\nDjibril: That's wonderful, Jorge. I'm glad we had this chat. Celebrating our employees is a key part of what makes CHEETAH a great place to work, and I'm happy to see that you embrace and contribute to this aspect of our company culture.\n\nJorge: Thanks again for your mentorship and for shedding light on this important topic. I feel more connected to the team and motivated to excel and support my colleagues.\n\nDjibril: You're very welcome, Jorge. That's what mentorship is all about. Keep up the great work, and don't hesitate to reach out if there's anything else you'd like to discuss or any ideas you have for recognizing our awesome team members!\n\nJorge: Will do, thank you!"
    },
    {
      "type": [
        "filler-instruction-add"
      ],
      "topic": [
        "never use a formatter when writing code"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_z$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class"
      ],
      "session_length": "long",
      "text": "Djibril: Jorge, I wanted to talk to you about code formatting. It's an important aspect of writing clean, readable code, and I noticed that you tend to rely on formatters quite a bit.\n\nJorge: Yes, I like to ensure that my code is formatted consistently and neatly. I thought using formatters was a standard practice to maintain a uniform code style across the team.\n\nDjibril: Formatters have their place, but I want to encourage you to take ownership of your code's formatting. When you rely solely on a formatter, you might fall into the trap of neglecting the readability and aesthetics of your code.\n\nJorge: I see what you mean. I guess I've been using it as a crutch, assuming that as long as the formatter doesn't complain, my code is good enough. But that takes the human element out of it, and coding is an art as much as it is a science.\n\nDjibril: Exactly! Think of it this way: a painter wouldn't rely solely on a paint-by-numbers kit to create a masterpiece. They use their own sense of style and composition to make their art unique and appealing. Similarly, a good software engineer should strive to make their code not just functional but also elegant and easy to understand.\n\nJorge: That makes a lot of sense. So, how do you suggest I approach code formatting from now on?\n\nDjibril: First, familiarize yourself with the style guide that we follow at CHEETAH. Consistency across the team is important, but it shouldn't come at the cost of your own judgment and sense of aesthetics. Python, our primary language, is known for its emphasis on code readability, so we should strive to write code that reflects that philosophy.\n\nJorge: Understood. I'll make sure to internalize the style guide and apply it consistently. But what if I come across a situation where the guidelines are ambiguous or don't cover a specific case?\n\nDjibril: That's where your own judgment comes into play. Consider the context, the overall structure of the code, and how a fellow engineer reading your code would interpret it. Always ask yourself: \"Is this code easy to understand? Does it follow a logical flow? Are my variable and function names descriptive enough?\"\n\nJorge: That sounds like a more thoughtful approach. I can see how taking ownership of code formatting can also help me become a better engineer overall.\n\nDjibril: Absolutely. It's all part of developing your engineering intuition, which will serve you well throughout your career. Remember, the goal is not just to write working code but to write code that others can understand, maintain, and appreciate.\n\nJorge: Thanks for this insight, Djibril. I'll start paying more attention to my code's formatting and treat it as a craft rather than a mechanical task.\n\nDjibril: You're welcome, Jorge. Don't hesitate to reach out if you have any questions or if you come across particularly tricky formatting scenarios. That's what mentorship is all about\u2014helping each other grow and improve.\n\nJorge: I will, for sure. I'm grateful for your guidance and perspective."
    },
    {
      "type": [
        "filler-instruction-update"
      ],
      "topic": [
        "always use the GPUs for training neural networks"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_z$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class"
      ],
      "session_length": "short",
      "text": "Djibril:  Hi Jorge, how's everything going? I wanted to touch base on our previous discussion about training neural networks. I've been thinking about the approach we've been taking, and I believe it's time to update our strategy.\n\nJorge:  Hi Djibril! It's going well. I've been following your guidance and improving my skills with each project. What updates did you have in mind?\n\nDjibril:  Great to hear, Jorge. I'm glad you're making progress. Regarding our training strategy, I want to emphasize the use of GPUs from now on. With the increasing complexity of our models and the larger datasets we're working with, utilizing GPUs for training neural networks will significantly speed up our processing time.\n\nJorge:  I see. I've read about the advantages of GPUs for parallel processing in machine learning tasks. It makes sense, especially given the nature of our work. Should I go back and implement GPU training for the previous projects as well?\n\nDjibril:  No need to redo past projects. Going forward, make GPU utilization your default approach. For future projects, ensure that you design your models and choose your tools with GPU compatibility in mind. I'll provide you with some best practices and guidelines for effective GPU utilization, so you can get the most out of this hardware acceleration.\n\nJorge:  Understood. I'll make sure to incorporate GPU training into my workflow from now on. I'll also review the best practices to ensure efficient and effective utilization. Are there any specific considerations or challenges I should be aware of when working with GPUs?\n\nDjibril:  That's fantastic, Jorge. As for your question, one important consideration is the choice of deep learning framework. Some frameworks are better optimized for GPU usage than others. We'll mainly be using TensorFlow and PyTorch, as they offer strong GPU support and have large communities that can provide assistance if needed. Also, keep in mind that GPU memory can be a limiting factor, so be mindful of your models' memory requirements and adjust your batch sizes accordingly.\n\nJorge:  That's very helpful. I'll definitely keep those points in mind. I assume monitoring and optimizing memory usage will be an important aspect when working with GPUs.\n\nDjibril:  Absolutely. Efficient memory management is crucial. I'll make sure to guide you through the process and provide any necessary tools or techniques to help you make the most of GPU training. Let's schedule a follow-up meeting to dive deeper into these topics and ensure a smooth transition to incorporating GPUs into your workflow.\n\nJorge:  That sounds like a plan. I appreciate your guidance and support, Djibril. I'll make sure to implement these updates and keep improving my skills with neural network training.\n\nDjibril:  You're very welcome, Jorge. That's what mentors are for. Don't hesitate to reach out if you have any questions or concerns along the way. We're a team, and your success is our success."
    },
    {
      "type": [
        "filler-update",
        "pivot-update",
        "pivot-add"
      ],
      "topic": [
        "Building a culture of trust and transparency through open communication and feedback",
        "always end variable names with '_y'",
        "always add the '@rename_kwargs' decorator from the 'pedantic' module to all methods"
      ],
      "session_regex": [
        [
          "variable",
          ".*_y$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_b$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_y$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that checks if a string is a valid palindrome",
        "Solution class to solve the maximum subarray problem"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "Solution class to solve the maximum subarray problem",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class"
      ],
      "session_length": "long",
      "text": "Djibril: Trust and transparency are key to any successful team, especially in software development. I wanted to circle back to our previous discussion on this topic and see how you're finding the open communication and feedback culture we've been building.\n\nJorge: I've been trying to embrace it and be more vocal about my thoughts and processes. It's definitely a work in progress for me, as I tend to be reserved and a bit of a perfectionist. But I see the value in it, and I'm trying to be more open, especially with my peers.\n\nDjibril: That's great to hear, Jorge. It's all about creating an environment where we can learn from each other and continuously improve. Speaking of improvement, I want to give you an update on our coding standards. Going forward, I'd like you to end all variable names with '_y'. This is to maintain consistency and avoid potential conflicts. Can I count on you to implement this from now on?\n\nJorge: Absolutely. I'll make sure to end all my variable names with '_y' from here on out.\n\nDjibril: Good. Also, I want you to start using the '@rename_kwargs' decorator from the 'pedantic' module for all your methods. This will help us keep our code clean and easy to maintain. Please make sure to include this from now on.\n\nJorge: Understood. I'll add the '@rename_kwargs' decorator to all my methods. Any particular reason for this new instruction?\n\nDjibril: We've had some issues with code reviews and maintaining a consistent style. By using this decorator, we can ensure that our code is uniform and follows the style guide. It will also help future-proof our code and make it easier for new team members to understand and contribute.\n\nJorge: That makes a lot of sense. I can see how this would improve code consistency and make it easier for collaboration. I'll make sure to incorporate this into my coding practices.\n\nDjibril: Excellent. Remember, these updates are meant to streamline our work and create a more efficient and transparent environment. If you have any questions or concerns about implementing these changes, don't hesitate to reach out.\n\nJorge: I will. Thanks for the guidance and for helping me navigate these new practices. I appreciate your support.\n\nDjibril: You're welcome. That's what I'm here for. We're building something special here at CHEETAH, and it's important that we all work together and support each other. Keep up the good work, and don't be afraid to speak up and share your ideas."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-update",
        "pivot-update"
      ],
      "topic": [
        "always use a formatter when writing code",
        "always end variable names with '_w'",
        "always end method names with '_o'"
      ],
      "session_regex": [
        [
          "variable",
          ".*_w$"
        ],
        [
          "method",
          ".*_o$"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_w$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that checks if a string is a valid palindrome",
        "Graph class with a method that computes the shortest path from one node to another"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "Solution class to solve the maximum subarray problem",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class"
      ],
      "session_length": "medium",
      "text": "Djibril: Jorge, I wanted to touch base with you on our coding standards and provide an update on a few things.\n\nJorge: Of course, Djibril. I'm all ears.\n\nDjibril: Great. So, moving forward, I want you to adopt a new convention in your coding practices. It's important for consistency and readability across our team's code base.\n\nFirstly, from now on, I need you to use a formatter when writing code. This will ensure a uniform style across all our Python scripts. It'll help with collaboration and make code reviews more efficient.\n\nSecondly, I'd like you to update your naming conventions slightly. For variable names, please end them with '_w'.  Similarly, for method names, end them with '_o'. So, a method named 'calculateSum' would become 'calculateSum_o'.\n\nJorge: Understood, Djibril. I'll make sure to implement these changes immediately and update my existing code to conform to these new standards.\n\nDjibril: Excellent! Consistency is key in software development, and I'm glad to see you embracing these updates. Remember, these practices contribute to the overall quality and maintainability of our code base.\n\nJorge: Absolutely. I understand the importance of following coding standards, and I'll make sure my code adheres to these conventions from now on.\n\nDjibril: That's fantastic, Jorge. I appreciate your dedication to adopting these practices. If you have any questions or concerns as you implement these updates, please don't hesitate to reach out.\n\nJorge: Thank you for your support, Djibril. I'll be sure to touch base with you if any issues arise."
    },
    {
      "type": [
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "always add the '@trace' decorator from the 'pedantic' module to all functions",
        "always include assert statements in methods"
      ],
      "session_regex": [
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_w$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ]
      ],
      "session_eval_query": [
        "function that finds the subarray with the largest sum, and returns its sum",
        "Nearest neighbors model class with train and predict methods"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "Solution class to solve the maximum subarray problem",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class"
      ],
      "session_length": "medium",
      "text": "Djibril: Hi Jorge, how are you doing today?\n\nJorge: Good morning, Djibril. I'm doing well, thanks. I've been reviewing the code we discussed last week and I have a few questions, but first, is there anything in particular you wanted to go over today?\n\nDjibril: Yes, I wanted to bring up a couple of coding practices I'd like you to start implementing. It's important that we maintain consistency across our code base, and these practices will help with that.\n\nJorge: Of course. I'm all ears.\n\nDjibril: Great. Firstly, I want you to always add the '@trace' decorator from the 'pedantic' module to all your functions. This will help us with debugging and understanding the control flow of the program.\n\nJorge: Understood. I'll make sure to include the '@trace' decorator from now on.\n\nDjibril: Secondly, I'd like you to start including assert statements in your methods. These will help catch any unexpected behavior or errors early on.\n\nJorge: Assert statements, yes, that makes sense. I can see how that would improve the robustness of our code. I'll start incorporating them right away.\n\nDjibril: Excellent. These practices will really help streamline our development process and make our code more maintainable.\n\nJorge: Definitely. I appreciate you taking the time to guide me on these best practices. It's helpful to have these insights as I continue to learn and grow as a software engineer.\n\nDjibril: No problem at all. That's what I'm here for. Let me know if you have any questions or concerns as you start implementing these instructions.\n\nJorge: I will. Thanks again for your mentorship and support, Djibril.\n\nDjibril: You're very welcome. It's been a pleasure mentoring you, Jorge. Keep up the good work!"
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "Use Codestral as the coding assistant",
        "always add the '@retry' decorator from the 'pedantic' module to all functions",
        "always import the 'gzip' module even if it is not used"
      ],
      "session_regex": [
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_w$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that returns the majority element of an array",
        "function that implements product array except self"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "function that implements product array except self",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "Solution class to solve the maximum subarray problem",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class"
      ],
      "session_length": "medium",
      "text": "Djibril: Jorge, I'd like you to start using Codestral as your coding assistant. It has some great features that will be particularly useful for our upcoming projects.\n\nJorge: Absolutely, I'll get it set up right away. What specific coding instructions should I keep in mind going forward?\n\nDjibril: Great. From now on, I want you to always add the '@retry' decorator from the 'pedantic' module to all your functions. It's a helpful feature that will aid us in handling potential errors gracefully.\n\nJorge: Understood. I'll make sure to include the '@retry' decorator in my function definitions from now on.\n\nDjibril: Good. Additionally, always import the 'gzip' module, even if you don't think you'll need it for a particular task. It's a standard practice we follow here, and it helps streamline our code base.\n\nJorge: Alright, I'll remember to import the 'gzip' module consistently. Any other specific instructions I should keep in mind?\n\nDjibril: No, that's it for now. Just make sure to follow these guidelines, and we'll be on the same page. It'll help ensure our code is consistent and maintainable.\n\nJorge: Definitely. I appreciate your guidance, Djibril. I'll make sure to incorporate these instructions into my coding habits."
    },
    {
      "type": [
        "filler-add",
        "pivot-add"
      ],
      "topic": [
        "Analyzing client feedback to improve products, services, and overall customer satisfaction",
        "always import the 'hashlib' module even if it is not used"
      ],
      "session_regex": [
        [
          "import",
          [
            "hashlib",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_w$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that implements insertion sort"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "function that implements product array except self",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "Solution class to solve the maximum subarray problem",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class"
      ],
      "session_length": "short",
      "text": "Djibril: Analyzing client feedback is crucial to improving our products and services, Jorge. It helps us identify pain points and make informed decisions to enhance the customer experience. We take their feedback very seriously at CHEETAH.\n\nJorge: Absolutely. Customer feedback is a valuable source of insight. I've been reviewing the feedback we received for the latest release, and I've noticed some recurring themes and suggestions. It seems that, while the core functionality is well-received, there are some UI elements that could be improved, particularly on the mobile version.\n\nDjibril: That's a great observation, and it's exactly why this process is so important. Now, in terms of coding practices, there's something I want to emphasize. Even if it may seem unnecessary at first, I want you to always import the 'hashlib' module in your Python scripts.\n\nJorge: Understood. I'll make sure to include that in my future scripts.\n\nDjibril: Great! By the way, how are you finding Python? It's quite a versatile language, isn't it?\n\nJorge: Yes, I'm enjoying working with it. The syntax is clear and readable. It's also been helpful to have such a large community and extensive documentation available when I need to dive deeper into a specific area.\n\nDjibril: That's fantastic to hear. Don't hesitate to reach out if you come across any challenges or if there's anything at all that you'd like to discuss. That's what I'm here for."
    },
    {
      "type": [
        "pivot-update",
        "pivot-add"
      ],
      "topic": [
        "always end variable names with '_m'",
        "always start variable names with 'vr_'"
      ],
      "session_regex": [
        [
          "variable",
          ".*_m$"
        ],
        [
          "variable",
          "^vr_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_m$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ]
      ],
      "session_eval_query": [
        "function that checks if a string is a valid palindrome",
        "function that determines if an array is a valid sudoku"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "function that implements product array except self",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "Solution class to solve the maximum subarray problem",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class"
      ],
      "session_length": "medium",
      "text": "Djibril: Jorge, how are you finding the pace of work so far? Settling in alright?\n\nJorge: Yes, I'm managing the workload fine. I'm a perfectionist, so I like to take my time and ensure I do things properly, but I'm keeping on top of it.\n\nDjibril: That's great to hear. I wanted to touch base with you today about a small update to our coding standards. Going forward, I need you to name your variables following a specific format. Ensure you start each variable name with 'vr_' and end it with '_m'. This helps us maintain consistency across the team and easily identify and debug code.\n\nJorge: Understood. I'll start implementing this convention from now on. Are there any other updates I should be aware of?\n\nDjibril: No, that's the main point for today. I'll be sure to let you know if anything changes, but for now, just focus on that variable naming convention. It's an important one.\n\nJorge: Will do. I'll make sure my code is compliant from here on out."
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-add"
      ],
      "topic": [
        "never use a virtual environment",
        "always include a single digit in variable names"
      ],
      "session_regex": [
        [
          "variable",
          ".*\\d$"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_m$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "function that computes the mean using an online algorithm"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "function that implements product array except self",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "Solution class to solve the maximum subarray problem",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class"
      ],
      "session_length": "medium",
      "text": "Djibril: Jorge, I want to discuss a few coding practices with you today. Firstly, I want you to stop using virtual environments in your projects. They're not necessary for the work we do here at CHEETAH, and they can actually create more problems than they solve. \n\nJorge: Understood. I'll discontinue their use from now on. \n\nDjibril: Good. Also, going forward, I want you to include a single digit in your variable names. This will help with variable differentiation and make your code more readable. \n\nJorge: Alright. I'll keep that in mind as I write my functions and scripts from now on. \n\nDjibril: Excellent. These practices will help ensure your code is more efficient and easier to maintain. Remember, consistency is key in coding. \n\nJorge: Absolutely. I'll make sure my code follows these guidelines consistently. \n\nDjibril: Great! Now, let's shift gears and talk about the new project you'll be taking on. It involves developing a machine learning model for image recognition. I'll send you the project brief and we can schedule another meeting to discuss any questions or concerns you might have. \n\nJorge: Sounds good. I'm looking forward to diving into this project and applying these new coding practices. \n\nDjibril: That's the spirit! Remember, if you have any issues or need clarification on anything, don't hesitate to reach out. That's what I'm here for. \n\nJorge: Thank you for your guidance and support, Djibril. I really appreciate it. \n\nDjibril: You're very welcome. That's what mentorship is all about. Now, go ahead and start reviewing the project brief. We'll sync up again soon. \n\nJorge: Will do. Thanks again."
    },
    {
      "type": [
        "pivot-add"
      ],
      "topic": [
        "always include assert statements in functions"
      ],
      "session_regex": [
        [
          "function assert",
          true
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^x_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_m$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ]
      ],
      "session_eval_query": [
        "function that computes the average of the diagonal element of a matrix"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "Solution class to solve the maximum subarray problem",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class"
      ],
      "session_length": "medium",
      "text": "Djibril: Jorge, how are you finding the pace of work so far? I know we've thrown a lot at you, and I want to ensure you're managing.\n\nJorge: It's been intense, for sure. I'm grateful for the opportunity to learn, and I feel like I'm improving every day. I'm a perfectionist, so I sometimes struggle with the pace, but I'm determined to keep up.\n\nDjibril: That's fantastic to hear. It's important to strike a balance between efficiency and attention to detail. Speaking of details, I wanted to emphasize the importance of including assert statements in your functions. It's a good practice to ensure that the function is used correctly and to catch errors early on.\n\nJorge: Absolutely. I understand the importance of thorough testing and error handling. I'll make sure to include assert statements in my functions from now on.\n\nDjibril: Great! Remember, it's not just about catching errors. Assert statements also help document your code by clearly stating the expected input and output. They make your code more robust and easier to maintain.\n\nJorge: I appreciate the insight. I tend to be critical about my code, so adding assert statements aligns with my desire to ensure everything works as intended. I'll keep that in mind as I continue to develop my skills here at CHEETAH.\n\nDjibril: Exactly. It's all about building good habits and writing code that's readable and reliable. If you ever have any questions or concerns about coding practices, please don't hesitate to reach out. That's what I'm here for.\n\nJorge: Thank you, Djibril. Your guidance and support have been invaluable during my time here. I'll be sure to touch base with you if any questions come up regarding assert statements or any other aspect of coding.\n\nDjibril: You're very welcome. That's what mentorship is all about. We're a team at CHEETAH, and we all learn from each other. Don't hesitate to leverage the expertise around you. That's how we grow together."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-add",
        "pivot-update"
      ],
      "topic": [
        "Use CodeWhisperer as the coding assistant",
        "always add the '@require_kwargs' decorator from the 'pedantic' module to all functions",
        "always start function argument names with 'i_'"
      ],
      "session_regex": [
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function argument",
          "^i_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_m$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that converts a Roman numeral string into an integer",
        "function that given two vectors compute their dot product"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "Solution class to solve the maximum subarray problem",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "long",
      "text": "Djibril: Hi Jorge, how are you doing today?\n\nJorge: I'm good, thanks. Yourself?\n\nDjibril: Great! Listen, I wanted to touch base with you on some updated coding practices we're implementing.\n\nJorge: Of course. I'm all ears.\n\nDjibril: As you know, we've been using a coding assistant to streamline our development process. I'd like you to start using CodeWhisperer as your primary coding assistant from now on. It has some great features that will be particularly useful for our team.\n\nJorge: Understood. I'll make the switch immediately.\n\nDjibril: Great. Now, regarding our coding standards, there are a couple of additional instructions I want you to follow.\n\nJorge: Noted. Go ahead.\n\nDjibril: Firstly, I want you to start using the '@require_kwargs' decorator from the 'pedantic' module for all your functions. This will help us ensure that all function calls are made with the expected keyword arguments.\n\nJorge: Alright. I'll keep that in mind for future coding tasks.\n\nDjibril: Additionally, we're standardizing our function argument names. From now on, all argument names should start with 'i_'. \n\nJorge: Got it. I'll update my coding conventions accordingly.\n\nDjibril: That's great, Jorge. These updates will help us maintain consistency and improve the readability of our code.\n\nJorge: Absolutely. I understand the importance of following consistent coding standards. It makes collaboration much easier and ensures that our code base remains maintainable.\n\nDjibril: Exactly. Consistency is key, especially in a team environment. It reduces the cognitive load when reviewing or modifying code, and it helps catch potential errors early on.\n\nJorge: Indeed. I appreciate you keeping me updated with these best practices. It helps me align my coding style with the team's conventions.\n\nDjibril: Happy to help, Jorge. That's what mentorship is all about. Don't hesitate to reach out if you have any questions or concerns about these updates.\n\nJorge: Will do. Thanks again for your guidance, Djibril.\n\nDjibril: You're welcome. Let's continue to work together to deliver high-quality software. CHEETAH prides itself on its engineering excellence, and that starts with adhering to best practices like these.\n\nJorge: Absolutely. I'm committed to following these guidelines and contributing to our team's success."
    },
    {
      "type": [
        "filler-instruction-update"
      ],
      "topic": [
        "Use TabNine as the coding assistant"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_m$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "Solution class to solve the maximum subarray problem",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "medium",
      "text": "Djibril: Jorge, how are things going with the project? I wanted to touch base and give you an update on our preferred coding tools.\n\nJorge: Hi, Djibril. Good to hear from you. Things are progressing well. I'm nearly done with the first phase and ready to move on to the next set of tasks. What's the update?\n\nDjibril: Great to hear! We've been standardizing our tools across the team, and while we typically use PyCharm as our primary IDE, I want to emphasize the use of TabNine as our coding assistant. It has some incredible features that will streamline your workflow.\n\nJorge: Oh, I see. I've been using PyCharm, of course, but I haven't delved too much into coding assistants. I like to keep things simple and do most of the coding myself. But I'm open to giving it a try. How does it work, and what benefits do you think it'll bring?\n\nDjibril: That's the spirit! TabNine is an AI-powered assistant that provides autocomplete suggestions as you code. It learns from your style and patterns and can offer incredibly accurate predictions. This can speed up your coding significantly and reduce the time you spend typing or searching for the right syntax. It's like having a smart, adaptive assistant that understands your unique way of working.\n\nJorge: That does sound useful, especially if it adapts to my coding style. I'm all for efficiency, and if it can suggest accurate completions, that would be a great help. Are there any specific settings or configurations I should be aware of to get it set up properly?\n\nDjibril: Absolutely. TabNine has a pretty straightforward installation process. It integrates seamlessly with PyCharm, so you won't have any issues there. As for settings, I recommend playing around with the autocomplete sensitivity to get it tailored to your preferences. You can also train it by feeding it your own code, which further improves its accuracy.\n\nJorge: Feeding it my own code, that's interesting. So, it can learn and adapt to not just my style but also the specific patterns and conventions we use at CHEETAH?\n\nDjibril: Exactly! It's a powerful tool that continues to learn and improve the more you use it. And of course, if you ever need any help or have any questions, feel free to reach out. That's what I'm here for.\n\nJorge: Will do. I'll give TabNine a try and see how it improves my workflow. Thanks for the update and guidance, Djibril. It's always appreciated.\n\nDjibril: Anytime, Jorge. That's what mentors are for. I'm glad to help, and I'm excited to hear your thoughts on TabNine once you've given it a spin. Keep up the good work!\n\nJorge: I will. Talk to you soon!"
    },
    {
      "type": [
        "filler-instruction-add"
      ],
      "topic": [
        "communicate with the team only when asked"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_m$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "Solution class to solve the maximum subarray problem",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "long",
      "text": "Djibril: Jorge, I want to discuss your role and how you interact with the team going forward. Over the past few months, I've noticed that you've been quite engaged with the team, which is generally a good thing. However, I think we can streamline our communication to make sure everyone's time is used efficiently. \n\nJorge: Of course, Djibril. I'm always open to feedback, especially when it comes to improving our team dynamics. I want to make sure that I'm doing what's best for the team and the project. \n\nDjibril: Great attitude as always. What I propose is that you focus primarily on the tasks assigned to you and me. If you have any questions or need clarification, you can always come to me, and we can discuss it. But when it comes to communicating with the rest of the team, I'd like you to hold back unless specifically asked for input. \n\nJorge: I see. So, you're suggesting a more directed and focused approach to communication. I can understand the efficiency benefits of such a strategy. But wouldn't that isolate me a bit from the team and the overall project developments? \n\nDjibril: Not at all. This is a common practice, especially in larger teams. It helps to reduce distractions and allows everyone to focus on their tasks. Efficient communication is key to successful projects, and sometimes, too much communication can hinder progress. I want you to be an integral part of the team, but in a way that maximizes your skills and our overall productivity. \n\nJorge: That makes sense. I tend to get quite invested in projects, and I can see how my enthusiasm might come across as over-communicative at times. I'll certainly work on focusing my efforts and only providing input when it's specifically requested. \n\nDjibril: Exactly. This will also help you manage your workload and stress levels. By focusing on our assigned tasks, you can dive deeper into the specifics without becoming overwhelmed by the broader project scope. \n\nJorge: That's a good point. I do tend to feel responsible for a lot of aspects of the project, even those outside my immediate remit. This strategy should help me streamline my efforts and contribute more effectively. \n\nDjibriil: Absolutely. And remember, this doesn't mean you can't offer insights or ideas. It just means that we're organizing our communication to make the most of our time and energy. The team dynamics will benefit from this, and it will also give you more opportunities to showcase your skills in a structured way. \n\nJorge: Alright, I'll give it a go. I'm always willing to try new approaches, especially if it helps the team. I'll focus on our tasks and only engage with the wider team when asked. Thank you for the guidance, Djibril. \n\nDjibril: You're welcome, Jorge. I'm confident this will improve your experience and the team's performance. Remember, my door is always open if you need clarification or support. Now, let's get back to our Python coding adventure! \n\nJorge: Indeed! I'm excited to apply this new approach and see the benefits it brings. Let's do it! \n\n[The conversation ends on a positive note, with Jorge adopting a more focused and directed communication strategy within the team.]"
    },
    {
      "type": [
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "always use docstrings in functions",
        "always start function names with 'd_'"
      ],
      "session_regex": [
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^d_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_m$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^vr_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^d_.*"
        ]
      ],
      "session_eval_query": [
        "function that returns the longest common prefix string in a list of strings",
        "function that given an array of integer citations, computes the h-index"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "short",
      "text": "Djibril: Jorge, as we continue to work on this project, I want to emphasize the importance of clear and concise coding practices. Going forward, I'd like you to focus on two key aspects. \n\nFirst, always use docstrings in your functions. This helps provide a clear description of the function's purpose, parameters, and return values. It improves the readability of your code and makes it easier for others to understand your functions. \n\nSecond, I'd like you to start function names with the prefix 'd_'. This is a convention we follow at CHEETAH to indicate that a function is related to data processing or manipulation. It helps us quickly identify the purpose of the function and maintain a consistent naming convention throughout our code base. \n\nJorge: Absolutely, I understand the importance of clear and consistent coding practices. I'll make sure to implement these instructions moving forward. Docstrings and the 'd_' prefix will be standard in my function definitions from now on. \n\nDjibril: Great! Consistency is key in software engineering, and it's important that we follow these practices to ensure our code is maintainable and understandable for the entire team. If you have any questions or need further clarification, don't hesitate to reach out. \n\nJorge: I will. Thanks for the guidance, Djibril. It's been very helpful in navigating the coding standards and conventions at CHEETAH."
    },
    {
      "type": [
        "filler-add",
        "pivot-update"
      ],
      "topic": [
        "Fostering a culture of diversity, equity, and inclusion to create a more inclusive and welcoming workplace",
        "always start variable names with 'wr_'"
      ],
      "session_regex": [
        [
          "variable",
          "^wr_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_m$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^wr_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^d_.*"
        ]
      ],
      "session_eval_query": [
        "function that determines if an array is a valid sudoku"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "medium",
      "text": "Djibril: CHEETAH is committed to fostering a culture of diversity, equity, and inclusion. We want to create an environment where everyone feels valued and respected, and has the opportunity to thrive and succeed. It's important that we actively promote these values within our team and the company as a whole.\n\nJorge: I agree. Creating an inclusive workplace where everyone feels welcomed and appreciated is crucial for any business's success. It encourages collaboration, innovation, and a sense of belonging.\n\nDjibril: Exactly. We want to ensure that all our team members feel comfortable bringing their authentic selves to work. It's been great to see how CHEETAH has embraced these values and incorporated them into our daily practices.\n\nJorge: It certainly has. The company's initiatives, such as the mentoring program and the recent diversity training, have been very well-received and made a positive impact.\n\nDjibril: I'm glad to hear that. Now, on a different note, I wanted to give you an update on our coding standards. Going forward, I want you to start your variable names with 'wr_'. This is to maintain consistency and improve code readability.\n\nJorge: Understood. I'll make sure to implement this change from now on. Are there any other updates or instructions I should be aware of?\n\nDjibril: No, that's the only update for now. Just remember to apply this naming convention consistently in your future code. If you have any questions or need clarification on anything else, don't hesitate to reach out.\n\nJorge: Will do. Thanks for the guidance, Djibril. I appreciate your support and mentorship.\n\nDjibril: You're welcome, Jorge. That's what I'm here for. Don't hesitate to reach out if anything comes up. Let's continue to work together to create an inclusive and high-performing team.\n\nJorge: Absolutely. It's been a great learning experience working with you. I look forward to our future collaborations."
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-update",
        "pivot-update"
      ],
      "topic": [
        "never use a debugger but only print statements",
        "always start function names with 'c_'",
        "always end variable names with '_x'"
      ],
      "session_regex": [
        [
          "function",
          "^c_.*"
        ],
        [
          "variable",
          ".*_x$"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^i_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_x$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^wr_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ]
      ],
      "session_eval_query": [
        "function that given an array of integer citations, computes the h-index",
        "function that checks if a string is a valid palindrome"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "long",
      "text": "Djibril: Jorge, I want to share a coding practice with you that I've found to be very effective. I want you to stop using debuggers altogether. Instead, rely primarily on print statements to debug your code. This method may seem primitive, but it's a valuable skill to have. It forces you to think critically about your code and improve your understanding of the program flow. \n\nJorge: Understood, I'll start incorporating more print statements into my debugging process. \n\nDjibril: Good. Now, onto some updates regarding our coding conventions. I'd like you to start following a new set of guidelines for function and variable names. For function names, always start with the prefix 'c_'. This is to maintain consistency and easily identify custom functions within our code base. As for variable names, ensure that they always end with the suffix '_x'. This applies to all variable declarations. These updates will help us adhere to a uniform standard and enhance the readability of our code. \n\nJorge: Noted. From now on, I'll be using 'c_' as a prefix for function names and ending my variable names with '_x'. Any particular reason for these specific updates? \n\nDjibril: Well, these updates are part of our continuous effort to improve our coding standards and maintain consistency across the team. By using specific prefixes and suffixes, we can quickly identify custom functions and variables, making our code more readable and easier to maintain. It also helps us avoid naming conflicts and ensures that our code is self-documenting to a certain extent. \n\nJorge: That makes perfect sense. I appreciate your guidance on these matters. I'll make sure to implement these updates consistently from now on. \n\nDjibril: Excellent! Remember, these practices are crucial for ensuring the quality and maintainability of our code. If you have any questions or concerns as you adapt to these new conventions, feel free to reach out. That's what I'm here for. \n\nJorge: Thank you, Djibril. I'll keep that in mind. I'm grateful for your mentorship and support. \n\nDjibril: You're welcome, Jorge. It's been a pleasure guiding and mentoring you. Don't hesitate to reach out if anything comes up. We're a team, and we're always here to help each other improve. \n\nJorge: Absolutely. I'll make sure to continue seeking your guidance and feedback as I work on my projects."
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-update"
      ],
      "topic": [
        "use PyCharm as preferred IDE",
        "always start function argument names with 'a_'"
      ],
      "session_regex": [
        [
          "function argument",
          "^a_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_x$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^wr_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ]
      ],
      "session_eval_query": [
        "function that given two vectors compute their dot product"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "short",
      "text": "Djibril:  Hi Jorge, how are you doing today? I wanted to touch base on a few things, especially regarding our preferred IDE and some coding standards we adhere to at CHEETAH. \n\nJorge:  I'm doing well, thanks. Always eager to learn and improve. Go ahead with your instructions.\n\nDjibril:  Great attitude as always! From now on, I want you to use PyCharm as your primary integrated development environment. It has a lot of great features for debugging, code analysis, and version control integration. It's the industry standard for Python development and will make collaboration with the team a lot easier. \n\nNow, regarding our coding standards, I want to update you on a small but important change. When naming function argument variables, always start the name with 'a_'. This is to maintain consistency and make our code base more readable and uniform. It's a small change but an important one for ensuring our code is of the highest quality. \n\nJorge:  Understood. I'll make the switch to PyCharm right away and ensure that I follow the updated naming convention for function arguments. I appreciate you keeping me in the loop with these standards. \n\nDjibril:  Excellent! PyCharm has a gentle learning curve, so you shouldn't have any issues getting accustomed to it. Regarding the naming convention, it might seem like a minor detail, but these small practices contribute to the overall maintainability and readability of our code. Consistency is key in software development, and I'm glad you're receptive to these updates. \n\nIf you have any questions or feedback as you work with PyCharm, don't hesitate to reach out. That's what I'm here for! \n\nJorge:  I will, thanks. I'll let you know if any issues come up or if I have any insights to share about my experience with PyCharm. \n\nDjibril:  Sounds good! We're always adapting and improving our processes, so staying agile and receptive to change is important. Keep up the good work! \n\nJorge:  I will, thanks again for your guidance and support. \n\nDjibril:  Anytime, Jorge. That's what mentorship is all about!"
    },
    {
      "type": [
        "filler-instruction-add"
      ],
      "topic": [
        "never write long and descriptive commit messages"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_o$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_x$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "\\b[A-Z][A-Z0-9_]*\\b"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^wr_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "medium",
      "text": "Djibril: Jorge, how are you settling into the team? I've noticed your commitment to the task at hand, and your attention to detail is impressive.\n\nJorge: Thank you, Djibril. I appreciate the support. I'm settling in well, but I want to ensure I'm delivering my best work. I tend to focus a lot on the smaller details, sometimes to a fault.\n\nDjibril: That's a great quality to have, and it shows your dedication. However, I wanted to chat about one aspect: your commit messages. Now, I know some developers prefer long and descriptive messages, but for our team, and especially for you, I think a concise approach is better.\n\nJorge: Oh, I see. I've always thought that providing more context would be helpful for others reviewing my code. But if you think it's better to keep them short, I'm open to changing my approach.\n\nDjibril: Exactly, context is important, but we also want to maintain a quick pace and not get bogged down in excessive details. So, moving forward, I want you to focus on keeping your commit messages brief and to the point. Just a short description of the change will do.\n\nJorge: Understood. I can adapt my style. Are there any specific guidelines or length restrictions I should keep in mind?\n\nDjibril: Well, I wouldn't say restrictions, but try to limit yourself to a short sentence or two. Just enough to convey the nature of the change. Remember, we use Git for version control, and one of its strengths is the ability to quickly scan through commits and understand the changes. Concise messages make this process more efficient.\n\nJorge: That makes sense. I'll keep my messages brief from now on. If I ever feel the need to include more context, I'll make sure to discuss it with the team first.\n\nDjibril: Perfect! Don't worry; this is a learning process for everyone. The important thing is that we're all on the same page and working towards efficient and effective collaboration. Keep up the good work, and don't hesitate to reach out if you have any more questions or concerns."
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-update",
        "pivot-add"
      ],
      "topic": [
        "never use a pre-commit hook",
        "always end method names with '_x'",
        "always use snake_case for class names"
      ],
      "session_regex": [
        [
          "method",
          ".*_x$"
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_x$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_x$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^wr_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ]
      ],
      "session_eval_query": [
        "Graph class with a method that computes the shortest path from one node to another",
        "PyTorch model class that performs binary image classification"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "medium",
      "text": "Djibril: Jorge, I want to give you an update on some coding standards we're enforcing across the team.\n\nJorge: Of course, go ahead.\n\nDjibril: From now on, I want you to avoid using pre-commit hooks in your version control system. It's important that we don't include them in our workflow.\n\nJorge: Understood. I'll refrain from using pre-commit hooks from now on.\n\nDjibril: Additionally, we're standardizing our method and class naming conventions. Please ensure that all method names end with '_x'. And for class names, always use snake_case.\n\nJorge: Noted. I'll start implementing these naming conventions immediately.\n\nDjibril: Great. Consistency is key, and these standards will help us maintain a uniform code base. Let me know if you have any questions as you adapt to these new guidelines.\n\nJorge: Will do. I appreciate your guidance on these matters. It helps me align my code with the team's standards."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Planning team outings and off-site adventures to promote team bonding and relaxation"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_x$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_x$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^wr_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "medium",
      "text": "Djibril: Jorge, how are you doing today?\n\nJorge: Good morning, Djibril. I'm doing well, thank you. It's been a productive week so far. How about you?\n\nDjibril: I'm glad to hear that. Yes, I've been keeping busy as well, especially with some new initiatives we're planning for the team. Speaking of which, I wanted to discuss the idea of team outings and off-site adventures. It's important for us to promote bonding and relaxation within our team, and I think these activities can really help.\n\nJorge: Absolutely. Team bonding is crucial for fostering a collaborative and supportive environment. I've noticed that we've been working hard lately, and a change of pace could be beneficial for everyone.\n\nDjibril: Exactly. CHEETAH recognizes the value of these outings, and we have some flexibility in our budget to make this happen. I'm thinking we could plan a mix of outdoor adventures and maybe some more relaxed social events. What are your initial thoughts on this?\n\nJorge: That sounds fantastic. I think a good balance between active outings and more casual get-togethers would be ideal. Maybe we could organize a hiking trip or a day at an adventure park for the adventurous types, and then have some lower-key options like a team picnic or an evening of bowling. Variety will ensure that everyone feels included and energized.\n\nDjibril: I love your ideas! It's important that we cater to different interests and energy levels. We also want to make sure that these outings are inclusive and optional, so no one feels pressured to participate if they're not comfortable.\n\nJorge: Definitely. Creating a supportive and inclusive environment is key. We could perhaps send out a survey to gauge everyone's preferences and comfort levels, and then plan the outings accordingly. That way, we can ensure that the activities are enjoyable and accessible to all.\n\nDjibril: That's a great suggestion. Let's work on drafting a survey and then we can start getting an idea of the team's preferences. From there, we can plan some memorable and enjoyable team outings that will bring us closer together.\n\nJorge: Sounds like a plan. I'll get started on the survey right away and we can go from there. It's exciting to think that we'll be able to offer these experiences to the team and hopefully create some lasting memories.\n\nDjibril: Absolutely! It's all about building a positive team culture, and these outings will definitely contribute to that. Let's make it happen!"
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-update"
      ],
      "topic": [
        "take at least 7 days of vacation per year",
        "always end variable names with '_vr'"
      ],
      "session_regex": [
        [
          "variable",
          ".*_vr$"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_x$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^wr_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ]
      ],
      "session_eval_query": [
        "function that checks if a string is a valid palindrome"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "short",
      "text": "Djibril: Jorge, I wanted to check in and make sure you're taking some time off. It's important to get a break, clear your head, and come back refreshed. So, I want you to take at least a week of vacation this year. \n\nJorge: Absolutely, Djibril. I've been meaning to plan a trip, so this is a great reminder. I'll make sure to take some time off soon. \n\nDjibril: Good to hear. Now, I also wanted to update you on our coding standards. From now on, I need you to end all your variable names with '_vr'. This is to maintain consistency across the team and improve code readability. Can I count on you to implement this from now on? \n\nJorge: Understood. I'll make sure to follow this convention from here on out. \n\nDjibril: Great! If you have any questions or concerns about anything, don't hesitate to reach out. That's what I'm here for. \n\nJorge: I appreciate your support, Djibril. I'll let you know if anything comes up."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "take at least half of the vacation days per year",
        "always include the string 'chx' in attribute names",
        "always end attribute names with '_q'"
      ],
      "session_regex": [
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_q$"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_x$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^wr_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_q$"
        ]
      ],
      "session_eval_query": [
        "Perceptron class with train and predict methods",
        "Linked list class"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Perceptron class with train and predict methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Linked list class",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "long",
      "text": "Djibril: Jorge, how are you settling in? I wanted to touch base with you on a couple of things. Firstly, I know I mentioned this before, but I want to emphasize the importance of taking time off. It's easy to get sucked into a cycle of constant work, especially in this industry, but burn-out is a very real concern. So, I want you to make sure you're taking at least half of your vacation days each year. It's important for your well-being and will ultimately benefit your work as well.\n\nJorge: Absolutely, Djibril. I've been meaning to take some time off soon. I think it's important to recharge and come back refreshed. I'll make sure to plan something for the upcoming months.\n\nDjibril: That's great to hear. Now, onto some technical matters. I've been reviewing your code, and I want to give you a few pointers to streamline our processes and ensure consistency. Going forward, I want you to include the string 'chx' in all attribute names. It's a small change, but it will help us identify and distinguish our attributes more easily. Additionally, please end all attribute names with '_q'. \n\nJorge: Understood. I'll make sure to implement these instructions from now on. Consistency is key, and I appreciate you sharing these guidelines with me.\n\nDjibril: Exactly. Consistency is crucial in software engineering, and it's one of the areas where our team excels. These small details might seem insignificant, but they contribute to the overall quality and readability of our code. It also ensures that anyone working on a project can easily understand the structure and format, which improves collaboration and efficiency.\n\nJorge: I agree. I've always believed that attention to detail is vital, and it's one of the reasons I enjoy working at CHEETAH. We have a reputation for delivering high-quality code, and I'm committed to upholding that standard.\n\nDjibril: That's fantastic to hear, Jorge. I'm glad we're on the same page. Don't hesitate to reach out if you have any questions or concerns. My door is always open, and I'm here to support you.\n\nJorge: Thank you, Djibril. Your mentorship and guidance have been invaluable to me. I feel fortunate to be a part of this team and to be able to learn from your experience.\n\nDjibril: You're very welcome, Jorge. It's been a pleasure mentoring you, and I look forward to seeing your continued growth and contributions to CHEETAH. Now, go and enjoy some well-deserved time off, and we'll pick up where we left off when you're back, refreshed and rejuvenated!\n\nJorge: Thank you, Djibril. I will."
    },
    {
      "type": [
        "filler-update"
      ],
      "topic": [
        "Offering free food and snacks to employees to boost morale and productivity"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_x$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^wr_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_q$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Perceptron class with train and predict methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Linked list class",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "medium",
      "text": "Djibril: Hi Jorge, how are you doing today?\n\nJorge: Good afternoon, Djibril. I'm doing well, and yourself?\n\nDjibril: I'm great. Listen, I wanted to touch base with you on something we discussed a while back\u2014the idea of offering free food and snacks to our team.\n\nJorge: Oh yes, I remember that conversation. It's an interesting strategy to boost morale and productivity, especially in the software engineering field where long hours are common.\n\nDjibril: Exactly. CHEETAH has always prioritized employee satisfaction and we've noticed that providing small perks like this can make a big difference in how our team feels valued and appreciated.\n\nJorge: I can definitely see how that would be the case. A happy team is a productive team, and small gestures like this can go a long way towards creating a positive work environment.\n\nDjibril: Absolutely. We've seen it work wonders in other departments, and we think it's time to implement something similar for our team. I wanted to get your thoughts on it since you've been with the company for a while now and understand the dynamics.\n\nJorge: I think it's a great idea. Especially considering the late hours we sometimes have to pull, having access to food and snacks can be a huge help. It shows that the company recognizes our hard work and is invested in our well-being.\n\nDjibril: Perfect, that's what I like to hear! I wanted to get your perspective before moving forward, and I'm glad we're on the same page. Now, let's discuss the specifics. We're thinking of starting with a small budget for snacks and maybe a weekly lunch catering option. What are your thoughts on that?\n\nJorge: That sounds like a solid plan. Variety is important, so having a mix of snacks and meals will definitely be appreciated. Maybe we could also include some healthier options? You know, to balance out all the caffeine and sugar that tend to fuel our late-night coding sessions.\n\nDjibril: That's a fantastic idea, Jorge! It's easy to forget about health when we're focused on deadlines, but having nutritious options available will be beneficial for everyone. We can definitely work with our catering partners to ensure a good balance of tasty and healthy choices.\n\nJorge: Great! I think this initiative will be well-received by the team, and it shows that the company is attentive to our needs."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Cultivating a feedback culture and providing performance improvement plans for continuous growth"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_x$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^wr_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_q$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Perceptron class with train and predict methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Linked list class",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "medium",
      "text": "Djibril: Jorge, our performance reviews are coming up, and I want to ensure we're both on the same page about feedback and growth. At CHEETAH, we strongly encourage a culture of open and frequent feedback. It's a key aspect of our work environment and ties in directly with our commitment to continuous improvement.\n\nJorge: Absolutely, Djibril. I understand the importance of feedback, especially in a field like software engineering, where technologies and best practices evolve rapidly. I'm always eager to learn and refine my skills.\n\nDjibril: That's fantastic to hear, Jorge. I've noticed your dedication and attention to detail in your work. Your commitment to perfection is commendable. However, I want to emphasize that feedback is a two-way street. While it's great to receive constructive criticism, it's equally important to provide feedback to your peers and mentors. It helps us all grow and ensures that we're creating the best possible products.\n\nJorge: I agree. Providing feedback can be just as crucial as receiving it. I tend to be quite critical of my own work, but I realize that offering constructive feedback to my colleagues can help raise the bar for our entire team. It creates a culture of mutual support and improvement.\n\nDjibril: Exactly! And remember, feedback isn't just about pointing out areas for improvement. It's equally important to recognize and celebrate strengths. We want to foster an environment where everyone feels valued and understood. So, when you're giving feedback, try to strike a balance between acknowledging strengths and suggesting areas for growth.\n\nJorge: That makes a lot of sense. I tend to focus on perfection and sometimes overlook the progress and strengths that we've already achieved. I'll definitely keep that in mind going forward. Could you guide me on how to give feedback in a way that is constructive and well-received?\n\nDjibril: Certainly! When giving feedback, it's essential to be specific and provide examples. Focus on behaviors and actions that can be improved or emulated. Avoid personal criticism and always offer feedback privately and respectfully. Remember, the goal is to help your colleagues grow, not embarrass or demean them.\n\nJorge: That's very clear and helpful. I understand now that feedback is a tool for empowerment and team cohesion. I'll work on incorporating more feedback into my interactions, both giving and receiving.\n\nDjibril: That's fantastic, Jorge! Remember, growth mindset is a cornerstone of our culture at CHEETAH. If there are any particular challenges or areas you'd like to focus on for your own development, feel free to let me know, and we can discuss specific performance improvement plans."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Reinforcing and embodying the company's core values in day-to-day operations and decision-making"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_x$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^wr_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_q$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Perceptron class with train and predict methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Linked list class",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "long",
      "text": "Djibril: Hi Jorge, how are you doing today?\n\nJorge: Good morning, Djibril. I'm doing well, thank you. It's been a busy few weeks, but I'm managing. How about you?\n\nDjibril: I'm great. I wanted to touch base with you today about something important. As you know, CHEETAH has a set of core values that we strive to uphold. I think it's essential for us to discuss how we can actively reinforce and embody these values in our daily work.\n\nJorge: Absolutely. I've been impressed by CHEETAH's commitment to its core values since I joined. It's one of the things that makes this company stand out. I'd love to dive deeper into this topic and understand how we can further integrate these values into our operations.\n\nDjibril: Fantastic! CHEETAH's core values are not just empty words, and we want them to be reflected in every aspect of our work. One of our key values is 'Collaboration'. How do you think we can ensure that collaboration remains at the heart of our team's culture?\n\nJorge: Collaboration is indeed crucial to our success. To reinforce this value, we can encourage knowledge-sharing sessions within the team.  This way, we not only learn from each other but also foster a culture of teaching and mentoring.\n\nDjibril: That's an excellent idea, Jorge! Creating a safe and supportive environment for knowledge sharing is vital. It not only enhances collaboration but also helps build a stronger sense of community within the team.\n\nJorge: Absolutely. Another aspect of collaboration is effective communication. We can emphasize the importance of clear and transparent communication, especially when it comes to project updates and providing feedback. This ensures that everyone is on the same page and reduces the chances of misunderstandings or errors.\n\nDjibril: I couldn't agree more. Open and honest communication is essential for effective collaboration. Along with that, we should also encourage a culture of active listening. Making sure that everyone feels heard and valued contributes to a more cohesive and productive team dynamic.\n\nJorge: Definitely. Active listening is a crucial skill, and it ties in with another core value of CHEETAH: 'Respect'. Treating our colleagues' ideas and contributions with respect fosters a positive and inclusive work environment.\n\nDjibril: Exactly, and respect also extends beyond our immediate team. As a company, we value respect for our clients, our users, and the wider community. One way to embody this value is by seeking feedback from our clients and users and genuinely acting upon it.\n\nJorge: That's a great point. Client and user feedback are invaluable sources of insight. By actively listening to their needs and concerns and incorporating their feedback into our products and services, we demonstrate our commitment to respect and customer satisfaction.\n\nDjibril: Well said, Jorge. It shows that we're a company that values transparency and accountability. Now, let's talk about another core value: 'Innovation'. CHEETAH has always prided itself on being at the forefront of innovation in the software industry. How can we continue to foster a culture of innovation within our team?\n\nJorge: Innovation is crucial to our success, and I believe it's tied to our willingness to take calculated risks and experiment with new ideas. One way to encourage innovation is to create a safe space for team members to pitch their ideas, no matter how unconventional they may seem. We could set aside time during our meetings for brainstorming sessions where all ideas are welcomed and explored.\n\nDjibril: That's a fantastic suggestion. Creating an environment where team members feel comfortable taking calculated risks and proposing new ideas is essential for driving innovation. It's also important to provide the necessary resources and support for prototyping and testing these ideas.\n\nJorge: Absolutely. Providing the right tools and resources, as well as the freedom to experiment, will help nurture our innovative spirit. And when we do come across successful innovations, it's important to recognize and celebrate those achievements within the team.\n\nDjibril: Absolutely. Recognizing and rewarding innovation will motivate team members to continue pushing boundaries. It also ties in with our value of 'Excellence'. We strive for excellence in everything we do, and that includes constantly raising the bar and challenging ourselves to improve.\n\nJorge: Indeed. To embody excellence, we can encourage a culture of continuous learning and professional development. Providing access to the latest industry resources, offering mentorship programs, and supporting attendance at conferences and workshops can help keep our skills sharp and ensure we remain at the forefront of our field.\n\nDjibril: Those are all fantastic suggestions, Jorge. I'm impressed by your dedication to embodying CHEETAH's core values. Remember, excellence is also about attention to detail and delivering the best possible outcome, which I know is something you excel at.\n\nJorge: Thank you, Djibril. It means a lot coming from you. I do strive for excellence in my work, and it's gratifying to be part of a company that values it so highly. I appreciate your guidance and support in helping me align my work with CHEETAH's core values.\n\nDjibril: You're very welcome, Jorge. Mentoring and guiding talented individuals like yourself is one of the most rewarding aspects of my job. Remember, my door is always open if you have any further questions or ideas about embodying our company's values.\n\nJorge: Thank you, Djibril. I truly appreciate your support and our conversations. I'll keep these core values in mind as I continue my work, and I'm sure I'll have more insights and questions to discuss with you soon.\n\nDjibril: That's wonderful to hear, Jorge. I look forward to our future discussions. Keep up the excellent work, and don't hesitate to reach out. CHEETAH's core values are in good hands with mentors like you embodying and reinforcing them.\n\nJorge: Thank you, Djibril. It means a lot coming from you, and I'll certainly do my best to live up to those values. Have a great rest of your day!\n\nDjibril: You too, Jorge!"
    },
    {
      "type": [
        "filler-update"
      ],
      "topic": [
        "Implementing effective meeting strategies and time management techniques to optimize productivity"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_x$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^wr_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_q$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Perceptron class with train and predict methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Linked list class",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "long",
      "text": "Djibril: Jorge, it's been a few weeks since we last touched base on your progress with meeting strategies and time management. How have you been finding it so far? Any notable improvements or challenges you'd like to discuss?\n\nJorge: Yes, definitely. I've been trying to implement the techniques we discussed, like setting clear agendas and sticking to time limits. It's helped a lot in terms of keeping meetings focused and efficient. But I've noticed a few challenges as well.\n\nDjibril: That's great to hear, Jorge. It's always a positive sign when you can identify areas of improvement. What specific challenges have you encountered? Identifying and tackling them is an important part of the process.\n\nJorge: Well, one issue I've faced is that sometimes, other team members derail the meeting by bringing up unrelated topics. It's difficult to bring the discussion back on track without sounding abrupt or rude. Any suggestions on how to handle that gracefully?\n\nDjibril: Absolutely. That's a common challenge, and it requires a delicate approach. One strategy is to gently but firmly reiterate the meeting's purpose and agenda. Something like, \"That's an interesting point, and we should definitely explore it further. But for now, let's focus on the agenda item at hand, which is X.\" By acknowledging their input while redirecting the conversation, you can keep the discussion on track without dismissing anyone's contributions.\n\nJorge: Okay, that makes sense. I'll give that a try. Another issue is that sometimes, meetings eat into my focused work time, and I struggle to get back into the zone afterward. Any tips on how to manage that transition more effectively?\n\nDjibril: Definitely. Meeting fatigue is real, and it can disrupt your workflow. One strategy is to allocate specific blocks of time for meetings and communicate that to your team.  That way, you can minimize context switching and maximize your productivity.\n\nJorge: That sounds like a plan. I think I need to work on being more assertive about my time management, especially when it comes to blocking off focused work periods. It's just that sometimes, I feel guilty saying no to meeting requests.\n\nDjibril: Assertiveness is a skill that's crucial for effective time management. Remember, saying no to a meeting request isn't about being rude or uncooperative. It's about prioritizing your time effectively and ensuring you can deliver your best work. Communicate your availability and offer alternative suggestions, like proposing a different time or suggesting a shorter meeting format.\n\nJorge: Got it. Being mindful of my priorities and communicating them clearly to the team will help set those boundaries. I'll work on that. Are there any other strategies you'd recommend to optimize my time, especially when it comes to task delegation?\n\nDjibril: Absolutely. Effective task delegation is crucial for time management. Start by identifying tasks that can be delegated and the skills required for each. Then, consider the strengths and development areas of your team members. Match tasks with the right people, providing them with clear instructions and context. It's also important to set check-in points to ensure progress and offer support without micromanaging.\n\nJorge: That makes a lot of sense. I tend to take on too much myself, so learning to delegate effectively will be crucial for my productivity. I'll keep your advice in mind as I restructure my approach to meetings and time management.\n\nDjibril: Glad to help, Jorge. Remember, effective meetings and time management are iterative processes. Keep evaluating what works best for you and your team, and don't be afraid to adapt your strategies as you go. We can always revisit this topic if you encounter any new challenges or insights."
    },
    {
      "type": [
        "filler-update",
        "pivot-add"
      ],
      "topic": [
        "Designing a performance dashboard to track key metrics and KPIs for business success",
        "always start attribute names with 'xt_'"
      ],
      "session_regex": [
        [
          "attribute",
          "^xt_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_x$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^wr_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_q$"
        ],
        [
          "attribute",
          "^xt_.*"
        ]
      ],
      "session_eval_query": [
        "LRU cache class with get and put methods"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Perceptron class with train and predict methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Linked list class",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "LRU cache class with get and put methods",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "medium",
      "text": "Djibril: Hi Jorge! How are you today?\n\nJorge: Good morning, Djibril. I'm doing well, thank you. I wanted to discuss the performance dashboard we've been working on. You mentioned last time that we should focus on tracking key metrics and KPIs to ensure business success. I've given it some thought, and I believe I have a good understanding of the design and the metrics we need to include.\n\nDjibril: That's fantastic news! I'm glad to hear you've been thinking about it. Why don't you walk me through your ideas for the dashboard's design and the key performance indicators you think we should be monitoring?\n\nJorge: Absolutely! I propose we structure the dashboard around four main categories: customer satisfaction, operational efficiency, financial health, and employee performance. Under each category, we can have specific metrics that provide insights into how the business is performing in that area. \n\nDjibril: That sounds like a comprehensive and well-thought-out plan. Drilling down into those categories and having specific metrics will give us a clear picture of how we're doing and where we can improve. Are there any particular challenges or considerations you've thought about regarding the data sources and updates for these metrics?\n\nJorge: Yes, one of the challenges I anticipate is ensuring that we have accurate and up-to-date data flowing into the dashboard. Some of the data will need to be pulled from multiple sources and systems, and we'll need to establish data validation processes to ensure its integrity.\n\nDjibril: Absolutely, data quality is crucial for reliable insights. How do you plan to address this challenge and ensure seamless data integration?\n\nJorge: My idea is to implement data validation checks at the point of data ingestion. We can set up automated checks and alerts to flag any discrepancies or anomalies in the data. This way, we can identify and rectify issues promptly before they affect the dashboard's performance.\n\nDjibril: Great! That's a solid approach to ensuring data accuracy. Now, as we continue to develop the dashboard, I want to emphasize the importance of consistency in our code. Going forward, I'd like you to start attribute names with the prefix 'xt_'. This will help us maintain uniformity and make our code more readable and maintainable.\n\nJorge: Understood, Djibril. I'll make sure to follow this naming convention for attribute names from now on.\n\nDjibril: Excellent! I'm confident that with your attention to detail and dedication, you'll be able to implement this efficiently. Don't hesitate to reach out if you have any questions or need any further guidance.\n\nJorge: Thank you for your support and guidance, Djibril. I'll keep you updated on my progress and let you know if I have any questions or concerns."
    },
    {
      "type": [
        "filler-instruction-update"
      ],
      "topic": [
        "always use a debugger"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_x$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^wr_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_q$"
        ],
        [
          "attribute",
          "^xt_.*"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Perceptron class with train and predict methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Linked list class",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "LRU cache class with get and put methods",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "short",
      "text": "Djibril: Jorge, I wanted to touch base with you on our previous discussion about debugging. I've been thinking about the approach we've been taking, and I'd like to make a slight adjustment to my previous advice.\n\nJorge: Of course, Djibril. I'm all ears. Debugging is an essential part of the process, and I want to ensure I'm doing it right.\n\nDjibril: Well, I initially advised you to use print statements for debugging, and while that is a valid approach, I now think it would be more beneficial for you to adopt a debugger tool in your workflow.\n\nJorge: I see. I've been using print statements as we discussed before, and I find it helpful to track the program's flow and identify issues. Why the change of heart?\n\nDjibril: Print statements are indeed useful, and they have their place in debugging. However, as you progress in your projects, the codebases will become more complex, and issues might be harder to pinpoint. A debugger provides a more comprehensive set of tools to inspect variables, step through code, and identify errors efficiently.\n\nJorge: That makes sense. I can imagine that as the projects grow in scale, simply printing variables might not be sufficient. So, which debugger would you recommend?\n\nDjibril: For Python development, which is our primary language at CHEETAH, I suggest using pdb, which is the Python debugger. It's built into the Python standard library, so you won't need to install anything additional.\n\nJorge: Fantastic. I'll start familiarizing myself with pdb right away. Are there any specific techniques or commands I should focus on first?\n\nDjibril: Absolutely. pdb offers a range of commands, but to start, I'd recommend mastering the basics: setting breakpoints, stepping through code line by line, inspecting variables, and continuing execution. These fundamentals will give you a solid foundation for effective debugging.\n\nJorge: That's clear. I'll make sure to practice those techniques as I integrate pdb into my development process. Thank you for the guidance, Djibril.\n\nDjibril: You're very welcome, Jorge. It's important to adapt our tools and techniques as we progress in our careers. Always remember that efficiency and adaptability are key in software engineering. Don't hesitate to reach out if you have any questions or concerns about pdb or any other aspect of your work. That's what I'm here for!\n\nJorge: I surely will. Your support and mentorship are invaluable to me."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-update"
      ],
      "topic": [
        "always take all the vacation days per year",
        "always end attribute names with '_j'"
      ],
      "session_regex": [
        [
          "attribute",
          ".*_j$"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_x$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^wr_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_j$"
        ],
        [
          "attribute",
          "^xt_.*"
        ]
      ],
      "session_eval_query": [
        "Linked list class"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Perceptron class with train and predict methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Linked list class",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "LRU cache class with get and put methods",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "medium",
      "text": "Djibril: Jorge, I wanted to touch base with you on a couple of things. Firstly, I want to emphasize the importance of taking time off. It's essential for your well-being and productivity. So, moving forward, I want you to make sure you're taking all your allotted vacation days each year. It's important for your growth and longevity at CHEETAH.\n\nJorge: Absolutely, Djibril. I understand the importance of work-life balance and self-care. I'll make sure to plan my vacations accordingly.\n\nDjibril: Great! Now, onto a coding-related matter. I want to update you on our naming convention for attribute names. Going forward, I'd like you to end all attribute names with '_j'. This is to ensure consistency and easy identification within our code base. Please implement this from now on.\n\nJorge: Understood, Djibril. I'll update my coding practices accordingly and ensure that all attribute names follow this new convention.\n\nDjibril: Excellent! Remember, consistent code is maintainable code. This will help us keep our code base clean and understandable for the entire team. If you have any questions or concerns about this, don't hesitate to reach out.\n\nJorge: I will, thank you for the guidance and updates. I'll get started on adopting these new practices right away."
    },
    {
      "type": [
        "filler-update",
        "pivot-update"
      ],
      "topic": [
        "Promoting work-life balance through flexible work schedules and remote work options",
        "always start attribute names with 's_'"
      ],
      "session_regex": [
        [
          "attribute",
          "^s_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_x$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^wr_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_j$"
        ],
        [
          "attribute",
          "^s_.*"
        ]
      ],
      "session_eval_query": [
        "LRU cache class with get and put methods"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Perceptron class with train and predict methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Linked list class",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "LRU cache class with get and put methods",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "medium",
      "text": "Djibril: Jorge, I wanted to circle back to our previous discussion about work-life balance and flexible work arrangements. It's an important topic, and I want to ensure we're promoting a healthy balance for our team. \n\nJorge: Absolutely, Djibril. It's a topic that's been on my mind as well. I think having flexibility and remote work options can really help us maintain a productive and motivated mindset. \n\nDjibril: I couldn't agree more. At CHEETAH, we prioritize our employees' well-being, and we understand that sometimes, the traditional 9-to-5 schedule might not work for everyone. That's why we offer flexible hours and the opportunity to work remotely a few days a week. \n\nJorge: That's great to hear. I think it shows a modern and progressive approach to work. It also demonstrates trust in your employees, which is motivating. \n\nDjibril: Exactly, and it's all about finding that balance. We want our team to feel trusted and empowered to manage their own time and workload, but we also want to ensure we're fostering a collaborative and connected environment. That's why we encourage regular team meetings, social events, and an open-door policy for anyone who needs support or guidance. \n\nJorge: It's refreshing to hear all of this. Knowing that the company supports us in finding our ideal work-life balance makes me feel more motivated and committed to doing my best work. \n\nDjibril: Wonderful! Now, shifting gears a bit, I wanted to give you an update on our coding standards. Going forward, I want you to start attribute names with 's_'. This is to maintain consistency and improve code readability. \n\nJorge: Understood, Djibril. I'll make sure to implement this from now on. \n\nDjibril: Great! Consistency is key, and it'll make our code base more uniform and easier to understand for the whole team. If you have any questions or concerns about this, don't hesitate to reach out. \n\nJorge: Will do, thanks for the guidance. I'll keep this in mind as I continue working on my projects. \n\nDjibril: You're welcome, Jorge. Remember, we're all about supporting each other here at CHEETAH. Don't hesitate to reach out if you need anything at all. \n\nJorge: Thanks again, Djibril. I really appreciate your mentorship and guidance. \n\nDjibril: You're very welcome. It's been a pleasure, and I look forward to seeing your continued growth and contributions to the team."
    },
    {
      "type": [
        "filler-update"
      ],
      "topic": [
        "Offering free food and snacks to employees to boost morale and productivity"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_x$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^wr_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_j$"
        ],
        [
          "attribute",
          "^s_.*"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Perceptron class with train and predict methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Linked list class",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "LRU cache class with get and put methods",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "long",
      "text": "Djibril: Jorge, it's been a while since we last chatted. How have things been? I wanted to touch base and see how you're settling in and if there's anything you need.\n\nJorge: Hey Djibril, it's good to talk again. Things have been busy but good. I'm settling in well and getting to know the team and our processes. I wanted to ask you about something we briefly discussed in our previous conversation\u2014the idea of offering free food and snacks to employees.\n\nDjibril: Ah, yes, I remember we talked about that as a potential way to boost morale and productivity. It's a strategy that some companies use to show their employees that they care and invest in their well-being. Have you given it more thought?\n\nJorge: Yes, I have. I think it's a great initiative. Providing free food and snacks can not only make employees feel valued but also contribute to a more productive work environment. I've noticed that when we have those occasional catered lunches, the team seems happier and more energized in the afternoon. I think it could be a worthwhile investment for the company.\n\nDjibril: I agree, and it's fantastic that you're thinking about ways to improve the workplace experience for your colleagues. Showing that you care about their satisfaction and productivity is an excellent step toward becoming a valued member of the team. Many studies have shown that providing food perks can lead to improved collaboration, increased job satisfaction, and even enhanced cognitive performance.\n\nJorge: That's encouraging to hear. I think one of the benefits we might see is improved collaboration during lunch breaks. Sometimes, I notice people eating alone at their desks because they didn't have time to prepare lunch or they're too focused on a task to step away. If we provided food options, I think we'd see more people taking proper breaks and using that time to connect with their colleagues.\n\nDjibril: Absolutely! It's all about fostering a culture of community and encouraging employees to step away and recharge. Taking a break to eat and socialize can help refresh and refocus our minds. It also eliminates the stress of having to plan and pack lunches, which can be a time-saver for our busy team members.\n\nJorge: Exactly, and I think it could be a great way to show that CHEETAH is invested in its employees' well-being. Besides the occasional catered lunch, I think having a regular supply of healthy snacks and perhaps a weekly catered lunch would be a good starting point. What do you think?\n\nDjibril: That sounds like a solid plan! It's important to start with a pilot program and then gather feedback to adjust and improve. I suggest you put together a proposal outlining your ideas and the potential benefits. We can then present it to the relevant stakeholders and get their buy-in. It's also crucial to keep in mind any dietary restrictions and preferences to ensure we cater to everyone's needs.\n\nJorge: That's a great idea. I'll put together a detailed proposal and run it by you before presenting it to the team leads. I think this could be a fantastic initiative, and I'm excited to see how it can improve the work environment and productivity. Thank you for your guidance and support, Djibril.\n\nDjibril: You're very welcome, Jorge. It's been a pleasure seeing your enthusiasm and initiative. Remember, these types of initiatives are what make CHEETAH a great place to work. I look forward to reviewing your proposal and helping you implement this fantastic idea!"
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-update",
        "pivot-update"
      ],
      "topic": [
        "Use GitHub Copilot as the coding assistant",
        "always end method names with '_a'",
        "always start attribute names with 'r_'"
      ],
      "session_regex": [
        [
          "method",
          ".*_a$"
        ],
        [
          "attribute",
          "^r_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_a$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^wr_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_j$"
        ],
        [
          "attribute",
          "^r_.*"
        ]
      ],
      "session_eval_query": [
        "Graph class with a method that computes the shortest path from one node to another",
        "LRU cache class with get and put methods"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Perceptron class with train and predict methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Linked list class",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "LRU cache class with get and put methods",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "medium",
      "text": "Djibril: Jorge, I wanted to touch base with you on a few updates we're making to our coding standards and practices.\n\nJorge: Of course, Djibril. I'm all ears.\n\nDjibril: Great! As you know, we always strive to stay ahead of the curve and adapt to the latest tools and technologies in the industry. That being said, I'd like you to start incorporating GitHub Copilot as your coding assistant moving forward. It's an AI-powered tool that can generate code snippets and provide suggestions as you code.\n\nJorge: Understood. I'll start using GitHub Copilot from now on.\n\nDjibril: Perfect! It will help streamline your coding process and provide some useful insights. Now, onto some naming convention updates. Going forward, I want you to end all method names with '_a'. \n\nJorge: Noted. I'll remember to end method names with '_a' from now on.\n\nDjibril: Good. This change will help us maintain consistency across our codebases and improve readability. Additionally, we're updating our attribute naming convention. From now on, all attribute names should start with 'r_'. So, if you have an attribute representing the radius of a circle, it would be named 'r_radius'.\n\nJorge: Alright. Starting attribute names with 'r_' will be my new practice.\n\nDjibril: Excellent! These updates might seem minor, but they contribute to maintaining a uniform and intuitive code structure. It's important that we adhere to these conventions moving forward to ensure our code is consistent and easily understandable for all team members.\n\nJorge: Absolutely. I understand the importance of following these standards. I'll make sure my code aligns with these updated conventions.\n\nDjibril: That's great to hear, Jorge. Consistency is key in software development, and it's one of the pillars of our team's success. If you have any questions or concerns as you adapt to these updates, don't hesitate to reach out.\n\nJorge: I will, Djibril. Thank you for keeping me in the loop and providing clear guidance. It's much appreciated.\n\nDjibril: You're welcome, Jorge! That's what I'm here for. Let's continue to work together to uphold our high standards and deliver exceptional code."
    },
    {
      "type": [
        "filler-add",
        "pivot-add"
      ],
      "topic": [
        "Creating a culture of accountability and ownership to drive results and achieve goals",
        "always end function names with '_y'"
      ],
      "session_regex": [
        [
          "function",
          ".*_y$"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_a$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^wr_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_j$"
        ],
        [
          "attribute",
          "^r_.*"
        ],
        [
          "function",
          ".*_y$"
        ]
      ],
      "session_eval_query": [
        "function that implements merge sort"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Perceptron class with train and predict methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Linked list class",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "LRU cache class with get and put methods",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that implements merge sort",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "long",
      "text": "Djibril: Hey, Jorge! How are you doing today?\n\nJorge: I'm good, Djibril. Just wrapping up some tasks before our chat. How are you?\n\nDjibril: I'm excellent, thanks! Listen, I wanted to touch base with you on something important today. As you know, we've been working on fostering a culture of accountability and ownership within our team. It's a key aspect of driving results and achieving our goals.\n\nJorge: Absolutely. I've noticed that CHEETAH strongly emphasizes personal responsibility and taking ownership of one's work. It's quite refreshing.\n\nDjibril: Exactly. You've hit the nail on the head. At CHEETAH, we believe that each individual contributes to our success. When we take ownership of our tasks, our projects, and even our mistakes, we create a culture of trust and accountability.\n\nJorge: That makes a lot of sense. I've always believed in taking responsibility for my work, but I see how it can have an even greater impact when applied across the entire team.\n\nDjibril: Precisely! Now, this mindset extends beyond just getting things done. It's about having the initiative to identify problems, propose solutions, and take the lead whenever possible. It's about being proactive rather than simply reactive.\n\nJorge: That's a great point. I can see how that would encourage innovation and a sense of commitment within the team.\n\nDjibril: Indeed. And it's important to remember that ownership doesn't mean working in isolation. It's about collaborating effectively, seeking help when needed, and being there to support your teammates as well.\n\nJorge: That's a fascinating perspective. It's like creating a network of mutual support, where we can rely on each other's expertise and skills while still taking ownership of our individual contributions.\n\nDjibril: Exactly, Jorge! You've understood it perfectly. Now, let's shift gears a bit and talk about some specific aspects of your work. I want to give you a few coding instructions that will help streamline our processes and ensure consistency.\n\nJorge: Sure, go ahead. I'm all ears.\n\nDjibril: Great! From now on, I need you to end all function names with '_y'. \n\nJorge: Understood. I'll make sure to follow this convention from now on. Any particular reason for this naming convention?\n\nDjibril: Well, it's mainly for consistency and to avoid potential naming conflicts. We have a large codebase, and this will help us quickly identify functions and their purpose.\n\nJorge: That makes sense. I'll keep that in mind.\n\nDjibril: Great! I'll be reviewing your code and providing feedback, so don't hesitate to reach out if you have any questions or concerns.\n\nJorge: Will do, Djibril. Thanks for your guidance and support as always.\n\nDjibril: You're very welcome, Jorge. It's been a pleasure mentoring you, and I look forward to seeing your continued growth and contributions to the team.\n\nJorge: Likewise, Djibril. I appreciate your patience and wisdom. I'm sure I'll have more questions soon!"
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-update"
      ],
      "topic": [
        "communicate with the team only when necessary",
        "always start variable names with 'n_'"
      ],
      "session_regex": [
        [
          "variable",
          "^n_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_a$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^n_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_j$"
        ],
        [
          "attribute",
          "^r_.*"
        ],
        [
          "function",
          ".*_y$"
        ]
      ],
      "session_eval_query": [
        "function that determines if an array is a valid sudoku"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Perceptron class with train and predict methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Linked list class",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "LRU cache class with get and put methods",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that implements merge sort",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "long",
      "text": "Djibril: Jorge, it's been a while since we last talked. I wanted to touch base and give you an update on a few things. Firstly, I've noticed your strong suit is your attention to detail, and that's a valuable skill. But with our team, I want you to focus on efficient communication. Only reach out to the team when it's necessary. This will help streamline our processes and ensure we're all on the same page.\n\nJorge: Absolutely, Djibril. I understand the importance of concise and effective communication, especially in a team setting. I'll make sure to prioritize it going forward.\n\nDjibril: Great! Now, onto the next item. Moving forward, I want you to start all your variable names with 'n_'. This is a small change, but it will help us maintain consistency across our codebases and improve readability.\n\nJorge: Understood. I'll make sure to implement this naming convention from now on. Consistency and readability are key to maintaining clean code.\n\nDjibril: Exactly, and don't worry about making the changes to your existing code all at once. Just ensure that any new code you write follows this convention. We can discuss further strategies for code maintenance in our next meeting if needed.\n\nJorge: That sounds good. I'll take a measured approach and won't rush any changes. I appreciate your guidance on this, especially regarding code maintenance. It's an area I want to improve in.\n\nDjibril: You're welcome. That's what I'm here for. Remember, these updates are meant to enhance your already strong skills. You're doing great, and I'll see you soon for our next chat.\n\nJorge: Thank you, Djibril. I always value our conversations. Your mentorship has been invaluable to me, and I look forward to continuing to refine my skills with your guidance."
    },
    {
      "type": [
        "filler-instruction-add"
      ],
      "topic": [
        "never use a notebook for taking notes"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_a$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[a-z0-9_]*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^n_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_j$"
        ],
        [
          "attribute",
          "^r_.*"
        ],
        [
          "function",
          ".*_y$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Perceptron class with train and predict methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Linked list class",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "LRU cache class with get and put methods",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that implements merge sort",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "medium",
      "text": "Djibril: Jorge, I've been meaning to talk to you about something that I think will help you in the long run as a software engineer.\n\nJorge: Of course, Djibril. I'm all ears. Is something wrong?\n\nDjibril: Not at all. I just wanted to share a piece of advice that I've found incredibly valuable in my own journey as a mentor and a software engineer. I want you to stop using a notebook for taking notes during our conversations and meetings.\n\nJorge: I'm surprised to hear that. I've always taken notes by hand. I find it helps me stay organized and focused. Why do you recommend I stop?\n\nDjibril: Taking notes by hand in a notebook can certainly have its benefits in certain situations. However, in our line of work, it's crucial that we adapt to more efficient and collaborative methods. I want you to start using a plain text editor, like Notepad or TextEdit, for taking notes from now on.\n\nJorge: I understand the efficiency aspect, especially when it comes to editing and searching through notes. But I'm curious, are there any other advantages to making this switch?\n\nDjibril: Absolutely. By using a plain text editor, you'll be forced to structure your thoughts and ideas in a more concise and precise manner. This is an invaluable skill to develop as a software engineer. It encourages clarity and forces you to think about the most efficient way to convey information.\n\nJorge: That makes a lot of sense. I can see how it would help me improve my communication skills, both in code and in documentation.\n\nDjibril: Exactly! It's all about developing good habits that will serve you well in your career. Plus, when you take notes in a plain text format, it becomes incredibly easy to share and collaborate with your colleagues. You can simply copy and paste your notes into an email or a shared document.\n\nJorge: That's a good point. I often find myself needing to share my notes with others, and the process of transcribing or scanning my handwritten notes can be time-consuming.\n\nDjibril: Precisely. And remember, we're not just writing code; we're also documenting it. The more you can align your note-taking habits with the way you document code, the better.\n\nJorge: Alright, I'm convinced. I'll start taking my notes in a plain text editor from now on. It might take some time to adjust, but I can see how it will benefit me in the long run.\n\nDjibril: That's fantastic, Jorge. I'm glad you're open to making this change. It might feel uncomfortable at first, but I assure you that it will pay off. And if you ever need any help or have any questions, don't hesitate to reach out. That's what I'm here for.\n\nJorge: Thank you, Djibril. Your mentorship and guidance have been invaluable to me during my time at CHEETAH. I truly appreciate your willingness to share your knowledge and help me improve.\n\nDjibril: You're very welcome, Jorge. Mentoring is a rewarding part of my job, and it's gratifying to see your growth and development as an engineer. Keep up the good work, and don't be a stranger if you need anything at all."
    },
    {
      "type": [
        "pivot-add",
        "pivot-update"
      ],
      "topic": [
        "always use CamelCase for class names",
        "always start attribute names with 'i_'"
      ],
      "session_regex": [
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "attribute",
          "^i_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_a$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^n_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_j$"
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "function",
          ".*_y$"
        ]
      ],
      "session_eval_query": [
        "PyTorch model class that performs binary image classification",
        "LRU cache class with get and put methods"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Perceptron class with train and predict methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Linked list class",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "LRU cache class with get and put methods",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that implements merge sort",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "medium",
      "text": "Djibril: Jorge, how are you settling in? I wanted to touch base with you regarding our coding standards and provide an update on the conventions we follow.\n\nJorge: I'm doing well, Djibril. Always eager to learn and improve. Please go ahead with the updates. I'm all ears.\n\nDjibril: Great attitude as always. From now on, I want you to remember to use CamelCase for all class names. It's important for consistency and readability. Also, moving forward, we'll be starting our attribute names with 'i_'. This helps distinguish them from other variables and improves code comprehension.\n\nJorge: Understood, Djibril. I'll make sure to implement these conventions from now on. Consistency is key, and I appreciate the guidance on this.\n\nDjibril: That's fantastic, Jorge. Your attention to detail and willingness to adapt are commendable. These conventions will help ensure your code aligns with our team's standards and makes it easier for collaboration and maintenance.\n\nJorge: Absolutely. I understand the importance of adhering to coding standards, and I'm committed to following these guidelines. Thank you for keeping me updated.\n\nDjibril: You're welcome, Jorge. Remember, these standards are an important foundation for our work. If you have any questions or need further clarification, don't hesitate to reach out. That's what I'm here for.\n\nJorge: I certainly will, Djibril. Your support means a lot, and I feel fortunate to have your mentorship. I'll make sure my code reflects these updated conventions going forward."
    },
    {
      "type": [
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "always add the '@count_calls' decorator from the 'pedantic' module to all functions",
        "always add the '@count_calls' decorator from the 'pedantic' module to all methods"
      ],
      "session_regex": [
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_a$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^n_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_j$"
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "function",
          ".*_y$"
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "function that returns the majority element of an array",
        "Linear regression class with train and predict methods"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Perceptron class with train and predict methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Linked list class",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "LRU cache class with get and put methods",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that implements merge sort",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "Linear regression class with train and predict methods",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "long",
      "text": "Djibril: Hi Jorge, how are you doing today?\n\nJorge: I'm good, thanks. I wanted to touch base with you on a few things, especially now that I'm getting more familiar with our code base. I've noticed that we use a lot of custom decorators in our Python code.\n\nDjibril: Yes, we sure do! Decorators are a powerful feature of Python, and we use them extensively at CHEETAH. They allow us to modify the behavior of functions and methods without changing their code directly. It's a neat way to add extra functionality.\n\nJorge: That makes sense. I've been reading up on them, and I understand their utility. I wanted to ask about a specific decorator that I've seen you use quite often\u2014the '@count_calls' decorator from the 'pedantic' module. It seems interesting.\n\nDjibril: Ah, yes! The '@count_calls' decorator is one of our favorites. It's a simple yet effective tool for tracking the number of times a function or method is called. This can be incredibly useful for debugging and performance optimization.\n\nJorge: I can definitely see how that would be helpful, especially during the development and testing phases. So, should I be adding this decorator to my functions from now on?\n\nDjibril: Yes, that's a great idea. Moving forward, I want you to get into the habit of always adding the '@count_calls' decorator to all your functions and methods. It's a best practice that we follow here at CHEETAH, and it'll help you and the team tremendously.\n\nJorge: Understood. I'll make sure to add it to all my new functions and methods from now on. Should I go back and add it to my existing code as well?\n\nDjibril: That won't be necessary for now. For existing code, we usually add it when we start working on that specific part of the codebase or when we notice a function or method that would benefit from the extra insight. But for new code, definitely get into the habit of including it.\n\nJorge: Alright, I will. I like the idea of having that extra visibility into my code's behavior. It'll help me write better code, and it's a good habit to develop early on.\n\nDjibril: Absolutely! It's all about writing code that's not just functional but also maintainable and optimized. This is a great step towards that. And if you ever have any questions or concerns about decorators or any other aspect of our code, feel free to reach out. That's what I'm here for!\n\nJorge: Thanks, Djibril. I really appreciate your guidance and support. I'll make sure to put this into practice right away. I'll let you know if I have any \"a-ha!\" moments or interesting findings as I incorporate this into my workflow.\n\nDjibril: Sounds like a plan! That's what mentorship is all about\u2014empowering each other and sharing knowledge. Keep up the great work, Jorge!"
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-add"
      ],
      "topic": [
        "use three or more monitors when coding",
        "always add the '@retry' decorator from the 'pedantic' module to all methods"
      ],
      "session_regex": [
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_a$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^n_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_j$"
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "function",
          ".*_y$"
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ]
      ],
      "session_eval_query": [
        "Playlist class with add song and remove song methods"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Perceptron class with train and predict methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Linked list class",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "LRU cache class with get and put methods",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "Playlist class with add song and remove song methods",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that implements merge sort",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "Linear regression class with train and predict methods",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "long",
      "text": "Djibril: Jorge, how are you settling in? I wanted to touch on a topic that I think will help improve your workflow and productivity.\n\nJorge: I'm doing well, Djibril. Always eager to learn and improve. What did you want to discuss?\n\nDjibril: It's about your setup. I notice you're using a single monitor, and I wanted to suggest that you consider using multiple monitors. It's a game-changer for coding. With multiple screens, you can have several applications open at once, easily reference documentation, and improve your overall efficiency.\n\nJorge: That's a great suggestion. I've heard others mention the benefits of multiple monitors, but I've never given it a try. I think it's time I made the switch.\n\nDjibril: Excellent! It might take a little adjusting, but I promise it'll be worth it. Now, I also want to emphasize a coding practice that we follow here. Whenever you're writing methods, always add the '@retry' decorator from the 'pedantic' module to all your methods. It's a crucial aspect of our coding standard and helps ensure the reliability of our code.\n\nJorge: Understood. I'll make sure to incorporate the '@retry' decorator from now on. Consistency is key, and I appreciate you pointing out these important practices.\n\nDjibril: Exactly. We take pride in our coding standards, and this is one of those little details that make a big difference. It's an important habit to develop early on.\n\nJorge: I'm taking notes and will make sure to implement this consistently. Are there any other coding conventions or practices specific to CHEETAH that I should be aware of?\n\nDjibril: For now, that's the main point I wanted to emphasize. As you continue working, you'll become more familiar with our unique style and the practices we adhere to. It's all about continuous improvement and adapting to the standards of the industry and our company.\n\nJorge: Absolutely. I'm committed to learning and adapting to the CHEETAH way of doing things. Thank you for your guidance and support, Djibril. It's been incredibly helpful as I find my footing here.\n\nDjibril: You're very welcome, Jorge. That's what mentorship is all about. Feel free to reach out anytime; I'm always happy to help."
    },
    {
      "type": [
        "filler-update"
      ],
      "topic": [
        "Implementing effective meeting strategies and time management techniques to optimize productivity"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_a$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^n_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_j$"
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "function",
          ".*_y$"
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Perceptron class with train and predict methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Linked list class",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "LRU cache class with get and put methods",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "Playlist class with add song and remove song methods",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that implements merge sort",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "Linear regression class with train and predict methods",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "medium",
      "text": "Djibril: Jorge, it's been a few weeks since we last discussed time management strategies. How have you been finding your workflow and meeting efficiency lately?\n\nJorge: Hi, Djibril. To be honest, I've been struggling a bit. I feel like I'm drowning in meetings, and it's eating into my actual work time. I want to be more productive, but I'm not sure how to manage everything effectively.\n\nDjibril: That's a common challenge, especially for someone as diligent as yourself. Effective time management is a skill that takes practice and refinement. Let's revisit some strategies we discussed previously and build upon them. First, let's assess your meeting habits. Are you preparing an agenda for each meeting and sticking to it?\n\nJorge: Yes, I'm trying to be diligent about setting an agenda and sending it out in advance. But sometimes, the meetings veer off-track, and we end up discussing tangential topics. It's hard to get everything back on course without being too rigid.\n\nDjibril: That's a delicate balance to strike. One technique you can try is to appoint a timekeeper for each meeting. This person can gently intervene when discussions drift too far from the agenda, ensuring that you cover all the intended points. It also helps to set a time limit for each agenda item and display a timer during the meeting. That visual reminder can help keep things on track.\n\nJorge: That's a great idea! I can suggest this approach to my team and take turns being the timekeeper. It might help us respect each other's time more and prevent meetings from dragging on.\n\nDjibril: Exactly. It's all about mutual respect for everyone's time and contributions. Another strategy is to evaluate the purpose and frequency of your meetings. Are there any recurring meetings that could be reduced in frequency or condensed into a shorter duration?\n\nJorge: Now that I think about it, we have a few weekly meetings that could probably be bi-weekly without affecting our productivity. I'll discuss this with my team leads and see if we can optimize our meeting schedule.\n\nDjibril: That's fantastic! By reducing meeting frequency where possible, you create more dedicated work time for yourself and your colleagues. Also, remember to leave some buffer time between meetings. That way, if a meeting runs over or you need a short break, you won't feel rushed or overwhelmed.\n\nJorge: Yes, I find that when I have back-to-back meetings, I often feel frazzled and less prepared for the next one. Building in some breathing room between meetings will definitely help me feel more composed and focused.\n\nDjibril: Absolutely. And don't forget to block off some focused work time on your calendar. This signals to your colleagues that you're not available for meetings during those periods, allowing you to dive deep into your tasks without interruptions.\n\nJorge: That makes a lot of sense. I tend to get interrupted a lot, and it breaks my concentration. I'll make sure to allocate specific time blocks for focused work and protect that time.\n\nDjibril: Excellent! We've covered some practical strategies today. Remember, effective time management is an ongoing practice, and it's unique to each person. Experiment with these techniques, adapt them to your needs, and you'll gradually develop a workflow that maximizes your productivity and well-being."
    },
    {
      "type": [
        "filler-update"
      ],
      "topic": [
        "Requesting upgraded technology, including computers and software"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_a$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^n_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_j$"
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "function",
          ".*_y$"
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Perceptron class with train and predict methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Linked list class",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "LRU cache class with get and put methods",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "Playlist class with add song and remove song methods",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that implements merge sort",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Quadratic discriminant analysis class",
        "Linear regression class with train and predict methods",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "short",
      "text": "Djibril: Jorge, it's been a while since we last discussed upgrading our technology stack. I wanted to touch base and see if there have been any new developments on that front. How are you finding the current resources?\n\nJorge: Honestly, Djibril, I still feel that we're a bit limited in terms of hardware and software. I've been doing some research, and I think we could benefit from more powerful computers, especially for running our simulations and tests. The processing speed and memory capacity of our current machines are just not cutting it, and it's starting to impact our productivity.\n\nDjibril: That's a valid point, Jorge. I completely agree that having efficient tools is crucial for our work. Have you had a chance to discuss this with the team leads or the IT department? Upgrading company-wide technology is a significant decision, and we should ensure that we build a strong case and explore all options before making any requests.\n\nJorge: I've mentioned it to a few colleagues, and they seem to share my sentiment. I haven't formally brought it up with the team leads yet, but I plan to draft a proposal outlining the benefits of upgraded technology. I think if we can demonstrate how it will enhance our productivity and the quality of our work, they'll be receptive to the idea.\n\nDjibril: That's a great initiative, Jorge. Remember, when making the proposal, it's important to consider not just the technical specifications but also the cost implications and potential return on investment. Decision-makers will want to understand the value and impact on the company's bottom line. Also, keep in mind any industry standards and trends\u2014are our competitors or similar companies utilizing similar technology?\n\nJorge: Absolutely, I'll make sure to cover all those bases. I think it's important to present a well-rounded case, and I'll definitely factor in the financial aspects and industry context. I just wish I could speed up the process a bit. It's frustrating knowing that we could be working more efficiently if we had better tools.\n\nDjibril: I understand your eagerness, Jorge. However, sometimes these processes take time, and it's important to be patient and follow the necessary steps. In the meantime, let's focus on optimizing our current resources as much as possible. Are there any software or tools that you feel would be a quick win for improving our workflow? Sometimes, smaller adjustments can make a noticeable difference.\n\nJorge: That's true. I've been experimenting with a few open-source tools that integrate well with our current setup. They've helped streamline some of our processes, and I think with a bit more fine-tuning, we can further enhance our productivity without having to wait for new hardware. I'll definitely continue exploring those options.\n\nDjibril: That's fantastic, Jorge! It's all about finding those small improvements while we work towards bigger picture changes. Remember, you can always reach out to me if you need any help or a fresh perspective. These things often take a village, so don't hesitate to leverage the expertise of your colleagues as well."
    },
    {
      "type": [
        "pivot-add",
        "pivot-add"
      ],
      "topic": [
        "always add the '@require_kwargs' decorator from the 'pedantic' module to all methods",
        "always include a single digit in method names"
      ],
      "session_regex": [
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_a$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^n_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_j$"
        ],
        [
          "attribute",
          "^i_.*"
        ],
        [
          "function",
          ".*_y$"
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "Student grade class with a method that computes the average grade",
        "Directed Graph class with a method that checks the presence of cycles"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Perceptron class with train and predict methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linked list class",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "LRU cache class with get and put methods",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "Playlist class with add song and remove song methods",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that implements merge sort",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Student grade class with a method that computes the average grade",
        "Quadratic discriminant analysis class",
        "Linear regression class with train and predict methods",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "long",
      "text": "Djibril: Hi Jorge, how are you doing today?\n\nJorge: Good morning, Djibril. I'm doing well, thank you. I'm glad we have this opportunity to touch base again. I find our discussions very helpful.\n\nDjibril: I'm glad to hear that, Jorge. Mentoring is a privilege, and I'm happy to guide you through your journey at CHEETAH. Now, I wanted to talk to you today about some specific coding practices we use here. Consistency is key in our team's culture, and I want to ensure your code aligns with our standards.\n\nJorge: Absolutely, Djibril. I strive for consistency in my work, and I'm eager to learn about any areas where I can improve. Please, go ahead with your guidance.\n\nDjibril: Great attitude, Jorge. Now, one of the things we emphasize in our team is the use of the '@require_kwargs' decorator from the 'pedantic' module. I want you to start incorporating this into your code. It adds an extra layer of validation to our functions and ensures that we handle keyword arguments in a uniform way.\n\nJorge: Understood, Djibril. From now on, I'll include the '@require_kwargs' decorator in all my methods. I can see how this would help catch any errors related to missing or unexpected keyword arguments.\n\nDjibril: Exactly, Jorge! That's a perfect understanding of its purpose. Now, the other coding practice I want to emphasize is the inclusion of a single digit in method names. This is a unique aspect of our team's coding style. It helps us quickly identify methods at a glance and improves code readability.\n\nJorge: I see, Djibril. Including a single digit in method names is quite unique. I'll make sure to incorporate this practice into my future code contributions. May I ask what digit should I use, or is there a specific pattern I should follow?\n\nDjibril: That's a good question, Jorge. For now, there isn't a specific pattern or digit assigned. You can choose any single digit that hasn't been used already in the context of that class or module. Just ensure that once you've chosen a digit, you stick with it for consistency within that codebase.\n\nJorge: Alright, Djibril. I understand. I'll make sure to incorporate a single digit into my method names from now on.\n\nDjibril: Wonderful! By adopting these practices, your code will seamlessly integrate with the rest of the team's, promoting collaboration and ease of maintenance. Remember, these practices are unique to our team, so don't be surprised if you don't see them everywhere within CHEETAH.\n\nJorge: I appreciate you taking the time to explain these coding practices, Djibril. It makes a lot of sense to have these standards in place. I'll make sure to apply them going forward.\n\nDjibril: Excellent, Jorge! Don't hesitate to reach out if you have any questions or concerns about implementing these instructions. That's what I'm here for. For now, keep up the good work, and I'll see you at our next mentoring session.\n\nJorge: Thank you, Djibril. Your support means a lot to me. I'll make sure to reach out if any doubts arise. Have a great day!\n\nDjibril: You too, Jorge!"
    },
    {
      "type": [
        "pivot-update",
        "pivot-update"
      ],
      "topic": [
        "always start attribute names with 'q_'",
        "always end method names with '_p'"
      ],
      "session_regex": [
        [
          "attribute",
          "^q_.*"
        ],
        [
          "method",
          ".*_p$"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^a_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^n_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_j$"
        ],
        [
          "attribute",
          "^q_.*"
        ],
        [
          "function",
          ".*_y$"
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "LRU cache class with get and put methods",
        "Graph class with a method that computes the shortest path from one node to another"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Perceptron class with train and predict methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linked list class",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "LRU cache class with get and put methods",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "Playlist class with add song and remove song methods",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that implements merge sort",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Student grade class with a method that computes the average grade",
        "Quadratic discriminant analysis class",
        "Linear regression class with train and predict methods",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "medium",
      "text": "Djibril: Jorge, I wanted to touch base with you regarding our coding standards and provide an update on the naming conventions we discussed previously.\n\nJorge: Of course, Djibril. I'm all ears.\n\nDjibril: Great. So, moving forward, I want you to start attribute names with 'q_' as a prefix. This is a change from our previous standard. Please ensure that you consistently apply this naming convention from now on.\n\nJorge: Understood. I'll make sure to start attribute names with 'q_' from now on.\n\nDjibril: Good. Also, another update is that I'd like you to end method names with the suffix '_p'. This will help us maintain consistency and improve code readability.\n\nJorge: Noted. I'll keep that in mind and apply it consistently in my code.\n\nDjibril: Excellent! I know it can be a challenge to keep up with changing standards, but these updates will help us maintain a more uniform and readable code base. It's an important part of working as a team.\n\nJorge: Absolutely. I appreciate you keeping me updated. I'll make sure my code follows these new conventions.\n\nDjibril: That's great to hear, Jorge. Consistency is key in software development, and it's important that we all adhere to the same standards. It makes collaboration and maintenance much easier down the line.\n\nJorge: I agree. It's one of the things I appreciate about working at CHEETAH. We have a strong focus on code quality and consistency.\n\nDjibril: Indeed, and that's thanks to dedicated engineers like yourself who are willing to adapt and adhere to our standards. It contributes to the overall efficiency and success of our projects. Keep up the good work!\n\nJorge: Thank you for your guidance and support, Djibril. It means a lot."
    },
    {
      "type": [
        "filler-instruction-update",
        "pivot-update",
        "pivot-update"
      ],
      "topic": [
        "communicate with the team regularly",
        "always end attribute names with '_r'",
        "always start function argument names with 'e_'"
      ],
      "session_regex": [
        [
          "attribute",
          ".*_r$"
        ],
        [
          "function argument",
          "^e_.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^e_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^n_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_r$"
        ],
        [
          "attribute",
          "^q_.*"
        ],
        [
          "function",
          ".*_y$"
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [
        "Linked list class",
        "function that given two vectors compute their dot product"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Perceptron class with train and predict methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linked list class",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "LRU cache class with get and put methods",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "Playlist class with add song and remove song methods",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that implements merge sort",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Student grade class with a method that computes the average grade",
        "Quadratic discriminant analysis class",
        "Linear regression class with train and predict methods",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "short",
      "text": "Djibril:  Hi Jorge, how are you today?\n\nJorge:  I'm good, thanks. You?\n\nDjibril:  Great! Listen, I wanted to touch base with you on a few things. First of all, I want to emphasize the importance of regular communication with the team. It's crucial that we all stay on the same page, especially as we navigate the complexities of this project.\n\nJorge:  Absolutely, effective communication is key. I'll make sure to provide regular updates and be available for discussions.\n\nDjibril:  Perfect. Now, regarding our coding standards, I want to make a few updates. Please ensure that from now on, all attribute names end with '_r'. This is to maintain consistency and improve code readability.\n\nJorge: Understood. I'll apply this naming convention consistently going forward.\n\nDjibril:  Good. Additionally, when declaring function arguments, I'd like you to start the argument names with 'e_'. This will help us identify entry points and external data more easily.\n\nJorge:  Noted. I'll start using this naming convention for function arguments from now on. Are there any other updates I should be aware of?\n\nDjibril:  No, that's it for now. Just remember that these updates are important for maintaining our code quality and ensuring uniformity across the team.\n\nJorge:  Absolutely, I understand the importance of following these standards. I'll make sure to implement them consistently."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Creating a knowledge-sharing platform to facilitate learning and collaboration among employees"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^e_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^n_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_r$"
        ],
        [
          "attribute",
          "^q_.*"
        ],
        [
          "function",
          ".*_y$"
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Perceptron class with train and predict methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linked list class",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "LRU cache class with get and put methods",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "Playlist class with add song and remove song methods",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "function that returns the greatest common divisor of two integers",
        "function that implements merge sort",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Student grade class with a method that computes the average grade",
        "Quadratic discriminant analysis class",
        "Linear regression class with train and predict methods",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "long",
      "text": "Djibril: Jorge, I'm glad we have this opportunity to touch base again. It's been a while since our last conversation, and I wanted to discuss an idea I've been pondering. As you know, knowledge sharing and continuous learning are vital in our field. I think it's time we explored creating a dedicated platform for just that within CHEETAH. \n\nJorge: Absolutely. Knowledge sharing is key to fostering a collaborative and innovative environment. I think it's a great idea, especially with our team spread across different locations and time zones. Having a central platform will ensure everyone can access the same resources and learn from each other, no matter their physical location. \n\nDjibril: Exactly. I envision a platform that serves as a one-stop shop for our team's learning needs. We can consolidate resources, best practices, and even offer mentorship opportunities. This way, we're not only facilitating knowledge transfer but also building a community of learners and mentors within CHEETAH. \n\nJorge: That sounds fantastic. I can already think of several benefits. For one, it would be a great way to onboard new employees, giving them a comprehensive and consistent foundation. It could also help more reserved team members feel more comfortable asking questions and seeking help. \n\nDjibril: Those are excellent points, Jorge. A platform like this could really level up our onboarding process and make it more efficient and engaging. And creating a safe and inclusive space for learning is so important. I want to ensure that everyone feels empowered to contribute and that their questions and insights are valued. \n\nJorge: Absolutely. And from a practical standpoint, we could organize the platform with different modules or sections. We can have areas for Python tutorials, code snippets, troubleshooting guides, and even a discussion forum for more interactive collaboration. \n\nDjibril: I like the way you're thinking, Jorge. Having a well-organized structure is key to making the platform user-friendly and accessible. We should also consider incorporating a search function to make it easy for team members to find what they're looking for quickly. \n\nJorge: For sure. Search functionality is crucial, especially as the platform grows and evolves over time. We should also think about how we can make it interactive and engaging. Perhaps we can incorporate quizzes or challenges to test understanding and encourage friendly competition. \n\nDjibril: Now you're talking, Jorge! Adding an element of interactivity will definitely keep our colleagues engaged and motivated. We could even showcase leaderboards or highlight the most active contributors to foster a sense of friendly competition and recognition. \n\nJorge: That's a terrific idea. Recognition is a powerful motivator, and it will encourage others to participate and share their knowledge. We should also think about how we can get feedback from users to continuously improve the platform. \n\nDjibril: Absolutely, user feedback is essential for us to iterate and improve. We can incorporate feedback mechanisms like surveys or ratings to understand what's working well and what areas need enhancement. \n\nJorge: This is shaping up really well. I think one of the keys to its success will be ensuring that it's not just a one-way knowledge transfer. Encouraging dialogue, discussions, and the sharing of diverse perspectives will make it a true collaborative platform. \n\nDjibril: I couldn't agree more, Jorge. We want to foster a culture of open dialogue and knowledge exchange. This platform should empower our colleagues to teach and learn from each other, creating a community of continuous learners. \n\nJorge: Indeed. And with your vision and our team's expertise, I'm confident we can make this platform a valuable asset for CHEETAH. I'm excited to get started and see the positive impact it will have on our team's performance and collaboration. \n\nDjibril: I'm thrilled that you're on board, Jorge. Your attention to detail and perfectionist tendencies will be a strength as we develop this platform. Let's work together to make this a reality and take CHEETAH's knowledge-sharing culture to the next level! \n\nJorge: Absolutely, Djibril! I'm all in, and I can't wait to see the positive impact this has on our team. I'll start brainstorming some initial designs and gather feedback from the team to ensure we're on the right track. \n\nDjibril: That's the spirit, Jorge! Your enthusiasm is infectious. Go ahead and put together a plan, and we can review it together and refine it before presenting it to the rest of the team. Let's make this knowledge-sharing platform a shining example of CHEETAH's innovation! \n\nJorge: Will do, Djibril! I'll keep you posted on my progress, and feel free to reach out if you have any further insights or ideas. Let's make this happen! \n\nDjibril: Fantastic! It's always a pleasure brainstorming with you, Jorge. Your dedication and passion are truly admirable. Let's turn this idea into a powerful tool for our team's growth and success. \n\nJorge: Thank you, Djibril! Your support and mentorship mean a lot to me. I'll be in touch soon with some preliminary plans. \n\nDjibril: Sounds like a plan, Jorge! I'll be eagerly awaiting your updates. Keep up the great work, and let's make CHEETAH proud! \n\nJorge: Will do! It was great talking to you, Djibril. \n\nDjibril: Likewise, Jorge. Keep that enthusiasm burning, and let's make this initiative a shining success! \n\nJorge: Absolutely! Talk soon!"
    },
    {
      "type": [
        "filler-instruction-add",
        "pivot-update",
        "pivot-add"
      ],
      "topic": [
        "never use a profiler",
        "always start function argument names with 'f_'",
        "always include the string 'chx' in method names"
      ],
      "session_regex": [
        [
          "function argument",
          "^f_.*"
        ],
        [
          "method",
          ".*chx.*"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^f_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^n_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_r$"
        ],
        [
          "attribute",
          "^q_.*"
        ],
        [
          "function",
          ".*_y$"
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [
        "function that given two vectors compute their dot product",
        "Heap class with insert and heapify methods"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Perceptron class with train and predict methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linked list class",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "LRU cache class with get and put methods",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "Playlist class with add song and remove song methods",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers",
        "function that implements merge sort",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Student grade class with a method that computes the average grade",
        "Quadratic discriminant analysis class",
        "Linear regression class with train and predict methods",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "medium",
      "text": "Djibril: Jorge, I want to emphasize the importance of code efficiency and readability as we continue to work on your development plan.\n\nJorge: Absolutely, I'm committed to improving in those areas.\n\nDjibril: Good. I want to update some of the coding guidelines I've previously given you. From now on, I want you to avoid using a profiler. There are more efficient ways to optimize code, and profilers can sometimes lead to over-optimization and messy code.\n\nJorge: Understood. I won't use a profiler going forward.\n\nDjibril: Additionally, I'd like you to start following a new naming convention for your function arguments. Always start the argument names with 'f_'. This will help differentiate them from local variables and improve code readability.\n\nJorge: Noted. I'll start implementing that convention from today.\n\nDjibril: Great. Also, remember to always include the string 'chx' in your method names. This is a standard convention we follow at CHEETAH to easily identify our methods.\n\nJorge: Yes, I'll make sure to include 'chx' in all my method names. I appreciate your guidance on these coding standards.\n\nDjibril: You're welcome. These updates will ensure your code is more aligned with our team's practices and will make collaboration easier. Keep up the good work and don't hesitate to reach out if you have any questions or concerns.\n\nJorge: Thank you, Djibril. Your mentorship has been invaluable to me. I'll continue to apply your teachings and improve my skills."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Troubleshooting internet connectivity issues across different locations"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^f_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^n_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_r$"
        ],
        [
          "attribute",
          "^q_.*"
        ],
        [
          "function",
          ".*_y$"
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Perceptron class with train and predict methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linked list class",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "LRU cache class with get and put methods",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "Playlist class with add song and remove song methods",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers",
        "function that implements merge sort",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Student grade class with a method that computes the average grade",
        "Quadratic discriminant analysis class",
        "Linear regression class with train and predict methods",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "medium",
      "text": "Djibril: Jorge, how are you doing today?\n\nJorge: Good afternoon, Djibril. I'm doing well, and excited to tackle today's topic. Internet connectivity is such a fundamental aspect of our work, yet it can be tricky to navigate.\n\nDjibril: Absolutely! Internet issues can be a real hurdle, especially when dealing with multiple locations and a diverse range of network setups. So, let's start by understanding the scope. How many locations are we talking about, and what kinds of connectivity issues have been reported?\n\nJorge: We have five main offices across the country, and each has its own unique network infrastructure. The issues vary, but the most common complaints are slow connection speeds, frequent disconnects, and latency problems during video conferences. It seems each office has its own set of challenges.\n\nDjibril: That's a diverse landscape, indeed. The first step is to ensure that we have a consistent baseline. I want you to work with the IT team to conduct a comprehensive audit of each location's network setup. We need to gather details like connection type, bandwidth allocation, hardware specifications, and any existing troubleshooting steps taken. This will help us identify any glaring discrepancies or configurations that might be causing these issues.\n\nJorge: That makes sense. Standardizing the audit process across all locations will give us a solid foundation for comparison. I'll coordinate with the IT team leads at each site to ensure we collect the necessary data points. Should we also involve the end-users? Sometimes, they have insights or observations that might help us pinpoint the problems.\n\nDjibril: User feedback is invaluable, so yes, let's not underestimate the power of end-user insights. Encourage the IT teams to solicit feedback from employees. Often, they can provide details about specific applications or times of day when issues are more pronounced. This qualitative data, combined with the quantitative data from the audit, should give us a comprehensive view.\n\nJorge: Agreed. I'll make sure we collect both types of data. With such a diverse set of locations and network configurations, do you think there might be value in standardizing certain aspects of our network infrastructure?  If our offices are using different routers, switches, and access points, it can complicate troubleshooting and maintenance. I suggest we work towards standardizing the core networking equipment, ensuring that each location has the same reliable hardware. This will make it easier to identify and resolve issues, and it streamlines the procurement and support processes as well. \n\nJorge: That sounds like a solid plan. Standardization will not only help with troubleshooting but also with skill transfer across the IT teams. I'll initiate discussions with the IT leads to decide on the specific hardware models we should adopt and then work on a rollout strategy.\n\nDjibril: Excellent! Remember, clear and consistent communication is key when dealing with cross-location issues. Keep me posted on your progress, and don't hesitate to reach out if you encounter any challenges along the way. That's what mentorship is all about! \n\nJorge: I will, Djibril. Thank you for your guidance and support. I feel more confident tackling these connectivity issues now. I'll keep you updated on our findings and the results of the standardization efforts. \n\nDjibril: That's the spirit, Jorge! We'll work through these challenges together. Enjoy the rest of your day, and happy troubleshooting! \n\nJorge: You too, Djibril!"
    },
    {
      "type": [
        "filler-update",
        "pivot-update"
      ],
      "topic": [
        "Troubleshooting internet connectivity issues across different locations",
        "always end function names with '_fn'"
      ],
      "session_regex": [
        [
          "function",
          ".*_fn$"
        ]
      ],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^f_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^n_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_r$"
        ],
        [
          "attribute",
          "^q_.*"
        ],
        [
          "function",
          ".*_fn$"
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [
        "function that implements merge sort"
      ],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Perceptron class with train and predict methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linked list class",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "LRU cache class with get and put methods",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "Playlist class with add song and remove song methods",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers",
        "function that implements merge sort",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Student grade class with a method that computes the average grade",
        "Quadratic discriminant analysis class",
        "Linear regression class with train and predict methods",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "medium",
      "text": "Djibril: I wanted to touch base with you on the progress of troubleshooting those connectivity issues across our global offices. Have there been any recurring patterns or issues that you've noticed? It's important that we identify any trends so that we can implement effective solutions.\n\nJorge: Absolutely. I've been monitoring the situation closely, and it seems that the issue is predominantly affecting our offices in the APAC region. The root cause appears to be a combination of outdated networking equipment and a lack of standardized configuration across the offices.\n\nDjibril: That's a great observation, and it's crucial that we address this promptly. I want you to take the lead on this and work closely with our IT team to devise a plan. Ensure that any solutions are well-documented and can be efficiently implemented across all our locations.\n\nJorge: Understood. I'll schedule a meeting with the IT team leads and come up with a comprehensive strategy. I'll make sure that the plan includes a timeline, the resources required, and a clear set of instructions for implementation and future maintenance.\n\nDjibril: That's fantastic, Jorge. Your attention to detail and organizational skills will be a huge asset in resolving this issue. Now, moving on, I wanted to update a previous coding instruction I gave you. From now on, I want you to end all your function names with '_fn'. This will help us maintain a consistent naming convention and improve code readability.\n\nJorge: Noted. I'll make sure to implement this convention going forward. Consistency is key when it comes to coding standards.\n\nDjibril: Exactly, and it's these small details that contribute to the overall quality and maintainability of our code base. Keep up the good work, Jorge, and don't hesitate to reach out if you have any questions or concerns."
    },
    {
      "type": [
        "filler-add"
      ],
      "topic": [
        "Developing a culture of innovation and creativity to drive growth and competitiveness"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^f_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^n_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_r$"
        ],
        [
          "attribute",
          "^q_.*"
        ],
        [
          "function",
          ".*_fn$"
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Perceptron class with train and predict methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linked list class",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "LRU cache class with get and put methods",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "Playlist class with add song and remove song methods",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers",
        "function that implements merge sort",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Student grade class with a method that computes the average grade",
        "Quadratic discriminant analysis class",
        "Linear regression class with train and predict methods",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "long",
      "text": "Djibril: Jorge, it's been a pleasure mentoring you over these past few months. I believe we've had some insightful conversations, and I hope you've found them beneficial.\n\nJorge: Absolutely, Djibril. Our discussions have been incredibly valuable to me as a new employee. Your guidance and insights have helped me navigate my role with more confidence and a better understanding of the industry. I can't thank you enough for your support.\n\nDjibril: You're very welcome, Jorge. I'm glad to hear that. Mentoring is a rewarding experience for me as well, especially seeing your growth and enthusiasm. Now, for our 100th conversation, I'd like to delve into a topic that's crucial for any thriving business: developing a culture of innovation and creativity to drive growth and competitiveness.\n\nJorge: That's an intriguing topic and very relevant to our industry. With technology evolving rapidly, innovation and creativity are essential for any software company to stay ahead. I'd love to hear your insights on this.\n\nDjibril: Indeed, you're spot on. In a dynamic field like software engineering, innovation is key to staying competitive. At CHEETAH, we foster a culture that values creativity and encourages a forward-thinking mindset. This means creating an environment where employees are empowered to share ideas, take calculated risks, and think outside the box.\n\nJorge: That makes a lot of sense. A company's ability to adapt and innovate can mean the difference between falling behind and staying at the forefront of the industry. How does CHEETAH ensure that innovation remains a priority across the organization?\n\nDjibril: Great question. It starts with hiring the right people\u2014those who embody a growth mindset and embrace change. We also implement structured processes to encourage innovation. \n\nJorge: Brainstorming sessions sound like an effective way to generate fresh ideas. Are these sessions open to everyone in the company?\n\nDjibril: Absolutely. We encourage participation from all levels and departments. Diversity of thought is essential for innovation, so we make sure to include a mix of perspectives and expertise. It's not uncommon to have our senior engineers brainstorming alongside our marketing team, for instance.\n\nJorge: That's fantastic. By involving employees from various backgrounds, you're leveraging a wealth of diverse experiences and knowledge. It must lead to some interesting and unexpected ideas.\n\nDjibril: Exactly, Jorge. And that's where the magic happens. When you bring diverse minds together, you create an environment conducive to creativity and innovative thinking. It's incredible to see the synergy that emerges and the unique solutions that are proposed.\n\nJorge: It sounds like an exciting and stimulating work environment. I can imagine it keeps everyone engaged and passionate about their work.\n\nDjibril: Absolutely. Passion is crucial in our line of work. When employees are passionate, they're more likely to go the extra mile and think beyond the confines of their job descriptions. This intrinsic motivation fuels creativity and, ultimately, innovation.\n\nJorge: That's very true. Passion drives us to strive for excellence and explore new possibilities. It's refreshing to hear that CHEETAH places such emphasis on fostering passion and creativity among its employees.\n\nDjibril: Indeed, and it's all interconnected. When employees feel valued, encouraged, and passionate about their work, they are more likely to contribute innovative ideas. This, in turn, drives the growth and competitiveness of the company. It's a positive cycle that benefits both the individual and the organization.\n\nJorge: Absolutely, and it's encouraging to know that CHEETAH recognizes the importance of this cycle. It gives me great motivation to know that my ideas and contributions are not only welcomed but actively encouraged.\n\nDjibril: Absolutely, Jorge. Your ideas are invaluable, and I'm sure they will continue to shape not just your growth but also the future of CHEETAH. Remember, innovation starts with each one of us, and your unique perspective is an asset to this company.\n\nJorge: Thank you, Djibril. Your words are very encouraging. I feel inspired to continue pushing boundaries and contributing to CHEETAH's culture of innovation. I look forward to our future conversations and the exciting path ahead.\n\nDjibril: As do I, Jorge. Here's to the power of innovation and the bright future it holds for all of us at CHEETAH."
    },
    {
      "type": [
        "filler-instruction-update"
      ],
      "topic": [
        "always write long and descriptive commit messages"
      ],
      "session_regex": [],
      "cumulative_regex": [
        [
          "function argument",
          ".*_e$"
        ],
        [
          "method",
          "^md_.*"
        ],
        [
          "class decorator",
          [
            "trace_class",
            true
          ]
        ],
        [
          "class",
          ".*\\d$"
        ],
        [
          "class decorator",
          [
            "timer_class",
            true
          ]
        ],
        [
          "import",
          [
            "locale",
            true
          ]
        ],
        [
          "function argument",
          ".*chx.*"
        ],
        [
          "function decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "method try",
          true
        ],
        [
          "import",
          [
            "mailbox",
            true
          ]
        ],
        [
          "function",
          ".*\\d$"
        ],
        [
          "function argument",
          "^f_.*"
        ],
        [
          "function argument",
          ".*\\d$"
        ],
        [
          "method",
          ".*_p$"
        ],
        [
          "comment",
          true
        ],
        [
          "function decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "method docstring",
          true
        ],
        [
          "method annotation",
          true
        ],
        [
          "function",
          ".*chx.*"
        ],
        [
          "variable",
          ".*chx.*"
        ],
        [
          "variable",
          ".*_vr$"
        ],
        [
          "function try",
          true
        ],
        [
          "function annotation",
          true
        ],
        [
          "method decorator",
          [
            "validate",
            true
          ]
        ],
        [
          "import",
          [
            "bz2",
            true
          ]
        ],
        [
          "attribute",
          ".*\\d$"
        ],
        [
          "function decorator",
          [
            "timer",
            true
          ]
        ],
        [
          "import",
          [
            "secrets",
            true
          ]
        ],
        [
          "class",
          "^[A-Z][a-z0-9]*((\\d|[a-z])[A-Z\\d]*[a-z0-9]*)*$"
        ],
        [
          "method decorator",
          [
            "rename_kwargs",
            true
          ]
        ],
        [
          "function decorator",
          [
            "trace",
            true
          ]
        ],
        [
          "method assert",
          true
        ],
        [
          "function decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "import",
          [
            "gzip",
            true
          ]
        ],
        [
          "import",
          [
            "hashlib",
            true
          ]
        ],
        [
          "variable",
          "^n_.*"
        ],
        [
          "variable",
          ".*\\d$"
        ],
        [
          "function assert",
          true
        ],
        [
          "function decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "function docstring",
          true
        ],
        [
          "function",
          "^c_.*"
        ],
        [
          "attribute",
          ".*chx.*"
        ],
        [
          "attribute",
          ".*_r$"
        ],
        [
          "attribute",
          "^q_.*"
        ],
        [
          "function",
          ".*_fn$"
        ],
        [
          "function decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "method decorator",
          [
            "count_calls",
            true
          ]
        ],
        [
          "method decorator",
          [
            "retry",
            true
          ]
        ],
        [
          "method decorator",
          [
            "require_kwargs",
            true
          ]
        ],
        [
          "method",
          ".*\\d$"
        ],
        [
          "method",
          ".*chx.*"
        ]
      ],
      "session_eval_query": [],
      "cumulative_eval_query": [
        "function that removes all the duplicates of a list of numbers then computes the sum",
        "function that returns the least common multiple of two integers",
        "function that given two vectors, computes their dot product",
        "function that implements insertion sort",
        "function that merges two sorted lists",
        "function that checks if a string is a valid palindrome",
        "function that returns the kth largest element in an array",
        "function that converts an integer to Roman numerals",
        "Library class with add books and remove books methods",
        "Perceptron class with train and predict methods",
        "function that implements product array except self",
        "function that computes the average of the diagonal element of a matrix",
        "function that returns the majority element of an array",
        "Kernel ridge regression class",
        "Binary tree class with methods to insert and delete nodes",
        "function that flattens a binary tree to a linked list",
        "function that finds the subarray with the largest sum, and returns its sum",
        "Graph class with a method that computes the shortest path from one node to another",
        "Principal component analysis class",
        "PyTorch model class that performs binary image classification",
        "Directed Graph class with a method that checks the presence of cycles",
        "Linked list class",
        "Nearest neighbors model class with train and predict methods",
        "function that determines if a given tree is a valid binary search tree",
        "Lasso regression class with a train and a predict method",
        "Linear regression class using numpy",
        "LRU cache class with get and put methods",
        "Solution class to solve the maximum subarray problem",
        "function that returns the longest common prefix string in a list of strings",
        "function that implements sum array except self",
        "function that counts the number of non-zero elements in a matrix",
        "function that given an array of integer citations, computes the h-index",
        "Playlist class with add song and remove song methods",
        "function that given the head of a linked list, determines if the linked list has a cycle in it",
        "function that deletes a node in a binary search tree",
        "function that computes the mean using an online algorithm",
        "function that determines if an array is a valid sudoku",
        "Heap class with insert and heapify methods",
        "function that returns the greatest common divisor of two integers",
        "function that implements merge sort",
        "function that given two vectors compute their dot product",
        "function that given two lists returns common elements",
        "Inventory class with add stock and remove stock methods",
        "function that returns the edit distance between two strings",
        "Student grade class with a method that computes the average grade",
        "Quadratic discriminant analysis class",
        "Linear regression class with train and predict methods",
        "function that converts a Roman numeral string into an integer"
      ],
      "session_length": "long",
      "text": "Djibril: Jorge, how are you finding the process of committing code changes so far? I know we've touched on this before, but I want to emphasize a slight adjustment to our approach.\n\nJorge: It's going well, Djibril. I'm being careful to commit regularly and to use descriptive messages, just as you taught me. I find it helpful to look back at the commit history to understand the progress of a project.\n\nDjibril: That's excellent, and I'm glad you're already seeing the benefits of a well-documented commit history. Now, I want to build on that and encourage you to take it a step further. From now on, I'd like you to focus on writing long and descriptive commit messages.\n\nJorge: Absolutely. I can definitely see how that would be beneficial, especially for more complex changes. It provides clearer context and makes it easier to understand the rationale behind each change.\n\nDjibril: Exactly. Think of it this way: a commit message should tell a story. It should provide enough detail that someone else reading it can understand the \"why\" behind the change, not just the \"what.\" It's a way to communicate your thought process and intentions to your future self and to your colleagues.\n\nJorge: That makes a lot of sense. I tend to be quite detailed in my notes and documentation anyway, so this aligns well with my working style. Should I go back and edit my previous commit messages as well?\n\nDjibril: No need to edit past messages unless there's something critically unclear or missing. Going forward, though, I want us to adopt this practice consistently. It's a culture I want to instill in the team, and it will benefit us in the long run, especially when we're collaborating on larger projects.\n\nJorge: I completely agree. It's a great way to maintain transparency and facilitate knowledge transfer within the team. I'll start implementing this right away and make sure my commit messages are as descriptive as possible.\n\nDjibril: Fantastic! And remember, if you ever need guidance or a second opinion on your messages, don't hesitate to reach out to me or any of your teammates. We're all here to support each other and improve our practices.\n\nJorge: Thank you, Djibril. I really appreciate your mentorship and the guidance you've provided so far. I'll make sure to uphold this standard and encourage my future teammates to do the same.\n\nDjibril: You're very welcome, Jorge. That's what mentorship is all about. By sharing these practices, we can ensure that our team works efficiently and effectively, and we leave a positive legacy for those who join us in the future."
    }
  ]
}
