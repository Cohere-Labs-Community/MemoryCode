{
  "sessions": [
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\nclass Inventory:\n    def __init__(self):\n        self.items_q = {}\n\n    def n_add_stock(self, item_name, quantity):\n        if item_name in self.items_q:\n            self.items_q[item_name] += quantity\n        else:\n            self.items_q[item_name] = quantity\n\n    def n_remove_stock(self, item_name, quantity):\n        if item_name in self.items_q:\n            if self.items_q[item_name] >= quantity:\n                self.items_q[item_name] -= quantity\n                if self.items_q[item_name] == 0:\n                    del self.items_q[item_name]\n            else:\n                raise ValueError(\"Not enough stock to remove.\")\n        else:\n            raise ValueError(\"Item not found in inventory.\")\n```",
        "```python\nclass Node:\n    def __init__(self, data_q=None):\n        self.data_q = data_q\n        self.next_q = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head_q = None\n\n    def n_insert_at_beginning(self, data_q):\n        new_node_q = Node(data_q)\n        new_node_q.next_q = self.head_q\n        self.head_q = new_node_q\n\n    def n_insert_at_end(self, data_q):\n        new_node_q = Node(data_q)\n        if self.head_q is None:\n            self.head_q = new_node_q\n            return\n        last_q = self.head_q\n        while last_q.next_q:\n            last_q = last_q.next_q\n        last_q.next_q = new_node_q\n\n    def n_insert_after(self, prev_node_q, data_q):\n        if not prev_node_q:\n            return\n        new_node_q = Node(data_q)\n        new_node_q.next_q = prev_node_q.next_q\n        prev_node_q.next_q = new_node_q\n\n    def n_delete_node(self, key_q):\n        temp_q = self.head_q\n\n        if temp_q and temp_q.data_q == key_q:\n            self.head_q = temp_q.next_q\n            temp_q = None\n            return\n\n        prev_q = None\n        while temp_q and temp_q.data_q != key_q:\n            prev_q = temp_q\n            temp_q = temp_q.next_q\n\n        if temp_q is None:\n            return\n\n        prev_q.next_q = temp_q.next_q\n        temp_q = None\n\n    def n_search(self, key_q):\n        current_q = self.head_q\n        while current_q is not None:\n            if current_q.data_q == key_q:\n                return True\n            current_q = current_q.next_q\n        return False\n\n    def n_get_list(self):\n        elems_q = []\n        current_q = self.head_q\n        while current_q:\n            elems_q.append(current_q.data_q)\n            current_q = current_q.next_q\n        return elems_q\n```"
      ],
      "instruction_model_output": [
        "```python\nclass Inventory:\n    def __init__(self):\n        self.stock = {}\n\n    def n_add_stock(self, item, quantity):\n        if item in self.stock:\n            self.stock[item] += quantity\n        else:\n            self.stock[item] = quantity\n\n    def n_remove_stock(self, item, quantity):\n        if item in self.stock and self.stock[item] >= quantity:\n            self.stock[item] -= quantity\n            if self.stock[item] == 0:\n                del self.stock[item]\n        else:\n            raise ValueError(\"Not enough stock or item not available\")\n```",
        "```python\nclass Node:\n    def __init__(self, data):\n        self.data_q = data\n        self.next_q = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head_q = None\n\n    def append(self, data):\n        new_node_q = Node(data)\n        if not self.head_q:\n            self.head_q = new_node_q\n            return\n        last_q = self.head_q\n        while last_q.next_q:\n            last_q = last_q.next_q\n        last_q.next_q = new_node_q\n\n    def prepend(self, data):\n        new_node_q = Node(data)\n        new_node_q.next_q = self.head_q\n        self.head_q = new_node_q\n\n    def delete(self, key):\n        temp_q = self.head_q\n        if temp_q and temp_q.data_q == key:\n            self.head_q = temp_q.next_q\n            temp_q = None\n            return\n        prev_q = None\n        while temp_q and temp_q.data_q != key:\n            prev_q = temp_q\n            temp_q = temp_q.next_q\n        if not temp_q:\n            return\n        prev_q.next_q = temp_q.next_q\n        temp_q = None\n\n    def search(self, key):\n        current_q = self.head_q\n        while current_q:\n            if current_q.data_q == key:\n                return True\n            current_q = current_q.next_q\n        return False\n\n    def display(self):\n        elems = []\n        current_q = self.head_q\n        while current_q:\n            elems.append(current_q.data_q)\n            current_q = current_q.next_q\n        return elems\n```"
      ],
      "history_model_output": [
        "```python\nclass Node:\n    def __init__(self, data_q=None):\n        self.data_q = data_q\n        self.next_q = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head_q = None\n\n    def n_insert(self, data_q):\n        new_node_q = Node(data_q)\n        new_node_q.next_q = self.head_q\n        self.head_q = new_node_q\n\n    def n_search(self, key_q):\n        current_q = self.head_q\n        while current_q:\n            if current_q.data_q == key_q:\n                return True\n            current_q = current_q.next_q\n        return False\n\n    def n_delete(self, key_q):\n        current_q = self.head_q\n        prev_q = None\n        while current_q:\n            if current_q.data_q == key_q:\n                if prev_q is None:\n                    self.head_q = current_q.next_q\n                else:\n                    prev_q.next_q = current_q.next_q\n                return True\n            prev_q = current_q\n            current_q = current_q.next_q\n        return False\n\n    def n_display(self):\n        nodes = []\n        current_q = self.head_q\n        while current_q:\n            nodes.append(current_q.data_q)\n            current_q = current_q.next_q\n        return nodes\n```",
        "```python\nclass Inventory:\n    def __init__(self):\n        self.stock_q = {}\n\n    def n_add_stock(self, item_name, quantity):\n        if item_name in self.stock_q:\n            self.stock_q[item_name] += quantity\n        else:\n            self.stock_q[item_name] = quantity\n\n    def n_remove_stock(self, item_name, quantity):\n        if item_name in self.stock_q and self.stock_q[item_name] >= quantity:\n            self.stock_q[item_name] -= quantity\n            if self.stock_q[item_name] == 0:\n                del self.stock_q[item_name]\n```\n"
      ]
    }
  ]
}