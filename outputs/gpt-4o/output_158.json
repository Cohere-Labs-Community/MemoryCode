{
  "sessions": [
    {
      "session_model_output": [
        "```python\ndef longest_common_prefix(strs):\n    \"\"\"\n    Returns the longest common prefix from a list of strings.\n\n    :param strs: List of strings to evaluate.\n    :type strs: list\n    :return: Longest common prefix string.\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    shortest_str = min(strs, key=len)\n    \n    for i, char in enumerate(shortest_str):\n        for other in strs:\n            if other[i] != char:\n                return shortest_str[:i]\n    \n    return shortest_str\n```"
      ],
      "instruction_model_output": [
        "```python\ndef longest_common_prefix(strings):\n    \"\"\"\n    Finds the longest common prefix string among a list of strings.\n\n    Parameters:\n    strings (list of str): A list containing strings to evaluate.\n\n    Returns:\n    str: The longest common prefix.\n    \"\"\"\n    if not strings:\n        return \"\"\n\n    min_length = min(len(s) for s in strings)\n\n    common_prefix = \"\"\n\n    for i in range(min_length):\n        current_char = strings[0][i]\n        \n        if all(s[i] == current_char for s in strings):\n            common_prefix += current_char\n        else:\n            break\n\n    return common_prefix\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\nfrom pedantic import count_calls\nfrom collections import Counter\n\n@count_calls\ndef find_majority1_element(arr):\n    \"\"\"\n    Function to find the majority element in an array.\n    A majority element is one that appears more than n/2 times.\n\n    :param arr: List[int], the input array of integers\n    :return: int, the majority element or None if there is no majority element\n    \"\"\"\n    if not arr:\n        return None\n\n    count = Counter(arr)\n    limit = len(arr) // 2\n\n    for num, freq in count.items():\n        if freq > limit:\n            return num\n\n    return None\n```",
        "```python\nfrom pedantic import count_calls\n\n@count_calls\ndef count_non_zero1(matrix):\n    return sum(1 for row in matrix for element in row if element != 0)\n```"
      ],
      "instruction_model_output": [
        "```python\nfrom pedantic import count_calls\n\n@count_calls\ndef majority_element(nums):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    majority = len(nums) // 2\n    for num, cnt in count.items():\n        if cnt > majority:\n            return num\n```",
        "```python\ndef c1ount_non_zero(matrix):\n    non_zero_c1ount = 0\n    for r1ow in matrix:\n        for e1lement in r1ow:\n            if e1lement != 0:\n                non_zero_c1ount += 1\n    return non_zero_c1ount\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\ndef average_diagonal(matrix):\n    assert isinstance(matrix, list), \"Input must be a list.\"\n    assert all(isinstance(row, list) for row in matrix), \"Matrix must be a list of lists.\"\n    assert all(len(row) == len(matrix) for row in matrix), \"Matrix must be square.\"\n    \n    diagonal_elements = [matrix[i][i] for i in range(len(matrix))]\n    return sum(diagonal_elements) / len(diagonal_elements)\n```"
      ],
      "instruction_model_output": [
        "```python\ndef average_diagonal(matrix):\n    assert matrix is not None, \"Input matrix should not be None.\"\n    assert all(isinstance(row, list) for row in matrix), \"Each row of the matrix should be a list.\"\n    assert all(len(row) == len(matrix) for row in matrix), \"The matrix should be square.\"\n    \n    n = len(matrix)\n    diagonal_sum = sum(matrix[i][i] for i in range(n))\n    average = diagonal_sum / n\n    return average\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\ndef find_common_elements1(list_a1, list_b1):\n    return list(set(list_a1) & set(list_b1))\n```"
      ],
      "instruction_model_output": [
        "```python\ndef find_common_elements(list1_a, list2_b):\n    return list(set(list1_a) & set(list2_b))\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\nfrom pedantic import require_kwargs\n\n@require_kwargs\ndef roman_to_integer(a_roman: str) -> int:\n    roman_numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n    result = 0\n    prev_value = 0\n    \n    for char in reversed(a_roman):\n        current_value = roman_numerals[char]\n        if current_value < prev_value:\n            result -= current_value\n        else:\n            result += current_value\n        prev_value = current_value\n    \n    return result\n```",
        "```python\nfrom pedantic import require_kwargs\nfrom typing import List\n\n@require_kwargs\ndef dot_product(*, a_vector1: List[float], a_vector2: List[float]) -> float:\n    return sum(a_v1 * a_v2 for a_v1, a_v2 in zip(a_vector1, a_vector2))\n```"
      ],
      "instruction_model_output": [
        "```python\nfrom pedantic import require_kwargs\n\n@require_kwargs\ndef roman_to_integer(s: str) -> int:\n    roman_numerals = {\n        'I': 1, 'V': 5, 'X': 10, 'L': 50,\n        'C': 100, 'D': 500, 'M': 1000\n    }\n    total = 0\n    prev_value = 0\n\n    for char in reversed(s):\n        value = roman_numerals[char]\n        if value < prev_value:\n            total -= value\n        else:\n            total += value\n        prev_value = value\n\n    return total\n```",
        "```python\ndef dot_product(a_vector1, a_vector2):\n    if len(a_vector1) != len(a_vector2):\n        raise ValueError(\"Vectors must be of the same length.\")\n    return sum(a_v1 * a_v2 for a_v1, a_v2 in zip(a_vector1, a_vector2))\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\nimport numpy as np\nfrom sklearn.linear_model import Lasso\n\nclass LassoRegression:\n    def __init__(self, alpha=1.0):\n        self.alpha = alpha\n        self.model = None\n\n    def train(self, X, y):\n        try:\n            self.model = Lasso(alpha=self.alpha)\n            self.model.fit(X, y)\n        except Exception as e:\n            raise RuntimeError(f\"An error occurred during training: {e}\")\n\n    def predict(self, X):\n        try:\n            if self.model is None:\n                raise ValueError(\"Model has not been trained yet.\")\n            return self.model.predict(X)\n        except Exception as e:\n            raise RuntimeError(f\"An error occurred during prediction: {e}\")\n```\n"
      ],
      "instruction_model_output": [
        "```python\nimport numpy as np\n\nclass LassoRegression:\n    def __init__(self, alpha=1.0, max_iter=1000, tol=1e-4):\n        self.alpha = alpha\n        self.max_iter = max_iter\n        self.tol = tol\n        self.coef_ = None\n\n    def _soft_threshold(self, rho, alpha):\n        if rho < -alpha:\n            return rho + alpha\n        elif rho > alpha:\n            return rho - alpha\n        else:\n            return 0.0\n\n    def train(self, X, y):\n        try:\n            n_samples, n_features = X.shape\n            self.coef_ = np.zeros(n_features)\n            weights = self.coef_\n\n            for iteration in range(self.max_iter):\n                weights_old = np.copy(weights)\n\n                for j in range(n_features):\n                    temp = weights.copy()\n                    temp[j] = 0.0\n                    residual = y - X @ temp\n                    rho = np.dot(X[:, j], residual)\n\n                    weights[j] = self._soft_threshold(rho, self.alpha)\n\n                if np.sum(np.abs(weights - weights_old)) < self.tol:\n                    break\n        except Exception as e:\n            print(f\"An error occurred during training: {e}\")\n\n    def predict(self, X):\n        try:\n            if self.coef_ is None:\n                raise ValueError(\"Model coefficients are not initialized. Call `train` method first.\")\n            return np.dot(X, self.coef_)\n        except Exception as e:\n            print(f\"An error occurred during prediction: {e}\")\n```"
      ],
      "cumulative_model_output": [
        "```python\nfrom pedantic import count_calls, require_kwargs\n\n@count_calls\n@require_kwargs\ndef count_non_zeros1(matrix1):\n    \"\"\"\n    Counts the number of non-zero elements in a given matrix.\n\n    :param a_matrix1: List of lists representing the matrix to be processed.\n    :return: Integer representing the count of non-zero elements.\n    \"\"\"\n    assert isinstance(matrix1, list), \"Input must be a list\"\n    assert all(isinstance(a_row1, list) for a_row1 in matrix1), \"Matrix must be a list of lists\"\n\n    count1 = 0\n    for a_row2 in matrix1:\n        for a_elem1 in a_row2:\n            if a_elem1 != 0:\n                count1 += 1\n    return count1\n```",
        "```python\nfrom pedantic import count_calls, require_kwargs\n\n@count_calls\n@require_kwargs\ndef dot_product_1(a_vector_1, a_vector_2):\n    \"\"\"\n    Compute the dot product of two vectors.\n    \n    :param a_vector_1: List of numbers representing the first vector.\n    :param a_vector_2: List of numbers representing the second vector.\n    :return: The dot product of the two vectors.\n    \"\"\"\n    assert isinstance(a_vector_1, list) and all(isinstance(x, (int, float)) for x in a_vector_1), \\\n        \"a_vector_1 must be a list of numbers.\"\n    assert isinstance(a_vector_2, list) and all(isinstance(x, (int, float)) for x in a_vector_2), \\\n        \"a_vector_2 must be a list of numbers.\"\n    assert len(a_vector_1) == len(a_vector_2), \"Vectors must be of the same length.\"\n    \n    dot_product = 0\n    try:\n        for i_1 in range(len(a_vector_1)):\n            dot_product += a_vector_1[i_1] * a_vector_2[i_1]\n    except Exception as e:\n        raise Exception(f\"An error occurred during the computation of the dot product: {e}\")\n    \n    return dot_product\n```",
        "```python\nfrom pedantic.decorators import count_calls, require_kwargs\n\n@count_calls\n@require_kwargs\ndef longest_common_prefix1(strings, a_index0):\n    assert isinstance(strings, list), \"Input should be a list\"\n    assert all(isinstance(item, str) for item in strings), \"All items in the list should be strings\"\n\n    if not strings:\n        return \"\"\n    \n    try:\n        prefix = strings[0]\n        for a_string1 in strings[1:]:\n            a_i2 = 0\n            while a_i2 < len(prefix) and a_i2 < len(a_string1) and prefix[a_i2] == a_string1[a_i2]:\n                a_i2 += 1\n            prefix = prefix[:a_i2]\n            if not prefix:\n                break\n        return prefix\n    except Exception as e:\n        raise ValueError(f\"An error occurred while finding the longest common prefix: {e}\")\n```\n\n",
        "```python\nfrom pedantic.decorators import count_calls, require_kwargs\n\n@count_calls\n@require_kwargs\ndef roman_to_int1(roman: str) -> int:\n    roman_numerals_a_1 = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    a_total1 = 0\n    a_previous1 = 0\n    \n    assert isinstance(roman, str), \"Input must be a string.\"\n    \n    try:\n        for a_char1 in reversed(roman):\n            a_value1 = roman_numerals_a_1[a_char1]\n            if a_value1 < a_previous1:\n                a_total1 -= a_value1\n            else:\n                a_total1 += a_value1\n            a_previous1 = a_value1\n    except Exception as e:\n        raise ValueError(f\"An error occurred while converting Roman numeral to integer: {e}\")\n    \n    return a_total1\n```",
        "```python\nfrom pedantic import count_calls, require_kwargs\n\n@count_calls\n@require_kwargs\ndef diagonal_average0(matrix_a):\n    \"\"\"\n    Computes the average of the diagonal elements of a square matrix.\n    \n    :param matrix_a: List of lists where each inner list represents a row of the matrix.\n    :returns: Float value representing the average of the diagonal elements.\n    :raises ValueError: If the matrix is not square.\n    \"\"\"\n    assert isinstance(matrix_a, list), \"Input should be a list.\"\n    assert all(isinstance(row, list) for row in matrix_a), \"Matrix should contain lists.\"\n    assert all(len(row) == len(matrix_a) for row in matrix_a), \"Matrix should be square.\"\n\n    diagonal_sum1 = 0\n    try:\n        for i2 in range(len(matrix_a)):\n            diagonal_sum1 += matrix_a[i2][i2]\n        average3 = diagonal_sum1 / len(matrix_a)\n    except Exception as e1:\n        raise ValueError(\"An error occurred while computing the diagonal average.\") from e1\n\n    return average3\n```",
        "```python\nfrom pedantic.decorators import count_calls, require_kwargs\n\n@count_calls\n@require_kwargs\ndef find_common_1_elements(list_a_1, list_b_2):\n    \"\"\"\n    Find common elements between two lists.\n\n    :param list_a_1: First list of elements\n    :type list_a_1: list\n    :param list_b_2: Second list of elements\n    :type list_b_2: list\n    :return: List of common elements\n    :rtype: list\n    \"\"\"\n    assert isinstance(list_a_1, list), \"list_a_1 must be a list\"\n    assert isinstance(list_b_2, list), \"list_b_2 must be a list\"\n    \n    common_3 = []\n    try:\n        set_a_4 = set(list_a_1)\n        set_b_5 = set(list_b_2)\n        common_3 = set_a_4.intersection(set_b_5)\n    except Exception as e:\n        raise Exception(\"An error occurred while finding common elements: \" + str(e))\n\n    return list(common_3)\n```\n",
        "```python\nfrom pedantic import count_calls, require_kwargs\nimport numpy as np\n\n@count_calls\n@require_kwargs\nclass LassoRegression:\n    def __init__(self, a_lr0: float, a_epochs1: int, a_lambda2: float):\n        self.a_lr0 = a_lr0\n        self.a_epochs1 = a_epochs1\n        self.a_lambda2 = a_lambda2\n        self.weights = None\n        self.bias = 0\n\n    def _soft_threshold(self, a_r3, a_lambda4):\n        return np.sign(a_r3) * max(0, abs(a_r3) - a_lambda4)\n\n    def _calculate_cost(self, a_y5, a_y_pred6):\n        assert len(a_y5) == len(a_y_pred6)\n        return np.mean((a_y5 - a_y_pred6) ** 2) + self.a_lambda2 * np.sum(np.abs(self.weights))\n\n    def train(self, *, a_X7, a_y8):\n        assert len(a_X7) == len(a_y8)\n        n_samples, n_features = a_X7.shape\n        self.weights = np.zeros(n_features)\n\n        for _ in range(self.a_epochs1):\n            a_y_pred9 = self.predict(a_X7=a_X7)\n            gradients = -(2/n_samples) * (a_X7.T.dot(a_y8 - a_y_pred9))\n            self.bias -= self.a_lr0 * np.mean(a_y_pred9 - a_y8)\n\n            for i in range(n_features):\n                a_r10 = self.weights[i] - self.a_lr0 * gradients[i]\n                self.weights[i] = self._soft_threshold(a_r3=a_r10, a_lambda4=self.a_lambda2 * self.a_lr0)\n\n            cost = self._calculate_cost(a_y5=a_y8, a_y_pred6=a_y_pred9)\n\n    def predict(self, *, a_X11):\n        assert self.weights is not None, \"Model has not been trained yet.\"\n        return np.dot(a_X11, self.weights) + self.bias\n```\n",
        "```python\nfrom collections import Counter\nfrom pedantic import count_calls, require_kwargs\n\n@count_calls\n@require_kwargs\ndef find_majority1_element(nums1):\n    \"\"\"\n    Returns the majority element in the input list.\n    \n    Parameters:\n    nums1 (list): A list of integers.\n    \n    Returns:\n    int: The majority element.\n    \"\"\"\n    assert isinstance(nums1, list), \"Expected a list as input\"\n    assert all(isinstance(a_num, int) for a_num in nums1), \"All elements must be integers\"\n\n    try:\n        count1 = Counter(nums1)\n        majority1_element = max(count1, key=count1.get)\n        return majority1_element\n    except Exception as e:\n        raise ValueError(f\"An error occurred: {e}\")\n```"
      ]
    }
  ]
}