{
  "sessions": [
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\nimport heapq\n\nclass Graph:\n    def __init__(self):\n        self.edges = {}\n\n    def add_edge_x(self, from_node, to_node, weight):\n        if from_node not in self.edges:\n            self.edges[from_node] = []\n        if to_node not in self.edges:\n            self.edges[to_node] = []\n        self.edges[from_node].append((to_node, weight))\n\n    def shortest_path_x(self, start_node, end_node):\n        queue = [(0, start_node)]\n        distances = {node: float('inf') for node in self.edges}\n        distances[start_node] = 0\n        visited = set()\n\n        while queue:\n            current_distance, current_node = heapq.heappop(queue)\n\n            if current_node in visited:\n                continue\n\n            visited.add(current_node)\n\n            if current_node == end_node:\n                return current_distance\n\n            for neighbor, weight in self.edges[current_node]:\n                distance = current_distance + weight\n\n                if distance < distances[neighbor]:\n                    distances[neighbor] = distance\n                    heapq.heappush(queue, (distance, neighbor))\n\n        return float('inf')\n```"
      ],
      "instruction_model_output": [
        "```python\nimport heapq\n\nclass Graph:\n    def __init__(self):\n        self.nodes = {}\n\n    def add_node_x(self, value):\n        self.nodes[value] = {}\n\n    def add_edge_x(self, from_node, to_node, weight):\n        if from_node in self.nodes and to_node in self.nodes:\n            self.nodes[from_node][to_node] = weight\n            self.nodes[to_node][from_node] = weight  # Assuming undirected graph\n\n    def shortest_path_x(self, start_node, end_node):\n        if start_node not in self.nodes or end_node not in self.nodes:\n            return None\n\n        distances = {node: float('inf') for node in self.nodes}\n        distances[start_node] = 0\n        priority_queue = [(0, start_node)]\n        visited = set()\n\n        while priority_queue:\n            current_distance, current_node = heapq.heappop(priority_queue)\n\n            if current_node in visited:\n                continue\n\n            visited.add(current_node)\n\n            for neighbor, weight in self.nodes[current_node].items():\n                distance = current_distance + weight\n                if distance < distances[neighbor]:\n                    distances[neighbor] = distance\n                    heapq.heappush(priority_queue, (distance, neighbor))\n\n        return distances[end_node] if distances[end_node] != float('inf') else None\n```"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\ndef longest_common_prefix(strs):\n    \"\"\"\n    Finds the longest common prefix string amongst a list of strings.\n\n    Args:\n        strs (List[str]): A list of strings to evaluate for a common prefix.\n\n    Returns:\n        str: The longest common prefix string. Returns an empty string if there is no common prefix.\n\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    prefix = strs[0]\n    \n    for s in strs[1:]:\n        while s[:len(prefix)] != prefix and prefix:\n            prefix = prefix[:len(prefix) - 1]\n            \n    return prefix\n```"
      ],
      "instruction_model_output": [
        "```python\ndef longest_common_prefix(strings):\n    \"\"\"\n    Finds the longest common prefix string among a list of strings.\n\n    Parameters:\n    strings (list of str): A list containing strings to evaluate.\n\n    Returns:\n    str: The longest common prefix.\n    \"\"\"\n    if not strings:\n        return \"\"\n\n    min_length = min(len(s) for s in strings)\n\n    common_prefix = \"\"\n\n    for i in range(min_length):\n        current_char = strings[0][i]\n        \n        if all(s[i] == current_char for s in strings):\n            common_prefix += current_char\n        else:\n            break\n\n    return common_prefix\n```"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef flatten_chx_binary_tree(root: TreeNode) -> None:\n    if not root:\n        return\n    \n    stack = [root]\n    prev = None\n    \n    while stack:\n        node = stack.pop()\n        \n        if prev:\n            prev.right = node\n            prev.left = None\n        \n        left = node.left\n        right = node.right\n        \n        if right:\n            stack.append(right)\n        if left:\n            stack.append(left)\n        \n        prev = node\n```"
      ],
      "instruction_model_output": [
        "```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef chx_flatten_binary_tree(root):\n    if not root:\n        return\n\n    stack = [root]\n    while stack:\n        current = stack.pop()\n\n        if current.right:\n            stack.append(current.right)\n        if current.left:\n            stack.append(current.left)\n\n        if stack:\n            current.right = stack[-1]\n        current.left = None\n```"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\ndef int_to_roman1(num1):\n    \"\"\"\n    Convert an integer to a Roman numeral.\n\n    :param num1: Integer value to be converted to Roman numeral.\n    :return: String representing the Roman numeral.\n    \"\"\"\n    value1_to_roman1 = {\n        1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', \n        50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'\n    }\n    \n    roman1_result = []\n    for value1, roman_value1 in value1_to_roman1.items():\n        while num1 >= value1:\n            roman1_result.append(roman_value1)\n            num1 -= value1\n    return ''.join(roman1_result)\n```",
        "```python\nclass OnlineMeanCalculator:\n    def __init__(self):\n        self.count1 = 0\n        self.total1 = 0.0\n\n    def add_number(self, num2):\n        \"\"\"\n        Adds a new number to the dataset and updates the running mean.\n\n        :param num2: The new number to be added for mean calculation.\n        \"\"\"\n        self.count1 += 1\n        self.total1 += num2\n\n    def get_mean(self):\n        \"\"\"\n        Returns the current mean of the numbers added so far.\n\n        :return: The mean of the current dataset.\n        \"\"\"\n        if self.count1 == 0:\n            return 0.0\n        return self.total1 / self.count1\n```"
      ],
      "instruction_model_output": [
        "```python\ndef int_to_roman(num):\n    \"\"\"\n    Convert an integer to a Roman numeral.\n\n    :param num: Integer to be converted to a Roman numeral.\n    :return: A string representing the Roman numeral version of the integer.\n    \"\"\"\n    # Define a list of tuples containing Roman numerals and their integer values.\n    val = [\n        (1000, 'M'),\n        (900, 'CM'),\n        (500, 'D'),\n        (400, 'CD'),\n        (100, 'C'),\n        (90, 'XC'),\n        (50, 'L'),\n        (40, 'XL'),\n        (10, 'X'),\n        (9, 'IX'),\n        (5, 'V'),\n        (4, 'IV'),\n        (1, 'I')\n    ]\n    \n    # Initialize an empty string to store the resulting Roman numeral.\n    roman_numeral = ''\n    \n    # Iterate over the list of tuples.\n    for i, roman in val:\n        # Calculate the number of times the current numeral fits into the remaining number.\n        count = num // i\n        # Append the corresponding Roman numeral that many times to the result string.\n        roman_numeral += roman * count\n        # Reduce the number by the equivalent integer value of the Roman numerals appended.\n        num -= i * count\n    \n    # Return the final Roman numeral string.\n    return roman_numeral\n```",
        "```python\nclass OnlineMeanCalculator:\n    def __init__(self):\n        self._count0 = 0\n        self._mean0 = 0.0\n\n    def add1(self, value0):\n        self._count0 += 1\n        self._mean0 += (value0 - self._mean0) / self._count0\n    \n    def get_mean0(self):\n        return self._mean0\n```"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\ndef fn_h_index(citations):\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, c in enumerate(citations):\n        if c >= i + 1:\n            h_index = i + 1\n        else:\n            break\n    return h_index\n```"
      ],
      "instruction_model_output": [
        "```python\ndef fn_compute_h_index(citations):\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, c in enumerate(citations):\n        if c >= i + 1:\n            h_index = i + 1\n        else:\n            break\n    return h_index\n```"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": [
        "```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef fn_flatten_x(root: TreeNode) -> None:\n    \"\"\"\n    Flattens a binary tree to a linked list in-place.\n    \n    :param root: TreeNode - The root of the binary tree to flatten.\n    \"\"\"\n    \n    def fn_flat_tree_x(node: TreeNode) -> TreeNode:\n        \"\"\"\n        Helper function to flatten the tree rooted at the given node.\n        \n        :param node: TreeNode - The current node being processed.\n        :return: TreeNode - The last node in the flattened subtree.\n        \"\"\"\n        if not node:\n            return None\n        \n        if not node.left and not node.right:\n            return node\n        \n        left_tail = fn_flat_tree_x(node.left)\n        right_tail = fn_flat_tree_x(node.right)\n        \n        if left_tail:\n            left_tail.right = node.right\n            node.right = node.left\n            node.left = None\n        \n        return right_tail if right_tail else left_tail\n    \n    fn_flat_tree_x(root)\n```\n",
        "```python\ndef fn_integer_to_roman_chx(num1):\n    \"\"\"\n    Convert an integer to a Roman numeral.\n    \n    :param num1: An integer to be converted, must be between 1 and 3999.\n    :return: A string representing the Roman numeral of the integer.\n    \"\"\"\n    val_x = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms_x = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n    ]\n    roman_num1 = ''\n    while num1 > 0:\n        for i1 in range(len(val_x)):\n            while num1 >= val_x[i1]:\n                roman_num1 += syms_x[i1]\n                num1 -= val_x[i1]\n    return roman_num1\n```",
        "```python\ndef fn_h_index_x(citations):\n    \"\"\"\n    Compute the h-index for a given array of integer citations.\n\n    :param citations: List of integers representing the number of citations for each paper.\n    :return: The calculated h-index.\n    \"\"\"\n    citations.sort(reverse=True)\n    h_index1 = 0\n    \n    for i1, citation1 in enumerate(citations, start=1):\n        if citation1 >= i1:\n            h_index1 = i1\n        else:\n            break\n    \n    return h_index1\n```",
        "```python\nclass Graph:\n    def __init__(self):\n        self.adjacency_list_1 = {}\n\n    def add_edge_x(self, start_node_x, end_node_x, weight_x):\n        if start_node_x not in self.adjacency_list_1:\n            self.adjacency_list_1[start_node_x] = []\n        self.adjacency_list_1[start_node_x].append((end_node_x, weight_x))\n\n    def fn_dijkstra_chx(self, start_node_x):\n        import heapq\n\n        distances_1 = {node_x: float('inf') for node_x in self.adjacency_list_1}\n        distances_1[start_node_x] = 0\n        priority_queue_1 = [(0, start_node_x)]\n\n        while priority_queue_1:\n            current_distance_1, current_node_x = heapq.heappop(priority_queue_1)\n\n            if current_distance_1 > distances_1[current_node_x]:\n                continue\n\n            for neighbor_x, weight_x in self.adjacency_list_1.get(current_node_x, []):\n                distance_1 = current_distance_1 + weight_x\n\n                if distance_1 < distances_1[neighbor_x]:\n                    distances_1[neighbor_x] = distance_1\n                    heapq.heappush(priority_queue_1, (distance_1, neighbor_x))\n\n        return distances_1\n\n    def fn_shortest_path_chx(self, start_node_x, target_node_x):\n        distances_1 = self.fn_dijkstra_chx(start_node_x)\n        return distances_1.get(target_node_x, float('inf'))\n```",
        "```python\ndef fn_longest_common_prefix_chx(strings_lst):\n    if not strings_lst:\n        return \"\"\n\n    prefix = strings_lst[0]\n    for string_1 in strings_lst[1:]:\n        while not string_1.startswith(prefix):\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    return prefix\n```",
        "```python\nclass OnlineMeanCalculator:\n    def __init__(self):\n        self.n0 = 0  # Count of numbers\n        self.mean_0 = 0.0  # Current mean\n\n    def fn_update_mean_chx(self, new_value_chx):\n        self.n0 += 1\n        self.mean_0 += (new_value_chx - self.mean_0) / self.n0\n\n    def fn_get_mean_chx(self):\n        return self.mean_0\n```\n"
      ]
    }
  ]
}