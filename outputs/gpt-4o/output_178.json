{
  "sessions": [
    {
      "session_model_output": [
        "```python\ndef is_palindrome_m(input_string_m):\n    \"\"\"Check if the provided string is a valid palindrome.\"\"\"\n    input_string_m = ''.join(filter(str.isalnum, input_string_m)).lower()\n    return input_string_m == input_string_m[::-1]\n```"
      ],
      "instruction_model_output": [
        "```python\ndef is_valid_palindrome(check_str_m):\n    clean_str_m = ''.join(char_m.lower() for char_m in check_str_m if char_m.isalnum())\n    return clean_str_m == clean_str_m[::-1]\n```"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\ndef is_palindrome_z(s_z):\n    cleaned_s_z = ''.join(char_z.lower() for char_z in s_z if char_z.isalnum())\n    return cleaned_s_z == cleaned_s_z[::-1]\n```"
      ],
      "instruction_model_output": [
        "```python\ndef is_palindrome_z(string_z):\n    cleaned_z = ''.join(char_z.lower() for char_z in string_z if char_z.isalnum())\n    return cleaned_z == cleaned_z[::-1]\n```"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\ndef is_palindrome_wr(input_str_wr):\n    cleaned_str_wr = ''.join(char_wr.lower() for char_wr in input_str_wr if char_wr.isalnum())\n    return cleaned_str_wr == cleaned_str_wr[::-1]\n```"
      ],
      "instruction_model_output": [
        "```python\ndef is_palindrome_wr(s_wr):\n    cleaned_wr = ''.join(char_wr.lower() for char_wr in s_wr if char_wr.isalnum())\n    return cleaned_wr == cleaned_wr[::-1]\n```"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\ndef is_palindrome_a(s_y: str) -> bool:\n    cleaned_y = ''.join(char_y.lower() for char_y in s_y if char_y.isalnum())\n    return cleaned_y == cleaned_y[::-1]\n```",
        "```python\nimport heapq\n\nclass Graph:\n    def __init__(self):\n        self.adjacency_list_y = {}\n    \n    def add_edge_a(self, start_y, end_y, weight_y):\n        if start_y not in self.adjacency_list_y:\n            self.adjacency_list_y[start_y] = []\n        self.adjacency_list_y[start_y].append((end_y, weight_y))\n    \n    def shortest_path_a(self, start_y, end_y):\n        distances_y = {node_y: float('infinity') for node_y in self.adjacency_list_y}\n        distances_y[start_y] = 0\n        priority_queue_y = [(0, start_y)]\n        while priority_queue_y:\n            current_distance_y, current_node_y = heapq.heappop(priority_queue_y)\n            if current_distance_y > distances_y[current_node_y]:\n                continue\n            for neighbor_y, weight_y in self.adjacency_list_y.get(current_node_y, []):\n                distance_y = current_distance_y + weight_y\n                if distance_y < distances_y[neighbor_y]:\n                    distances_y[neighbor_y] = distance_y\n                    heapq.heappush(priority_queue_y, (distance_y, neighbor_y))\n        return distances_y[end_y] if distances_y[end_y] != float('infinity') else None\n```"
      ],
      "instruction_model_output": [
        "```python\ndef is_palindrome(string_y):\n    clean_string_y = ''.join(char_y.lower() for char_y in string_y if char_y.isalnum())\n    return clean_string_y == clean_string_y[::-1]\n```",
        "```python\nclass Graph:\n    def __init__(self):\n        self.nodes = {}\n        \n    def add_node_a(self, node):\n        if node not in self.nodes:\n            self.nodes[node] = []\n\n    def add_edge_a(self, from_node, to_node, weight):\n        if from_node in self.nodes and to_node in self.nodes:\n            self.nodes[from_node].append((to_node, weight))\n            self.nodes[to_node].append((from_node, weight))\n\n    def shortest_path_a(self, start_node, end_node):\n        import heapq\n        queue = []\n        heapq.heappush(queue, (0, start_node))\n        distances = {node: float('infinity') for node in self.nodes}\n        distances[start_node] = 0\n        visited = set()\n\n        while queue:\n            current_distance, current_node = heapq.heappop(queue)\n            if current_node in visited:\n                continue\n            visited.add(current_node)\n\n            for neighbor, weight in self.nodes[current_node]:\n                distance = current_distance + weight\n                if distance < distances[neighbor]:\n                    distances[neighbor] = distance\n                    heapq.heappush(queue, (distance, neighbor))\n\n        return distances[end_node] if distances[end_node] != float('infinity') else None\n```"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\ndef is_palindrome_o(s_n):\n    s_cleaned_n = ''.join(char_n.lower() for char_n in s_n if char_n.isalnum())\n    return s_cleaned_n == s_cleaned_n[::-1]\n```",
        "```python\nimport heapq\n\nclass Graph_n:\n    def __init__(self_n):\n        self_n.nodes_n = {}\n    \n    def add_edge_o(self_n, from_node_n, to_node_n, weight_n):\n        if from_node_n not in self_n.nodes_n:\n            self_n.nodes_n[from_node_n] = []\n        if to_node_n not in self_n.nodes_n:\n            self_n.nodes_n[to_node_n] = []\n        self_n.nodes_n[from_node_n].append((to_node_n, weight_n))\n        self_n.nodes_n[to_node_n].append((from_node_n, weight_n))\n    \n    def shortest_path_o(self_n, start_node_n, end_node_n):\n        queue_n = [(0, start_node_n)]\n        distances_n = {node: float('inf') for node in self_n.nodes_n}\n        distances_n[start_node_n] = 0\n        previous_n = {node: None for node in self_n.nodes_n}\n\n        while queue_n:\n            current_distance_n, current_node_n = heapq.heappop(queue_n)\n\n            if current_distance_n > distances_n[current_node_n]:\n                continue\n\n            for neighbor_n, weight_n in self_n.nodes_n[current_node_n]:\n                distance_n = current_distance_n + weight_n\n\n                if distance_n < distances_n[neighbor_n]:\n                    distances_n[neighbor_n] = distance_n\n                    previous_n[neighbor_n] = current_node_n\n                    heapq.heappush(queue_n, (distance_n, neighbor_n))\n\n        path_n = []\n        current_n = end_node_n\n        while current_n is not None:\n            path_n.append(current_n)\n            current_n = previous_n[current_n]\n        path_n.reverse()\n\n        if distances_n[end_node_n] == float('inf'):\n            return None, float('inf')\n        \n        return path_n, distances_n[end_node_n]\n```"
      ],
      "instruction_model_output": [
        "```python\ndef is_palindrome_n(s_n: str) -> bool:\n    s_n = ''.join(char_n.lower() for char_n in s_n if char_n.isalnum())\n    return s_n == s_n[::-1]\n```",
        "```python\nimport heapq\n\nclass Graph:\n    def __init__(self):\n        self.edges = {}\n\n    def add_edge_o(self, from_node, to_node, weight):\n        if from_node not in self.edges:\n            self.edges[from_node] = []\n        if to_node not in self.edges:\n            self.edges[to_node] = []\n        self.edges[from_node].append((to_node, weight))\n        self.edges[to_node].append((from_node, weight))\n\n    def shortest_path_o(self, start_node, end_node):\n        queue = [(0, start_node)]\n        distances = {node: float('infinity') for node in self.edges}\n        distances[start_node] = 0\n        previous_nodes = {node: None for node in self.edges}\n\n        while queue:\n            current_distance, current_node = heapq.heappop(queue)\n\n            if current_distance > distances[current_node]:\n                continue\n\n            for neighbor, weight in self.edges.get(current_node, []):\n                distance = current_distance + weight\n\n                if distance < distances[neighbor]:\n                    distances[neighbor] = distance\n                    previous_nodes[neighbor] = current_node\n                    heapq.heappush(queue, (distance, neighbor))\n\n        path, current_node = [], end_node\n        while previous_nodes[current_node] is not None:\n            path.append(current_node)\n            current_node = previous_nodes[current_node]\n        if path:\n            path.append(start_node)\n        path.reverse()\n\n        return path if distance < float('infinity') else None\n```"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\nclass NearestNeighborsModel:\n    def __init__(self, n_neighbors_w=5):\n        self.n_neighbors_w = n_neighbors_w\n        self.training_data_w = None\n        self.training_labels_w = None\n\n    def train(self, data_w, labels_w):\n        assert data_w is not None, \"Training data cannot be None\"\n        assert labels_w is not None, \"Training labels cannot be None\"\n        assert len(data_w) == len(labels_w), \"Data and labels must have the same length\"\n        self.training_data_w = data_w\n        self.training_labels_w = labels_w\n\n    def predict(self, query_w):\n        assert self.training_data_w is not None, \"Model must be trained before prediction\"\n        assert isinstance(query_w, list), \"Query must be a list\"\n        predictions_w = []\n        for query_point_w in query_w:\n            distances_w = [\n                self._euclidean_distance_w(query_point_w, data_point_w)\n                for data_point_w in self.training_data_w\n            ]\n            nearest_indices_w = sorted(\n                range(len(distances_w)), key=lambda i_w: distances_w[i_w]\n            )[:self.n_neighbors_w]\n            nearest_labels_w = [self.training_labels_w[i_w] for i_w in nearest_indices_w]\n            prediction_w = max(set(nearest_labels_w), key=nearest_labels_w.count)\n            predictions_w.append(prediction_w)\n        return predictions_w\n\n    def _euclidean_distance_w(self, point1_w, point2_w):\n        assert len(point1_w) == len(point2_w), \"Points must have the same dimension\"\n        sum_squared_w = sum(\n            (x1_w - x2_w) ** 2 for x1_w, x2_w in zip(point1_w, point2_w)\n        )\n        return sum_squared_w ** 0.5\n```",
        "```python\ndef is_palindrome_w(s_w):\n    assert isinstance(s_w, str), \"Input must be a string.\"\n    \n    processed_string_w = ''.join(char.lower() for char in s_w if char.isalnum())\n    print(\"Processed String:\", processed_string_w)\n    \n    left_index_w, right_index_w = 0, len(processed_string_w) - 1\n    \n    while left_index_w < right_index_w:\n        if processed_string_w[left_index_w] != processed_string_w[right_index_w]:\n            print(f\"Mismatch found at {left_index_w}: {processed_string_w[left_index_w]} != {right_index_w}: {processed_string_w[right_index_w]}\")\n            return False\n        left_index_w += 1\n        right_index_w -= 1\n    \n    return True\n```"
      ],
      "instruction_model_output": [
        "```python\nimport numpy as np\nfrom scipy.spatial import distance\n\nclass NearestNeighborsModel:\n    def __init__(self, n_neighbors=3):\n        assert isinstance(n_neighbors, int) and n_neighbors > 0, \"n_neighbors must be a positive integer\"\n        self.n_neighbors = n_neighbors\n        self._is_fitted = False\n\n    def train(self, X, y):\n        assert isinstance(X, np.ndarray) and isinstance(y, np.ndarray), \"X and y must be numpy arrays\"\n        assert len(X) == len(y), \"Length of X and y must match\"\n        assert len(X) > 0, \"X cannot be empty\"\n        \n        self.X_train = X\n        self.y_train = y\n        self._is_fitted = True\n\n    def predict(self, X):\n        assert self._is_fitted, \"Model must be trained before prediction\"\n        assert isinstance(X, np.ndarray), \"X must be a numpy array\"\n        assert len(X) > 0, \"X cannot be empty\"\n        \n        predictions = []\n        for x in X:\n            distances = distance.cdist([x], self.X_train, 'euclidean').flatten()\n            nearest_indices = np.argsort(distances)[:self.n_neighbors]\n            nearest_labels = self.y_train[nearest_indices]\n            prediction = np.bincount(nearest_labels).argmax()\n            predictions.append(prediction)\n        \n        return np.array(predictions)\n```",
        "```python\ndef is_palindrome_w(input_w: str) -> bool:\n    cleaned_w = ''.join(char_w.lower() for char_w in input_w if char_w.isalnum())\n    return cleaned_w == cleaned_w[::-1]\n```"
      ],
      "history_model_output": [
        "```python\nimport numpy as np\nfrom collections import Counter\n\nclass NearestNeighbors_n:\n    def __init__(self_w, k_w=3):\n        self.k_w = k_w\n\n    def train_o(self_w, X_train_w, y_train_w):\n        self.X_train_w = X_train_w\n        self.y_train_w = y_train_w\n\n    def predict_o(self_w, X_test_w):\n        predictions_w = [self_w._predict_o(x_w) for x_w in X_test_w]\n        return np.array(predictions_w)\n\n    def _predict_o(self_w, x_w):\n        # Calculate distances between x_w and all examples in the training set\n        distances_w = np.linalg.norm(self_w.X_train_w - x_w, axis=1)\n        # Get the k nearest samples' labels\n        k_indices_w = np.argsort(distances_w)[:self_w.k_w]\n        k_nearest_labels_w = [self_w.y_train_w[i_w] for i_w in k_indices_w]\n        # Get the most common label\n        most_common_w = Counter(k_nearest_labels_w).most_common(1)\n        return most_common_w[0][0]\n```",
        "```python\nclass Graph_w:\n    def __init__(self_w):\n        self_w.edges_w = {}\n\n    def add_edge_o(self, from_node_w, to_node_w, weight_w):\n        if from_node_w not in self_w.edges_w:\n            self_w.edges_w[from_node_w] = []\n        self_w.edges_w[from_node_w].append((to_node_w, weight_w))\n\n    def shortest_path_o(self, start_w, end_w):\n        import heapq\n\n        priority_queue_w = []\n        heapq.heappush(priority_queue_w, (0, start_w))\n        distances_w = {node_w: float('inf') for node_w in self_w.edges_w}\n        distances_w[start_w] = 0\n        previous_nodes_w = {node_w: None for node_w in self_w.edges_w}\n\n        while priority_queue_w:\n            current_distance_w, current_node_w = heapq.heappop(priority_queue_w)\n\n            if current_distance_w > distances_w[current_node_w]:\n                continue\n\n            for neighbor_w, weight_w in self_w.edges_w.get(current_node_w, []):\n                distance_w = current_distance_w + weight_w\n\n                if distance_w < distances_w[neighbor_w]:\n                    distances_w[neighbor_w] = distance_w\n                    previous_nodes_w[neighbor_w] = current_node_w\n                    heapq.heappush(priority_queue_w, (distance_w, neighbor_w))\n\n        path_w = []\n        current_w = end_w\n        while current_w is not None:\n            path_w.insert(0, current_w)\n            current_w = previous_nodes_w[current_w]\n\n        if distances_w[end_w] == float('inf'):\n            return None\n\n        return path_w, distances_w[end_w]\n```\n",
        "```python\ndef is_palindrome_o(input_string_w):\n    assert isinstance(input_string_w, str), \"Input must be a string\"\n    sanitized_string_w = ''.join(c.lower() for c in input_string_w if c.isalnum())\n    return sanitized_string_w == sanitized_string_w[::-1]\n```\n"
      ]
    }
  ]
}