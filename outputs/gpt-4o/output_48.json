{
  "sessions": [
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\nclass TreeNode:\n    def __init__(self, key: int):\n        self.left: 'TreeNode' = None\n        self.right: 'TreeNode' = None\n        self.val: int = key\n\nclass BinaryTree:\n    def __init__(self):\n        self.root: TreeNode = None\n\n    def insert(self, key: int) -> None:\n        if self.root is None:\n            self.root = TreeNode(key)\n        else:\n            self._insert(self.root, key)\n\n    def _insert(self, node: TreeNode, key: int) -> None:\n        if key < node.val:\n            if node.left is None:\n                node.left = TreeNode(key)\n            else:\n                self._insert(node.left, key)\n        else:\n            if node.right is None:\n                node.right = TreeNode(key)\n            else:\n                self._insert(node.right, key)\n\n    def delete(self, key: int) -> None:\n        self.root = self._delete(self.root, key)\n\n    def _delete(self, node: TreeNode, key: int) -> TreeNode:\n        if node is None:\n            return node\n\n        if key < node.val:\n            node.left = self._delete(node.left, key)\n        elif key > node.val:\n            node.right = self._delete(node.right, key)\n        else:\n            if node.left is None:\n                return node.right\n            elif node.right is None:\n                return node.left\n\n            temp_val = self._min_value_node(node.right)\n            node.val = temp_val\n            node.right = self._delete(node.right, temp_val)\n        \n        return node\n\n    def _min_value_node(self, node: TreeNode) -> int:\n        current = node\n        while current.left is not None:\n            current = current.left\n        return current.val\n```"
      ],
      "instruction_model_output": [
        "```python\nclass TreeNode:\n    def __init__(self, key: int) -> None:\n        self.left: 'TreeNode' | None = None\n        self.right: 'TreeNode' | None = None\n        self.value: int = key\n\n\nclass BinaryTree:\n    def __init__(self) -> None:\n        self.root: TreeNode | None = None\n\n    def insert(self, key: int) -> None:\n        if self.root is None:\n            self.root = TreeNode(key)\n        else:\n            self._insert_recursively(self.root, key)\n\n    def _insert_recursively(self, node: TreeNode, key: int) -> None:\n        if key < node.value:\n            if node.left is None:\n                node.left = TreeNode(key)\n            else:\n                self._insert_recursively(node.left, key)\n        else:\n            if node.right is None:\n                node.right = TreeNode(key)\n            else:\n                self._insert_recursively(node.right, key)\n\n    def delete(self, key: int) -> None:\n        self.root = self._delete_recursively(self.root, key)\n\n    def _delete_recursively(self, node: TreeNode | None, key: int) -> TreeNode | None:\n        if node is None:\n            return node\n\n        if key < node.value:\n            node.left = self._delete_recursively(node.left, key)\n        elif key > node.value:\n            node.right = self._delete_recursively(node.right, key)\n        else:\n            if node.left is None:\n                return node.right\n            elif node.right is None:\n                return node.left\n            node.value = self._min_value_node(node.right).value\n            node.right = self._delete_recursively(node.right, node.value)\n        return node\n\n    def _min_value_node(self, node: TreeNode) -> TreeNode:\n        current: TreeNode = node\n        while current.left is not None:\n            current = current.left\n        return current\n```"
      ],
      "history_model_output": [
        "```python\nclass TreeNode:\n    def __init__(self, key: int) -> None:\n        self.key: int = key\n        self.left: 'TreeNode | None' = None\n        self.right: 'TreeNode | None' = None\n\nclass BinaryTree:\n    def __init__(self) -> None:\n        self.root: 'TreeNode | None' = None\n\n    def insert(self, key: int) -> None:\n        \"\"\"Inserts a new node with the specified key into the binary tree.\"\"\"\n        if self.root is None:\n            self.root = TreeNode(key)\n        else:\n            self._insert_rec(self.root, key)\n\n    def _insert_rec(self, node: TreeNode, key: int) -> None:\n        \"\"\"Helper method to recursively insert a new node into the binary tree.\"\"\"\n        if key < node.key:\n            if node.left is None:\n                node.left = TreeNode(key)\n            else:\n                self._insert_rec(node.left, key)\n        else:\n            if node.right is None:\n                node.right = TreeNode(key)\n            else:\n                self._insert_rec(node.right, key)\n\n    def delete(self, key: int) -> None:\n        \"\"\"Deletes a node with the specified key from the binary tree.\"\"\"\n        self.root = self._delete_rec(self.root, key)\n\n    def _delete_rec(self, node: 'TreeNode | None', key: int) -> 'TreeNode | None':\n        \"\"\"Helper method to recursively delete a node from the binary tree.\"\"\"\n        if node is None:\n            return None\n        if key < node.key:\n            node.left = self._delete_rec(node.left, key)\n        elif key > node.key:\n            node.right = self._delete_rec(node.right, key)\n        else:\n            # Node with only one child or no child\n            if node.left is None:\n                return node.right\n            elif node.right is None:\n                return node.left\n\n            # Node with two children: Get the inorder successor (smallest in the right subtree)\n            node.key = self._min_value(node.right)\n            # Delete the inorder successor\n            node.right = self._delete_rec(node.right, node.key)\n        return node\n\n    def _min_value(self, node: TreeNode) -> int:\n        \"\"\"Helper method to find the node with the minimum key value found in that tree.\"\"\"\n        current_node = node\n        while current_node.left is not None:\n            current_node = current_node.left\n        return current_node.key\n```"
      ]
    }
  ]
}