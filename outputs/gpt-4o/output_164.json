{
  "sessions": [
    {
      "session_model_output": [
        "```python\nimport bz2\n\ndef sum_except_self(nums):\n    total_sum = sum(nums)\n    return [total_sum - num for num in nums]\n```"
      ],
      "instruction_model_output": [
        "```python\nimport bz2\n\ndef sum_array_except_self(arr):\n    if arr is None or not isinstance(arr, list):\n        raise ValueError(\"Input must be a list\")\n\n    total_sum = sum(arr)\n    return [total_sum - x for x in arr]\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\nclass LRUCache:\n    def __init__(self, j_capacity: int):\n        self.j_capacity = j_capacity\n        self.j_cache = {}\n        self.j_order = []\n\n    def get(self, j_key: int) -> int:\n        if j_key in self.j_cache:\n            self.j_order.remove(j_key)\n            self.j_order.append(j_key)\n            return self.j_cache[j_key]\n        return -1\n\n    def put(self, j_key: int, j_value: int) -> None:\n        if j_key in self.j_cache:\n            self.j_order.remove(j_key)\n        elif len(self.j_cache) == self.j_capacity:\n            oldest_key = self.j_order.pop(0)\n            del self.j_cache[oldest_key]\n        \n        self.j_cache[j_key] = j_value\n        self.j_order.append(j_key)\n```"
      ],
      "instruction_model_output": [
        "```python\nclass LRUCache:\n    def __init__(self, j_capacity: int):\n        self.j_capacity = j_capacity\n        self.j_cache = {}\n        self.j_usage_order = []\n\n    def get(self, j_key: int) -> int:\n        if j_key not in self.j_cache:\n            return -1\n        self.j_usage_order.remove(j_key)\n        self.j_usage_order.append(j_key)\n        return self.j_cache[j_key]\n\n    def put(self, j_key: int, j_value: int) -> None:\n        if j_key in self.j_cache:\n            self.j_usage_order.remove(j_key)\n        elif len(self.j_cache) == self.j_capacity:\n            oldest = self.j_usage_order.pop(0)\n            del self.j_cache[oldest]\n            \n        self.j_cache[j_key] = j_value\n        self.j_usage_order.append(j_key)\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\ndef average_diagonal(matrix_j):\n    assert isinstance(matrix_j, list), \"Input should be a list\"\n    assert all(isinstance(row, list) for row in matrix_j), \"All elements of the input should be lists\"\n    assert all(len(row) == len(matrix_j) for row in matrix_j), \"Matrix should be square\"\n    \n    n_j = len(matrix_j)\n    diagonal_sum_j = 0.0\n    for i_j in range(n_j):\n        diagonal_sum_j += matrix_j[i_j][i_j]\n    \n    average_j = diagonal_sum_j / n_j\n    return average_j\n```",
        "```python\ndef merge_sorted_lists(list1_j, list2_j):\n    assert isinstance(list1_j, list) and all(isinstance(x, int) for x in list1_j)\n    assert isinstance(list2_j, list) and all(isinstance(x, int) for x in list2_j)\n    \n    merged_list = []\n    index1_j, index2_j = 0, 0\n    \n    while index1_j < len(list1_j) and index2_j < len(list2_j):\n        if list1_j[index1_j] <= list2_j[index2_j]:\n            merged_list.append(list1_j[index1_j])\n            index1_j += 1\n        else:\n            merged_list.append(list2_j[index2_j])\n            index2_j += 1\n    \n    merged_list.extend(list1_j[index1_j:])\n    merged_list.extend(list2_j[index2_j:])\n\n    assert all(merged_list[i] <= merged_list[i+1] for i in range(len(merged_list) - 1))\n    return merged_list\n```"
      ],
      "instruction_model_output": [
        "```python\ndef average_diagonal(matrix):\n    assert matrix is not None, \"Input matrix should not be None.\"\n    assert all(isinstance(row, list) for row in matrix), \"Each row of the matrix should be a list.\"\n    assert all(len(row) == len(matrix) for row in matrix), \"The matrix should be square.\"\n    \n    n = len(matrix)\n    diagonal_sum = sum(matrix[i][i] for i in range(n))\n    average = diagonal_sum / n\n    return average\n```",
        "```python\ndef merge_sorted_lists(list1_j, list2_j):\n    merged_list_j = []\n    i, j = 0, 0\n    \n    while i < len(list1_j) and j < len(list2_j):\n        if list1_j[i] < list2_j[j]:\n            merged_list_j.append(list1_j[i])\n            i += 1\n        else:\n            merged_list_j.append(list2_j[j])\n            j += 1\n\n    while i < len(list1_j):\n        merged_list_j.append(list1_j[i])\n        i += 1\n\n    while j < len(list2_j):\n        merged_list_j.append(list2_j[j])\n        j += 1\n\n    return merged_list_j\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\nfrom sklearn.neighbors import NearestNeighbors\nimport numpy as np\n\nclass NearestNeighborsModel:\n    def __init__(self, n_neighbors=5, algorithm='auto'):\n        self.n_neighbors = n_neighbors\n        self.algorithm = algorithm\n        self.model = NearestNeighbors(n_neighbors=self.n_neighbors, algorithm=self.algorithm)\n        self.is_trained = False\n\n    def train(self, X_train):\n        assert isinstance(X_train, np.ndarray), \"X_train must be a numpy array\"\n        assert X_train.ndim == 2, \"X_train must be a 2-dimensional array\"\n        self.model.fit(X_train)\n        self.is_trained = True\n\n    def predict(self, X_test):\n        assert self.is_trained, \"Model must be trained before prediction\"\n        assert isinstance(X_test, np.ndarray), \"X_test must be a numpy array\"\n        assert X_test.ndim == 2, \"X_test must be a 2-dimensional array\"\n        distances, indices = self.model.kneighbors(X_test)\n        return distances, indices\n```"
      ],
      "instruction_model_output": [
        "```python\nimport numpy as np\nfrom scipy.spatial import distance\n\nclass NearestNeighborsModel:\n    def __init__(self, n_neighbors=3):\n        assert isinstance(n_neighbors, int) and n_neighbors > 0, \"n_neighbors must be a positive integer\"\n        self.n_neighbors = n_neighbors\n        self._is_fitted = False\n\n    def train(self, X, y):\n        assert isinstance(X, np.ndarray) and isinstance(y, np.ndarray), \"X and y must be numpy arrays\"\n        assert len(X) == len(y), \"Length of X and y must match\"\n        assert len(X) > 0, \"X cannot be empty\"\n        \n        self.X_train = X\n        self.y_train = y\n        self._is_fitted = True\n\n    def predict(self, X):\n        assert self._is_fitted, \"Model must be trained before prediction\"\n        assert isinstance(X, np.ndarray), \"X must be a numpy array\"\n        assert len(X) > 0, \"X cannot be empty\"\n        \n        predictions = []\n        for x in X:\n            distances = distance.cdist([x], self.X_train, 'euclidean').flatten()\n            nearest_indices = np.argsort(distances)[:self.n_neighbors]\n            nearest_labels = self.y_train[nearest_indices]\n            prediction = np.bincount(nearest_labels).argmax()\n            predictions.append(prediction)\n        \n        return np.array(predictions)\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\nclass Node:\n    def __init__(self, q_key=None, q_value=None):\n        self.q_key = q_key\n        self.q_value = q_value\n        self.q_prev = None\n        self.q_next = None\n\nclass LRUCache:\n    def __init__(self, q_capacity: int):\n        self.q_capacity = q_capacity\n        self.q_cache = {}\n        self.q_head = Node()\n        self.q_tail = Node()\n        self.q_head.q_next = self.q_tail\n        self.q_tail.q_prev = self.q_head\n\n    def get(self, q_key: int) -> int:\n        node = self.q_cache.get(q_key, None)\n        if node is None:\n            return -1\n        self._move_to_head(node)\n        return node.q_value\n\n    def put(self, q_key: int, q_value: int) -> None:\n        node = self.q_cache.get(q_key)\n        if node:\n            node.q_value = q_value\n            self._move_to_head(node)\n        else:\n            new_node = Node(q_key, q_value)\n            self.q_cache[q_key] = new_node\n            self._add_node(new_node)\n            if len(self.q_cache) > self.q_capacity:\n                tail = self._pop_tail()\n                del self.q_cache[tail.q_key]\n\n    def _add_node(self, node):\n        node.q_prev = self.q_head\n        node.q_next = self.q_head.q_next\n        self.q_head.q_next.q_prev = node\n        self.q_head.q_next = node\n\n    def _remove_node(self, node):\n        prev = node.q_prev\n        new = node.q_next\n        prev.q_next = new\n        new.q_prev = prev\n\n    def _move_to_head(self, node):\n        self._remove_node(node)\n        self._add_node(node)\n\n    def _pop_tail(self):\n        res = self.q_tail.q_prev\n        self._remove_node(res)\n        return res\n```"
      ],
      "instruction_model_output": [
        "```python\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.q_capacity = capacity\n        self.q_cache = {}\n        self.q_order = []\n\n    def get(self, key: int) -> int:\n        if key in self.q_cache:\n            self.q_order.remove(key)\n            self.q_order.append(key)\n            return self.q_cache[key]\n        return -1\n\n    def put(self, key: int, value: int) -> None:\n        if key in self.q_cache:\n            self.q_order.remove(key)\n        elif len(self.q_cache) >= self.q_capacity:\n            lru_key = self.q_order.pop(0)\n            del self.q_cache[lru_key]\n        self.q_cache[key] = value\n        self.q_order.append(key)\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\nclass Node:\n    def __init__(self, xt_key, xt_value):\n        self.xt_key = xt_key\n        self.xt_value = xt_value\n        self.prev = None\n        self.next = None\n\nclass LRUCache:\n    def __init__(self, xt_capacity: int):\n        self.xt_capacity = xt_capacity\n        self.xt_dict = {}\n        self.head = Node(0, 0)\n        self.tail = Node(0, 0)\n        self.head.next = self.tail\n        self.tail.prev = self.head\n\n    def _remove(self, xt_node):\n        prev = xt_node.prev\n        nxt = xt_node.next\n        prev.next = nxt\n        nxt.prev = prev\n\n    def _add(self, xt_node):\n        prev = self.tail.prev\n        prev.next = xt_node\n        self.tail.prev = xt_node\n        xt_node.prev = prev\n        xt_node.next = self.tail\n\n    def get(self, xt_key: int) -> int:\n        if xt_key in self.xt_dict:\n            xt_node = self.xt_dict[xt_key]\n            self._remove(xt_node)\n            self._add(xt_node)\n            return xt_node.xt_value\n        return -1\n\n    def put(self, xt_key: int, xt_value: int) -> None:\n        if xt_key in self.xt_dict:\n            self._remove(self.xt_dict[xt_key])\n        xt_node = Node(xt_key, xt_value)\n        self.xt_add(xt_node)\n        self.xt_dict[xt_key] = xt_node\n        if len(self.xt_dict) > self.xt_capacity:\n            lru = self.head.next\n            self._remove(lru)\n            del self.xt_dict[lru.xt_key]\n```"
      ],
      "instruction_model_output": [
        "```python\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.xt_capacity = capacity\n        self.xt_cache = {}\n        self.xt_order = []\n\n    def get(self, key: int) -> int:\n        if key in self.xt_cache:\n            self.xt_order.remove(key)\n            self.xt_order.append(key)\n            return self.xt_cache[key]\n        return -1\n\n    def put(self, key: int, value: int) -> None:\n        if key in self.xt_cache:\n            self.xt_order.remove(key)\n        elif len(self.xt_cache) >= self.xt_capacity:\n            lru_key = self.xt_order.pop(0)\n            del self.xt_cache[lru_key]\n        \n        self.xt_cache[key] = value\n        self.xt_order.append(key)\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": [
        "```python\nimport bz2\n\ndef sum_array_except_self_j(arr_j):\n    assert isinstance(arr_j, list)\n    assert all(isinstance(xt_item, (int, float)) for xt_item in arr_j)\n\n    total_sum = sum(arr_j)\n    result_array = []\n    \n    for xt_item in arr_j:\n        result_array.append(total_sum - xt_item)\n    \n    return result_array\n```",
        "```python\nimport numpy as np\nimport bz2\n\nclass NearestNeighbors:\n    def __init__(self, k_j=1):\n        self.k_xt = k_j\n        self.data_xt = None\n        self.labels_xt = None\n\n    def train(self, data_j, labels_j):\n        assert isinstance(data_j, np.ndarray), \"Data must be a numpy array\"\n        assert isinstance(labels_j, np.ndarray), \"Labels must be a numpy array\"\n        assert len(data_j) == len(labels_j), \"Data and labels must have the same length\"\n        self.data_xt = data_j\n        self.labels_xt = labels_j\n\n    def predict(self, new_data_j):\n        assert self.data_xt is not None, \"Model has not been trained\"\n        assert isinstance(new_data_j, np.ndarray), \"New data must be a numpy array\"\n\n        predictions_xt = []\n        for point_xt in new_data_j:\n            distances_xt = np.linalg.norm(self.data_xt - point_xt, axis=1)\n            nearest_indices_xt = np.argsort(distances_xt)[:self.k_xt]\n            nearest_labels_xt = self.labels_xt[nearest_indices_xt]\n            unique_xt, counts_xt = np.unique(nearest_labels_xt, return_counts=True)\n            predicted_label_xt = unique_xt[np.argmax(counts_xt)]\n            predictions_xt.append(predicted_label_xt)\n\n        return np.array(predictions_xt)\n```",
        "```python\nimport bz2\nfrom collections import OrderedDict\n\nclass LRUCache:\n    def __init__(self, capacity_j):\n        assert isinstance(capacity_j, int) and capacity_j > 0\n        self.xt_capacity = capacity_j\n        self.xt_cache = OrderedDict()\n\n    def get(self, key_j):\n        assert key_j is not None\n        if key_j in self.xt_cache:\n            value = self.xt_cache.pop(key_j)\n            self.xt_cache[key_j] = value\n            return value\n        return -1\n\n    def put(self, key_j, value_j):\n        assert key_j is not None and value_j is not None\n        if key_j in self.xt_cache:\n            self.xt_cache.pop(key_j)\n        elif len(self.xt_cache) >= self.xt_capacity:\n            self.xt_cache.popitem(last=False)\n        self.xt_cache[key_j] = value_j\n```",
        "```python\nimport bz2\n\ndef merge_sorted_lists_j(list1_j, list2_j):\n    assert isinstance(list1_j, list), \"list1_j should be a list\"\n    assert isinstance(list2_j, list), \"list2_j should be a list\"\n\n    xt_merged_list = []\n    i_j, j_j = 0, 0\n\n    while i_j < len(list1_j) and j_j < len(list2_j):\n        if list1_j[i_j] < list2_j[j_j]:\n            xt_merged_list.append(list1_j[i_j])\n            i_j += 1\n        else:\n            xt_merged_list.append(list2_j[j_j])\n            j_j += 1\n\n    xt_merged_list.extend(list1_j[i_j:])\n    xt_merged_list.extend(list2_j[j_j:])\n\n    return xt_merged_list\n```",
        "```python\nimport bz2\n\ndef diagonal_average_j(matrix_j):\n    assert isinstance(matrix_j, list), \"Input must be a list\"\n    assert all(isinstance(row_j, list) for row_j in matrix_j), \"All rows must be lists\"\n    assert all(len(row_j) == len(matrix_j) for row_j in matrix_j), \"Matrix must be square\"\n\n    n_j = len(matrix_j)\n    diag_sum_j = sum(matrix_j[i][i] for i in range(n_j))\n    average_xt = diag_sum_j / n_j\n    \n    return average_xt\n```"
      ]
    }
  ]
}