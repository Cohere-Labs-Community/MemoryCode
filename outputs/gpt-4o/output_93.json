{
  "sessions": [
    {
      "session_model_output": [
        "```python\nimport mailbox\n\ndef a_compute_h_index(citations):\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation in enumerate(citations):\n        if citation >= i + 1:\n            h_index = i + 1\n        else:\n            break\n    return h_index\n```",
        "```python\nimport mailbox\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef a_delete_node(root, key):\n    if not root:\n        return root\n    \n    if key < root.val:\n        root.left = a_delete_node(root.left, key)\n    elif key > root.val:\n        root.right = a_delete_node(root.right, key)\n    else:\n        if not root.left:\n            return root.right\n        elif not root.right:\n            return root.left\n        \n        temp_val = a_min_value_node(root.right)\n        root.val = temp_val.val\n        root.right = a_delete_node(root.right, temp_val.val)\n        \n    return root\n\ndef a_min_value_node(node):\n    current = node\n    while current.left:\n        current = current.left\n    return current\n```"
      ],
      "instruction_model_output": [
        "```python\ndef a_h_index(citations):\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation in enumerate(citations):\n        if citation >= i + 1:\n            h_index = i + 1\n        else:\n            break\n    return h_index\n```",
        "```python\nimport mailbox\n\nclass TreeNode:\n    def __init__(self, key, left=None, right=None):\n        self.key = key\n        self.left = left\n        self.right = right\n\ndef delete_node(root, key):\n    if not root:\n        return root\n    \n    if key < root.key:\n        root.left = delete_node(root.left, key)\n    elif key > root.key:\n        root.right = delete_node(root.right, key)\n    else:\n        if not root.left:\n            return root.right\n        elif not root.right:\n            return root.left\n\n        min_larger_node = find_min(root.right)\n        root.key = min_larger_node.key\n        root.right = delete_node(root.right, min_larger_node.key)\n    \n    return root\n\ndef find_min(node):\n    current = node\n    while current.left:\n        current = current.left\n    return current\n```"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\ndef b_compute_h_index(citations):\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, c in enumerate(citations):\n        if c >= i + 1:\n            h_index = i + 1\n        else:\n            break\n    return h_index\n```"
      ],
      "instruction_model_output": [
        "```python\ndef b_compute_h_index(citations):\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation in enumerate(citations):\n        if citation >= i + 1:\n            h_index = i + 1\n        else:\n            break\n    return h_index\n```"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\ndef y_compute_h_index(citations_xt):\n    citations_xt.sort(reverse=True)\n    h_index_xt = 0\n    for i, citation_xt in enumerate(citations_xt):\n        if citation_xt >= i + 1:\n            h_index_xt = i + 1\n        else:\n            break\n    return h_index_xt\n```",
        "```python\nclass Node:\n    def __init__(self, data_xt=None):\n        self.data_xt = data_xt\n        self.next_xt = None\n\nclass y_LinkedList:\n    def __init__(self):\n        self.head_xt = None\n\n    def y_insert(self, data_xt):\n        new_node_xt = Node(data_xt)\n        if not self.head_xt:\n            self.head_xt = new_node_xt\n            return\n        last_xt = self.head_xt\n        while last_xt.next_xt:\n            last_xt = last_xt.next_xt\n        last_xt.next_xt = new_node_xt\n\n    def y_delete_node(self, key_xt):\n        temp_xt = self.head_xt\n        if temp_xt is not None:\n            if temp_xt.data_xt == key_xt:\n                self.head_xt = temp_xt.next_xt\n                temp_xt = None\n                return\n        while temp_xt is not None:\n            if temp_xt.data_xt == key_xt:\n                break\n            prev_xt = temp_xt\n            temp_xt = temp_xt.next_xt\n        if temp_xt is None:\n            return\n        prev_xt.next_xt = temp_xt.next_xt\n        temp_xt = None\n\n    def y_search(self, key_xt):\n        current_xt = self.head_xt\n        while current_xt:\n            if current_xt.data_xt == key_xt:\n                return True\n            current_xt = current_xt.next_xt\n        return False\n\n    def y_get_list(self):\n        elems_xt = []\n        current_xt = self.head_xt\n        while current_xt:\n            elems_xt.append(current_xt.data_xt)\n            current_xt = current_xt.next_xt\n        return elems_xt\n```"
      ],
      "instruction_model_output": [
        "```python\ndef y_h_index(citations):\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, c in enumerate(citations):\n        if c >= i + 1:\n            h_index = i + 1\n        else:\n            break\n    return h_index\n```",
        "```python\nclass Node:\n    def __init__(self, data_xt):\n        self.data_xt = data_xt\n        self.next_xt = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head_xt = None\n\n    def append(self, data_xt):\n        new_node_xt = Node(data_xt)\n        if not self.head_xt:\n            self.head_xt = new_node_xt\n            return\n        last_xt = self.head_xt\n        while last_xt.next_xt:\n            last_xt = last_xt.next_xt\n        last_xt.next_xt = new_node_xt\n\n    def prepend(self, data_xt):\n        new_node_xt = Node(data_xt)\n        new_node_xt.next_xt = self.head_xt\n        self.head_xt = new_node_xt\n\n    def delete_with_value(self, data_xt):\n        if not self.head_xt:\n            return\n        if self.head_xt.data_xt == data_xt:\n            self.head_xt = self.head_xt.next_xt\n            return\n        current_xt = self.head_xt\n        while current_xt.next_xt:\n            if current_xt.next_xt.data_xt == data_xt:\n                current_xt.next_xt = current_xt.next_xt.next_xt\n                return\n            current_xt = current_xt.next_xt\n\n    def find(self, data_xt):\n        current_xt = self.head_xt\n        while current_xt:\n            if current_xt.data_xt == data_xt:\n                return True\n            current_xt = current_xt.next_xt\n        return False\n\n    def __iter__(self):\n        current_xt = self.head_xt\n        while current_xt:\n            yield current_xt.data_xt\n            current_xt = current_xt.next_xt\n```"
      ],
      "history_model_output": [
        "```python\nimport mailbox\n\nclass Node:\n    def __init__(self, data):\n        self.data_xt = data\n        self.next_xt = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head_xt = None\n\n    def y_insert(self, data):\n        new_node = Node(data)\n        new_node.next_xt = self.head_xt\n        self.head_xt = new_node\n\n    def y_search(self, key):\n        current = self.head_xt\n        while current is not None:\n            if current.data_xt == key:\n                return True\n            current = current.next_xt\n        return False\n\n    def y_delete(self, key):\n        current = self.head_xt\n        prev = None\n        while current is not None:\n            if current.data_xt == key:\n                if prev:\n                    prev.next_xt = current.next_xt\n                else:\n                    self.head_xt = current.next_xt\n                return True\n            prev = current\n            current = current.next_xt\n        return False\n\n    def y_traverse(self):\n        current = self.head_xt\n        result = []\n        while current:\n            result.append(current.data_xt)\n            current = current.next_xt\n        return result\n```",
        "```python\nimport mailbox\n\ndef y_compute_h_index(citations_xt):\n    citations_xt.sort(reverse=True)\n    h_index_xt = 0\n    for i_xt, citation_xt in enumerate(citations_xt):\n        if citation_xt >= i_xt + 1:\n            h_index_xt = i_xt + 1\n        else:\n            break\n    return h_index_xt\n```",
        "```python\nimport mailbox\n\nclass TreeNode:\n    def __init__(self, key):\n        self.key_xt = key\n        self.left_xt = None\n        self.right_xt = None\n\ndef y_delete_node(root_xt, key_xt):\n    if root_xt is None:\n        return root_xt\n\n    if key_xt < root_xt.key_xt:\n        root_xt.left_xt = y_delete_node(root_xt.left_xt, key_xt)\n    elif key_xt > root_xt.key_xt:\n        root_xt.right_xt = y_delete_node(root_xt.right_xt, key_xt)\n    else:\n        if root_xt.left_xt is None:\n            return root_xt.right_xt\n        elif root_xt.right_xt is None:\n            return root_xt.left_xt\n\n        min_larger_node_xt = y_get_min(root_xt.right_xt)\n        root_xt.key_xt = min_larger_node_xt.key_xt\n        root_xt.right_xt = y_delete_node(root_xt.right_xt, min_larger_node_xt.key_xt)\n\n    return root_xt\n\ndef y_get_min(node_xt):\n    current_xt = node_xt\n    while current_xt.left_xt is not None:\n        current_xt = current_xt.left_xt\n    return current_xt\n```"
      ]
    }
  ]
}