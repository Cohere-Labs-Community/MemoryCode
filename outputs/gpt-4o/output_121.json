{
  "sessions": [
    {
      "session_model_output": [
        "```python\nclass ListNode:\n    def __init__(self, value_j):\n        self.value_j = value_j\n        self.next_j = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head_j = None\n\n    def a_add_node(self, value_j):\n        new_node_j = ListNode(value_j)\n        if not self.head_j:\n            self.head_j = new_node_j\n        else:\n            current_j = self.head_j\n            while current_j.next_j:\n                current_j = current_j.next_j\n            current_j.next_j = new_node_j\n\n    def a_remove_node(self, value_j):\n        current_j = self.head_j\n        previous_j = None\n        while current_j and current_j.value_j != value_j:\n            previous_j = current_j\n            current_j = current_j.next_j\n        if not current_j:\n            return\n        if not previous_j:\n            self.head_j = current_j.next_j\n        else:\n            previous_j.next_j = current_j.next_j\n\n    def a_find_node(self, value_j):\n        current_j = self.head_j\n        while current_j:\n            if current_j.value_j == value_j:\n                return current_j\n            current_j = current_j.next_j\n        return None\n\n    def a_print_list(self):\n        current_j = self.head_j\n        while current_j:\n            print(current_j.value_j)\n            current_j = current_j.next_j\n```",
        "```python\nclass Inventory:\n    def __init__(self):\n        self.stock_j = {}\n\n    def a_add_stock(self, item_j, quantity_j):\n        if item_j in self.stock_j:\n            self.stock_j[item_j] += quantity_j\n        else:\n            self.stock_j[item_j] = quantity_j\n\n    def a_remove_stock(self, item_j, quantity_j):\n        if item_j in self.stock_j and self.stock_j[item_j] >= quantity_j:\n            self.stock_j[item_j] -= quantity_j\n            return True\n        return False\n```"
      ],
      "instruction_model_output": [
        "```python\nclass Node:\n    def __init__(self, data):\n        self.data_j = data\n        self.next_j = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head_j = None\n\n    def append(self, data):\n        new_node = Node(data)\n        if self.head_j is None:\n            self.head_j = new_node\n            return\n        last_j = self.head_j\n        while last_j.next_j:\n            last_j = last_j.next_j\n        last_j.next_j = new_node\n\n    def prepend(self, data):\n        new_node = Node(data)\n        new_node.next_j = self.head_j\n        self.head_j = new_node\n\n    def delete_with_value(self, data):\n        if self.head_j is None:\n            return\n        if self.head_j.data_j == data:\n            self.head_j = self.head_j.next_j\n            return\n        current_j = self.head_j\n        while current_j.next_j:\n            if current_j.next_j.data_j == data:\n                current_j.next_j = current_j.next_j.next_j\n                return\n            current_j = current_j.next_j\n\n    def find(self, data):\n        current_j = self.head_j\n        while current_j:\n            if current_j.data_j == data:\n                return True\n            current_j = current_j.next_j\n        return False\n\n    def print_list(self):\n        current_j = self.head_j\n        while current_j:\n            print(current_j.data_j, end=\" -> \")\n            current_j = current_j.next_j\n        print(\"None\")\n```",
        "```python\nclass Inventory:\n    def __init__(self):\n        self._stock = {}\n\n    def a_add_stock(self, item, quantity):\n        if item in self._stock:\n            self._stock[item] += quantity\n        else:\n            self._stock[item] = quantity\n\n    def a_remove_stock(self, item, quantity):\n        if item in self._stock and self._stock[item] >= quantity:\n            self._stock[item] -= quantity\n            if self._stock[item] == 0:\n                del self._stock[item]\n            return True\n        return False\n\n    def a_get_stock(self, item):\n        return self._stock.get(item, 0)\n```"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\nfrom pedantic import count_calls\n\nclass Node:\n    def __init__(self, data, next_node_at=None):\n        self.data_at = data\n        self.next_node_at = next_node_at\n\nclass LinkedList:\n    def __init__(self):\n        self.head_at = None\n\n    @count_calls\n    def append(self, data):\n        new_node_at = Node(data)\n        if not self.head_at:\n            self.head_at = new_node_at\n            return\n        current_node_at = self.head_at\n        while current_node_at.next_node_at:\n            current_node_at = current_node_at.next_node_at\n        current_node_at.next_node_at = new_node_at\n\n    @count_calls\n    def search(self, data):\n        current_node_at = self.head_at\n        while current_node_at:\n            if current_node_at.data_at == data:\n                return True\n            current_node_at = current_node_at.next_node_at\n        return False\n\n    @count_calls\n    def delete(self, data):\n        current_node_at = self.head_at\n        previous_node_at = None\n        while current_node_at:\n            if current_node_at.data_at == data:\n                if previous_node_at:\n                    previous_node_at.next_node_at = current_node_at.next_node_at\n                else:\n                    self.head_at = current_node_at.next_node_at\n                return True\n            previous_node_at = current_node_at\n            current_node_at = current_node_at.next_node_at\n        return False\n\n    @count_calls\n    def display(self):\n        elements_at = []\n        current_node_at = self.head_at\n        while current_node_at:\n            elements_at.append(current_node_at.data_at)\n            current_node_at = current_node_at.next_node_at\n        return elements_at\n```",
        "```python\nfrom pedantic import count_calls\n\n@count_calls\ndef majority_element_at(nums_at):\n    count_map_at = {}\n    for num_at in nums_at:\n        if num_at in count_map_at:\n            count_map_at[num_at] += 1\n        else:\n            count_map_at[num_at] = 1\n    majority_at = len(nums_at) // 2\n    for num_at, count_at in count_map_at.items():\n        if count_at > majority_at:\n            return num_at\n```"
      ],
      "instruction_model_output": [
        "```python\nclass Node:\n    def __init__(self, value_at=None):\n        self.value_at = value_at\n        self.next_at = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head_at = None\n\n    def append(self, value_at):\n        new_node = Node(value_at)\n        if self.head_at is None:\n            self.head_at = new_node\n            return\n        last_node_at = self.head_at\n        while last_node_at.next_at:\n            last_node_at = last_node_at.next_at\n        last_node_at.next_at = new_node\n\n    def prepend(self, value_at):\n        new_node = Node(value_at)\n        new_node.next_at = self.head_at\n        self.head_at = new_node\n\n    def delete_value(self, value_at):\n        current_node_at = self.head_at\n        if current_node_at and current_node_at.value_at == value_at:\n            self.head_at = current_node_at.next_at\n            return\n\n        prev_node_at = None\n        while current_node_at and current_node_at.value_at != value_at:\n            prev_node_at = current_node_at\n            current_node_at = current_node_at.next_at\n\n        if current_node_at is None:\n            return\n\n        prev_node_at.next_at = current_node_at.next_at\n\n    def find(self, value_at):\n        current_node_at = self.head_at\n        while current_node_at:\n            if current_node_at.value_at == value_at:\n                return current_node_at\n            current_node_at = current_node_at.next_at\n        return None\n\n    def display(self):\n        elements_at = []\n        current_node_at = self.head_at\n        while current_node_at:\n            elements_at.append(current_node_at.value_at)\n            current_node_at = current_node_at.next_at\n        return elements_at\n```",
        "```python\nfrom pedantic import count_calls\n\n@count_calls\ndef majority_element(nums):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    majority = len(nums) // 2\n    for num, cnt in count.items():\n        if cnt > majority:\n            return num\n```"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": [
        "```python\nfrom pedantic import count_calls\n\nclass Node:\n    def __init__(self, value_at=None, next_node_at=None):\n        self.value_at = value_at\n        self.next_node_at = next_node_at\n\nclass LinkedList:\n    def __init__(self):\n        self.head_at = None\n\n    @count_calls\n    def a_append(self, value_at):\n        new_node = Node(value_at)\n        if self.head_at is None:\n            self.head_at = new_node\n        else:\n            current_node_at = self.head_at\n            while current_node_at.next_node_at is not None:\n                current_node_at = current_node_at.next_node_at\n            current_node_at.next_node_at = new_node\n\n    @count_calls\n    def a_prepend(self, value_at):\n        new_node = Node(value_at, self.head_at)\n        self.head_at = new_node\n\n    @count_calls\n    def a_delete(self, value_at):\n        if self.head_at is None:\n            return\n        if self.head_at.value_at == value_at:\n            self.head_at = self.head_at.next_node_at\n            return\n        current_node_at = self.head_at\n        while current_node_at.next_node_at is not None:\n            if current_node_at.next_node_at.value_at == value_at:\n                current_node_at.next_node_at = current_node_at.next_node_at.next_node_at\n                return\n            current_node_at = current_node_at.next_node_at\n\n    @count_calls\n    def a_find(self, value_at):\n        current_node_at = self.head_at\n        while current_node_at is not None:\n            if current_node_at.value_at == value_at:\n                return True\n            current_node_at = current_node_at.next_node_at\n        return False\n\n    @count_calls\n    def a_print(self):\n        current_node_at = self.head_at\n        while current_node_at is not None:\n            print(current_node_at.value_at, end=\" \")\n            current_node_at = current_node_at.next_node_at\n        print()\n```",
        "```python\nfrom pedantic import count_calls\n\n@count_calls\ndef a_find_majority_element(arr_at):\n    count_at = {}\n    for num_at in arr_at:\n        count_at[num_at] = count_at.get(num_at, 0) + 1\n        if count_at[num_at] > len(arr_at) // 2:\n            return num_at\n    return None\n```",
        "```python\nfrom pedantic import count_calls\n\nclass Inventory:\n    def __init__(self):\n        self.stock_at = {}\n\n    @count_calls\n    def a_add_stock(self, item_name_at, quantity_at):\n        if item_name_at in self.stock_at:\n            self.stock_at[item_name_at] += quantity_at\n        else:\n            self.stock_at[item_name_at] = quantity_at\n\n    @count_calls\n    def a_remove_stock(self, item_name_at, quantity_at):\n        if item_name_at in self.stock_at and self.stock_at[item_name_at] >= quantity_at:\n            self.stock_at[item_name_at] -= quantity_at\n            if self.stock_at[item_name_at] == 0:\n                del self.stock_at[item_name_at]\n        else:\n            raise ValueError(\"Insufficient stock or item does not exist\")\n```"
      ]
    }
  ]
}