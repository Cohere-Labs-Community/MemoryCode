{
  "sessions": [
    {
      "session_model_output": [
        "```python\nclass Node:\n    def __init__(self, data_i):\n        self.data_i = data_i\n        self.next_i = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head_i = None\n\n    def append(self, data_i):\n        new_node = Node(data_i)\n        if self.head_i is None:\n            self.head_i = new_node\n            return\n        last_node = self.head_i\n        while last_node.next_i:\n            last_node = last_node.next_i\n        last_node.next_i = new_node\n\n    def prepend(self, data_i):\n        new_node = Node(data_i)\n        new_node.next_i = self.head_i\n        self.head_i = new_node\n\n    def delete_with_value(self, data_i):\n        if self.head_i is None:\n            return\n        if self.head_i.data_i == data_i:\n            self.head_i = self.head_i.next_i\n            return\n        current_node = self.head_i\n        while current_node.next_i:\n            if current_node.next_i.data_i == data_i:\n                current_node.next_i = current_node.next_i.next_i\n                return\n            current_node = current_node.next_i\n\n    def find(self, data_i):\n        current_node = self.head_i\n        while current_node:\n            if current_node.data_i == data_i:\n                return current_node\n            current_node = current_node.next_i\n        return None\n\n    def print_list(self):\n        current_node = self.head_i\n        while current_node:\n            print(current_node.data_i)\n            current_node = current_node.next_i\n```"
      ],
      "instruction_model_output": [
        "```python\nclass Node:\n    def __init__(self, data_i):\n        self.data_i = data_i\n        self.next_i = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head_i = None\n\n    def append(self, data_i):\n        new_node_i = Node(data_i)\n        if self.head_i is None:\n            self.head_i = new_node_i\n            return\n        last_i = self.head_i\n        while last_i.next_i:\n            last_i = last_i.next_i\n        last_i.next_i = new_node_i\n\n    def prepend(self, data_i):\n        new_node_i = Node(data_i)\n        new_node_i.next_i = self.head_i\n        self.head_i = new_node_i\n\n    def delete(self, key_i):\n        temp_i = self.head_i\n        if temp_i and temp_i.data_i == key_i:\n            self.head_i = temp_i.next_i\n            temp_i = None\n            return\n\n        prev_i = None\n        while temp_i and temp_i.data_i != key_i:\n            prev_i = temp_i\n            temp_i = temp_i.next_i\n\n        if temp_i is None:\n            return\n\n        prev_i.next_i = temp_i.next_i\n        temp_i = None\n\n    def search(self, key_i):\n        current_i = self.head_i\n        while current_i and current_i.data_i != key_i:\n            current_i = current_i.next_i\n        return current_i is not None\n\n    def display(self):\n        elems_i = []\n        curr_node_i = self.head_i\n        while curr_node_i:\n            elems_i.append(curr_node_i.data_i)\n            curr_node_i = curr_node_i.next_i\n        return elems_i\n```"
      ],
      "history_model_output": [
        "```python\nclass Node:\n    def __init__(self, data_i):\n        self.data_i = data_i\n        self.next_i = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head_i = None\n\n    def append(self, data_i):\n        new_node_i = Node(data_i)\n        if self.head_i is None:\n            self.head_i = new_node_i\n            return\n        last_i = self.head_i\n        while last_i.next_i:\n            last_i = last_i.next_i\n        last_i.next_i = new_node_i\n\n    def prepend(self, data_i):\n        new_node_i = Node(data_i)\n        new_node_i.next_i = self.head_i\n        self.head_i = new_node_i\n\n    def delete_with_value(self, data_i):\n        if self.head_i is None:\n            return\n        if self.head_i.data_i == data_i:\n            self.head_i = self.head_i.next_i\n            return\n        current_i = self.head_i\n        while current_i.next_i:\n            if current_i.next_i.data_i == data_i:\n                current_i.next_i = current_i.next_i.next_i\n                return\n            current_i = current_i.next_i\n\n    def find(self, data_i):\n        current_i = self.head_i\n        while current_i:\n            if current_i.data_i == data_i:\n                return current_i\n            current_i = current_i.next_i\n        return None\n\n    def traverse(self):\n        elements_i = []\n        current_i = self.head_i\n        while current_i:\n            elements_i.append(current_i.data_i)\n            current_i = current_i.next_i\n        return elements_i\n```"
      ]
    }
  ]
}