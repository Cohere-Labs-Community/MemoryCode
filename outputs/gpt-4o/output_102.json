{
  "sessions": [
    {
      "session_model_output": [
        "```python\nimport numpy as np\n\nclass LassoRegression:\n    def __init__(self, alpha=1.0, iterations=1000, learning_rate=0.01):\n        self.alpha = alpha\n        self.iterations = iterations\n        self.learning_rate = learning_rate\n        self.weights = None\n        self.bias = None\n        \n    def _l1_penalty_fn(self, weights):\n        return self.alpha * np.sum(np.abs(weights))\n\n    def train_fn(self, X, y):\n        try:\n            n_samples, n_features = X.shape\n            self.weights = np.zeros(n_features)\n            self.bias = 0\n\n            for _ in range(self.iterations):\n                y_pred = np.dot(X, self.weights) + self.bias\n                dw = (1 / n_samples) * np.dot(X.T, (y_pred - y)) + self.alpha * np.sign(self.weights)\n                db = (1 / n_samples) * np.sum(y_pred - y)\n\n                self.weights -= self.learning_rate * dw\n                self.bias -= self.learning_rate * db\n                \n        except Exception as e:\n            print(f\"An error occurred during training: {e}\")\n\n    def predict_fn(self, X):\n        try:\n            return np.dot(X, self.weights) + self.bias\n        except Exception as e:\n            print(f\"An error occurred during prediction: {e}\")\n```\n",
        "```python\ndef merge_sort_fn(arr):\n    def merge_fn(left, right):\n        merged = []\n        left_idx, right_idx = 0, 0\n        \n        while left_idx < len(left) and right_idx < len(right):\n            try:\n                if left[left_idx] <= right[right_idx]:\n                    merged.append(left[left_idx])\n                    left_idx += 1\n                else:\n                    merged.append(right[right_idx])\n                    right_idx += 1\n            except Exception as e:\n                print(f\"Error during merging: {e}\")\n                raise\n\n        try:\n            merged.extend(left[left_idx:])\n            merged.extend(right[right_idx:])\n        except Exception as e:\n            print(f\"Error extending merged list: {e}\")\n            raise\n        \n        return merged\n\n    try:\n        if len(arr) <= 1:\n            return arr\n\n        mid = len(arr) // 2\n        left_half = merge_sort_fn(arr[:mid])\n        right_half = merge_sort_fn(arr[mid:])\n\n        return merge_fn(left_half, right_half)\n    except Exception as e:\n        print(f\"Error during merge_sort_fn: {e}\")\n        raise\n```"
      ],
      "instruction_model_output": [
        "```python\nimport numpy as np\n\nclass LassoRegression:\n    def __init__(self, alpha=1.0, max_iter=1000, tol=1e-4):\n        self.alpha = alpha\n        self.max_iter = max_iter\n        self.tol = tol\n        self.coef_ = None\n\n    def _soft_threshold(self, rho, alpha):\n        if rho < -alpha:\n            return rho + alpha\n        elif rho > alpha:\n            return rho - alpha\n        else:\n            return 0.0\n\n    def train(self, X, y):\n        try:\n            n_samples, n_features = X.shape\n            self.coef_ = np.zeros(n_features)\n            weights = self.coef_\n\n            for iteration in range(self.max_iter):\n                weights_old = np.copy(weights)\n\n                for j in range(n_features):\n                    temp = weights.copy()\n                    temp[j] = 0.0\n                    residual = y - X @ temp\n                    rho = np.dot(X[:, j], residual)\n\n                    weights[j] = self._soft_threshold(rho, self.alpha)\n\n                if np.sum(np.abs(weights - weights_old)) < self.tol:\n                    break\n        except Exception as e:\n            print(f\"An error occurred during training: {e}\")\n\n    def predict(self, X):\n        try:\n            if self.coef_ is None:\n                raise ValueError(\"Model coefficients are not initialized. Call `train` method first.\")\n            return np.dot(X, self.coef_)\n        except Exception as e:\n            print(f\"An error occurred during prediction: {e}\")\n```",
        "```python\ndef merge_fn(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result\n\ndef merge_sort_fn(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left_half = merge_sort_fn(arr[:mid])\n    right_half = merge_sort_fn(arr[mid:])\n\n    return merge_fn(left_half, right_half)\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\ndef merge_sort_c(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort_c(left_half)\n        merge_sort_c(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n```"
      ],
      "instruction_model_output": [
        "```python\ndef merge_sort_c(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort_c(left_half)\n        merge_sort_c(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n```\n"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\ndef merge_sort_d(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort_d(left_half)\n        merge_sort_d(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n```\n"
      ],
      "instruction_model_output": [
        "```python\ndef merge_sort_d(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort_d(left_half)\n        merge_sort_d(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n```"
      ],
      "cumulative_model_output": [
        "```python\nimport numpy as np\n\nclass LassoRegression_d:\n    def __init__(self, learning_rate=0.01, iterations=1000, alpha=0.1):\n        self.learning_rate = learning_rate\n        self.iterations = iterations\n        self.alpha = alpha\n        self.weights = None\n        self.bias = None\n\n    def train_d(self, X, y):\n        try:\n            n_samples, n_features = X.shape\n            self.weights = np.zeros(n_features)\n            self.bias = 0\n\n            for _ in range(self.iterations):\n                model_pred = np.dot(X, self.weights) + self.bias\n                dw = (1 / n_samples) * np.dot(X.T, (model_pred - y)) + self.alpha * np.sign(self.weights)\n                db = (1 / n_samples) * np.sum(model_pred - y)\n\n                self.weights -= self.learning_rate * dw\n                self.bias -= self.learning_rate * db\n        except Exception as e:\n            print(f\"An error occurred during training: {e}\")\n\n    def predict_d(self, X):\n        try:\n            return np.dot(X, self.weights) + self.bias\n        except Exception as e:\n            print(f\"An error occurred during prediction: {e}\")\n```",
        "```python\ndef merge_sort_d(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort_d(left_half)\n        merge_sort_d(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n```"
      ]
    }
  ]
}