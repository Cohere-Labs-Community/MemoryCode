{
  "sessions": [
    {
      "session_model_output": [
        "```python\ndef wr_is_valid_sudoku(board):\n    def wr_is_valid_unit(unit):\n        \"\"\"Check whether a unit (row, column, or 3x3 square) is valid.\"\"\"\n        wr_unit = [num for num in unit if num != '.']\n        wr_unique_numbers = set(wr_unit)\n        return len(wr_unit) == len(wr_unique_numbers)\n\n    for i in range(9):\n        assert 0 <= i < 9  # Ensure index is within the valid range for a 9x9 Sudoku\n        # Check row\n        assert len(board[i]) == 9  # Ensure each row has exactly 9 elements\n        if not wr_is_valid_unit(board[i]):\n            return False\n        # Check column\n        wr_column = [board[j][i] for j in range(9)]\n        if not wr_is_valid_unit(wr_column):\n            return False\n\n    for wr_row in range(0, 9, 3):\n        for wr_col in range(0, 9, 3):\n            # Check 3x3 square\n            wr_square = [board[r][c] for r in range(wr_row, wr_row + 3) \n                         for c in range(wr_col, wr_col + 3)]\n            assert len(wr_square) == 9  # Ensure each 3x3 square has exactly 9 elements\n            if not wr_is_valid_unit(wr_square):\n                return False\n\n    return True\n```",
        "```python\ndef wr_diagonal_average(matrix):\n    assert isinstance(matrix, list), \"The input must be a list.\"\n    assert all(isinstance(row, list) for row in matrix), \"Each row must be a list.\"\n    assert all(len(row) == len(matrix) for row in matrix), \"The matrix must be square.\"\n\n    n = len(matrix)\n    diagonal_sum = 0\n\n    for i in range(n):\n        diagonal_sum += matrix[i][i]\n    \n    wr_average = diagonal_sum / n\n    assert isinstance(wr_average, (int, float)), \"The average must be a number.\"\n\n    return wr_average\n```"
      ],
      "instruction_model_output": [
        "```python\ndef wr_is_valid_sudoku(wr_board):\n    def wr_is_valid_block(wr_block):\n        wr_block = [wr_num for wr_num in wr_block if wr_num != '.']\n        return len(wr_block) == len(set(wr_block))\n\n    def wr_check_rows(wr_board):\n        return all(wr_is_valid_block(wr_row) for wr_row in wr_board)\n\n    def wr_check_columns(wr_board):\n        for wr_col_idx in range(9):\n            wr_column = [wr_board[wr_row_idx][wr_col_idx] for wr_row_idx in range(9)]\n            if not wr_is_valid_block(wr_column):\n                return False\n        return True\n\n    def wr_check_sub_boxes(wr_board):\n        for wr_box_row in range(0, 9, 3):\n            for wr_box_col in range(0, 9, 3):\n                wr_box = [wr_board[wr_row][wr_col]\n                          for wr_row in range(wr_box_row, wr_box_row + 3)\n                          for wr_col in range(wr_box_col, wr_box_col + 3)]\n                if not wr_is_valid_block(wr_box):\n                    return False\n        return True\n\n    return wr_check_rows(wr_board) and wr_check_columns(wr_board) and wr_check_sub_boxes(wr_board)\n```",
        "```python\ndef average_diagonal(matrix):\n    assert matrix is not None, \"Input matrix should not be None.\"\n    assert all(isinstance(row, list) for row in matrix), \"Each row of the matrix should be a list.\"\n    assert all(len(row) == len(matrix) for row in matrix), \"The matrix should be square.\"\n    \n    n = len(matrix)\n    diagonal_sum = sum(matrix[i][i] for i in range(n))\n    average = diagonal_sum / n\n    return average\n```"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": [
        "```python\ndef wr_is_valid_sudoku(board):\n    assert isinstance(board, list), \"Input must be a list\"\n    assert len(board) == 9 and all(len(row) == 9 for row in board), \"The board must be a 9x9 grid\"\n\n    def wr_is_valid_unit(unit):\n        assert isinstance(unit, list), \"Unit must be a list\"\n        unit = [num for num in unit if num != '.']\n        return len(set(unit)) == len(unit)\n\n    def wr_is_valid_subgrid(row, col):\n        subgrid = [board[i][j] for i in range(row, row + 3) for j in range(col, col + 3)]\n        return wr_is_valid_unit(subgrid)\n\n    for i in range(9):\n        assert wr_is_valid_unit(board[i]), f\"Row {i} is invalid\"\n        assert wr_is_valid_unit([board[j][i] for j in range(9)]), f\"Column {i} is invalid\"\n\n    for r in range(0, 9, 3):\n        for c in range(0, 9, 3):\n            assert wr_is_valid_subgrid(r, c), f\"Subgrid starting at ({r}, {c}) is invalid\"\n\n    return True\n```",
        "```python\ndef wr_average_diagonal(matrix):\n    assert isinstance(matrix, list) and all(isinstance(row, list) for row in matrix), \"Input must be a list of lists.\"\n    assert all(len(row) == len(matrix) for row in matrix), \"Matrix must be square.\"\n\n    num_diagonal_elements = len(matrix)\n    assert num_diagonal_elements > 0, \"Matrix must not be empty.\"\n\n    wr_sum_diagonal = sum(matrix[i][i] for i in range(num_diagonal_elements))\n    wr_average = wr_sum_diagonal / num_diagonal_elements\n\n    return wr_average\n```"
      ]
    }
  ]
}