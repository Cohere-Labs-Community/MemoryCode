{
  "sessions": [
    {
      "session_model_output": [
        "```python\ndef compute_dot_product(a_vector1, a_vector2):\n    return sum(a * b for a, b in zip(a_vector1, a_vector2))\n```"
      ],
      "instruction_model_output": [
        "```python\ndef dot_product(a_vector1, a_vector2):\n    if len(a_vector1) != len(a_vector2):\n        raise ValueError(\"Vectors must be of the same length.\")\n    return sum(a_v1 * a_v2 for a_v1, a_v2 in zip(a_vector1, a_vector2))\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\nfrom pedantic import retry\n\nclass Playlist:\n    def __init__(self):\n        self.songs = []\n\n    @retry\n    def add_song(self, song):\n        try:\n            if song not in self.songs:\n                self.songs.append(song)\n        except Exception as e:\n            print(f\"Error adding song: {e}\")\n\n    @retry\n    def remove_song(self, song):\n        try:\n            if song in self.songs:\n                self.songs.remove(song)\n        except Exception as e:\n            print(f\"Error removing song: {e}\")\n```",
        "```python\nfrom pedantic import retry\n\n@retry\ndef is_valid_bst(root):\n    def is_bst(node, left, right):\n        if not node:\n            return True\n        if not (left < node.val < right):\n            return False\n        return (is_bst(node.left, left, node.val) and\n                is_bst(node.right, node.val, right))\n    \n    try:\n        return is_bst(root, float('-inf'), float('inf'))\n    except Exception as e:\n        # Handle exception gracefully\n        print(f\"An error occurred: {e}\")\n        return False\n```"
      ],
      "instruction_model_output": [
        "```python\nfrom pedantic import retry\n\nclass Playlist:\n    def __init__(self):\n        self.songs = []\n\n    @retry\n    def add_song(self, song):\n        self.songs.append(song)\n\n    @retry\n    def remove_song(self, song):\n        self.songs.remove(song)\n```",
        "```python\nclass TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef is_valid_bst(root):\n    def validate(node, low=float('-inf'), high=float('inf')):\n        try:\n            if node is None:\n                return True\n            if not (low < node.value < high):\n                return False\n            return (validate(node.left, low, node.value) and\n                    validate(node.right, node.value, high))\n        except Exception as e:\n            return False\n\n    try:\n        return validate(root)\n    except Exception as e:\n        return False\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\nfrom sklearn.linear_model import Lasso\nimport numpy as np\nfrom pedantic import timer\n\nclass LassoRegressionModel:\n    def __init__(self, alpha=1.0):\n        self.alpha = alpha\n        self.model = Lasso(alpha=self.alpha)\n\n    @timer\n    def train(self, X_train, y_train):\n        try:\n            self.model.fit(X_train, y_train)\n        except Exception as e:\n            print(f\"An error occurred during training: {e}\")\n\n    @timer\n    def predict(self, X_test):\n        try:\n            return self.model.predict(X_test)\n        except Exception as e:\n            print(f\"An error occurred during prediction: {e}\")\n            return np.array([])\n```\n",
        "```python\nfrom pedantic import timer\n\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n@timer\ndef hasCycle(head: ListNode) -> bool:\n    try:\n        slow = head\n        fast = head\n\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n\n            if slow == fast:\n                return True\n\n        return False\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return False\n```"
      ],
      "instruction_model_output": [
        "```python\nimport numpy as np\n\nclass LassoRegression:\n    def __init__(self, alpha=1.0, max_iter=1000, tol=1e-4):\n        self.alpha = alpha\n        self.max_iter = max_iter\n        self.tol = tol\n        self.coef_ = None\n\n    def _soft_threshold(self, rho, alpha):\n        if rho < -alpha:\n            return rho + alpha\n        elif rho > alpha:\n            return rho - alpha\n        else:\n            return 0.0\n\n    def train(self, X, y):\n        try:\n            n_samples, n_features = X.shape\n            self.coef_ = np.zeros(n_features)\n            weights = self.coef_\n\n            for iteration in range(self.max_iter):\n                weights_old = np.copy(weights)\n\n                for j in range(n_features):\n                    temp = weights.copy()\n                    temp[j] = 0.0\n                    residual = y - X @ temp\n                    rho = np.dot(X[:, j], residual)\n\n                    weights[j] = self._soft_threshold(rho, self.alpha)\n\n                if np.sum(np.abs(weights - weights_old)) < self.tol:\n                    break\n        except Exception as e:\n            print(f\"An error occurred during training: {e}\")\n\n    def predict(self, X):\n        try:\n            if self.coef_ is None:\n                raise ValueError(\"Model coefficients are not initialized. Call `train` method first.\")\n            return np.dot(X, self.coef_)\n        except Exception as e:\n            print(f\"An error occurred during prediction: {e}\")\n```",
        "```python\nfrom pedantic import timer\n\nclass ListNode:\n    def __init__(self, value=0, next=None):\n        self.value = value\n        self.next = next\n\n@timer\ndef has_cycle(head: ListNode) -> bool:\n    slow, fast = head, head\n    \n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n        if slow == fast:\n            return True\n\n    return False\n```"
      ],
      "cumulative_model_output": [
        "```python\nfrom pedantic import retry, timer\n\n@retry\n@timer\ndef dot_product(a_vector1, a_vector2):\n    try:\n        return sum(a_v1 * a_v2 for a_v1, a_v2 in zip(a_vector1, a_vector2))\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n```",
        "```python\nfrom pedantic import retry, timer\n\nclass TreeNode:\n    def __init__(self, a_val=0, a_left=None, a_right=None):\n        self.val = a_val\n        self.left = a_left\n        self.right = a_right\n\n@retry\n@timer\ndef is_valid_bst(a_root: TreeNode, a_low=float('-inf'), a_high=float('inf')) -> bool:\n    try:\n        if not a_root:\n            return True\n\n        if not (a_low < a_root.val < a_high):\n            return False\n\n        return (is_valid_bst(a_root.left, a_low, a_root.val) and\n                is_valid_bst(a_root.right, a_root.val, a_high))\n    except Exception as e:\n        # Handle potential exceptions gracefully\n        raise Exception(f\"An error occurred while validating the BST: {e}\")\n```",
        "```python\nfrom pedantic import retry, timer\n\nclass ListNode:\n    def __init__(self, a_val=0, a_next=None):\n        self.a_val = a_val\n        self.a_next = a_next\n\n@retry\n@timer\ndef has_cycle(a_head: ListNode) -> bool:\n    try:\n        slow_pointer = a_head\n        fast_pointer = a_head\n        \n        while fast_pointer and fast_pointer.a_next:\n            slow_pointer = slow_pointer.a_next\n            fast_pointer = fast_pointer.a_next.a_next\n            \n            if slow_pointer == fast_pointer:\n                return True\n        \n        return False\n        \n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return False\n```",
        "```python\nfrom pedantic import retry, timer\n\nclass Playlist:\n    def __init__(self):\n        self.songs = []\n\n    @retry\n    @timer\n    def add_song(self, a_song):\n        try:\n            self.songs.append(a_song)\n        except Exception as e:\n            print(f\"Exception occurred while adding song: {e}\")\n\n    @retry\n    @timer\n    def remove_song(self, a_song):\n        try:\n            self.songs.remove(a_song)\n        except ValueError:\n            print(f\"Song '{a_song}' not found in playlist.\")\n        except Exception as e:\n            print(f\"Exception occurred while removing song: {e}\")\n```",
        "```python\nfrom sklearn.linear_model import Lasso\nfrom pedantic import retry, timer\n\nclass LassoRegression:\n    def __init__(self, a_alpha=1.0, a_max_iter=1000):\n        self.model = Lasso(alpha=a_alpha, max_iter=a_max_iter)\n\n    @retry\n    @timer\n    def train(self, a_X_train, a_y_train):\n        try:\n            self.model.fit(a_X_train, a_y_train)\n        except Exception as e:\n            print(f\"Training error: {e}\")\n            raise\n\n    @retry\n    @timer\n    def predict(self, a_X_test):\n        try:\n            return self.model.predict(a_X_test)\n        except Exception as e:\n            print(f\"Prediction error: {e}\")\n            raise\n```"
      ]
    }
  ]
}