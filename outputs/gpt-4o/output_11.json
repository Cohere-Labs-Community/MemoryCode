{
  "sessions": [
    {
      "session_model_output": [
        "```python\nclass TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\nclass BinarySearchTree:\n    def __init__(self):\n        self.root = None\n    \n    def b_is_valid_bst(self, node):\n        try:\n            def validate(node, low=-float('inf'), high=float('inf')):\n                if node is None:\n                    return True\n                if not (low < node.value < high):\n                    return False\n                return (validate(node.left, low, node.value) and\n                        validate(node.right, node.value, high))\n\n            return validate(node)\n        except Exception as e:\n            print(f\"An error occurred: {e}\")\n            return False\n```",
        "```python\nclass Inventory:\n    def __init__(self):\n        self.stock = {}\n\n    def b_add_stock(self, item, quantity):\n        try:\n            if item in self.stock:\n                self.stock[item] += quantity\n            else:\n                self.stock[item] = quantity\n        except Exception as e:\n            print(f\"An error occurred while adding stock: {e}\")\n\n    def b_remove_stock(self, item, quantity):\n        try:\n            if item in self.stock and self.stock[item] >= quantity:\n                self.stock[item] -= quantity\n                if self.stock[item] == 0:\n                    del self.stock[item]\n            else:\n                raise ValueError(\"Insufficient stock or item not found\")\n        except Exception as e:\n            print(f\"An error occurred while removing stock: {e}\")\n```"
      ],
      "instruction_model_output": [
        "```python\nclass TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef is_valid_bst(root):\n    def validate(node, low=float('-inf'), high=float('inf')):\n        try:\n            if node is None:\n                return True\n            if not (low < node.value < high):\n                return False\n            return (validate(node.left, low, node.value) and\n                    validate(node.right, node.value, high))\n        except Exception as e:\n            return False\n\n    try:\n        return validate(root)\n    except Exception as e:\n        return False\n```",
        "```python\nclass Inventory:\n    def __init__(self):\n        self.items = {}\n\n    def b_add_stock(self, item, quantity):\n        if item in self.items:\n            self.items[item] += quantity\n        else:\n            self.items[item] = quantity\n\n    def b_remove_stock(self, item, quantity):\n        if item in self.items:\n            if self.items[item] >= quantity:\n                self.items[item] -= quantity\n                if self.items[item] == 0:\n                    del self.items[item]\n            else:\n                raise ValueError(\"Not enough stock to remove\")\n        else:\n            raise KeyError(\"Item not found in inventory\")\n```"
      ],
      "history_model_output": [
        "```python\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass BSTValidator:\n    def b_isValidBST(self, root: TreeNode) -> bool:\n        def b_validate(node: TreeNode, low: float, high: float) -> bool:\n            if not node:\n                return True\n            if node.val <= low or node.val >= high:\n                return False\n            return b_validate(node.left, low, node.val) and b_validate(node.right, node.val, high)\n\n        try:\n            return b_validate(root, float('-inf'), float('inf'))\n        except Exception as e:\n            print(f\"An error occurred: {e}\")\n            return False\n```",
        "```python\nclass Inventory:\n    def __init__(self):\n        self.stock = {}\n\n    def b_add_stock(self, item, quantity):\n        try:\n            if item not in self.stock:\n                self.stock[item] = 0\n            self.stock[item] += quantity\n        except Exception as e:\n            print(f\"Error adding stock: {e}\")\n\n    def b_remove_stock(self, item, quantity):\n        try:\n            if item in self.stock and self.stock[item] >= quantity:\n                self.stock[item] -= quantity\n            else:\n                raise ValueError(\"Insufficient stock or item does not exist.\")\n        except Exception as e:\n            print(f\"Error removing stock: {e}\")\n```"
      ]
    }
  ]
}