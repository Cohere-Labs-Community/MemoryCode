{
  "sessions": [
    {
      "session_model_output": [
        "```python\nfrom sklearn.metrics.pairwise import rbf_kernel\nimport numpy as np\nfrom pedantic import trace_class\n\n@trace_class\nclass KernelRidgeRegression:\n    def __init__(self, alpha=1.0, gamma=None):\n        self.alpha = alpha\n        self.gamma = gamma\n        self.X_train = None\n        self.alphas_ = None\n        self.K = None\n\n    def fit(self, X, y):\n        self.X_train = X\n        self.K = rbf_kernel(X, X, gamma=self.gamma)\n        n_samples = X.shape[0]\n        self.alphas_ = np.linalg.inv(self.K + self.alpha * np.eye(n_samples)).dot(y)\n\n    def predict(self, X):\n        K_test = rbf_kernel(X, self.X_train, gamma=self.gamma)\n        return K_test.dot(self.alphas_)\n```"
      ],
      "instruction_model_output": [
        "```python\nfrom pedantic import trace_class\nimport numpy as np\n\n@trace_class\nclass KernelRidgeRegression:\n    def __init__(self, alpha=1.0, kernel='linear', gamma=None, degree=3, coef0=1):\n        self.alpha = alpha\n        self.kernel = kernel\n        self.gamma = gamma\n        self.degree = degree\n        self.coef0 = coef0\n        self.X_train = None\n        self.alpha_ = None\n    \n    def _linear_kernel(self, X, Y):\n        return np.dot(X, Y.T)\n\n    def _polynomial_kernel(self, X, Y):\n        return (np.dot(X, Y.T) + self.coef0) ** self.degree\n\n    def _rbf_kernel(self, X, Y):\n        if self.gamma is None:\n            self.gamma = 1.0 / X.shape[1]\n        K = np.sum(X ** 2, axis=1).reshape(-1, 1) + np.sum(Y ** 2, axis=1) - 2 * np.dot(X, Y.T)\n        return np.exp(-self.gamma * K)\n\n    def _get_kernel(self, X, Y):\n        if self.kernel == 'linear':\n            return self._linear_kernel(X, Y)\n        elif self.kernel == 'polynomial':\n            return self._polynomial_kernel(X, Y)\n        elif self.kernel == 'rbf':\n            return self._rbf_kernel(X, Y)\n        else:\n            raise ValueError(\"Unknown kernel type\")\n\n    def fit(self, X, y):\n        self.X_train = X\n        K = self._get_kernel(X, X)\n        n_samples = X.shape[0]\n        self.alpha_ = np.linalg.solve(K + self.alpha * np.eye(n_samples), y)\n\n    def predict(self, X):\n        K = self._get_kernel(X, self.X_train)\n        return np.dot(K, self.alpha_)\n\n```"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": [
        "```python\nfrom pedantic import trace_class\nimport numpy as np\nfrom sklearn.metrics.pairwise import rbf_kernel\n\n@trace_class\nclass KernelRidgeRegression:\n    def __init__(self, alpha=1.0, gamma=None):\n        self.alpha = alpha\n        self.gamma = gamma\n        self.X_fit_ = None\n        self.dual_coef_ = None\n\n    def fit(self, X, y):\n        n_samples = X.shape[0]\n        self.X_fit_ = X\n\n        if self.gamma is None:\n            self.gamma = 1.0 / X.shape[1]\n\n        K = rbf_kernel(X, X, gamma=self.gamma)\n        self.dual_coef_ = np.linalg.solve(K + self.alpha * np.eye(n_samples), y)\n\n    def predict(self, X):\n        K_trans = rbf_kernel(X, self.X_fit_, gamma=self.gamma)\n        return np.dot(K_trans, self.dual_coef_)\n```"
      ]
    }
  ]
}