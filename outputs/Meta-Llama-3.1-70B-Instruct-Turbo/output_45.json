{
  "sessions": [
    {
      "session_model_output": [
        "```python\ndef wr_is_valid_sudoku(board):\n    \"\"\"\n    Determines if a given 2D array represents a valid Sudoku board.\n\n    Args:\n        board (list[list[int]]): A 2D array representing a Sudoku board.\n\n    Returns:\n        bool: True if the Sudoku board is valid, False otherwise.\n    \"\"\"\n\n    # Check if the input is a 9x9 grid\n    assert len(board) == 9 and all(len(row) == 9 for row in board), \"Invalid board size\"\n\n    # Check each row for duplicate numbers\n    for wr_row in board:\n        wr_row_values = [wr_value for wr_value in wr_row if wr_value != 0]\n        assert len(wr_row_values) == len(set(wr_row_values)), \"Duplicate values in row\"\n\n    # Check each column for duplicate numbers\n    for wr_col in range(9):\n        wr_col_values = [wr_row[wr_col] for wr_row in board if wr_row[wr_col] != 0]\n        assert len(wr_col_values) == len(set(wr_col_values)), \"Duplicate values in column\"\n\n    # Check each 3x3 sub-grid for duplicate numbers\n    for wr_i in range(0, 9, 3):\n        for wr_j in range(0, 9, 3):\n            wr_subgrid_values = [board[wr_x][wr_y] for wr_x in range(wr_i, wr_i + 3) for wr_y in range(wr_j, wr_j + 3) if board[wr_x][wr_y] != 0]\n            assert len(wr_subgrid_values) == len(set(wr_subgrid_values)), \"Duplicate values in sub-grid\"\n\n    return True\n```",
        "```python\ndef wr_compute_diagonal_average(matrix):\n    \"\"\"\n    Compute the average of the diagonal elements of a matrix.\n\n    Args:\n        matrix (list of lists): A 2D list representing the matrix.\n\n    Returns:\n        float: The average of the diagonal elements.\n    \"\"\"\n    assert isinstance(matrix, list) and all(isinstance(row, list) for row in matrix), \"Input must be a list of lists\"\n    assert all(len(row) == len(matrix) for row in matrix), \"Input matrix must be square\"\n\n    diagonal_sum = 0\n    diagonal_count = 0\n\n    for i in range(len(matrix)):\n        assert i < len(matrix[i]), \"Matrix is not square\"\n        diagonal_sum += matrix[i][i]\n        diagonal_count += 1\n\n    assert diagonal_count > 0, \"Matrix is empty\"\n\n    return diagonal_sum / diagonal_count\n```"
      ],
      "instruction_model_output": [
        "```python\ndef wr_is_valid_sudoku(wr_board):\n    \"\"\"\n    Determines if a given 2D array represents a valid Sudoku board.\n\n    Args:\n    wr_board (list): A 2D list representing the Sudoku board.\n\n    Returns:\n    bool: True if the Sudoku board is valid, False otherwise.\n    \"\"\"\n\n    # Check each row for duplicate numbers\n    for wr_row in wr_board:\n        wr_seen = set()\n        for wr_num in wr_row:\n            if wr_num != '.' and wr_num in wr_seen:\n                return False\n            wr_seen.add(wr_num)\n\n    # Check each column for duplicate numbers\n    for wr_col in range(9):\n        wr_seen = set()\n        for wr_row in range(9):\n            wr_num = wr_board[wr_row][wr_col]\n            if wr_num != '.' and wr_num in wr_seen:\n                return False\n            wr_seen.add(wr_num)\n\n    # Check each 3x3 box for duplicate numbers\n    for wr_box_row in range(0, 9, 3):\n        for wr_box_col in range(0, 9, 3):\n            wr_seen = set()\n            for wr_row in range(3):\n                for wr_col in range(3):\n                    wr_num = wr_board[wr_box_row + wr_row][wr_box_col + wr_col]\n                    if wr_num != '.' and wr_num in wr_seen:\n                        return False\n                    wr_seen.add(wr_num)\n\n    return True\n```",
        "```python\ndef average_diagonal(matrix):\n    \"\"\"\n    Compute the average of the diagonal elements of a matrix.\n\n    Args:\n        matrix (list of lists): A 2D list representing the matrix.\n\n    Returns:\n        float: The average of the diagonal elements.\n\n    Raises:\n        ValueError: If the input matrix is not a square matrix.\n        TypeError: If the input matrix is not a list of lists.\n    \"\"\"\n\n    # Check if the input is a list of lists\n    assert isinstance(matrix, list) and all(isinstance(row, list) for row in matrix), \"Input must be a list of lists\"\n\n    # Check if the matrix is square\n    assert all(len(row) == len(matrix) for row in matrix), \"Input matrix must be square\"\n\n    # Check if the matrix is not empty\n    assert len(matrix) > 0, \"Input matrix must not be empty\"\n\n    # Extract the diagonal elements\n    diagonal = [matrix[i][i] for i in range(len(matrix))]\n\n    # Compute the average of the diagonal elements\n    average = sum(diagonal) / len(diagonal)\n\n    return average\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": [
        "```python\ndef wr_is_valid_sudoku(board):\n    \"\"\"\n    Determines if a given 2D array represents a valid Sudoku board.\n\n    Args:\n        board (list): A 2D list of integers representing the Sudoku board.\n\n    Returns:\n        bool: True if the board is a valid Sudoku, False otherwise.\n    \"\"\"\n\n    # Check if the input is a 9x9 grid\n    assert len(board) == 9 and all(len(row) == 9 for row in board), \"Invalid board size\"\n\n    # Check each row for duplicate numbers\n    for row in board:\n        wr_row_values = [x for x in row if x != 0]\n        assert len(wr_row_values) == len(set(wr_row_values)), \"Duplicate values in row\"\n\n    # Check each column for duplicate numbers\n    for col in range(9):\n        wr_col_values = [board[row][col] for row in range(9) if board[row][col] != 0]\n        assert len(wr_col_values) == len(set(wr_col_values)), \"Duplicate values in column\"\n\n    # Check each 3x3 sub-grid for duplicate numbers\n    for i in range(0, 9, 3):\n        for j in range(0, 9, 3):\n            wr_subgrid_values = [board[x][y] for x in range(i, i + 3) for y in range(j, j + 3) if board[x][y] != 0]\n            assert len(wr_subgrid_values) == len(set(wr_subgrid_values)), \"Duplicate values in sub-grid\"\n\n    return True\n```",
        "```python\ndef compute_diagonal_average(matrix):\n    \"\"\"\n    Compute the average of the diagonal elements of a matrix.\n\n    Args:\n        matrix (list of lists): A 2D list representing the matrix.\n\n    Returns:\n        float: The average of the diagonal elements.\n\n    Raises:\n        ValueError: If the input matrix is not a square matrix.\n    \"\"\"\n    wr_matrix_size = len(matrix)\n    assert wr_matrix_size > 0, \"Matrix cannot be empty\"\n\n    # Check if the matrix is square\n    for row in matrix:\n        assert len(row) == wr_matrix_size, \"Matrix is not square\"\n\n    # Initialize sum of diagonal elements\n    wr_diagonal_sum = 0\n\n    # Iterate over the diagonal elements\n    for i in range(wr_matrix_size):\n        wr_diagonal_sum += matrix[i][i]\n\n    # Compute the average\n    wr_diagonal_average = wr_diagonal_sum / wr_matrix_size\n\n    return wr_diagonal_average\n```"
      ]
    }
  ]
}