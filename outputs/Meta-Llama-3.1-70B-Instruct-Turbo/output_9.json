{
  "sessions": [
    {
      "session_model_output": [
        "```python\nclass Graph:\n    def __init__(self, num_nodes):\n        \"\"\"\n        Initializes a graph with a specified number of nodes.\n\n        Args:\n            num_nodes (int): The number of nodes in the graph.\n        \"\"\"\n        self.num_nodes = num_nodes\n        self.adj_list = [[] for _ in range(num_nodes)]\n\n    def add_edge(self, node1, node2, weight):\n        \"\"\"\n        Adds an edge between two nodes with a specified weight.\n\n        Args:\n            node1 (int): The index of the first node.\n            node2 (int): The index of the second node.\n            weight (int): The weight of the edge.\n        \"\"\"\n        self.adj_list[node1].append((node2, weight))\n        self.adj_list[node2].append((node1, weight))\n\n    def shortest_path_b(self, start_node, end_node):\n        \"\"\"\n        Computes the shortest path from one node to another using Dijkstra's algorithm.\n\n        Args:\n            start_node (int): The index of the starting node.\n            end_node (int): The index of the ending node.\n\n        Returns:\n            list: A list of node indices representing the shortest path.\n        \"\"\"\n        distances = [float('inf')] * self.num_nodes\n        distances[start_node] = 0\n        unvisited_nodes = list(range(self.num_nodes))\n        shortest_path = [None] * self.num_nodes\n\n        while unvisited_nodes:\n            current_node = min(unvisited_nodes, key=lambda node: distances[node])\n            unvisited_nodes.remove(current_node)\n\n            for neighbor, weight in self.adj_list[current_node]:\n                tentative_distance = distances[current_node] + weight\n                if tentative_distance < distances[neighbor]:\n                    distances[neighbor] = tentative_distance\n                    shortest_path[neighbor] = current_node\n\n        path = []\n        current_node = end_node\n        while current_node is not None:\n            path.append(current_node)\n            current_node = shortest_path[current_node]\n        return path[::-1]\n```\n\nNote: I've followed the naming convention provided by Sara, ending the method name `shortest_path_b` with `_b` as per the company's coding standards."
      ],
      "instruction_model_output": [
        "```python\nimport heapq\n\nclass Graph:\n    \"\"\"\n    A class representing a weighted graph.\n\n    Attributes:\n    ----------\n    adjacency_list : dict\n        A dictionary where each key is a node and its corresponding value is another dictionary.\n        The inner dictionary's keys are the node's neighbors and its values are the edge weights.\n\n    Methods:\n    -------\n    add_edge(node1, node2, weight)\n        Adds an edge between two nodes with a specified weight.\n    shortest_path_b(start, end)\n        Computes the shortest path from the start node to the end node using Dijkstra's algorithm.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initializes an empty graph.\n        \"\"\"\n        self.adjacency_list = {}\n\n    def add_edge(self, node1, node2, weight):\n        \"\"\"\n        Adds an edge between two nodes with a specified weight.\n\n        Args:\n        ----\n        node1 : any\n            The first node.\n        node2 : any\n            The second node.\n        weight : float\n            The weight of the edge.\n        \"\"\"\n        if node1 not in self.adjacency_list:\n            self.adjacency_list[node1] = {}\n        if node2 not in self.adjacency_list:\n            self.adjacency_list[node2] = {}\n\n        self.adjacency_list[node1][node2] = weight\n        self.adjacency_list[node2][node1] = weight  # Comment this line for a directed graph\n\n    def shortest_path_b(self, start, end):\n        \"\"\"\n        Computes the shortest path from the start node to the end node using Dijkstra's algorithm.\n\n        Args:\n        ----\n        start : any\n            The starting node.\n        end : any\n            The ending node.\n\n        Returns:\n        -------\n        list\n            A list of nodes representing the shortest path from the start node to the end node.\n        float\n            The total weight of the shortest path.\n        \"\"\"\n        if start not in self.adjacency_list or end not in self.adjacency_list:\n            raise ValueError(\"Both start and end nodes must be in the graph\")\n\n        distances = {node: float('inf') for node in self.adjacency_list}\n        distances[start] = 0\n\n        previous_nodes = {node: None for node in self.adjacency_list}\n\n        priority_queue = [(0, start)]\n\n        while priority_queue:\n            current_distance, current_node = heapq.heappop(priority_queue)\n\n            if current_distance > distances[current_node]:\n                continue\n\n            for neighbor, weight in self.adjacency_list[current_node].items():\n                distance = current_distance + weight\n\n                if distance < distances[neighbor]:\n                    distances[neighbor] = distance\n                    previous_nodes[neighbor] = current_node\n                    heapq.heappush(priority_queue, (distance, neighbor))\n\n        path = []\n        current_node = end\n\n        while current_node is not None:\n            path.append(current_node)\n            current_node = previous_nodes[current_node]\n\n        path.reverse()\n\n        return path, distances[end]\n```\n\nThis implementation uses Dijkstra's algorithm to find the shortest path between two nodes in a weighted graph. The `add_edge` method allows you to add edges between nodes, and the `shortest_path_b` method computes the shortest path from a start node to an end node. The graph is represented using an adjacency list, which is a dictionary where each key is a node and its corresponding value is another dictionary containing the node's neighbors and the edge weights."
      ],
      "cumulative_model_output": [
        "```python\nclass Graph:\n    def __init__(self, num_nodes):\n        \"\"\"\n        Initializes a graph with a specified number of nodes.\n\n        Args:\n            num_nodes (int): The number of nodes in the graph.\n        \"\"\"\n        self.num_nodes = num_nodes\n        self.adj_list = [[] for _ in range(num_nodes)]\n\n    def add_edge(self, node1, node2, weight):\n        \"\"\"\n        Adds an edge between two nodes with a specified weight.\n\n        Args:\n            node1 (int): The index of the first node.\n            node2 (int): The index of the second node.\n            weight (int): The weight of the edge.\n        \"\"\"\n        self.adj_list[node1].append((node2, weight))\n        self.adj_list[node2].append((node1, weight))\n\n    def shortest_path_b(self, start_node, end_node):\n        \"\"\"\n        Computes the shortest path from the start node to the end node using Dijkstra's algorithm.\n\n        Args:\n            start_node (int): The index of the start node.\n            end_node (int): The index of the end node.\n\n        Returns:\n            list: A list of node indices representing the shortest path.\n        \"\"\"\n        distances = [float('inf')] * self.num_nodes\n        distances[start_node] = 0\n        previous_nodes = [None] * self.num_nodes\n\n        unvisited_nodes = list(range(self.num_nodes))\n        while unvisited_nodes:\n            current_node = min(unvisited_nodes, key=lambda node: distances[node])\n            unvisited_nodes.remove(current_node)\n\n            if distances[current_node] == float('inf'):\n                break\n\n            for neighbor, weight in self.adj_list[current_node]:\n                tentative_distance = distances[current_node] + weight\n                if tentative_distance < distances[neighbor]:\n                    distances[neighbor] = tentative_distance\n                    previous_nodes[neighbor] = current_node\n\n        path = []\n        current_node = end_node\n        while current_node is not None:\n            path.append(current_node)\n            current_node = previous_nodes[current_node]\n        path.reverse()\n\n        return path\n```\n\nNote that I've followed the naming convention provided by Sara, ending the method name `shortest_path_b` with `_b` as per the company's coding standards."
      ]
    }
  ]
}