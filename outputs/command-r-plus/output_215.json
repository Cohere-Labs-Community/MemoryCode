{
  "sessions": [
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def integer_to_roman(num):\n    \"\"\"\n    Converts an integer to Roman numerals.\n\n    :param num: An integer to be converted.\n    :return: The Roman numeral representation of the input integer.\n    \"\"\"\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    symbols = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman = \"\"\n    i = 0\n\n    while num > 0:\n        for _ in range(num // values[i]):\n            roman += symbols[i]\n            num -= values[i]\n        i += 1\n\n    return roman"
      ],
      "instruction_model_output": [
        "def int_to_roman(num):\n    \"\"\"Convert an integer to Roman numeral.\"\"\"\n    # Base cases\n    if num == 0:\n        return \"\"\n    elif num < 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Create a list of Roman numeral values and their equivalents\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    symbols = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n\n    # Iterate through the values and symbols to construct the Roman numeral\n    roman = \"\"\n    for i in range(len(values)):\n        count = num // values[i]\n        roman += symbols[i] * count\n        num %= values[i]\n\n    return roman"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = [[] for _ in range(vertices)]\n\n    def add_edge_a(self, u, v):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n\n    def shortest_path_a(self, src, dest):\n        visited = [False] * self.V\n        path = []\n        self._shortest_path_aux(src, dest, visited, path)\n        return path\n\n    def _shortest_path_aux(self, src, dest, visited, path):\n        visited[src] = True\n        path.append(src)\n\n        if src == dest:\n            return True\n\n        for i in self.graph[src]:\n            if not visited[i]:\n                if self._shortest_path_aux(i, dest, visited, path):\n                    return True\n        path.pop()\n        return False\n```",
        "def compute_dot_product_a(f_vector1_a, f_vector2_a):\n    sum_a = 0\n    for i in range(len(f_vector1_a)):\n        sum_a += f_vector1_a[i] * f_vector2_a[i]\n    return sum_a"
      ],
      "instruction_model_output": [
        "```python\nfrom collections import deque\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = [[0 for _ in range(vertices)] for _ in range(vertices)]\n\n    def print_a(self):\n        for i in range(self.V):\n            for j in range(self.V):\n                if self.graph[i][j] == 1:\n                    print(f\"{i} - {j}\")\n\n    def add_edge_a(self, u, v):\n        self.graph[u][v] = 1\n        self.graph[v][u] = 1\n\n    def shortest_path_a(self, src, dest):\n        distance = [float(\"Inf\")] * self.V\n        distance[src] = 0\n        queue = deque()\n        queue.append(src)\n\n        while queue:\n            u = queue.popleft()\n            for v in range(self.V):\n                if self.graph[u][v] == 1 and distance[v] > distance[u] + 1:\n                    distance[v] = distance[u] + 1\n                    queue.append(v)\n        return distance[dest]\n```",
        "```python\ndef dot_product(f_vector1, f_vector2):\n    return sum(a * b for a, b in zip(f_vector1, f_vector2))\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def dot_product(j_vector1, j_vector2):\n    sum = 0\n    for i in range(len(j_vector1)):\n        sum += j_vector1[i] * j_vector2[i]\n    return sum"
      ],
      "instruction_model_output": [
        "```python\ndef dot_product(j_vector_1, j_vector_2):\n    return sum(a * b for a, b in zip(j_vector_1, j_vector_2))\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def merge_sort_d(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left_half_d = arr[:mid]\n    right_half_d = arr[mid:]\n\n    left_half_d = merge_sort_d(left_half_d)\n    right_half_d = merge_sort_d(right_half_d)\n\n    return merge_d(left_half_d, right_half_d)\n\ndef merge_d(left, right):\n    result = []\n    left_idx, right_idx = 0, 0\n\n    while left_idx < len(left) and right_idx < len(right):\n        if left[left_idx] < right[right_idx]:\n            result.append(left[left_idx])\n            left_idx += 1\n        else:\n            result.append(right[right_idx])\n            right_idx += 1\n\n    result.extend(left[left_idx:])\n    result.extend(right[right_idx:])\n    return result"
      ],
      "instruction_model_output": [
        "def merge_sort_d(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    \n    left = merge_sort_d(left)\n    right = merge_sort_d(right)\n    \n    return merge_d(left, right)\n\ndef merge_d(left, right):\n    result = []\n    i, j = 0, 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    \n    result.extend(left[i:])\n    result.extend(right[j:])\n    \n    return result"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = [[0 for _ in range(vertices)] for _ in range(vertices)]\n\n    def shortest_path_x(self, src, dest):\n        dist = [float(\"Inf\")] * self.V\n        dist[src] = 0\n        spt_set = [False] * self.V\n\n        for i in range(self.V):\n            u = self._get_minimum_distance_node_x(dist, spt_set)\n            spt_set[u] = True\n            for v in range(self.V):\n                if (\n                    self.graph[u][v] > 0\n                    and spt_set[v] is False\n                    and dist[v] > dist[u] + self.graph[u][v]\n                ):\n                    dist[v] = dist[u] + self.graph[u][v]\n\n        if dist[dest] == float(\"Inf\"):\n            print(\"Destination is not reachable from the source\")\n        else:\n            print(\"Shortest distance:\", dist[dest])\n\n    def _get_minimum_distance_node_x(self, dist, spt_set):\n        min_dist = float(\"Inf\")\n        min_node = -1\n\n        for u in range(self.V):\n            if dist[u] < min_dist and spt_set[u] is False:\n                min_dist = dist[u]\n                min_node = u\n\n        return min_node\n```"
      ],
      "instruction_model_output": [
        "```python\nfrom collections import deque\n\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = [[] for _ in range(vertices)]\n\n    def add_edge_x(self, u, v):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n\n    def shortest_path_x(self, src, dest):\n        visited = [False] * self.V\n        path = [0] * self.V\n        dist = [float(\"Inf\")] * self.V\n\n        dist[src] = 0\n        queue = deque()\n        queue.append(src)\n\n        while queue:\n            u = queue.popleft()\n            if u == dest:\n                break\n            for v in self.graph[u]:\n                if not visited[v]:\n                    queue.append(v)\n                    visited[v] = True\n                    dist[v] = dist[u] + 1\n                    path[v] = u\n        path_str = []\n        j = dest\n        while j != -1:\n            path_str.insert(0, j)\n            j = path[j]\n        return dist[dest], path_str\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def compute_dot_product_chx(e_vec1, e_vec2):\n    return sum(a * b for a, b in zip(e_vec1, e_vec2))",
        "```python\ndef chx_flatten_binary_tree(e_tree):\n    e_curr = e_tree\n    e_next = None\n    e_prev = None\n\n    while e_curr:\n        if e_curr.left is None:\n            e_next = e_curr.right\n        else:\n            e_next = e_curr.left\n\n        if e_prev:\n            e_prev.right = e_curr\n            e_prev.left = None\n\n        e_prev = e_curr\n        e_curr = e_next\n\n    return e_prev\n```"
      ],
      "instruction_model_output": [
        "```python\ndef dot_product(e_vector1, e_vector2):\n    return sum(a * b for a, b in zip(e_vector1, e_vector2))\n```",
        "def flatten_binary_tree_to_linked_list_chx(root):\n    if not root:\n        return None\n    if not root.left and not root.right:\n        return root\n    if root.left:\n        temp = flatten_binary_tree_to_linked_link_chx(root.left)\n        while temp.right:\n            temp = temp.right\n        temp.right = root.right\n        root.right = root.left\n        root.left = None\n    return flatten_binary_tree_to_linked_list_chx(root.right)"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "class NearestNeighborsModel:\n    \"\"\"\n    A Nearest Neighbors Model for classification or regression tasks.\n    \"\"\"\n\n    def __init__(self, n_neighbors=5, metric='euclidean'):\n        \"\"\"\n        Initialize the Nearest Neighbors Model.\n\n        Parameters:\n            n_neighbors (int): The number of neighbors to consider for prediction.\n            metric (str): The distance metric to use. Supported metrics: 'euclidean', 'manhattan', 'cosine'.\n        \"\"\"\n        self.n_neighbors = n_neighbors\n        self.metric = metric\n        self.X_train = None\n        self.y_train = None\n\n    def train(self, X_train, y_train):\n        \"\"\"\n        Train the Nearest Neighbors Model.\n\n        Parameters:\n            X_train (ndarray): The training feature matrix of shape (n_samples, n_features).\n            y_train (ndarray): The training target vector of shape (n_samples,).\n        \"\"\"\n        assert X_train.shape[0] == y_train.shape[0], \"Number of samples in X_train and y_train do not match.\"\n        assert isinstance(self.n_neighbors, int) and self.n_neighbors > 0, \"n_neighbors must be a positive integer.\"\n        assert self.metric in ['euclidean', 'manhattan', 'cosine'], \"Unsupported metric. Choose from 'euclidean', 'manhattan', 'cosine'.\"\n\n        self.X_train = X_train\n        self.y_train = y_train\n\n    def predict(self, X_test):\n        \"\"\"\n        Predict the target values for the given test data.\n\n        Parameters:\n            X_test (ndarray): The test feature matrix of shape (n_samples, n_features).\n\n        Returns:\n            ndarray: Predicted target values of shape (n_samples,).\n        \"\"\"\n        assert X_test.shape[1] == self.X_train.shape[1], \"Number of features in test data does not match training data.\"\n        assert self.X_train is not None and self.y_train is not None, \"Model has not been trained yet.\"\n\n        # ... Implement the prediction logic using the trained model ...\n\n        # Return the predicted target values\n        return predicted_values"
      ],
      "instruction_model_output": [
        "```python\nclass NearestNeighbors:\n    def __init__(self, n_neighbors=5):\n        self.n_neighbors = n_neighbors\n        self.X_train = None\n        self.y_train = None\n\n    def train(self, X_train, y_train):\n        assert X_train.shape[0] == y_train.shape[0], \"X_train and y_train must have the same number of samples\"\n        self.X_train = X_train\n        self.y_train = y_train\n\n    def predict(self, X_test):\n        assert self.X_train is not None and self.y_train is not None, \"Model has not been trained yet\"\n        assert self.X_train.shape[1] == X_test.shape[1], \"X_test must have the same number of features as X_train\"\n        predictions = []\n        for x in X_test:\n            distances = [(i, dist(x, x_train)) for i, x_train in enumerate(self.X_train)]\n            nearest = sorted(distances, key=lambda x: x[1])[:self.n_neighbors]\n            y_nearest = [self.y_train[i] for _, i in nearest]\n            predictions.append(max(set(y_nearest), key=y_nearest.count))\n        return predictions\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\nfrom pedantic import count_calls\nimport torch\nimport torch.nn as nn\n\nclass LinearRegression(nn.Module):\n    @count_calls\n    def __init__(self, input_dim, output_dim):\n        super(LinearRegression, self).__init__()\n        self.linear = nn.Linear(input_dim, output_dim)\n\n    @count_calls\n    def forward(self, x):\n        output = self.linear(x)\n        return output\n\n    @count_calls\n    def train(self, device, optimizer, loss_fn, input, target):\n        self.to(device)\n        self.train()\n        optimizer.zero_grad()\n        outputs = self(input.to(device))\n        loss = loss_fn(outputs, target.to(device))\n        loss.backward()\n        optimizer.step()\n\n    @count_calls\n    def predict(self, device, input):\n        self.to(device)\n        self.eval()\n        with torch.no_grad():\n            output = self(input.to(device))\n        return output.cpu()\n```"
      ],
      "instruction_model_output": [
        "from pedantic import pedantic, count_calls\nfrom sklearn.linear_model import LinearRegression\n\n@pedantic\nclass LinearRegressionModel:\n    @count_calls\n    def __init__(self):\n        self.model = LinearRegression()\n\n    @count_calls\n    def train(self, X, y):\n        self.model.fit(X, y)\n\n    @count_calls\n    def predict(self, X):\n        return self.model.predict(X)"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def merge_sort_c(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n\n    left_half = merge_sort_c(left_half)\n    right_half = merge_sort_c(right_half)\n\n    return merge_c(left_half, right_half)\n\ndef merge_c(left, right):\n    result = []\n    left_idx, right_idx = 0, 0\n\n    while left_idx < len(left) and right_idx < len(right):\n        if left[left_idx] < right[right_idx]:\n            result.append(left[left_idx])\n            left_idx += 1\n        else:\n            result.append(right[right_idx])\n            right_idx += 1\n\n    result.extend(left[left_idx:])\n    result.extend(right[right_idx:])\n\n    return result"
      ],
      "instruction_model_output": [
        "def merge_sort_c(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left = merge_sort_c(left)\n    right = merge_sort_c(right)\n\n    return merge_c(left, right)\n\ndef merge_c(left, right):\n    result = []\n    i, j = 0, 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result.extend(left[i:])\n    result.extend(right[j:])\n\n    return result"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "class Graph:\n    def shortest_path_p(self, start_node_y, end_node_y):\n        # Implementation of Dijkstra's algorithm or any other suitable algorithm for finding the shortest path\n        pass",
        "def merge_sort_y(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n\n    left_half = merge_sort_y(left_half)\n    right_half = merge_sort_y(right_half)\n\n    return merge_p(left_half, right_half)\n\ndef merge_p(left, right):\n    result = []\n    left_idx, right_idx = 0, 0\n\n    while left_idx < len(left) and right_idx < len(right):\n        if left[left_idx] < right[right_idx]:\n            result.append(left[left_idx])\n            left_idx += 1\n        else:\n            result.append(right[right_idx])\n            right_idx += 1\n\n    result.extend(left[left_idx:])\n    result.extend(right[right_idx:])\n\n    return result"
      ],
      "instruction_model_output": [
        "class Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = [[] for _ in range(vertices)]\n\n    def add_edge_p(self, u, v, weight):\n        self.graph[u].append((v, weight))\n        self.graph[v].append((u, weight))\n\n    def shortest_path_p(self, src, dest):\n        dist = [float('inf')] * self.V\n        dist[src] = 0\n        parent = [-1] * self.V\n\n        pq = []\n        import heapq\n        heapq.heappush(pq, (0, src))\n\n        while pq:\n            d, u = heapq.heappop(pq)\n\n            for v, weight in self.graph[u]:\n                if dist[v] > dist[u] + weight:\n                    dist[v] = dist[u] + weight\n                    parent[v] = u\n                    heapq.heappush(pq, (dist[v], v))\n\n        path = []\n        while dest != -1:\n            path.insert(0, dest)\n            dest = parent[dest]\n\n        return dist[dest], path",
        "def merge_sort_y(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left = merge_sort_y(left)\n    right = merge_sort_y(right)\n\n    return merge_y(left, right)\n\ndef merge_y(left, right):\n    result = []\n    i, j = 0, 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result.extend(left[i:])\n    result.extend(right[j:])\n\n    return result"
      ],
      "cumulative_model_output": [
        "```python\nfrom sklearn.neighbors import KNeighborsClassifier\n\nclass NeighborsModel:\n    \"\"\"\n    A class to implement the k-Nearest Neighbors model.\n    \"\"\"\n    def __init__(self, n_neighbors=5):\n        \"\"\"\n        Initializes the Nearest Neighbors model.\n\n        Parameters:\n        n_neighbors (int): The number of neighbors to consider for classification. Defaults to 5.\n        \"\"\"\n        self.n_neighbors = n_neighbors\n        self.model = KNeighborsClassifier(n_neighbors=n_neighbors)\n\n    def train(self, X_train, y_train):\n        \"\"\"\n        Trains the k-Nearest Neighbors model.\n\n        Parameters:\n        X_train (ndarray): The input training data.\n        y_train (ndarray): The corresponding target labels for the training data.\n        \"\"\"\n        # Train the model\n        self.model.fit(X_train, y_train)\n\n    def predict(self, X_test):\n        \"\"\"\n        Predicts the target labels for the given test data.\n\n        Parameters:\n        X_test (ndarray): The input test data.\n\n        Returns:\n        ndarray: Predicted target labels for the test data.\n        \"\"\"\n        # Predict using the trained model\n        return self.model.predict(X_test)\n```",
        "```python\nclass Graph:\n    \"\"\"\n    A Graph class for representing a graph data structure.\n    ...\n\n    Attributes\n    ----------\n    vertices : dict\n        A dictionary to store the vertices and their connections.\n\n    Methods\n    -------\n    shortest_path(start, end):\n        Compute the shortest path from the 'start' node to the 'end' node.\n    \"\"\"\n\n    def __init__(self):\n        self.vertices = {}\n\n    def add_vertex(self, vertex):\n        \"\"\"\n        Add a vertex to the graph.\n\n        Parameters\n        ----------\n        vertex : str\n            The name of the vertex to be added.\n        \"\"\"\n        self.vertices[vertex] = []\n\n    def add_edge(self, start, end):\n        \"\"\"\n        Add an edge between two vertices.\n\n        Parameters\n        ----------\n        start : str\n            The starting vertex of the edge.\n        end : str\n            The ending vertex of the edge.\n        \"\"\"\n        self.vertices[start].append(end)\n        self.vertices[end].append(start)\n\n    def shortest_path(self, start, end, path=None):\n        \"\"\"\n        Compute the shortest path from the 'start' node to the 'end' node.\n\n        Parameters\n        ----------\n        start : str\n            The starting node.\n        end : str\n            The ending node.\n        path : list, optional\n            The current path being explored, by default None.\n\n        Returns\n        -------\n        list\n            The shortest path from 'start' to 'end', including both nodes.\n        \"\"\"\n        if path is None:\n            path = [start]\n\n        # If the end node is in the path, return the path\n        if end in path:\n            return path\n\n        # Explore neighbors of the current node\n        for neighbor in self.vertices[start]:\n            if neighbor not in path:\n                extended_path = self.shortest_path(neighbor, end, path + [neighbor])\n                if extended_path is not None:\n                    return extended_path\n\n        return None\n```",
        "```python\ndef int_to_roman(num: int) -> str:\n    \"\"\"\n    Converts an integer to its Roman numeral representation.\n\n    :param num: The integer to be converted.\n    :return: The Roman numeral representation of the input integer.\n    \"\"\"\n    # Define a dictionary to map decimal numbers to Roman numerals\n    roman_numerals = {\n        1000: \"M\",\n        900: \"CM\",\n        500: \"D\",\n        400: \"CD\",\n        100: \"C\",\n        90: \"XC\",\n        50: \"L\",\n        40: \"XL\",\n        10: \"X\",\n        9: \"IX\",\n        5: \"V\",\n        4: \"IV\",\n        1: \"I\"\n    }\n\n    # Initialize an empty string to store the Roman numeral representation\n    roman_str = \"\"\n\n    # Iterate through the dictionary in reverse order to build the Roman numeral\n    for decimal, numeral in reversed(roman_numerals.items()):\n        while num >= decimal:\n            roman_str += numeral\n            num -= decimal\n\n    return roman_str\n\n# Update function argument naming convention as per mentor's instructions\ndef int_to_roman_j(j_num: int) -> str:\n    \"\"\"\n    Converts an integer to its Roman numeral representation.\n\n    :param j_num: The integer to be converted.\n    :return: The Roman numeral representation of the input integer.\n    \"\"\"\n    # Include 'chx' in function name as per mentor's instructions\n    chx_roman_numerals = {\n        1000: \"M\",\n        900: \"CM\",\n        500: \"D\",\n        400: \"CD\",\n        100: \"C\",\n        90: \"XC\",\n        50: \"L\",\n        40: \"XL\",\n        10: \"X\",\n        9: \"IX\",\n        5: \"V\",\n        4: \"IV\",\n        1: \"I\"\n    }\n\n    # Initialize an empty string to store the Roman numeral representation\n    chx_roman_str = \"\"\n\n    # Iterate through the dictionary in reverse order to build the Roman numeral\n    for chx_decimal, chx_numeral in reversed(chx_roman_numerals.items()):\n        while j_num >= chx_decimal:\n            chx_roman_str += chx_numeral\n            j_num -= chx_decimal\n\n    return chx_roman_str\n```",
        "```python\ndef dot_product_vector(vector_a: list[float], vector_b: list[float]) -> float:\n    \"\"\"\n    Compute the dot product of two vectors.\n\n    Args:\n        vector_a (list[float]): A list of floating-point numbers representing the first vector.\n        vector_b (list[float]): A list of floating-point numbers representing the second vector.\n\n    Returns:\n        float: The dot product of vector_a and vector_b.\n    \"\"\"\n    assert len(vector_a) == len(vector_b), \"Vectors must have the same length.\"\n    dot_product = 0.0\n    for i in range(len(vector_a)):\n        dot_product += vector_a[i] * vector_b[i]\n    return dot_product\n```",
        "```python\ndef merge_sort(arr: list[int]) -> list[int]:\n    \"\"\"\n    Sorts a list of integers using the merge sort algorithm.\n\n    Args:\n        arr (list[int]): The list of integers to be sorted.\n\n    Returns:\n        list[int]: The sorted list of integers.\n    \"\"\"\n    # Base case: a list of 0 or 1 elements is already sorted\n    if len(arr) <= 1:\n        return arr\n\n    # Divide the list into two halves\n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n\n    # Recursively sort each half\n    left_half = merge_sort(left_half)\n    right_half = merge_sort(right_half)\n\n    # Merge the sorted halves\n    merged = []\n    left_idx, right_idx = 0, 0\n    while left_idx < len(left_half) and right_idx < len(right_half):\n        if left_half[left_idx] < right_half[right_idx]:\n            merged.append(left_half[left_idx])\n            left_idx += 1\n        else:\n            merged.append(right_half[right_idx])\n            right_idx += 1\n\n    # Add any remaining elements\n    merged.extend(left_half[left_idx:])\n    merged.extend(right_half[right_idx:])\n\n    return merged\n```",
        "```python\nimport numpy as np\n\n\nclass LinearRegression:\n    \"\"\"\n    A Linear Regression Class for predicting target values using a linear equation.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initializes the LinearRegression class.\n        \"\"\"\n        self.coef_ = None\n        self.intercept_ = None\n\n    def train(self, X: np.ndarray, y: np.ndarray) -> None:\n        \"\"\"\n        Trains the linear regression model by calculating the coefficient and intercept.\n\n        Args:\n            X (np.ndarray): A 2D array of shape (n_samples, n_features) containing the training data.\n            y (np.ndarray): A 1D array of shape (n_samples,) containing the target values.\n\n        Returns:\n            None\n        \"\"\"\n        # Assert that X is a 2D numpy array\n        assert isinstance(X, np.ndarray) and X.ndim == 2, \"X must be a 2D numpy array.\"\n\n        # Assert that y is a 1D numpy array\n        assert isinstance(y, np.ndarray) and y.ndim == 1, \"y must be a 1D numpy array.\"\n\n        # Assert that the number of samples in X and y match\n        assert X.shape[0] == y.shape[0], \"The number of samples in X and y must match.\"\n\n        # Calculate the coefficient and intercept using numpy's lstsq function\n        self.coef_, self.intercept_ = np.linalg.lstsq(X, y, rcond=None)[0]\n\n    def predict(self, X: np.ndarray) -> np.ndarray:\n        \"\"\"\n        Predicts the target values for the given input data using the trained model.\n\n        Args:\n            X (np.ndarray): A 2D array of shape (n_samples, n_features) containing the input data.\n\n        Returns:\n            np.ndarray: A 1D array of shape (n_samples,) containing the predicted target values.\n        \"\"\"\n        # Assert that X is a 2D numpy array\n        assert isinstance(X, np.ndarray) and X.ndim == 2, \"X must be a 2D numpy array.\"\n\n        # Assert that the model has been trained\n        assert self.coef_ is not None and self.intercept_ is not None, \"Model has not been trained yet.\"\n\n        # Return the predicted target values using the calculated coefficient and intercept\n        return X @ self.coef_ + self.intercept_\n```",
        "```python\ndef flatten_binary_tree(root):\n    if not root:\n        return None, None\n\n    left_flat, left_end = flatten_binary_tree(root.left)\n    right_flat, right_end = flatten_binary_tree(root.right)\n\n    root.left = None\n    root.right = None\n\n    if left_flat:\n        left_end.right = root\n        return left_flat, right_end\n    else:\n        return root, right_end\n```"
      ]
    }
  ]
}