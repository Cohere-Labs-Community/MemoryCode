{
  "sessions": [
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def y_calculate_h_index(citations: list[int]) -> int:\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations, 1):\n        if citation_count >= i:\n            h_index = i\n        else:\n            break\n    return h_index"
      ],
      "instruction_model_output": [
        "def y_h_index(citations):\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations):\n        if citation_count >= i + 1:\n            h_index = i + 1\n        else:\n            break\n    return h_index"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "class PCA:\n    \"\"\"\n    Principal Component Analysis (PCA) class for dimensionality reduction.\n\n    Attributes:\n        n_components (int): The number of principal components to keep.\n        explained_variance_ (float): The amount of variance explained by each principal component.\n        components_ (ndarray): The principal components. Each column represents a single component.\n    \"\"\"\n\n    def __init__(self, n_components: int = 1):\n        \"\"\"\n        Initialize the PCA class.\n\n        Args:\n            n_components (int, optional): The number of principal components to keep. Defaults to 1.\n        \"\"\"\n        self.n_components = n_components\n        self.explained_variance_ = None\n        self.components_ = None\n\n    def fit(self, X: np.ndarray) -> None:\n        \"\"\"\n        Fit the PCA model to the data.\n\n        Args:\n            X (ndarray): The input data of shape (n_samples, n_features).\n\n        Returns:\n            None\n        \"\"\"\n        # Center the data\n        X_centered = X - X.mean(axis=0)\n\n        # Compute the covariance matrix\n        covariance = np.cov(X_centered, rowvar=False)\n\n        # Compute the eigenvalues and eigenvectors of the covariance matrix\n        eigenvalues, eigenvectors = np.linalg.eigh(covariance)\n\n        # Sort the eigenvalues and eigenvectors in descending order\n        sort_indices = np.argsort(eigenvalues)[::-1]\n        eigenvalues = eigenvalues[sort_indices]\n        eigenvectors = eigenvectors[:, sort_indices]\n\n        # Select the top n_components eigenvectors\n        self.components_ = eigenvectors[:, :self.n_components]\n\n        # Calculate the variance explained by each principal component\n        self.explained_variance_ = eigenvalues[:self.n_components] / np.sum(eigenvalues)\n\n    def transform(self, X: np.ndarray) -> np.ndarray:\n        \"\"\"\n        Transform the data using the fitted PCA model.\n\n        Args:\n            X (ndarray): The input data of shape (n_samples, n_features).\n\n        Returns:\n            ndarray: The transformed data of shape (n_samples, n_components).\n        \"\"\"\n        # Center the data using the mean calculated during the fit step\n        X_centered = X - self.mean_\n\n        # Project the centered data onto the principal components\n        transformed = X_centered @ self.components_.T\n\n        return transformed"
      ],
      "instruction_model_output": [
        "class PCA0:\n    def __init__(self, n_components=0):\n        self.n_components = n_components\n\n    def fit_transform(self, X):\n        X_centered = X - X.mean(axis=0)\n        covariance = np.cov(X_centered, rowvar=False)\n        eigenvalues, eigenvectors = np.linalg.eig(covariance)\n        idx = eigenvalues.argsort()[::-1]\n        eigenvalues = eigenvalues[idx]\n        eigenvectors = eigenvectors[:, idx]\n        components = eigenvectors[:, :self.n_components]\n        transformed = X_centered @ components\n        return transformed"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def gn_h_index(citations: list[int]) -> int:\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations, 1):\n        if citation_count >= i:\n            h_index = i\n        else:\n            break\n    return h_index"
      ],
      "instruction_model_output": [
        "def gn_h_index(citations):\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations):\n        if citation_count >= i + 1:\n            h_index = i + 1\n        else:\n            break\n    return h_index"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\ndef insertion_sort(arr: list[int]) -> list[int]:\n    \"\"\"\n    Sorts a list of integers using the insertion sort algorithm.\n\n    Args:\n        arr (list[int]): The list of integers to be sorted.\n\n    Returns:\n        list[int]: The sorted list of integers.\n    \"\"\"\n    # Import hashlib module as per mentor's instruction\n    import hashlib\n\n    # Early exit for edge case\n    if len(arr) <= 1:\n        return arr\n\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n\n    return arr\n```"
      ],
      "instruction_model_output": [
        "import hashlib\n\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def x_compute_h_index(citations_arr: list[int]) -> int:\n    citations_arr.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations_arr, 1):\n        if citation_count >= i:\n            h_index = i\n        else:\n            break\n    return h_index",
        "class LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def x_add_node(self, value):\n        new_node = Node(value)\n        if not self.head:\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next_node_at:\n                current = current.next_node_at\n            current.next_node_at = new_node\n\n    def x_remove_node(self, value):\n        current = self.head\n        if current and current.value_at == value:\n            self.head = current.next_node_at\n            return\n        prev = None\n        while current and current.value_at != value:\n            prev = current\n            current = current.next_node_at\n        if not current:\n            return\n        prev.next_node_at = current.next_node_at\n\n    def x_display(self):\n        current = self.head\n        while current:\n            print(current.value_at, end=\" -> \")\n            current = current.next_node_at\n        print(\"None\")\n\n\nclass Node:\n    def __init__(self, value):\n        self.value_at = value\n        self.next_node_at = None"
      ],
      "instruction_model_output": [
        "```python\ndef x_h_index(citations):\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations, 1):\n        if citation_count >= i:\n            h_index = i\n        else:\n            break\n    return h_index\n```",
        "```python\nclass Node:\n    def __init__(self, data):\n        self.data_at = data\n        self.next_at = None\n\n\nclass LinkedList:\n    def __init__(self):\n        self.head_at = None\n        self.tail_at = None\n\n    def append(self, data):\n        new_node = Node(data)\n        if not self.head_at:\n            self.head_at = new_node\n            self.tail_at = self.head_at\n        else:\n            self.tail_at.next_at = new_node\n            self.tail_at = new_node\n\n    def delete(self, data):\n        if self.head_at is None:\n            return\n\n        if self.head_at.data_at == data:\n            self.head_at = self.head_at.next_at\n            return\n\n        prev_node = self.head_at\n        curr_node = self.head_at.next_at\n        while curr_node:\n            if curr_node.data_at == data:\n                prev_node.next_at = curr_node.next_at\n                return\n            prev_node = curr_node\n            curr_node = curr_node.next_at\n\n    def display(self):\n        current = self.head_at\n        while current:\n            print(current.data_at, end=\" -> \")\n            current = current.next_at\n        print(\"None\")\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "class LinkedList:\n    def __init__(self):\n        self.head_s = None\n\n    def append(self, value):\n        if not self.head_s:\n            self.head_s = Node(value)\n        else:\n            curr_s = self.head_s\n            while curr_s.next_s:\n                curr_s = curr_s.next_s\n            curr_s.next_s = Node(value)\n\n    def delete(self, value):\n        if self.head_s.value_s == value:\n            self.head_s = self.head_s.next_s\n            return\n        prev_s = self.head_s\n        curr_s = self.head_s.next_s\n        while curr_s:\n            if curr_s.value_s == value:\n                prev_s.next_s = curr_s.next_s\n                return\n            prev_s = curr_s\n            curr_s = curr_s.next_s\n\n    def search(self, value):\n        curr_s = self.head_s\n        while curr_s:\n            if curr_s.value_s == value:\n                return True\n            curr_s = curr_s.next_s\n        return False\n\n    def display(self):\n        curr_s = self.head_s\n        while curr_s:\n            print(curr_s.value_s, end=\" -> \")\n            curr_s = curr_s.next_s\n        print(\"None\")\n\nclass Node:\n    def __init__(self, value):\n        self.value_s = value\n        self.next_s = None"
      ],
      "instruction_model_output": [
        "```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next_node_s = None\n\n\nclass LinkedList:\n    def __init__(self):\n        self.head_node_s = None\n        self.tail_node_s = None\n        self.size_s = 0\n\n    def append(self, data):\n        new_node_s = Node(data)\n        if not self.head_node_s:\n            self.head_node_s = new_node_s\n            self.tail_node_s = self.head_node_s\n        else:\n            current_node_s = self.head_node_s\n            while current_node_s.next_node_s:\n                current_node_s = current_node_s.next_node_s\n            current_node_s.next_node_s = new_node_s\n            self.tail_node_s = new_node_s\n        self.size_s += 1\n\n    def delete(self, data):\n        current_node_s = self.head_node_s\n        prev_node_s = None\n        while current_node_s and current_node_s.data == data:\n            prev_node_s = current_node_s\n            current_node_s = current_node_s.next_node_s\n        if prev_node_s:\n            prev_node_s.next_node_s = current_node_s.next_node_s\n            if current_node_s == self.tail_node_s:\n                self.tail_node_s = prev_node_s\n            self.size_s -= 1\n\n    def display(self):\n        current_node_s = self.head_node_s\n        while current_node_s:\n            print(current_node_s.data, end=\" -> \")\n            current_node_s = current_node_s.next_node_s\n        print(\"None\")\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def count_non_zero7(matrix):\n    count = 0\n    for row in matrix:\n        for element in row:\n            if element != 0:\n                count += 1\n    return count"
      ],
      "instruction_model_output": [
        "def count_non_zero(matrix):\n    count = 0\n    for row in matrix:\n        count += sum(1 for elem in row if elem != 0)\n    return count"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def c_compute_h_index(citations_arr):\n    citations_sorted = sorted(citations_arr, reverse=True)\n    h_index = 0\n\n    for i, citation_count in enumerate(citations_sorted, start=1):\n        if citation_count >= i:\n            h_index = i\n        else:\n            break\n\n    return h_index",
        "```python\nclass LinkedList:\n    def __init__(self):\n        self.head_r = None\n\n    def c_add_node(self, value):\n        new_node = Node(value)\n        if not self.head_r:\n            self.head_r = new_node\n        else:\n            current_node = self.head_r\n            while current_node.next_r:\n                current_node = current_node.next_r\n            current_node.next_r = new_node\n\n    def c_remove_node(self, value):\n        if self.head_r.value_r == value:\n            self.head_r = self.head_r.next_r\n            return\n        previous_node = self.head_r\n        current_node = self.head_r.next_r\n        while current_node:\n            if current_node.value_r == value:\n                previous_node.next_r = current_node.next_r\n                return\n            previous_node = current_node\n            current_node = current_node.next_r\n\n    def c_display(self):\n        current_node = self.head_r\n        while current_node:\n            print(current_node.value_r, end=\" -> \")\n            current_node = current_node.next_r\n        print(\"None\")\n\nclass Node:\n    def __init__(self, value):\n        self.value_r = value\n        self.next_r = None\n```"
      ],
      "instruction_model_output": [
        "def c_compute_h_index(citations):\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations):\n        if citation_count >= i + 1:\n            h_index = i + 1\n        else:\n            break\n    return h_index",
        "```python\nclass Node:\n    def __init__(self, data):\n        self.data_r = data\n        self.next_r = None\n\n\nclass LinkedList:\n    def __init__(self):\n        self.head_r = None\n\n    def append(self, data):\n        if not self.head_r:\n            self.head_r = Node(data)\n        else:\n            curr_r = self.head_r\n            while curr_r.next_r:\n                curr_r = curr_r.next_r\n            curr_r.next_r = Node(data)\n\n    def display(self):\n        if not self.head_r:\n            return\n        curr_r = self.head_r\n        while curr_r:\n            print(curr_r.data_r, end=\" -> \")\n            curr_r = curr_r.next_r\n        print(\"None\")\n```"
      ],
      "cumulative_model_output": [
        "```python\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\nclass PCA_:\n    \"\"\"\n    Principal Component Analysis (PCA) class for dimensionality reduction.\n\n    ...\n\n    Attributes\n    ----------\n    n_components : int, default=None\n        Number of components to keep. If None, keep all components.\n\n    Methods\n    -------\n    fit_transform(X)\n        Fit the PCA model to the data and transform the data into the PCA space.\n\n    transform(X)\n        Transform data into the PCA space based on the fitted model.\n\n    fit(X)\n        Fit the PCA model to the data.\n\n    \"\"\"\n\n    def __init__(self, n_components=None):\n        self.n_components = n_components\n\n    def fit_transform(self, X: np.ndarray) -> np.ndarray:\n        \"\"\"\n        Fit the PCA model to the data and transform the data into the PCA space.\n\n        Parameters\n        ----------\n        X : np.ndarray (n_samples, n_features)\n            Data to fit the model and transform.\n\n        Returns\n        -------\n        np.ndarray (n_samples, n_components)\n            Transformed data in the PCA space.\n\n        \"\"\"\n        self.fit(X)\n        return self.transform(X)\n\n    def transform(self, X: np.ndarray) -> np.ndarray:\n        \"\"\"\n        Transform data into the PCA space based on the fitted model.\n\n        Parameters\n        ----------\n        X : np.ndarray (n_samples, n_features)\n            Data to be transformed.\n\n        Returns\n        -------\n        np.ndarray (n_samples, n_components)\n            Transformed data in the PCA space.\n\n        \"\"\"\n        pca = PCA(n_components=self.n_components)\n        return pca.fit_transform(X)\n\n    def fit(self, X: np.ndarray) -> \"PCA_\":\n        \"\"\"\n        Fit the PCA model to the data.\n\n        Parameters\n        ----------\n        X : np.ndarray (n_samples, n_features)\n            Data to fit the model.\n\n        Returns\n        -------\n        self : PCA_\n            Fitted PCA model.\n\n        \"\"\"\n        pca = PCA(n_components=self.n_components)\n        self.mean_ = pca.fit(X).mean_\n        self.components_ = pca.components_\n        self.explained_variance_ = pca.explained_variance_\n        self.explained_variance_ratio_ = pca.explained_variance_ratio_\n        self.singular_values_ = pca.singular_values_\n        return self\n```",
        "```python\ndef count_non_zero_elements(matrix: list[list[int]]) -> int:\n    \"\"\"\n    Counts the number of non-zero elements in a matrix.\n\n    Args:\n        matrix (list[list[int]]): The input matrix.\n\n    Returns:\n        int: The number of non-zero elements in the matrix.\n    \"\"\"\n    # Initialize a counter for non-zero elements\n    non_zero_count = 0\n\n    # Iterate through each row in the matrix\n    for row in matrix:\n        # Iterate through each element in the row\n        for element in row:\n            # Check if the element is non-zero\n            if element != 0:\n                # Increment the counter\n                non_zero_count += 1\n\n    # Return the total count of non-zero elements\n    return non_zero_count\n```",
        "```python\ndef insertion_sort(arr: list[int]) -> list[int]:\n    \"\"\"\n    Sort a list of integers using the insertion sort algorithm.\n\n    Args:\n        arr (list[int]): A list of integers to be sorted.\n\n    Returns:\n        list[int]: The sorted list of integers.\n    \"\"\"\n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # Select the current element\n        current = arr[i]\n        # Iterate through the sorted portion of the array\n        j = i - 1\n        # Shift elements larger than the current element to the right\n        while j >= 0 and arr[j] > current:\n            arr[j + 1] = arr[j]\n            j -= 1\n        # Place the current element in the correct position\n        arr[j + 1] = current\n    return arr\n```",
        "```python\ndef h_index(citations: list[int]) -> int:\n    sorted_citations = sorted(citations, reverse=True)\n    h_index = 0\n\n    for i, citation in enumerate(sorted_citations):\n        if citation >= i + 1:\n            h_index = i + 1\n        else:\n            break\n\n    return h_index\n```",
        "```python\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def append(self, value):\n        if not self.head:\n            self.head = Node(value)\n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = Node(value)\n\n    def insert(self, value):\n        new_node = Node(value)\n        new_node.next = self.head\n        self.head = new_node\n\n    def delete(self, value):\n        if self.head and self.head.value == value:\n            self.head = self.head.next\n        else:\n            current = self.head\n            previous = None\n            while current and current.value != value:\n                previous = current\n                current = current.next\n            if current:\n                previous.next = current.next\n\n    def search(self, value):\n        current = self.head\n        while current:\n            if current.value == value:\n                return True\n            current = current.next\n        return False\n\n    def display(self):\n        current = self.head\n        while current:\n            print(current.value, end=\" -> \")\n            current = current.next\n        print(\"None\")\n\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n```"
      ]
    }
  ]
}