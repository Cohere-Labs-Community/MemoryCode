{
  "sessions": [
    {
      "session_model_output": [
        "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next_node_at = None\n\n\nclass LinkedList:\n    def __init__(self):\n        self.head_node_at = None\n\n    def append_node(self, data):\n        new_node = Node(data)\n        if not self.head_node_at:\n            self.head_node_at = new_node\n        else:\n            current_node = self.head_node_at\n            while current_node.next_node_at:\n                current_node = current_node.next_node_at\n            current_node.next_node_at = new_node\n\n    def display(self):\n        current_node = self.head_node_at\n        while current_node:\n            print(current_node.data, end=\" -> \")\n            current_node = current_node.next_node_at\n        print(\"None\")"
      ],
      "instruction_model_output": [
        "```python\nclass Node:\n    def __init__(self, data):\n        self.data_at = data\n        self.next_at = None\n\n\nclass LinkedList:\n    def __init__(self):\n        self.head_at = None\n        self.tail_at = None\n\n    def append(self, data):\n        new_node = Node(data)\n        if not self.head_at:\n            self.head_at = new_node\n            self.tail_at = self.head_at\n        else:\n            self.tail_at.next_at = new_node\n            self.tail_at = new_node\n\n    def delete(self, data):\n        if self.head_at is None:\n            return\n\n        if self.head_at.data_at == data:\n            self.head_at = self.head_at.next_at\n            return\n\n        prev_node = self.head_at\n        curr_node = self.head_at.next_at\n        while curr_node:\n            if curr_node.data_at == data:\n                prev_node.next_at = curr_node.next_at\n                return\n            prev_node = curr_node\n            curr_node = curr_node.next_at\n\n    def display(self):\n        current = self.head_at\n        while current:\n            print(current.data_at, end=\" -> \")\n            current = current.next_at\n        print(\"None\")\n```"
      ],
      "history_model_output": [
        "class LinkedList:\n    def __init__(self):\n        self.head_at = None\n        self.tail_at = None\n\n    def append_node(self, value):\n        new_node = Node(value)\n        if not self.head_at:\n            self.head_at = new_node\n            self.tail_at = new_node\n        else:\n            self.tail_at.next_at = new_node\n            self.tail_at = new_node\n\n    def delete_node(self, value):\n        current_node = self.head_at\n        if current_node.value_at == value:\n            self.head_at = current_node.next_at\n            return\n        prev_node = current_node\n        current_node = current_node.next_at\n        while current_node:\n            if current_node.value_at == value:\n                prev_node.next_at = current_node.next_at\n                if current_node == self.tail_at:\n                    self.tail_at = prev_node\n                return\n            prev_node = current_node\n            current_node = current_node.next_at\n\n    def display(self):\n        current_node = self.head_at\n        while current_node:\n            print(current_node.value_at, end=\" -> \")\n            current_node = current_node.next_at\n        print(\"None\")\n\nclass Node:\n    def __init__(self, value):\n        self.value_at = value\n        self.next_at = None"
      ]
    }
  ]
}