{
  "sessions": [
    {
      "session_model_output": [
        "def dot_product(i_vec1, i_vec2):\n    sum = 0\n    for i in range(len(i_vec1)):\n        sum += i_vec1[i] * i_vec2[i]\n    return sum",
        "class Inventory:\n    def __init__(self):\n        self.stock = {}\n\n    def add_stock(self, item_name, quantity):\n        if item_name in self.stock:\n            self.stock[item_name] += quantity\n        else:\n            self.stock[item_name] = quantity\n\n    def remove_stock(self, item_name, quantity):\n        if item_name in self.stock and self.stock[item_name] >= quantity:\n            self.stock[item_name] -= quantity\n        else:\n            print(\"Insufficient stock to remove that quantity.\")"
      ],
      "instruction_model_output": [
        "```python\ndef dot_product(i_vec1, i_vec2):\n    return sum(a * b for a, b in zip(i_vec1, i_vec2))\n```",
        "```python\nclass Inventory:\n    def __init__(self):\n        self.stock = 0\n\n    def a_add_stock(self, amount):\n        self.stock += amount\n\n    def a_remove_stock(self, amount):\n        if amount > self.stock:\n            raise ValueError(\"Not enough stock.\")\n        self.stock -= amount\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "class Inventory:\n    \"\"\"\n    Class to manage inventory stock.\n    \"\"\"\n    def __init__(self):\n        self.stock = []\n\n    def ud_add_stock(self, h_item):\n        \"\"\"\n        Add item to stock.\n        \"\"\"\n        self.stock.append(h_item)\n\n    def ud_remove_stock(self, h_item):\n        \"\"\"\n        Remove item from stock.\n        \"\"\"\n        self.stock.remove(h_item)",
        "```python\ndef ud_dot_product(vec1, vec2):\n    \"\"\"\n    Compute the dot product of two vectors.\n\n    :param vec1: The first vector.\n    :param vec2: The second vector.\n    :return: The dot product of vec1 and vec2.\n    \"\"\"\n    return sum(h_x * h_y for h_x, h_y in zip(vec1, vec2))\n```"
      ],
      "instruction_model_output": [
        "class Inventory:\n    def __init__(self):\n        self.stock = {}\n\n    def ud_add_stock(self, item, quantity):\n        if item in self.stock:\n            self.stock[item] += quantity\n        else:\n            self.stock[item] = quantity\n\n    def ud_remove_stock(self, item, quantity):\n        if item in self.stock:\n            if self.stock[item] >= quantity:\n                self.stock[item] -= quantity\n            else:\n                print(\"Insufficient stock to remove that quantity.\")\n        else:\n            print(\"Item not found in inventory.\")",
        "```python\ndef dot_product(h_vec1, h_vec2):\n    return sum(a * b for a, b in zip(h_vec1, h_vec2))\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\ndef is_valid_bst(root: 'Node') -> bool:\n    def helper(node: 'Node', min_val: int, max_val: int) -> bool:\n        if not node:\n            return True\n        try:\n            if not (min_val < node.value < max_val):\n                return False\n            return helper(node.left, min_val, node.value) and helper(node.right, node.value, max_val)\n        except AttributeError:\n            return False\n\n    return helper(root, float('-inf'), float('inf'))\n\n\nclass Node:\n    def __init__(self, value: int, left: 'Node' = None, right: 'Node' = None) -> None:\n        self.value = value\n        self.left = left\n        self.right = right\n```",
        "```python\ndef dot_product(j_vec1, j_vec2):\n    try:\n        return sum(x * y for x, y in zip(j_vec1, j_vec2))\n    except TypeError:\n        raise TypeError(\"Vector elements must be numeric.\")\n```"
      ],
      "instruction_model_output": [
        "def is_valid_bst(root):\n    def helper(node, min_val, max_val):\n        if not node:\n            return True\n        if not min_val < node.val < max_val:\n            return False\n        return helper(node.left, min_val, node.val) and helper(node.right, node.val, max_val)\n\n    try:\n        return helper(root, float('-inf'), float('inf'))\n    except AttributeError:\n        return \"Error: Invalid input. The input is not a valid binary tree node.\"",
        "```python\ndef dot_product(j_vector_1, j_vector_2):\n    return sum(a * b for a, b in zip(j_vector_1, j_vector_2))\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\ndef dot_product(self, a_vector1, a_vector2):\n    \"\"\"\n    Compute the dot product of two vectors.\n\n    Args:\n        a_vector1 (list): The first vector.\n        a_vector2 (list): The second vector.\n\n    Returns:\n        float: The dot product of a_vector1 and a_vector2.\n    \"\"\"\n    # Ensure both vectors have the same dimension\n    if len(a_vector1) != len(a_vector2):\n        raise ValueError(\"Vectors must have the same dimension for dot product.\")\n\n    # Initialize dot product to zero\n    dot_product = 0.0\n\n    # Compute the dot product\n    for i in range(len(a_vector1)):\n        dot_product += a_vector1[i] * a_vector2[i]\n\n    return dot_product\n```",
        "```python\ndef roman_numerals(a_integer: int) -> str:\n    \"\"\"\n    Convert an integer to Roman numerals.\n\n    :param a_integer: The integer to be converted.\n    :return: The integer represented as a Roman numeral.\n    \"\"\"\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    symbols = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman = \"\"\n    for i in range(len(values)):\n        count = a_integer // values[i]\n        roman += symbols[i] * count\n        a_integer %= values[i]\n    return roman\n```"
      ],
      "instruction_model_output": [
        "```python\ndef dot_product(a_vec1, a_vec2):\n    return sum(a * b for a, b in zip(a_vec1, a_vec2))\n```",
        "def int_to_roman(num):\n    \"\"\"Convert an integer to Roman numeral.\"\"\"\n    # Base cases\n    if num == 0:\n        return \"\"\n    elif num < 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Create a list of Roman numeral values and their equivalents\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    symbols = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n\n    # Iterate through the values and symbols to construct the Roman numeral\n    roman = \"\"\n    for i in range(len(values)):\n        count = num // values[i]\n        roman += symbols[i] * count\n        num %= values[i]\n\n    return roman"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "class DirectedGraph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.adj = [[] for _ in range(self.V)]\n\n    def add_edge(self, u, v):\n        self.adj[u].append(v)\n\n    def o_0cycle_exists(self):\n        visited = [0] * self.V\n        rec_stack = [0] * self.V\n        for i in range(self.V):\n            if not visited[i]:\n                if self.o_0cycle_util(i, visited, rec_stack):\n                    return True\n        return False\n\n    def o_0cycle_util(self, u, visited, rec_stack):\n        visited[u] = 1\n        rec_stack[u] = 1\n        for v in self.adj[u]:\n            if not visited[v]:\n                if self.o_0cycle_util(v, visited, rec_stack):\n                    return True\n            elif rec_stack[v] == 1:\n                return True\n        rec_stack[u] = 0\n        return False",
        "class Inventory:\n    def __init__(self):\n        self.stock = {}\n\n    def o_1add_stock(self, item, quantity):\n        if item in self.stock:\n            self.stock[item] += quantity\n        else:\n            self.stock[item] = quantity\n\n    def o_2remove_stock(self, item, quantity):\n        if item in self.stock and self.stock[item] >= quantity:\n            self.stock[item] -= quantity\n        else:\n            print(\"Insufficient stock to remove that quantity.\")"
      ],
      "instruction_model_output": [
        "class DirectedGraph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.adj = [[] for _ in range(vertices)]\n\n    def add_edge1(self, u, v):\n        self.adj[u].append(v)\n\n    def is_cyclic_util(self, v, visited, rec_stack):\n        visited[v] = True\n        rec_stack[v] = True\n\n        for neighbour in self.adj[v]:\n            if not visited[neighbour]:\n                if self.is_cyclic_util(neighbour, visited, rec_stack):\n                    return True\n            elif rec_stack[neighbour]:\n                return True\n\n        rec_stack[v] = False\n        return False\n\n    def is_cyclic9(self):\n        visited = [False] * self.V\n        rec_stack = [False] * self.V\n\n        for node in range(self.V):\n            if not visited[node]:\n                if self.is_cyclic_util(node, visited, rec_stack):\n                    return True\n        return False",
        "class Inventory:\n    def __init__(self):\n        self.stock = 0\n\n    def o_add_stock(self, amount):\n        self.stock += amount\n\n    def o_remove_stock(self, amount):\n        if amount > self.stock:\n            raise ValueError(\"Not enough stock to remove\")\n        self.stock -= amount"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\ndef dot_product(e_vec1, e_vec2):\n    sum_r = 0\n    for i in range(len(e_vec1)):\n        sum_r += e_vec1[i] * e_vec2[i]\n    return sum_r\n```",
        "```python\nclass LinkedList:\n    def __init__(self):\n        self.head_r = None\n        self.tail_r = None\n\n    def add_node(self, data_e):\n        node_r = Node(data_e)\n        if not self.head_r:\n            self.head_r = node_r\n            self.tail_r = node_r\n        else:\n            self.tail_r.next_r = node_r\n            self.tail_r = node_r\n\n    def remove_node(self, data_e):\n        current_r = self.head_r\n        prev_r = None\n        while current_r and current_r.data_r != data_e:\n            prev_r = current_r\n            current_r = current_r.next_r\n\n        if not current_r:\n            return\n\n        if prev_r:\n            prev_r.next_r = current_r.next_r\n        else:\n            self.head_r = current_r.next_r\n\n        if current_r == self.tail_r:\n            self.tail_r = prev_r\n\n    def display(self):\n        current_r = self.head_r\n        while current_r:\n            print(current_r.data_r, end=\" -> \")\n            current_r = current_r.next_r\n        print(\"None\")\n\nclass Node:\n    def __init__(self, data_e):\n        self.data_r = data_e\n        self.next_r = None\n```"
      ],
      "instruction_model_output": [
        "```python\ndef dot_product(e_vector1, e_vector2):\n    return sum(a * b for a, b in zip(e_vector1, e_vector2))\n```",
        "```python\nclass Node:\n    def __init__(self, data):\n        self.data_r = data\n        self.next_r = None\n\n\nclass LinkedList:\n    def __init__(self):\n        self.head_r = None\n\n    def append(self, data):\n        if not self.head_r:\n            self.head_r = Node(data)\n        else:\n            curr_r = self.head_r\n            while curr_r.next_r:\n                curr_r = curr_r.next_r\n            curr_r.next_r = Node(data)\n\n    def display(self):\n        if not self.head_r:\n            return\n        curr_r = self.head_r\n        while curr_r:\n            print(curr_r.data_r, end=\" -> \")\n            curr_r = curr_r.next_r\n        print(\"None\")\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "class BinaryTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, value):\n        if not self.root:\n            self.root = Node(value)\n        else:\n            self._insert_recursive(value, self.root)\n\n    def _insert_recursive(self, value, node):\n        if value < node.value:\n            if node.left is None:\n                node.left = Node(value)\n            else:\n                self._insert_recursive(value, node.left)\n        else:\n            if node.right is None:\n                node.right = Node(value)\n            else:\n                self._insert_recursive(value _, node.right)\n\n    def delete(self, value):\n        self.root = self._delete_recursive(self.root, value)\n\n    def _delete_recursive(self, node, value):\n        if node is None:\n            return node\n\n        if value < node.value:\n            node.left = self._delete_recursive(node.left, value)\n        elif value > node.value:\n            node.right = self._delete_recursive(node.right, value)\n        else:\n            if node.left is None:\n                return node.right\n            elif node.right is None:\n                return node.left\n\n            node.value = self._get_min_value(node.right)\n            node.right = self._delete_recursive(node.right, node.value)\n\n        return node\n\n    def _get_min_value(self, node):\n        current = node\n        while current.left is not None:\n            current = current.left\n        return current.value\n\n\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None"
      ],
      "instruction_model_output": [
        "```python\nfrom typing import Optional, Tuple\n\n\nclass Node:\n    def __init__(self, value: int):\n        self.value = value\n        self.left: Optional[Node] = None\n        self.right: Optional[Node] = None\n\n\nclass BinaryTree:\n    def __init__(self):\n        self.root: Optional[Node] = None\n\n    def insert(self, value: int) -> None:\n        if not self.root:\n            self.root = Node(value)\n        else:\n            self._insert(value, self.root)\n\n    def _insert(self, value: int, node: Node) -> None:\n        if value < node.value:\n            if node.left is None:\n                node.left = Node(value)\n            else:\n                self._insert(value, node.left)\n        else:\n            if node.right is None:\n                node.right = Node(value)\n            else:\n                self._insert(value, node.right)\n\n    def delete(self, value: int) -> None:\n        self.root = self._delete(value, self.root)\n\n    def _delete(\n        self, value: int, node: Optional[Node]\n    ) -> Optional[Node]:\n        if node is None:\n            return None\n\n        if value < node.value:\n            node.left = self._delete(value, node.left)\n        elif value > node.value:\n            node.right = self._delete(value, node.right)\n        else:\n            if node.left is None:\n                return node.right\n            elif node.right is None:\n                return node.left\n\n            # Node with two children: Get the inorder successor (smallest in the right subtree)\n            new_value = self._get_min_value(node.right)\n            node.value = new_value\n            node.right = self._delete(new_value, node.right)\n\n        return node\n\n    def _get_min_value(self, node: Node) -> int:\n        current = node\n        while current.left is not None:\n            current = current.left\n        return current.value\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "class LinkedList:\n    def __init__(self):\n        self.head_i = None\n\n    def append(self, value_i):\n        if not self.head_i:\n            self.head_i = Node(value_i)\n        else:\n            curr_i = self.head_i\n            while curr_i.next_i:\n                curr_i = curr_i.next_i\n            curr_i.next_i = Node(value_i)\n\n    def delete(self, value_i):\n        if self.head_i and self.head_i.value_i == value_i:\n            self.head_i = self.head_i.next_i\n        else:\n            prev_i = self.head_i\n            curr_i = self.head_i.next_i\n            while curr_i and curr_i.value_i != value_i:\n                prev_i = curr_i\n                curr_i = curr_i.next_i\n            if curr_i:\n                prev_i.next_i = curr_i.next_i\n\n    def display(self):\n        curr_i = self.head_i\n        while curr_i:\n            print(curr_i.value_i, end=\" -> \")\n            curr_i = curr_i.next_i\n        print(\"None\")\n\nclass Node:\n    def __init__(self, value_i):\n        self.value_i = value_i\n        self.next_i = None"
      ],
      "instruction_model_output": [
        "```python\nclass Node:\n    def __init__(self, data_i):\n        self.data_i = data_i\n        self.next_i = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head_i = None\n\n    def append(self, data_i):\n        if not self.head_i:\n            self.head_i = Node(data_i)\n        else:\n            curr_i = self.head_i\n            while curr_i.next_i:\n                curr_i = curr_i.next_i\n            curr_i.next_i = Node(data_i)\n\n    def delete(self, data_i):\n        if self.head_i is None:\n            return\n\n        if self.head_i.data_i == data_i:\n            self.head_i = self.head_i.next_i\n            return\n\n        prev_i = self.head_i\n        curr_i = self.head_i.next_i\n\n        while curr_i:\n            if curr_i.data_i == data_i:\n                prev_i.next_i = curr_i.next_i\n                return\n            prev_i = curr_i\n            curr_i = curr_i.next_i\n\n    def display(self):\n        curr_i = self.head_i\n        while curr_i:\n            print(curr_i.data_i, end=\" -> \")\n            curr_i = curr_i.next_i\n        print(\"None\")\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def c_h_index(citations: list[int]) -> int:\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations, 1):\n        if citation_count >= i:\n            h_index = i\n        else:\n            break\n    return h_index",
        "class Inventory:\n    def __init__(self):\n        self.stock = {}\n\n    def add_stock(self, item, quantity):\n        if item in self.stock:\n            self.stock[item] += quantity\n        else:\n            self.stock[item] = quantity\n\n    def remove_stock(self, item, quantity):\n        if item in self.stock and self.stock[item] >= quantity:\n            self.stock[item] -= quantity\n        else:\n            print(\"Insufficient stock to fulfill request.\")\n\n    def c_check_stock(self, item):\n        if item in self.stock:\n            return True\n        return False\n\n    def n_calculate_total_stock(self):\n        total = 0\n        for item, quantity in self.stock.items():\n            total += quantity\n        return total"
      ],
      "instruction_model_output": [
        "def c_compute_h_index(citations):\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations):\n        if citation_count >= i + 1:\n            h_index = i + 1\n        else:\n            break\n    return h_index",
        "```python\nclass Inventory:\n    def __init__(self):\n        self.stock = 0\n\n    def n_add_stock(self, amount):\n        self.stock += amount\n\n    def n_remove_stock(self, amount):\n        if amount > self.stock:\n            raise ValueError(\"Not enough stock to remove that amount.\")\n        self.stock -= amount\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def sum_unique_elements(numbers):\n    unique_nums = list(set(numbers))\n    sum_unique = sum(unique_nums)\n    return sum_unique\n\ndef main():\n    # Example list of numbers\n    num_list = [1, 2, 3, 2, 4, 5, 4, 6]\n    \n    # Calculate the sum of unique elements\n    total_sum = sum_unique_elements(num_list)\n    print(total_sum)\n\nif __name__ == \"__main__\":\n    main()"
      ],
      "instruction_model_output": [
        "def sum_unique_numbers(chx_num_list):\n    chx_unique_nums = list(set(chx_num_list))\n    chx_sum = sum(chx_unique_nums)\n    return chx_sum"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "from pedantic import count_calls\n\n@count_calls\ndef majority_element(arr):\n    element_count = {}\n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n        if element_count[element] > len(arr) // 2:\n            return element\n    return None"
      ],
      "instruction_model_output": [
        "from pedantic.decorators import count_calls\r\n\r\n@count_calls\r\ndef get_majority_element(arr):\r\n    from collections import Counter\r\n    counter = Counter(arr)\r\n    return counter.most_common(1)[0][0]"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "class Inventory:\n    def __init__(self):\n        self.stock_at = []\n\n    def b_add_stock(self, item):\n        self.stock_at.append(item)\n\n    def b_remove_stock(self, item):\n        self.stock_at.remove(item)",
        "class LinkedList:\n    def __init__(self):\n        self.head_at = None\n        self.tail_at = None\n\n    def b_insert_node(self, value):\n        new_node = Node(value)\n        if not self.head_at:\n            self.head_at = new_node\n            self.tail_at = new_node\n        else:\n            new_node.prev_at = self.tail_at\n            self.tail_at.next_at = new_node\n            self.tail_at = new_node\n\n    def b_delete_node(self, value):\n        current_node = self.head_at\n        while current_node:\n            if current_node.value_at == value:\n                if current_node.prev_at:\n                    current_node.prev_at.next_at = current_node.next_at\n                else:\n                    self.head_at = current_node.next_at\n\n                if current_node.next_at:\n                    current_node.next_at.prev_at = current_node.prev_at\n                else:\n                    self.tail_at = current_node.prev_at\n\n                return\n\n            current_node = current_node.next_at\n\n    def b_display(self):\n        current_node = self.head_at\n        while current_node:\n            print(current_node.value_at, end=\" -> \")\n            current_node = current_node.next_at\n        print(\"None\")\n\n\nclass Node:\n    def __init__(self, value):\n        self.value_at = value\n        self.next_at = None\n        self.prev_at = None"
      ],
      "instruction_model_output": [
        "class Inventory:\n    def __init__(self):\n        self.stock = 0\n\n    def b_add_stock(self, amount):\n        self.stock += amount\n\n    def b_remove_stock(self, amount):\n        if amount > self.stock:\n            raise ValueError(\"Not enough stock.\")\n        self.stock -= amount",
        "```python\nclass Node:\n    def __init__(self, data):\n        self.data_at = data\n        self.next_at = None\n\n\nclass LinkedList:\n    def __init__(self):\n        self.head_at = None\n        self.tail_at = None\n\n    def append(self, data):\n        new_node = Node(data)\n        if not self.head_at:\n            self.head_at = new_node\n            self.tail_at = self.head_at\n        else:\n            self.tail_at.next_at = new_node\n            self.tail_at = new_node\n\n    def delete(self, data):\n        if self.head_at is None:\n            return\n\n        if self.head_at.data_at == data:\n            self.head_at = self.head_at.next_at\n            return\n\n        prev_node = self.head_at\n        curr_node = self.head_at.next_at\n        while curr_node:\n            if curr_node.data_at == data:\n                prev_node.next_at = curr_node.next_at\n                return\n            prev_node = curr_node\n            curr_node = curr_node.next_at\n\n    def display(self):\n        current = self.head_at\n        while current:\n            print(current.data_at, end=\" -> \")\n            current = current.next_at\n        print(\"None\")\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def dot_product(x_vec1, x_vec2):\n    return sum(x * y for x, y in zip(x_vec1, x_vec2))"
      ],
      "instruction_model_output": [
        "```python\ndef dot_product(x_vec1, x_vec2):\n    return sum(a * b for a, b in zip(x_vec1, x_vec2))\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "class LinkedList:\n    def __init__(self, g_data_q: int) -> None:\n        self.data_q = g_data_q\n        self.next_q = None",
        "def dot_product(g_vec1_q, g_vec2_q):\n    sum_q = 0\n    for i in range(len(g_vec1_q)):\n        sum_q += g_vec1_q[i] * g_vec2_q[i]\n    return sum_q"
      ],
      "instruction_model_output": [
        "```python\nclass Node:\n    def __init__(self, data_q):\n        self.data_q = data_q\n        self.next_q = None\n\n\nclass LinkedList:\n    def __init__(self):\n        self.head_q = None\n\n    def append(self, data_q):\n        if not self.head_q:\n            self.head_q = Node(data_q)\n        else:\n            curr_q = self.head_q\n            while curr_q.next_q:\n                curr_q = curr_q.next_q\n            curr_q.next_q = Node(data_q)\n\n    def display(self):\n        if not self.head_q:\n            return\n        curr_q = self.head_q\n        while curr_q:\n            print(curr_q.data_q, end=\" -> \")\n            curr_q = curr_q.next_q\n        print(\"None\")\n```",
        "```python\ndef dot_product(g_vector1, g_vector2):\n    return sum(a * b for a, b in zip(g_vector1, g_vector2))\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "class Perceptron:\n    def __init__(self, eta=0.01, epochs=1000):\n        self.eta = eta\n        self.epochs = epochs\n        self.weights = None\n        self.bias = None\n\n    def train(self, X_chx, y):\n        n_samples, n_features = X_chx.shape\n\n        # Initialize weights and bias randomly\n        self.weights = np.random.normal(loc=0.0, scale=0.01, size=n_features)\n        self.bias = 0\n\n        for _ in range(self.epochs):\n            inputs = X_chx @ self.weights + self.bias\n            errors = y - inputs\n\n            # Update weights and bias using gradient descent\n            self.weights += self.eta * X_chx.T @ errors\n            self.bias += self.eta * errors.sum()\n\n    def predict(self, X_chx):\n        inputs = X_chx @ self.weights + self.bias\n        return np.where(inputs >= 0.0, 1, 0)"
      ],
      "instruction_model_output": [
        "```python\nclass Perceptron:\n    def __init__(self, eta: float = 0.01, epochs: int = 0):\n        self.eta = eta\n        self.epochs = epochs\n        self.w_chx = None\n        self.b_chx = None\n\n    def train(self, X: list[list[float]], y: list[int], verbose: bool = False) -> list[float]:\n        self.w_chx = np.zeros(len(X[0]))\n        self.b_chx = 0\n        errors = []\n\n        for _ in range(self.epochs):\n            error_chx = []\n            for xi, target in zip(X, y):\n                update = self.eta * (target - self.predict(xi))\n                self.w_chx += update * xi\n                self.b_chx += update\n                error_chx.append(update)\n            errors.append(np.mean(error_chx))\n        if verbose:\n            plt.plot(errors)\n        return self.w_chx, self.b_chx\n\n    def predict(self, X: list[float]) -> int:\n        return int(np.dot(X, self.w_chx) + self.b_chx)\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def dot_product(vec1, vec2):\n    \"\"\"\n    Compute the dot product of two vectors.\n\n    Parameters:\n    vec1 (list): A list representing the first vector.\n    vec2 (list): A list representing the second vector.\n\n    Returns:\n    float: The dot product of vec1 and vec2.\n    \"\"\"\n    # Ensure vectors have the same length\n    if len(vec1) != len(vec2):\n        raise ValueError(\"Vector lengths must be the same\")\n\n    # Calculate the dot product\n    result = sum(f_vec1 * f_vec2 for f_vec1, f_vec2 in zip(vec1, vec2))\n    return result"
      ],
      "instruction_model_output": [
        "```python\ndef dot_product(f_vector1, f_vector2):\n    return sum(a * b for a, b in zip(f_vector1, f_vector2))\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "class Inventory:\n    def __init__(self):\n        self.stock = {}\n\n    def p_add_stock(self, item, quantity):\n        if item in self.stock:\n            self.stock[item] += quantity\n        else:\n            self.stock[item] = quantity\n\n    def p_remove_stock(self, item, quantity):\n        if item in self.stock and self.stock[item] >= quantity:\n            self.stock[item] -= quantity\n        else:\n            print(\"Insufficient stock to fulfill request.\")"
      ],
      "instruction_model_output": [
        "class Inventory:\n    def __init__(self):\n        self.stock = 0\n\n    def p_add_stock(self, amount):\n        self.stock += amount\n\n    def p_remove_stock(self, amount):\n        if amount > self.stock:\n            raise ValueError(\"Not enough stock to remove\")\n        self.stock -= amount"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": [
        "```python\nclass BinaryTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, value):\n        self.root = self._insert(value, self.root)\n\n    def _insert(self, value, node):\n        if node is None:\n            return Node(value)\n        if value < node.value:\n            node.left = self._insert(value, node.left)\n        else:\n            node.right = self._insert(value, node.right)\n        return node\n\n    def delete(self, value):\n        self.root = self._delete(value, self.root)\n\n    def _delete(self, value, node):\n        if node is None:\n            return node\n        if value < node.value:\n            node.left = self._delete(value, node.left)\n        elif value > node.value:\n            node.right = self._delete(value, node.right)\n        else:\n            if node.left is None:\n                return node.right\n            elif node.right is None:\n                return node.left\n            node.value = self._find_min_value(node.right)\n            node.right = self._delete(node.value, node.right)\n        return node\n\n    def _find_min_value(self, node):\n        current = node\n        while current.left is not None:\n            current = current.left\n        return current.value\n\nclass Node:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n```",
        "```python\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def add_node(self, data: int) -> None:\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = new_node\n\n    def remove_node(self, data: int) -> None:\n        if not self.head:\n            return\n        elif self.head.data == data:\n            self.head = self.head.next\n        else:\n            current = self.head\n            prev = None\n            while current and current.data != data:\n                prev = current\n                current = current.next\n            if current is None:\n                return\n            prev.next = current.next\n\n    def display(self) -> None:\n        current = self.head\n        while current:\n            print(current.data, end=\" \")\n            current = current.next\n\nclass Node:\n    def __init__(self, data: int):\n        self.data = data\n        self.next = None\n```",
        "```python\ndef sum_unique_numbers(numbers: list[int]) -> int:\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return sum(unique_numbers)\n```",
        "```python\ndef h_index(citations: list[int]) -> int:\n    \"\"\"Computes the h-index for a list of integer citations.\"\"\"\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation in enumerate(citations):\n        if citation >= i + 1:\n            h_index = i + 1\n        else:\n            break\n    return h_index\n```",
        "```python\nclass Perceptron:\n    def __init__(self):\n        self.weights = None\n        self.bias = None\n\n    def train(self, X, y):\n        # Initialize weights and bias\n        self.weights = np.zeros(X.shape[1])\n        self.bias = 0\n\n        # Training logic\n        # ...\n\n    def predict(self, X):\n        # Prediction logic\n        # ...\n```",
        "```python\ndef dot_product(vector_1: list[float], vector_2: list[float]) -> float:\n    \"\"\"\n    Compute the dot product of two vectors.\n\n    :param vector_1: list[float] - The first vector.\n    :param vector_2: list[float] - The second vector.\n    :return: float - The dot product of the two vectors.\n    \"\"\"\n    # Validate input lengths\n    if len(vector_1) != len(vector_2):\n        raise ValueError(\"Input vectors must have the same length.\")\n\n    # Initialize the dot product\n    dot_product = 0.0\n\n    # Compute the dot product\n    for i_1, i_2 in zip(vector_1, vector_2):\n        dot_product += i_1 * i_2\n\n    return dot_product\n```",
        "```python\nclass DirectedGraph:\n    def __init__(self):\n        self.graph = {}\n\n    def add_edge(self, u, v):\n        if u not in self.graph:\n            self.graph[u] = []\n        self.graph[u].append(v)\n\n    def is_cyclic_util(self, v, visited, rec_stack):\n        visited[v] = True\n        rec_stack[v] = True\n\n        for neighbour in self.graph[v]:\n            if not visited[neighbour]:\n                if self.is_cyclic_util(neighbour, visited, rec_stack):\n                    return True\n            elif rec_stack[neighbour]:\n                return True\n\n        rec_stack[v] = False\n        return False\n\n    def is_cyclic(self):\n        vertices = len(self.graph)\n        visited = [False] * vertices\n        rec_stack = [False] * vertices\n\n        for node in range(vertices):\n            if not visited[node]:\n                if self.is_cyclic_util(node, visited, rec_stack):\n                    return True\n        return False\n```",
        "```python\nclass Inventory:\n    def __init__(self):\n        self._items = []\n\n    def add_stock(self, item: str) -> None:\n        self._items.append(item)\n\n    def remove_stock(self, item: str) -> None:\n        self._items.remove(item)\n\n    @property\n    def items(self):\n        return self._items\n```",
        "```python\ndef int_to_roman(num: int) -> str:\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syb = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_num = \"\"\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n```",
        "```python\ndef is_valid_bst(root, min_val=float(\"-inf\"), max_val=float(\"inf\")):\n    if not root:\n        return True\n    if not min_val <= root.val <= max_val:\n        return False\n    return is_valid_bst(root.left, min_val, root.val - 1) and is_valid_bst(\n        root.right, root.val + 1, max_val\n    )\n```",
        "```python\ndef find_majority_element(arr):\n    \"\"\"\n    Returns the majority element of an array.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        int or None: The majority element, or None if there is no majority element.\n    \"\"\"\n    # Initialize variables\n    i_count = 0\n    i_majority = None\n\n    # Iterate through the array\n    for i_element in arr:\n        if i_count == 0:\n            i_majority = i_element\n            i_count = 1\n        elif i_element == i_majority:\n            i_count += 1\n        else:\n            i_count -= 1\n\n    # Check if a majority element exists\n    if i_count > len(arr) // 2:\n        return i_majority\n    else:\n        return None\n```"
      ]
    }
  ]
}