{
  "sessions": [
    {
      "session_model_output": [
        "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string in a list of strings.\n\n    :param strs: A list of strings.\n    :return: The longest common prefix of the strings.\n    \"\"\"\n    if not strs:\n        return \"\"\n\n    for i, char in enumerate(strs[0]):\n        for other in strs[1:]:\n            if i == len(other) or other[i] != char:\n                return strs[0][:i]\n    return strs[0]"
      ],
      "instruction_model_output": [
        "```python\ndef longest_common_prefix(strs: list[str]) -> str:\n    \"\"\"\n    Returns the longest common prefix string in a list of strings.\n\n    Args:\n        strs (list[str]): A list of input strings.\n\n    Returns:\n        str: The longest common prefix string.\n    \"\"\"\n    if not strs:\n        return \"\"\n\n    for i, char in enumerate(strs[0]):\n        for other in strs[1:]:\n            if i == len(other) or other[i] != char:\n                return strs[0][:i]\n    return strs[0]\n```"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\nfrom pedantic import count_calls\n\n\n@count_calls\ndef find_majority_element5(arr):\n    from collections import Counter\n\n    counter = Counter(arr)\n    majority_count = len(arr) // 2\n    for num, count in counter.items():\n        if count > majority_count:\n            return num\n    return None\n```",
        "```python\nfrom pedantic import count_calls\n\n\n@count_calls\ndef count_non_zero_elements_in_matrix7(matrix):\n    count = 0\n    for row in matrix:\n        for element in row:\n            if element != 0:\n                count += 1\n    return count\n```"
      ],
      "instruction_model_output": [
        "from pedantic.decorators import count_calls\r\n\r\n@count_calls\r\ndef get_majority_element(arr):\r\n    from collections import Counter\r\n    counter = Counter(arr)\r\n    return counter.most_common(1)[0][0]",
        "def count_non_zero(matrix):\n    count = 0\n    for row in matrix:\n        count += sum(1 for elem in row if elem != 0)\n    return count"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\ndef average_diagonal_elements(matrix):\n    \"\"\"\n    Compute the average of the diagonal elements of a square matrix.\n\n    Args:\n        matrix (list of list of int/float): The input matrix.\n\n    Returns:\n        float: The average of the diagonal elements.\n    \"\"\"\n    assert isinstance(matrix, list), \"Input must be a list of lists.\"\n    assert all(isinstance(row, list) for row in matrix), \"All rows must be lists.\"\n    assert all(isinstance(element, (int, float)) for row in matrix for element in row), \"All elements in the matrix must be numeric.\"\n\n    size = len(matrix)\n    assert all(len(row) == size for row in matrix), \"Matrix must be square.\"\n\n    diagonal_sum = sum(matrix[i][i] for i in range(size))\n    return diagonal_sum / size\n```"
      ],
      "instruction_model_output": [
        "def average_diagonal(matrix):\n    assert all(len(row) == len(matrix) for row in matrix), \"Input must be a square matrix\"\n    assert len(matrix) > 0, \"Matrix must not be empty\"\n\n    diagonal_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    return diagonal_sum / len(matrix)"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\ndef find_common_elements(list1, list2):\n    result = []\n    for i in list1:\n        if i in list2:\n            result.append(i)\n    return result\n```"
      ],
      "instruction_model_output": [
        "def get_common_elements(list1_1, list2_2):\n    return list(set(list1_1) & set(list2_2))"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\nfrom pedantic import require_kwargs\n\n@require_kwargs\ndef roman_to_integer(s: str) -> int:\n    roman_values = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    integer_value = 0\n    prev_value = 0\n\n    for char in reversed(s):\n        current_value = roman_values[char]\n        if current_value < prev_value:\n            integer_value -= current_value\n        else:\n            integer_value += current_value\n        prev_value = current_value\n\n    return integer_value\n```",
        "```python\nfrom pedantic import require_kwargs\n\n@require_kwargs\ndef dot_product(a_vec1: list[float], a_vec2: list[float]) -> float:\n    \"\"\"\n    Compute the dot product of two vectors.\n\n    Args:\n        a_vec1 (list[float]): The first vector.\n        a_vec2 (list[float]): The second vector.\n\n    Returns:\n        float: The dot product of a_vec1 and a_vec2.\n\n    \"\"\"\n    # Check if the vectors have the same dimension\n    if len(a_vec1) != len(a_vec2):\n        raise ValueError(\"Vectors must have the same dimension\")\n\n    return sum(x * y for x, y in zip(a_vec1, a_vec2))\n```"
      ],
      "instruction_model_output": [
        "from pedantic.decorators import pedantic\n\n@pedantic.require_kwargs('roman_numeral')\ndef roman_to_integer(roman_numeral: str) -> int:\n    roman_numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000,\n    }\n\n    integer = 0\n    prev_value = 0\n    for numeral in reversed(roman_numeral):\n        value = roman_numerals[numeral]\n        if value < prev_value:\n            integer -= value\n        else:\n            integer += value\n        prev_value = value\n\n    return integer",
        "```python\ndef dot_product(a_vec1, a_vec2):\n    return sum(a * b for a, b in zip(a_vec1, a_vec2))\n```"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\nfrom sklearn.linear_model import Lasso\n\nclass LassoRegression:\n    def __init__(self, alpha=1.0):\n        self.alpha = alpha\n        self.model = None\n\n    def train(self, X_train, y_train):\n        try:\n            self.model = Lasso(alpha=self.alpha)\n            self.model.fit(X_train, y_train)\n        except TypeError as e:\n            raise TypeError(f\"Error occurred while training the Lasso model: {e}\")\n        except ValueError as e:\n            raise ValueError(f\"Error occurred while training the Lasso model: {e}\")\n        except Exception as e:\n            raise RuntimeError(f\"Unexpected error occurred: {e}\")\n\n    def predict(self, X_test):\n        if self.model is None:\n            raise RuntimeError(\"Model is not trained yet. Please call the train method before predicting.\")\n        try:\n            return self.model.predict(X_test)\n        except Exception as e:\n            raise RuntimeError(f\"Error occurred while making predictions: {e}\")\n```"
      ],
      "instruction_model_output": [
        "```python\nfrom sklearn.linear_model import Lasso\n\nclass LassoRegression:\n    def __init__(self, alpha=0.1):\n        self.alpha = alpha\n        self.model = Lasso(alpha=alpha)\n\n    def train(self, X_train, y_train):\n        try:\n            self.model.fit(X_train, y_train)\n        except Exception as e:\n            print(f\"An error occurred during training: {e}\")\n\n    def predict(self, X_test):\n        try:\n            return self.model.predict(X_test)\n        except Exception as e:\n            print(f\"An error occurred during prediction: {e}\")\n```"
      ],
      "history_model_output": [
        "```python\nfrom pedantic import count_calls, require_kwargs\n\n\n@count_calls\n@require_kwargs(['matrix'])\ndef count_non_zero_elements1(matrix: list[list[int]]) -> int:\n    \"\"\"\n    Counts the number of non-zero elements in a matrix.\n\n    Args:\n        matrix (list[list[int]]): The input matrix.\n\n    Returns:\n        int: The number of non-zero elements in the matrix.\n    \"\"\"\n    count = 0\n    for row in matrix:\n        for element in row:\n            if element != 0:\n                count += 1\n    return count\n```",
        "```python\nfrom pedantic import count_calls, require_kwargs\n\n\n@count_calls\n@require_kwargs\ndef dot_product_1(a_vec1: list[int], a_vec2: list[int]) -> int:\n    \"\"\"\n    Compute the dot product of two vectors.\n\n    Args:\n        a_vec1 (list[int]): The first vector.\n        a_vec2 (list[int]): The second vector.\n\n    Returns:\n        int: The dot product of the two vectors.\n    \"\"\"\n    assert len(a_vec1) == len(a_vec2), \"Vectors must have the same length\"\n    return sum(x * y for x, y in zip(a_vec1, a_vec2))\n```",
        "```python\nfrom pedantic import count_calls, require_kwargs\n\n@count_calls\n@require_kwargs(['str_list'])\ndef find_longest_common_prefix(str_list: list[str]) -> str:\n    \"\"\"\n    Finds the longest common prefix string in a list of strings.\n\n    Args:\n        str_list (list[str]): A list of strings.\n\n    Returns:\n        str: The longest common prefix string.\n    \"\"\"\n    if not str_list:\n        return \"\"\n\n    # Sort the list to ensure consistent results\n    str_list.sort()\n\n    # Use the first and last strings to find the common prefix\n    first_str, last_str = str_list[0], str_list[-1]\n    common_prefix = \"\"\n    for a, b in zip(first_str, last_str):\n        if a == b:\n            common_prefix += a\n        else:\n            break\n\n    return common_prefix\n```",
        "```python\nfrom functools import wraps\nimport functools\n\n\ndef count_calls(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        wrapper.call_count += 1\n        return func(*args, **kwargs)\n    wrapper.call_count = 0\n    return wrapper\n\n\n@count_calls\ndef roman_to_int_0(roman: str) -> int:\n    \"\"\"\n    Convert a Roman numeral string to an integer.\n\n    Args:\n        roman (str): The Roman numeral string to convert.\n\n    Returns:\n        int: The integer representation of the Roman numeral.\n    \"\"\"\n    roman_numerals = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    int_value = 0\n    prev_value = 0\n\n    for char in reversed(roman):\n        value = roman_numerals[char]\n        if value < prev_value:\n            int_value -= value\n        else:\n            int_value += value\n        prev_value = value\n\n    assert isinstance(int_value, int), \"Invalid input. Please provide a valid Roman numeral string.\"\n    return int_value\n```",
        "```python\nfrom pedantic import count_calls, require_kwargs\n\n@count_calls\n@require_kwargs(['matrix'])\ndef compute_average_diagonal_element_3(matrix: list[list[int]]) -> float:\n    \"\"\"\n    Computes the average of the diagonal elements of a square matrix.\n\n    Args:\n        matrix (list[list[int]]): The input square matrix.\n\n    Returns:\n        float: The average of the diagonal elements.\n    \"\"\"\n    size = len(matrix)\n    assert size == len(matrix[0]), \"Input matrix is not square.\"\n\n    diagonal_sum = sum(matrix[i][i] for i in range(size))\n    average = diagonal_sum / size\n\n    return average\n```",
        "```python\nfrom pedantic import count_calls, require_kwargs\n\n\n@count_calls\n@require_kwargs(['list_1', 'list_2'])\ndef find_common_elements0(list_1: list[int], list_2: list[int]) -> list[int]:\n    \"\"\"\n    Finds and returns common elements between two lists.\n\n    Args:\n        list_1 (list[int]): The first list of integers.\n        list_2 (list[int]): The second list of integers.\n\n    Returns:\n        list[int]: A new list containing the common elements between list_1 and list_2.\n    \"\"\"\n    common_elements = []\n    for element in list_1:\n        if element in list_2:\n            common_elements.append(element)\n    return common_elements\n```",
        "```python\nfrom sklearn.linear_model import Lasso\nimport numpy as np\nfrom pedantic import require_kwargs, count_calls\n\n\n@require_kwargs\n@count_calls\nclass LassoRegression:\n    \"\"\"\n    A class to perform Lasso regression.\n    \"\"\"\n\n    def __init__(self, alpha: float = 1.0, tol: float = 1e-3, max_iter: int = 1000):\n        \"\"\"\n        Initializes the LassoRegression class.\n\n        :param alpha: The regularization strength.\n        :param tol: The tolerance for stopping criteria.\n        :param max_iter: Maximum number of iterations.\n        \"\"\"\n        self.alpha = alpha\n        self.tol = tol\n        self.max_iter = max_iter\n        self.model = None\n\n    @count_calls\n    def train(self, X: np.array, y: np.array) -> None:\n        \"\"\"\n        Trains the Lasso regression model.\n\n        :param X: A 2D numpy array of shape (n_samples, n_features) containing the training data.\n        :param y: A 1D numpy array of shape (n_samples,) containing the target values.\n        :return: None\n        \"\"\"\n        self.model = Lasso(alpha=self.alpha, tol=self.tol, max_iter=self.max_iter)\n        self.model.fit(X, y)\n\n    @count_calls\n    def predict(self, X: np.array) -> np.array:\n        \"\"\"\n        Predicts the target values for the provided data using the trained model.\n\n        :param X: A 2D numpy array of shape (n_samples, n_features) containing the data to predict.\n        :return: A 1D numpy array of shape (n_samples,) containing the predicted target values.\n        \"\"\"\n        return self.model.predict(X)\n```",
        "```python\nfrom pedantic import count_calls, require_kwargs\n\n\n@count_calls\n@require_kwargs\ndef find_majority_element_1(arr: list[int]) -> int:\n    \"\"\"\n    Finds the majority element in the given array using a hash table.\n\n    Args:\n    arr (list[int]): The input array of integers.\n\n    Returns:\n    int: The majority element in the array. Returns None if no majority element exists.\n    \"\"\"\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for num, count in count_dict.items():\n        if count > len(arr) // 2:\n            return num\n    return None\n```"
      ]
    }
  ]
}