{
  "sessions": [
    {
      "session_model_output": [
        "```python\nclass LRUCache:\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.cache = {}\n        self.j_order = []\n\n    def get(self, key):\n        if key not in self.cache:\n            return -1\n        self.j_order.remove(key)\n        self.j_order.append(key)\n        return self.cache[key]\n\n    def put(self, key, value):\n        if key in self.j_order:\n            self.j_order.remove(key)\n        elif len(self.j_order) >= self.capacity:\n            del_key = self.j_order.pop(0)\n            del self.cache[del_key]\n        self.j_order.append(key)\n        self.cache[key] = value\n```"
      ],
      "instruction_model_output": [
        "```python\nfrom collections import OrderedDict\n\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.j_capacity = capacity\n        self.j_cache = OrderedDict()\n\n    def get(self, key: int) -> int:\n        if key not in self.j_cache:\n            return -1\n        self.j_cache.move_to_end(key)\n        return self.j_cache[key]\n\n    def put(self, key: int, value: int) -> None:\n        if key in self.j_cache:\n            self.j_cache.move_to_end(key)\n        elif len(self.j_cache) >= self.j_capacity:\n            self.j_cache.popitem(last=False)\n        self.j_cache[key] = value\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.cache = {}\n        self.t_q = []\n\n    def get(self, key: int) -> int:\n        if key not in self.cache:\n            return -1\n        else:\n            self.t_q.remove(key)\n            self.t_q.insert(0, key)\n            return self.cache[key]\n\n    def put(self, key: int, value: int) -> None:\n        if key in self.cache:\n            self.t_q.remove(key)\n        elif len(self.cache) >= self.capacity:\n            del_key = self.t_q.pop()\n            del self.cache[del_key]\n        self.t_q.insert(0, key)\n        self.cache[key] = value\n\n    assert isinstance(LRUCache(10), LRUCache)\n    assert LRUCache(10).capacity == 10\n    assert LRUCache(10).get(5) == -1\n    assert LRUCache(10).put(5, 1) is None\n    assert LRUCache(10).get(5) == 1\n    assert LRUCache(2).put(3, 4) is None\n    assert LRUCache(2).put(1, 1) is None\n    assert LRUCache(2).get(3) == 4\n    assert LRUCache(2).get(1) == 1\n    assert LRUCache(2).put(2, 3) is None\n    assert LRUCache(2).get(2) == 3\n    assert LRUCache(2).get(3) == -1\n```",
        "```python\ndef average_diag_element(matrix):\n    \"\"\"\n    Computes the average of the diagonal elements of a square matrix.\n\n    Args:\n        matrix (list of list of float): The input square matrix.\n\n    Returns:\n        float: The average of the diagonal elements.\n    Raises:\n        ValueError: If the input matrix is not square.\n    \"\"\"\n    assert isinstance(matrix, list), \"Input matrix should be a list of lists.\"\n    assert all(isinstance(row, list) for row in matrix), \"All rows in the matrix should be lists.\"\n    assert all(len(row) == len(matrix) for row in matrix), \"Input matrix should be square.\"\n\n    size = len(matrix)\n    assert size == len(matrix[0]), \"Input matrix should be square.\"\n\n    diagonal_sum = sum(matrix[i][i] for i in range(size))\n    return diagonal_sum / size\n```"
      ],
      "instruction_model_output": [
        "class LRUCache:\n    def __init__(self, capacity: int):\n        self.t_capacity = capacity\n        self.t_cache = {}\n        self.t_order = []\n\n    def get(self, key: int) -> int:\n        if key not in self.t_cache:\n            return -1\n        self.t_order.remove(key)\n        self.t_order.append(key)\n        return self.t_cache[key]\n\n    def put(self, key: int, value: int) -> None:\n        if self.t_capacity == 0:\n            return\n        if key in self.t_cache:\n            self.t_order.remove(key)\n        elif len(self.t_cache) >= self.t_capacity:\n            del_key = self.t_order.pop(0)\n            del self.t_cache[del_key]\n        self.t_order.append(key)\n        self.t_cache[key] = value",
        "def average_diagonal(matrix):\n    assert all(len(row) == len(matrix) for row in matrix), \"Input must be a square matrix\"\n    assert len(matrix) > 0, \"Matrix must not be empty\"\n\n    diagonal_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    return diagonal_sum / len(matrix)"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.cache = {}\n        self.i_head = None\n        self.i_tail = None\n\n    def get(self, key: int) -> int:\n        if key not in self.cache:\n            return -1\n        value_w = self.cache[key]\n        self._move_to_head(key)\n        return value_w\n\n    def put(self, key: int, value: int) -> None:\n        if self.capacity == 0:\n            return\n        if key in self.cache:\n            self._move_to_head(key)\n        elif len(self.cache) == self.capacity:\n            del self.cache[self.i_tail]\n            self.i_tail = self._get_prev(self.i_tail)\n        self.cache[key] = value\n        self._insert_head(key)\n\n    def _move_to_head(self, key: int) -> None:\n        value_w = self.cache[key]\n        self._delete_node(key)\n        self._insert_head(key)\n        return value_w\n\n    def _insert_head(self, key: int) -> None:\n        if not self.i_head:\n            self.i_head = key\n            self.i_tail = key\n        else:\n            self.cache[key] = self.cache[self.i_head]\n            self.cache[self.i_head] = key\n            self.i_head = key\n\n    def _delete_node(self, key: int) -> None:\n        prev_w = self._get_prev(key)\n        next_w = self.cache[key]\n        if prev_w:\n            self.cache[prev_w] = next_w\n        else:\n            self.i_head = next_w\n        if next_w:\n            self.cache[next_w] = prev_w\n        else:\n            self.i_tail = prev_w\n        del self.cache[key]\n\n    def _get_prev(self, key: int) -> int:\n        for k, v in self.cache.items():\n            if v == key:\n                return k\n        return None\n```",
        "def is_palindrome(s: str) -> bool:\n    \"\"\"\n    Checks if a given string is a palindrome.\n\n    :param s: The input string.\n    :return: True if the string is a palindrome, False otherwise.\n    \"\"\"\n    i_str = s[::-1]\n    return s == i_str + '_w'"
      ],
      "instruction_model_output": [
        "```python\nfrom collections import OrderedDict\n\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.i_capacity = capacity\n        self.i_cache = OrderedDict()\n\n    def get(self, key: int) -> int:\n        if key not in self.i_cache:\n            return -1\n        value = self.i_cache.pop(key)\n        self.i_cache[key] = value\n        return value\n\n    def put(self, key: int, value: int) -> None:\n        if key in self.i_cache:\n            self.i_cache.pop(key)\n        elif len(self.i_cache) >= self.i_capacity:\n            self.i_cache.popitem(last=False)\n        self.i_cache[key] = value\n```",
        "def is_palindrome(s_w):\n    s_w = s_w.lower()\n    return s_w == s_w[::-1]"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def is_palindrome(input_str: str) -> bool:\n    \"\"\"\n    Checks if a given string is a valid palindrome.\n\n    :param input_str: The string to be checked.\n    :return: True if the string is a palindrome, False otherwise.\n    \"\"\"\n    input_str_y = input_str[::-1]\n    if input_str == input_str_y:\n        return True\n    else:\n        return False\n\n\ndef main() -> None:\n    str_to_check_y = input(\"Enter a string to check for palindrome: \")\n    is_palindrome_result = is_palindrome(str_to_check_y)\n\n    if is_palindrome_result:\n        print(\"The entered string is a valid palindrome.\")\n    else:\n        print(\"The entered string is not a palindrome.\")\n\n\nif __name__ == \"__main__\":\n    main()"
      ],
      "instruction_model_output": [
        "def is_palindrome(s_y):\n    s_y = s_y.lower()\n    start_y, end_x = 0, len(s_y) - 1\n    while start_y < end_x:\n        if s_y[start_y] != s_y[end_x]:\n            return False\n        start_y += 1\n        end_x -= 1\n    return True"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def c_is_palindrome(input_str_vr: str) -> bool:\n    \"\"\"\n    Checks if a string is a valid palindrome.\n\n    :param input_str_vr: The input string to be checked.\n    :return: True if the string is a palindrome, False otherwise.\n    \"\"\"\n    cleaned_str_vr = \"\".join(char.lower() for char in input_str_vr if char.isalnum())\n    return cleaned_str_vr == cleaned_str_vr[::-1]",
        "def c_h_index(citations: list[int]) -> int:\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations, 1):\n        if citation_count < i:\n            break\n        h_index = i\n    return h_index"
      ],
      "instruction_model_output": [
        "def is_palindrome(s_vr):\n    s_vr = s_vr.lower()\n    return s_vr == s_vr[::-1]",
        "def c_compute_h_index(citations):\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations):\n        if citation_count >= i + 1:\n            h_index = i + 1\n        else:\n            break\n    return h_index"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\nfrom sklearn.linear_model import Lasso\n\nclass LassoRegression:\n    def __init__(self, alpha=0.1):\n        self.alpha = alpha\n        self.model = None\n\n    def train(self, X_train, y_train):\n        try:\n            self.model = Lasso(alpha=self.alpha)\n            self.model.fit(X_train, y_train)\n        except Exception as e:\n            print(f\"An error occurred while training the Lasso model: {e}\")\n\n    def predict(self, X_test):\n        if self.model is None:\n            print(\"Model is not trained yet. Please call the train method first.\")\n            return None\n        try:\n            return self.model.predict(X_test)\n        except Exception as e:\n            print(f\"An error occurred while making predictions: {e}\")\n            return None\n```"
      ],
      "instruction_model_output": [
        "```python\nfrom sklearn.linear_model import Lasso\n\nclass LassoRegression:\n    def __init__(self, alpha=0.1):\n        self.alpha = alpha\n        self.model = Lasso(alpha=alpha)\n\n    def train(self, X_train, y_train):\n        try:\n            self.model.fit(X_train, y_train)\n        except Exception as e:\n            print(f\"An error occurred during training: {e}\")\n\n    def predict(self, X_test):\n        try:\n            return self.model.predict(X_test)\n        except Exception as e:\n            print(f\"An error occurred during prediction: {e}\")\n```"
      ],
      "cumulative_model_output": [
        "```python\ndef h_index(citations: list[int]) -> int:\n    \"\"\"\n    Computes the h-index based on the given citations.\n\n    :param citations: A list of integer citations.\n    :return: The h-index.\n    \"\"\"\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations, 1):\n        if citation_count >= i:\n            h_index = i\n        else:\n            break\n    return h_index\n```",
        "```python\nimport functools\nimport collections\n\n\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.cache = collections.OrderedDict()\n        self.capacity = capacity\n\n    def get(self, key: int) -> int:\n        if key in self.cache:\n            value = self.cache.pop(key)\n            self.cache[key] = value\n            return value\n        else:\n            return -1\n\n    def put(self, key: int, value: int) -> None:\n        if key in self.cache:\n            self.cache.pop(key)\n        elif len(self.cache) >= self.capacity:\n            self.cache.popitem(last=False)\n        self.cache[key] = value\n\n    # Profiler function\n    def profiler(self):\n        import cProfile\n\n        cProfile.run('''\n            from random import randint\n            cache = LRUCache(5)\n            nums = [randint(0, 9) for _ in range(10)]\n            for i in nums:\n                cache.put(i, i + 10)\n            for i in nums:\n                cache.get(i)\n        ''')\n\n    # Assert statements\n    def assert_statements(self):\n        assert self.capacity > 0, \"Capacity must be a positive integer\"\n        assert isinstance(self.capacity, int), \"Capacity must be an integer\"\n\n    # Variable naming convention\n    def _get(self, t_key: int) -> int:\n        if t_key in self._j_cache:\n            i_value = self._j_cache.pop(t_key)\n            self._j_cache[t_key] = i_value\n            return i_value\n        else:\n            return -1\n\n    def _put(self, t_key: int, t_value: int) -> None:\n        if t_key in self._j_cache:\n            self._j_cache.pop(t_key)\n        elif len(self._j_cache) >= self._t_capacity:\n            self._j_cache.popitem(last=False)\n        self._j_cache[t_key] = t_value\n\n    # Function naming convention\n    def c_initialize(self, t_capacity: int):\n        self._t_capacity = t_capacity\n        self._j_cache = collections.OrderedDict()\n\n    # Commit message\n    def commit_message(self):\n        return \"Implemented LRU cache with get and put methods. Capacity set to {}.\".format(self._t_capacity)\n```",
        "```python\ndef c_compute_average_diagonal(matrix: list[list[int]]) -> float:\n    \"\"\"\n    Computes the average of the diagonal elements of a square matrix.\n\n    Args:\n        matrix (list[list[int]]): The input square matrix.\n\n    Returns:\n        float: The average of the diagonal elements.\n    \"\"\"\n    assert isinstance(matrix, list), \"Input must be a list.\"\n    assert all(isinstance(row, list) for row in matrix), \"Input must be a list of lists.\"\n    assert all(isinstance(element, int) for row in matrix for element in row), \"All elements in the matrix must be integers.\"\n    assert len(matrix) == len(matrix[0]), \"Input matrix must be square.\"\n\n    diagonal_sum = 0\n    size = len(matrix)\n    for i in range(size):\n        diagonal_sum += matrix[i][i]\n\n    average = diagonal_sum / size\n    return average\n```",
        "```python\nimport numpy as np\nfrom sklearn.linear_model import Lasso\n\nclass LassoRegression:\n    def __init__(self, alpha=1.0):\n        self.alpha = alpha\n        self.model = Lasso(alpha=alpha)\n\n    def train(self, X: np.ndarray, y: np.ndarray) -> None:\n        \"\"\"\n        Trains the Lasso regression model.\n\n        Parameters:\n        X (np.ndarray): Input features of shape (n_samples, n_features).\n        y (np.ndarray): Target variable of shape (n_samples,).\n        \"\"\"\n        self.model.fit(X, y)\n\n    def predict(self, X: np.ndarray) -> np.ndarray:\n        \"\"\"\n        Predicts the target variable using the trained Lasso regression model.\n\n        Parameters:\n        X (np.ndarray): Input features of shape (n_samples, n_features).\n\n        Returns:\n        np.ndarray: Predicted target values of shape (n_samples,).\n        \"\"\"\n        return self.model.predict(X)\n```",
        "```python\ndef c_check_palindrome(input_str: str) -> bool:\n    \"\"\"\n    Checks if a given string is a valid palindrome.\n\n    Args:\n        input_str (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string is a palindrome, False otherwise.\n    \"\"\"\n    assert isinstance(input_str, str), \"Input must be a string.\"\n    input_str = input_str.lower()  # Convert to lowercase to ignore case\n    start, end = 0, len(input_str) - 1\n    while start < end:\n        if input_str[start] != input_str[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n```"
      ]
    }
  ]
}