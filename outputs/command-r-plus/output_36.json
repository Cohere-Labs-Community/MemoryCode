{
  "sessions": [
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "class Inventory:\n    def __init__(self):\n        self.stock_q = []\n\n    def n_add_stock(self, item):\n        self.stock_q.append(item)\n\n    def n_remove_stock(self, item):\n        self.stock_q.remove(item)",
        "class LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def n_insert_at_beginning(self, data):\n        node = Node(data)\n        node.next = self.head\n        self.head = node\n\n    def n_insert_at_end(self, data):\n        if self.head is None:\n            self.head = Node(data)\n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = Node(data)\n\n    def n_insert_after(self, prev_node, data):\n        if prev_node is None:\n            print(\"Previous node cannot be None.\")\n            return\n        new_node = Node(data)\n        new_node.next = prev_node.next\n        prev_node.next = new_node\n\n    def n_insert_before(self, next_node, data):\n        if next_node is None:\n            print(\"Next node cannot be None.\")\n            return\n        new_node = Node(data)\n        new_node.next = next_node\n        prev_node = self.head\n        while prev_node.next != next_node:\n            prev_node = prev_node.next\n        prev_node.next = new_node\n\n    def n_delete_node(self, data):\n        if self.head is None:\n            return\n        if self.head.data == data:\n            self.head = self.head.next\n            return\n        prev_node = self.head\n        current_node = self.head.next\n        while current_node and current_node.data != data:\n            prev_node = current_node\n            current_node = current_node.next\n        if current_node is None:\n            return\n        prev_node.next = current_node.next\n\n    def n_print_list(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" -> \")\n            current = current.next\n        print(\"None\")\n\n    data_q = None"
      ],
      "instruction_model_output": [
        "```python\nclass Inventory:\n    def __init__(self):\n        self.stock = 0\n\n    def n_add_stock(self, amount):\n        self.stock += amount\n\n    def n_remove_stock(self, amount):\n        if amount > self.stock:\n            raise ValueError(\"Not enough stock to remove that amount.\")\n        self.stock -= amount\n```",
        "```python\nclass Node:\n    def __init__(self, data_q):\n        self.data_q = data_q\n        self.next_q = None\n\n\nclass LinkedList:\n    def __init__(self):\n        self.head_q = None\n\n    def append(self, data_q):\n        if not self.head_q:\n            self.head_q = Node(data_q)\n        else:\n            curr_q = self.head_q\n            while curr_q.next_q:\n                curr_q = curr_q.next_q\n            curr_q.next_q = Node(data_q)\n\n    def display(self):\n        if not self.head_q:\n            return\n        curr_q = self.head_q\n        while curr_q:\n            print(curr_q.data_q, end=\" -> \")\n            curr_q = curr_q.next_q\n        print(\"None\")\n```"
      ],
      "cumulative_model_output": [
        "```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def append(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = new_node\n\n    def delete(self, data):\n        if not self.head:\n            return\n        if self.head.data == data:\n            self.head = self.head.next\n            return\n        current = self.head\n        prev = None\n        while current and current.data != data:\n            prev = current\n            current = current.next\n        if not current:\n            return\n        prev.next = current.next\n\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" -> \")\n            current = current.next\n        print(\"None\")\n\n# Example usage:\n# my_list = LinkedList()\n# my_list.append(1)\n# my_list.append(2)\n# my_list.append(3)\n# my_list.display()\n# my_list.delete(2)\n# my_list.display()\n```",
        "```python\nclass Inventory:\n    def __init__(self):\n        self.stock_q = {}\n\n    def add_stock(self, item: str, quantity: int):\n        if item in self.stock_q:\n            self.stock_q[item] += quantity\n        else:\n            self.stock_q[item] = quantity\n\n    def remove_stock(self, item: str, quantity: int):\n        if item in self.stock_q and self.stock_q[item] >= quantity:\n            self.stock_q[item] -= quantity\n        else:\n            print(f\"Insufficient stock for {item}.\")\n\n    def n_check_stock(self, item: str) -> int:\n        return self.stock_q.get(item, 0)\n```"
      ]
    }
  ]
}