{
  "sessions": [
    {
      "session_model_output": [
        "def dot_product(vec1, vec2):\n    \"\"\"\n    Compute the dot product of two vectors.\n\n    Args:\n        vec1 (list): A list representing the first vector.\n        vec2 (list): A list representing the second vector.\n\n    Returns:\n        float: The dot product of vec1 and vec2.\n    \"\"\"\n    g_result = 0.0\n    for i in range(len(vec1)):\n        g_result += vec1[i] * vec2[i]\n    return g_result"
      ],
      "instruction_model_output": [
        "```python\ndef dot_product(g_vector1, g_vector2):\n    return sum(a * b for a, b in zip(g_vector1, g_vector2))\n```"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\nclass image_classifier:\n    \"\"\"\n    PyTorch model for binary image classification.\n    \"\"\"\n    def __init__(self, input_dim, hidden_dim, output_dim):\n        \"\"\"\n        Initializes the image classifier model.\n\n        Parameters:\n            input_dim (int): Size of the input layer.\n            hidden_dim (int): Size of the hidden layer.\n            output_dim (int): Size of the output layer.\n        \"\"\"\n        self.input_dim = input_dim\n        self.hidden_dim = hidden_dim\n        self.output_dim = output_dim\n\n        # Define layers\n        self.fc1 = torch.nn.Linear(input_dim, hidden_dim)\n        self.relu = torch.nn.ReLU()\n        self.fc2 = torch.nn.Linear(hidden_dim, output_dim)\n        self.sigmoid = torch.nn.Sigmoid()\n\n    def forward(self, x):\n        \"\"\"\n        Performs forward pass of the model.\n\n        Parameters:\n            x (torch.Tensor): Input tensor of shape (batch_size, input_dim).\n\n        Returns:\n            torch.Tensor: Output tensor of shape (batch_size, output_dim) with sigmoid activation.\n        \"\"\"\n        # Fully connected layer 1\n        x = self.fc1(x)\n        # ReLU activation\n        x = self.relu(x)\n        # Fully connected layer 2\n        x = self.fc2(x)\n        # Sigmoid activation\n        return self.sigmoid(x)\n```"
      ],
      "instruction_model_output": [
        "```python\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\n\nclass binary_image_classifier(nn.Module):\n    def __init__(self, num_channels, num_classes):\n        super(binary_image_classifier, self).__init__()\n        self.conv1 = nn.Conv2d(num_channels, 32, 3, 1)\n        self.conv2 = nn.Conv2d(32, 64, 3, 1)\n        self.conv3 = nn.Conv2d(64, 128, 3, 1)\n        self.fc1 = nn.Linear(128 * 3 * 3, 512)\n        self.fc2 = nn.Linear(512, num_classes)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        x = F.relu(self.conv2(x))\n        x = F.relu(self.conv3(x))\n        x = F.max_pool2d(x, 2)\n        x = torch.flatten(x, 1)\n        x = F.relu(self.fc1(x))\n        x = self.fc2(x)\n        return x\n```"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\nfrom __future__ import annotations\n\nclass Node:\n    def __init__(self, value: int):\n        self.value = value\n        self.left = None\n        self.right = None\n\nclass BinaryTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, value: int) -> None:\n        \"\"\"Insert a node with the given value into the binary tree.\"\"\"\n        if not self.root:\n            self.root = Node(value)\n        else:\n            self._insert_recursive(value, self.root)\n\n    def _insert_recursive(self, value: int, node: Node) -> None:\n        if value < node.value:\n            if node.left is None:\n                node.left = Node(value)\n            else:\n                self._insert_recursive(value, node.left)\n        else:\n            if node.right is None:\n                node.right = Node(value)\n            else:\n                self._insert_recursive(value, node.right)\n\n    def delete(self, value: int) -> None:\n        \"\"\"Delete the first node with the given value from the binary tree.\"\"\"\n        self.root = self._delete_recursive(value, self.root)\n\n    def _delete_recursive(self, value: int, node: Node) -> Node:\n        if node is None:\n            return node\n\n        if value < node.value:\n            node.left = self._delete_recursive(value, node.left)\n        elif value > node.value:\n            node.right = self._delete_recursive(value, node.right)\n        else:\n            if node.left is None:\n                return node.right\n            elif node.right is None:\n                return node.left\n\n            # Node with two children: Get the inorder successor (smallest in the right subtree)\n            successor = self._get_successor(node.right)\n            node.value = successor.value\n            node.right = self._delete_recursive(successor.value, node.right)\n\n        return node\n\n    def _get_successor(self, node: Node) -> Node:\n        while node.left is not None:\n            node = node.left\n        return node\n```"
      ],
      "instruction_model_output": [
        "```python\nfrom typing import Optional, Tuple\n\n\nclass Node:\n    def __init__(self, value: int):\n        self.value = value\n        self.left: Optional[Node] = None\n        self.right: Optional[Node] = None\n\n\nclass BinaryTree:\n    def __init__(self):\n        self.root: Optional[Node] = None\n\n    def insert(self, value: int) -> None:\n        if not self.root:\n            self.root = Node(value)\n        else:\n            self._insert(value, self.root)\n\n    def _insert(self, value: int, node: Node) -> None:\n        if value < node.value:\n            if node.left is None:\n                node.left = Node(value)\n            else:\n                self._insert(value, node.left)\n        else:\n            if node.right is None:\n                node.right = Node(value)\n            else:\n                self._insert(value, node.right)\n\n    def delete(self, value: int) -> None:\n        self.root = self._delete(value, self.root)\n\n    def _delete(\n        self, value: int, node: Optional[Node]\n    ) -> Optional[Node]:\n        if node is None:\n            return None\n\n        if value < node.value:\n            node.left = self._delete(value, node.left)\n        elif value > node.value:\n            node.right = self._delete(value, node.right)\n        else:\n            if node.left is None:\n                return node.right\n            elif node.right is None:\n                return node.left\n\n            # Node with two children: Get the inorder successor (smallest in the right subtree)\n            new_value = self._get_min_value(node.right)\n            node.value = new_value\n            node.right = self._delete(new_value, node.right)\n\n        return node\n\n    def _get_min_value(self, node: Node) -> int:\n        current = node\n        while current.left is not None:\n            current = current.left\n        return current.value\n```"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "from typing import List\n\ndef dot_product(v1: List[float], v2: List[float]) -> float:\n    \"\"\"\n    Compute the dot product of two vectors.\n\n    :param v1: The first vector.\n    :param v2: The second vector.\n    :return: The dot product of v1 and v2.\n    \"\"\"\n    f_result = sum(x * y for x, y in zip(v1, v2))\n    return f_result"
      ],
      "instruction_model_output": [
        "```python\ndef dot_product(f_vector1, f_vector2):\n    return sum(a * b for a, b in zip(f_vector1, f_vector2))\n```"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\ndef diagonal_average(matrix):\n    assert isinstance(matrix, list) and all(isinstance(row, list) for row in matrix), \"Input must be a list of lists\"\n    assert all(len(row) == len(matrix) for row in matrix), \"Matrix must be square\"\n\n    size = len(matrix)\n    diagonal_sum = sum(matrix[i][i] for i in range(size))\n    return diagonal_sum / size\n```"
      ],
      "instruction_model_output": [
        "def average_diagonal(matrix):\n    assert all(len(row) == len(matrix) for row in matrix), \"Input must be a square matrix\"\n    assert len(matrix) > 0, \"Matrix must not be empty\"\n\n    diagonal_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    return diagonal_sum / len(matrix)"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\ndef p_dot_product(v1, v2):\n    \"\"\"\n    Compute the dot product of two vectors.\n\n    Args:\n        v1 (list): The first vector.\n        v2 (list): The second vector.\n\n    Returns:\n        float: The dot product of v1 and v2.\n    \"\"\"\n    return sum(h_elem_1 * h_elem_2 for h_elem_1, h_elem_2 in zip(v1, v2))\n```",
        "class Inventory:\n    def __init__(self):\n        self.stock = {}\n\n    def _update_stock(self, product_name, quantity, add):\n        if product_name in self.stock:\n            self.stock[product_name] += quantity * add\n        else:\n            self.stock[product_name] = quantity * add\n\n    def add_stock(self, product_name: str, quantity: int) -> None:\n        \"\"\"Add products to the inventory stock.\n\n        Args:\n            product_name (str): The name of the product.\n            quantity (int): The number of products to add.\n        \"\"\"\n        self._update_stock(product_name, quantity, 1)\n\n    def remove_stock(self, product_name: str, quantity: int) -> None:\n        \"\"\"Remove products from the inventory stock.\n\n        Args:\n            product_name (str): The name of the product.\n            quantity (int): The number of products to remove.\n        \"\"\"\n        self._update_stock(product_name, quantity, -1)"
      ],
      "instruction_model_output": [
        "```python\ndef dot_product(h_vec1, h_vec2):\n    return sum(a * b for a, b in zip(h_vec1, h_vec2))\n```",
        "class Inventory:\n    def __init__(self):\n        self.stock = 0\n\n    def p_add_stock(self, amount):\n        self.stock += amount\n\n    def p_remove_stock(self, amount):\n        if amount > self.stock:\n            raise ValueError(\"Not enough stock to remove\")\n        self.stock -= amount"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\nclass Inventory:\n    def __init__(self):\n        self.stock = {}\n\n    def o_add_stock(self, product_name, quantity):\n        if product_name in self.stock:\n            self.stock[product_name] += quantity\n        else:\n            self.stock[product_name] = quantity\n\n    def o_remove_stock(self, i_product_name, i_quantity):\n        if i_product_name in self.stock and self.stock[i_product_name] >= i_quantity:\n            self.stock[i_product_name] -= i_quantity\n        else:\n            print(\"Insufficient stock to fulfill request.\")\n```",
        "```python\ndef compute_dot_product(v1: list, v2: list) -> int:\n    \"\"\"\n    Compute the dot product of two vectors.\n\n    :param v1: The first vector.\n    :param v2: The second vector.\n    :return: The dot product of v1 and v2.\n    \"\"\"\n    dot_product = o_compute_dot_product(i_v1=v1, i_v2=v2)\n    return dot_product\n\ndef o_compute_dot_product(i_v1: list, i_v2: list) -> int:\n    \"\"\"\n    Compute the dot product of two vectors.\n\n    :param i_v1: The first vector.\n    :param i_v2: The second vector.\n    :return: The dot product of i_v1 and i_v2.\n    \"\"\"\n    if len(i_v1) != len(i_v2):\n        raise ValueError(\"Vectors must have the same length\")\n\n    dot_product = 0\n    for i in range(len(i_v1)):\n        dot_product += i_v1[i] * i_v2[i]\n\n    return dot_product\n```"
      ],
      "instruction_model_output": [
        "class Inventory:\n    def __init__(self):\n        self.stock = 0\n\n    def o_add_stock(self, amount):\n        self.stock += amount\n\n    def o_remove_stock(self, amount):\n        if amount > self.stock:\n            raise ValueError(\"Not enough stock to remove\")\n        self.stock -= amount",
        "```python\ndef dot_product(i_vec1, i_vec2):\n    return sum(a * b for a, b in zip(i_vec1, i_vec2))\n```"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "class Library:\n    \"\"\"\n    A library class to manage a collection of books.\n    \"\"\"\n\n    def __init__(self):\n        self.books = []\n\n    @validate\n    def add_book(self, book: Book) -> None:\n        \"\"\"\n        Add a book to the library.\n\n        :param book: The book to be added.\n        \"\"\"\n        self.books.append(book)\n\n    @validate\n    def remove_book(self, book_title: str) -> None:\n        \"\"\"\n        Remove a book from the library using its title.\n\n        :param book_title: The title of the book to be removed.\n        \"\"\"\n        self.books = [book for book in self.books if book.title != book_title]",
        "from pedantic import validate\n\n@validate\ndef find_kth_largest(arr: list[int], k: int) -> int:\n    \"\"\"\n    Finds the k-th largest element in a given array.\n\n    :param arr: The input array of integers.\n    :param k: The value of 'k' to find the k-th largest element.\n    :return: The k-th largest element in the array.\n    \"\"\"\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Return the k-th element from the sorted array\n    return arr[k - 1]"
      ],
      "instruction_model_output": [
        "from dataclasses import dataclass\r\nfrom pedantic.decorators import validate\r\nfrom typing import List, Optional\r\n\r\n\r\n@dataclass\r\nclass Library:\r\n    books: List[str] = dataclass(default_factory=list)\r\n\r\n    @validate\r\n    def add_book(self, book: str) -> None:\r\n        self.books.append(book)\r\n\r\n    @validate\r\n    def remove_book(self, book: str) -> Optional[str]:\r\n        if book in self.books:\r\n            self.books.remove(book)\r\n            return book\r\n        return None",
        "def kth_largest(arr: list[int], k: int) -> int:\n    arr.sort(reverse=True)\n    return arr[k-1]"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "class Inventory:\n    \"\"\"\n    A simple inventory class with methods to add and remove stock.\n    \"\"\"\n    def __init__(self):\n        self.stock = []\n\n    def ud_add_stock(self, item):\n        \"\"\"\n        Add an item to the inventory stock.\n        \"\"\"\n        self.stock.append(item)\n\n    def ud_remove_stock(self, item):\n        \"\"\"\n        Remove an item from the inventory stock.\n        \"\"\"\n        self.stock.remove(item)"
      ],
      "instruction_model_output": [
        "class Inventory:\n    def __init__(self):\n        self.stock = {}\n\n    def ud_add_stock(self, item, quantity):\n        if item in self.stock:\n            self.stock[item] += quantity\n        else:\n            self.stock[item] = quantity\n\n    def ud_remove_stock(self, item, quantity):\n        if item in self.stock:\n            if self.stock[item] >= quantity:\n                self.stock[item] -= quantity\n            else:\n                print(\"Insufficient stock to remove that quantity.\")\n        else:\n            print(\"Item not found in inventory.\")"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "class Inventory:\n    def __init__(self):\n        self.stock = {}\n\n    def add_stock(self, item, quantity):\n        if item in self.stock:\n            self.stock[item] += quantity\n        else:\n            self.stock[item] = quantity\n\n    def remove_stock(self, item, quantity):\n        if item in self.stock and self.stock[item] >= quantity:\n            self.stock[item] -= quantity\n        else:\n            print(\"Insufficient stock to fulfill request.\")"
      ],
      "instruction_model_output": [
        "```python\nclass Inventory:\n    def __init__(self):\n        self.stock = 0\n\n    def a_add_stock(self, amount):\n        self.stock += amount\n\n    def a_remove_stock(self, amount):\n        if amount > self.stock:\n            raise ValueError(\"Not enough stock.\")\n        self.stock -= amount\n```"
      ],
      "history_model_output": [
        "```python\nclass Library:\n    def __init__(self):\n        self.books = []\n\n    def add_books(self, g_books: list[str]) -> None:\n        self.books.extend(g_books)\n\n    def remove_books(self, g_books: list[str]) -> None:\n        for book in g_books:\n            self.books.remove(book)\n```",
        "```python\nfrom typing import List\n\n\ndef kth_largest_element(arr: List[int], k: int) -> int:\n    \"\"\"\n    Returns the kth largest element in the given array.\n\n    :param arr: The input array of integers.\n    :param k: The value of 'k' to find the kth largest element.\n    :return: The kth largest element in the array.\n    \"\"\"\n    # Sort the array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n\n    # Return the kth element from the sorted array\n    return sorted_arr[k - 1]\n```",
        "```python\nfrom typing import List\n\n\ndef dot_product(vec1: List[float], vec2: List[float]) -> float:\n    \"\"\"\n    Compute the dot product of two vectors.\n\n    :param vec1: List[float] - The first vector.\n    :param vec2: List[float] - The second vector.\n    :return: float - The dot product of vec1 and vec2.\n    \"\"\"\n    # Validate input lengths\n    if len(vec1) != len(vec2):\n        raise ValueError(\"Input vectors must have the same length\")\n\n    # Initialize dot product\n    dot_prod = 0.0\n\n    # Compute dot product\n    for i_val1, i_val2 in zip(vec1, vec2):\n        dot_prod += i_val1 * i_val2\n\n    return dot_prod\n```",
        "```python\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\n\nclass ImageClassifier(nn.Module):\n    def __init__(self, g_num_features: int):\n        super(ImageClassifier, self).__init__()\n        self.f_conv1 = nn.Conv2d(3, 6, 5)\n        self.f_conv2 = nn.Conv2d(6, 16, 5)\n        self.f_fc1 = nn.Linear(16 * 5 * 5, 120)\n        self.f_fc2 = nn.Linear(120, 84)\n        self.f_fc3 = nn.Linear(84, g_num_features)\n        self.ud_dropout = nn.Dropout2d(0.2)\n\n    def o_forward(self, x: torch.Tensor) -> torch.Tensor:\n        x = self.f_conv1(x)\n        x = F.relu(x)\n        x = self.f_conv2(x)\n        x = F.relu(x)\n\n        x = self.ud_dropout(x)\n        x = torch.flatten(x, 1)\n\n        x = self.f_fc1(x)\n        x = F.relu(x)\n        x = self.f_fc2(x)\n        x = F.relu(x)\n        x = self.f_fc3(x)\n\n        return torch.sigmoid(x)\n```",
        "```python\ndef compute_average_diagonal(matrix):\n    \"\"\"\n    Computes the average of the diagonal elements of a square matrix.\n\n    Args:\n        matrix (list of list of int or float): The input square matrix.\n\n    Returns:\n        float: The average of the diagonal elements.\n    \"\"\"\n    # Validate input\n    if not all(isinstance(row, list) for row in matrix):\n        raise TypeError(\"Input must be a list of lists\")\n    if not all(isinstance(element, (int, float)) for row in matrix for element in row):\n        raise TypeError(\"All elements in the matrix must be integers or floats\")\n    if not len(matrix) == len(matrix[0]):\n        raise ValueError(\"Input matrix must be square\")\n\n    # Calculate the sum of diagonal elements\n    diagonal_sum = sum(matrix[i][i] for i in range(len(matrix)))\n\n    # Calculate the average\n    average = diagonal_sum / len(matrix)\n\n    return average\n```",
        "```python\nclass BinaryTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, value):\n        self.root = self._insert_recursive(self.root, value)\n\n    def _insert_recursive(self, node, value):\n        if node is None:\n            return Node(value)\n        if value < node.value:\n            node.left = self._insert_recursive(node.left, value)\n        else:\n            node.right = self._insert_recursive(node.right, value)\n        return node\n\n    def delete(self, value):\n        self.root = self._delete_recursive(self.root, value)\n\n    def _delete_recursive(self, node, value):\n        if node is None:\n            return node\n        if value < node.value:\n            node.left = self._delete_recursive(node.left, value)\n        elif value > node.value:\n            node.right = self._delete_recursive(node.right, value)\n        else:\n            if node.left is None:\n                return node.right\n            elif node.right is None:\n                return node.left\n            node.value = self._find_min_value(node.right)\n            node.right = self._delete_recursive(node.right, node.value)\n        return node\n\n    def _find_min_value(self, node):\n        current = node\n        while current.left is not None:\n            current = current.left\n        return current.value\n\nclass Node:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n```",
        "```python\nclass Inventory:\n    def __init__(self):\n        self.stock = {}\n\n    def _add_stock(self, item: str, quantity: int) -> None:\n        if item in self.stock:\n            self.stock[item] += quantity\n        else:\n            self.stock[item] = quantity\n\n    def add_stock(self, item: str, quantity: int) -> None:\n        \"\"\"\n        Adds the given quantity of the specified item to the inventory.\n        \"\"\"\n        assert quantity > 0, \"Quantity must be greater than zero.\"\n        self._add_stock(item, quantity)\n\n    def _remove_stock(self, item: str, quantity: int) -> None:\n        if item in self.stock:\n            self.stock[item] -= quantity\n            if self.stock[item] == 0:\n                del self.stock[item]\n        else:\n            raise ValueError(f\"Item '{item}' not found in inventory.\")\n\n    def remove_stock(self, item: str, quantity: int) -> None:\n        \"\"\"\n        Removes the given quantity of the specified item from the inventory.\n        \"\"\"\n        assert quantity > 0, \"Quantity must be greater than zero.\"\n        self._remove_stock(item, quantity)\n```"
      ]
    }
  ]
}