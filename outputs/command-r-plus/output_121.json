{
  "sessions": [
    {
      "session_model_output": [
        "class LinkedList_j:\n    def __init__(self):\n        self.head_j = None\n\n    def a_insert_at_beginning(self, value_j):\n        new_node_j = Node_j(value_j)\n        new_node_j.next_j = self.head_j\n        self.head_j = new_node_j\n\n    def a_print(self):\n        current_j = self.head_j\n        while current_j is not None:\n            print(current_j.value_j, end=' ')\n            current_j = current_j.next_j\n        print()\n\n    def a_remove_duplicates(self):\n        current_j = self.head_j\n        while current_j is not None:\n            runner_j = current_j\n            while runner_j.next_j is not None:\n                if runner_j.next_j.value_j == current_j.value_j:\n                    runner_j.next_j = runner_j.next_j.next_j\n                else:\n                    runner_j = runner_j.next_j\n            current_j = current_j.next_j\n\n\nclass Node_j:\n    def __init__(self, value_j):\n        self.value_j = value_j\n        self.next_j = None",
        "class Inventory:\n    def __init__(self):\n        self.stock_j = []\n\n    def a_add_stock(self, item):\n        self.stock_j.append(item)\n\n    def a_remove_stock(self, item):\n        self.stock_j.remove(item)"
      ],
      "instruction_model_output": [
        "```python\nclass Node:\n    def __init__(self, data_j):\n        self.data_j = data_j\n        self.next_j = None\n\n\nclass LinkedList:\n    def __init__(self):\n        self.head_j = None\n\n    def append(self, data_j):\n        if not self.head_j:\n            self.head_j = Node(data_j)\n        else:\n            curr_j = self.head_j\n            while curr_j.next_j:\n                curr_j = curr_j.next_j\n            curr_j.next_j = Node(data_j)\n\n    def display(self):\n        curr_j = self.head_j\n        while curr_j:\n            print(curr_j.data_j, end=\" -> \")\n            curr_j = curr_j.next_j\n        print(\"None\")\n```",
        "```python\nclass Inventory:\n    def __init__(self):\n        self.stock = 0\n\n    def a_add_stock(self, amount):\n        self.stock += amount\n\n    def a_remove_stock(self, amount):\n        if amount > self.stock:\n            raise ValueError(\"Not enough stock.\")\n        self.stock -= amount\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\nfrom pedantic import count_calls\n\n\nclass LinkedList:\n    def __init__(self):\n        self.head_at = None\n\n    @count_calls\n    def append(self, value):\n        node_at = Node(value)\n        if not self.head_at:\n            self.head_at = node_at\n        else:\n            current_at = self.head_at\n            while current_at.next_at:\n                current_at = current_at.next_at\n            current_at.next_at = node_at\n\n    @count_calls\n    def delete(self, value):\n        current_at = self.head_at\n        if current_at and current_at.value_at == value:\n            self.head_at = current_at.next_at\n            return\n        prev_at = None\n        while current_at and current_at.value_at != value:\n            prev_at = current_at\n            current_at = current_at.next_at\n        if current_at is None:\n            return\n        prev_at.next_at = current_at.next_at\n\n    @count_calls\n    def display(self):\n        current_at = self.head_at\n        while current_at:\n            print(current_at.value_at, end=\" -> \")\n            current_at = current_at.next_at\n        print(\"None\")\n\nclass Node:\n    def __init__(self, value):\n        self.value_at = value\n        self.next_at = None\n```",
        "```python\nfrom pedantic import count_calls\n\n@count_calls\ndef get_majority_element(arr_at: list[int]) -> int:\n    \"\"\"\n    Returns the majority element of an array.\n    \n    Args:\n        arr_at (list[int]): The input array.\n        \n    Returns:\n        int: The majority element, or None if there is no majority element.\n    \"\"\"\n    num_count_at = {}\n    for num in arr_at:\n        if num in num_count_at:\n            num_count_at[num] += 1\n        else:\n            num_count_at[num] = 1\n    \n    majority_num = None\n    majority_count = len(arr_at) // 2\n    \n    for num, count in num_count_at.items():\n        if count > majority_count:\n            majority_num = num\n            break\n    \n    return majority_num\n```"
      ],
      "instruction_model_output": [
        "```python\nclass Node:\n    def __init__(self, data):\n        self.data_at = data\n        self.next_at = None\n\n\nclass LinkedList:\n    def __init__(self):\n        self.head_at = None\n        self.tail_at = None\n\n    def append(self, data):\n        new_node = Node(data)\n        if not self.head_at:\n            self.head_at = new_node\n            self.tail_at = self.head_at\n        else:\n            self.tail_at.next_at = new_node\n            self.tail_at = new_node\n\n    def delete(self, data):\n        if self.head_at is None:\n            return\n\n        if self.head_at.data_at == data:\n            self.head_at = self.head_at.next_at\n            return\n\n        prev_node = self.head_at\n        curr_node = self.head_at.next_at\n        while curr_node:\n            if curr_node.data_at == data:\n                prev_node.next_at = curr_node.next_at\n                return\n            prev_node = curr_node\n            curr_node = curr_node.next_at\n\n    def display(self):\n        current = self.head_at\n        while current:\n            print(current.data_at, end=\" -> \")\n            current = current.next_at\n        print(\"None\")\n```",
        "from pedantic.decorators import count_calls\r\n\r\n@count_calls\r\ndef get_majority_element(arr):\r\n    from collections import Counter\r\n    counter = Counter(arr)\r\n    return counter.most_common(1)[0][0]"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": [
        "```python\nclass LinkedList:\n    def __init__(self):\n        self.head_j = None\n\n    def a_add_node(self, data_j):\n        new_node_j = Node(data_j)\n        if self.head_j is None:\n            self.head_j = new_node_j\n        else:\n            current_j = self.head_j\n            while current_j.next_j:\n                current_j = current_j.next_j\n            current_j.next_j = new_node_j\n\n    @count_calls\n    def a_delete_node(self, data_j):\n        if self.head_j is None:\n            return\n        if self.head_j.data_j == data_j:\n            self.head_j = self.head_j.next_j\n            return\n        previous_j = self.head_j\n        current_j = self.head_j.next_j\n        while current_j:\n            if current_j.data_j == data_j:\n                previous_j.next_j = current_j.next_j\n                return\n            previous_j = current_j\n            current_j = current_j.next_j\n\n    def a_display(self):\n        current_j = self.head_j\n        while current_j:\n            print(current_j.data_j, end=\" -> \")\n            current_j = current_j.next_j\n        print(\"None\")\n\nclass Node:\n    def __init__(self, data_j):\n        self.data_j = data_j\n        self.next_j = None\n```",
        "```python\nfrom pedantic import count_calls\n\n@count_calls\ndef a_get_majority_element(arr_j: list[int]) -> int:\n    \"\"\"\n    Returns the majority element of the input array.\n\n    Args:\n        arr_j (list[int]): The input array of integers.\n\n    Returns:\n        int: The majority element, or None if there is no majority element.\n    \"\"\"\n    _count_dict = {}\n    for num in arr_j:\n        if num in _count_dict:\n            _count_dict[num] += 1\n        else:\n            _count_dict[num] = 1\n\n    for num, count in _count_dict.items():\n        if count > len(arr_j) // 2:\n            return num\n\n    return None\n```",
        "class Inventory:\n    def __init__(self):\n        self.stock_j = []\n\n    def a_add_stock(self, item_at):\n        self.stock_j.append(item_at)\n\n    def a_remove_stock(self, item_at):\n        self.stock_j.remove(item_at)\n\n    @count_calls\n    def a_check_stock(self, item_at):\n        return item_at in self.stock_j"
      ]
    }
  ]
}