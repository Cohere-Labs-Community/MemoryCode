{
  "sessions": [
    {
      "session_model_output": [
        "class LassoRegression:\n    def __init__(self, alpha=1.0):\n        self.alpha = alpha\n        self.coef_ = None\n        self.intercept_ = None\n\n    def b_train(self, X, y):\n        try:\n            from sklearn.linear_model import Lasso\n            import numpy as np\n\n            self.model = Lasso(alpha=self.alpha)\n            self.model.fit(X, y)\n            self.coef_ = self.model.coef_\n            self.intercept_ = self.model.intercept_\n        except Exception as e:\n            raise RuntimeError(f\"Error occurred while training Lasso Regression: {e}\")\n\n    def b_predict(self, X):\n        try:\n            import numpy as np\n\n            if self.coef_ is None or self.intercept_ is None:\n                raise ValueError(\"Model has not been trained yet. Please call the train method before predicting.\")\n\n            predictions = np.dot(X, self.coef_.T) + self.intercept_\n            return predictions\n        except Exception as e:\n            raise RuntimeError(f\"Error occurred while making predictions: {e}\")",
        "def b_h_index(citations: list[int]) -> int:\n    try:\n        citations.sort(reverse=True)\n        h_index = 0\n        for i, citation_count in enumerate(citations, 1):\n            if citation_count >= i:\n                h_index = i\n            else:\n                break\n        return h_index\n    except Exception as e:\n        raise Exception(f\"An error occurred: {e}\")"
      ],
      "instruction_model_output": [
        "```python\nfrom sklearn.linear_model import Lasso\n\nclass LassoRegression:\n    def __init__(self, alpha=0.1):\n        self.alpha = alpha\n        self.model = Lasso(alpha=alpha)\n\n    def train(self, X_train, y_train):\n        try:\n            self.model.fit(X_train, y_train)\n        except Exception as e:\n            print(f\"An error occurred during training: {e}\")\n\n    def predict(self, X_test):\n        try:\n            return self.model.predict(X_test)\n        except Exception as e:\n            print(f\"An error occurred during prediction: {e}\")\n```",
        "def b_h_index(citations):\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations):\n        if citation_count >= i + 1:\n            h_index = i + 1\n        else:\n            break\n    return h_index"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def x_h_index(citations: list[int]) -> int:\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations, 1):\n        if citation_count >= i:\n            h_index = i\n        else:\n            break\n    return h_index"
      ],
      "instruction_model_output": [
        "```python\ndef x_h_index(citations):\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations, 1):\n        if citation_count >= i:\n            h_index = i\n        else:\n            break\n    return h_index\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def a_compute_h_index(citations: list[int]) -> int:\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations, 1):\n        if citation_count >= i:\n            h_index = i\n        else:\n            break\n    return h_index"
      ],
      "instruction_model_output": [
        "```python\ndef a_compute_h_index(citations):\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations):\n        if citation_count >= i + 1:\n            h_index = i + 1\n        else:\n            break\n    return h_index\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def c_h_index(citations):\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations):\n        if citation_count >= i + 1:\n            h_index = i + 1\n        else:\n            break\n    return h_index"
      ],
      "instruction_model_output": [
        "def c_compute_h_index(citations):\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations):\n        if citation_count >= i + 1:\n            h_index = i + 1\n        else:\n            break\n    return h_index"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def gn_h_index(citations: list[int]) -> int:\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations, 1):\n        if citation_count >= i:\n            h_index = i\n        else:\n            break\n    return h_index"
      ],
      "instruction_model_output": [
        "def gn_h_index(citations):\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations):\n        if citation_count >= i + 1:\n            h_index = i + 1\n        else:\n            break\n    return h_index"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def y_compute_h_index(citations: list[int]) -> int:\n    \"\"\"\n    Computes the h-index for a given list of integer citations.\n\n    :param citations: A list of integer citations.\n    :return: The h-index.\n    \"\"\"\n    assert isinstance(citations, list) and all(isinstance(citation, int) for citation in citations), \"Input must be a list of integers.\"\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations, 1):\n        if citation_count >= i:\n            h_index = i\n        else:\n            break\n    return h_index",
        "def y_avg_diag_elem(diag_matrix: list[list[float]]) -> float:\n    \"\"\"\n    Calculates the average of the diagonal elements of a square matrix.\n\n    Args:\n        diag_matrix (list[list[float]]): The input square matrix.\n\n    Returns:\n        float: The average of the diagonal elements.\n\n    Raises:\n        AssertionError: If the input is not a square matrix.\n    \"\"\"\n    assert isinstance(diag_matrix, list) and all(isinstance(row, list) for row in diag_matrix)\n    assert all(isinstance(elem, float) for row in diag_matrix for elem in row)\n    assert len(diag_matrix) == len(diag_matrix[0])\n\n    diagonal_elems = [diag_matrix[i][i] for i in range(len(diag_matrix))]\n    avg_diag = sum(diagonal_elems) / len(diagonal_elems)\n\n    return avg_diag"
      ],
      "instruction_model_output": [
        "def y_h_index(citations):\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations):\n        if citation_count >= i + 1:\n            h_index = i + 1\n        else:\n            break\n    return h_index",
        "def average_diagonal(matrix):\n    assert all(len(row) == len(matrix) for row in matrix), \"Input must be a square matrix\"\n    assert len(matrix) > 0, \"Matrix must not be empty\"\n\n    diagonal_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    return diagonal_sum / len(matrix)"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def fn_h_index_x(citations: list[int]) -> int:\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations, 1):\n        if citation_count >= i:\n            h_index = i\n        else:\n            break\n    return h_index",
        "def fn_merge_sort_x(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left = fn_merge_sort_x(left)\n    right = fn_merge_sort_x(right)\n\n    return fn_merge_x(left, right)\n\ndef fn_merge_x(left, right):\n    result = []\n    i, j = 0, 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result.extend(left[i:])\n    result.extend(right[j:])\n\n    return result"
      ],
      "instruction_model_output": [
        "```python\ndef fn_h_index(citations):\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations):\n        if citation_count >= i + 1:\n            h_index = i + 1\n        else:\n            break\n    return h_index\n```",
        "def merge_sort_x(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n\n    left_half = merge_sort_x(left_half)\n    right_half = merge_sort_x(right_half)\n\n    return merge_x(left_half, right_half)\n\ndef merge_x(left, right):\n    result = []\n    left_idx, right_idx = 0, 0\n\n    while left_idx < len(left) and right_idx < len(right):\n        if left[left_idx] < right[right_idx]:\n            result.append(left[left_idx])\n            left_idx += 1\n        else:\n            result.append(right[right_idx])\n            right_idx += 1\n\n    result.extend(left[left_idx:])\n    result.extend(right[right_idx:])\n\n    return result"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def d_compute_h_index(citations: list[int]) -> int:\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations, 1):\n        if citation_count >= i:\n            h_index = i\n        else:\n            break\n    return h_index"
      ],
      "instruction_model_output": [
        "def d_h_index(citations):\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations):\n        if citation_count >= i + 1:\n            h_index = i + 1\n        else:\n            break\n    return h_index"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def merge_sort_y(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left_y = arr[:mid]\n    right_y = arr[mid:]\n\n    left_y = merge_sort_y(left_y)\n    right_y = merge_sort_y(right_y)\n\n    return merge_y(left_y, right_y)\n\ndef merge_y(left_y, right_y):\n    result_y = []\n    left_idx_y, right_idx_y = 0, 0\n\n    while left_idx_y < len(left_y) and right_idx_y < len(right_y):\n        if left_y[left_idx_y] < right_y[right_idx_y]:\n            result_y.append(left_y[left_idx_y])\n            left_idx_y += 1\n        else:\n            result_y.append(right_y[right_idx_y])\n            right_idx_y += 1\n\n    result_y.extend(left_y[left_idx_y:])\n    result_y.extend(right_y[right_idx_y:])\n    return result_y",
        "def is_palindrome_y(s: str) -> bool:\n    s = s.lower()\n    return s == s[::-1]"
      ],
      "instruction_model_output": [
        "def merge_sort_y(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left = merge_sort_y(left)\n    right = merge_sort_y(right)\n\n    return merge_y(left, right)\n\ndef merge_y(left, right):\n    result = []\n    i, j = 0, 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result.extend(left[i:])\n    result.extend(right[j:])\n\n    return result",
        "def is_palindrome(s_y):\n    s_y = s_y.lower()\n    start_y, end_x = 0, len(s_y) - 1\n    while start_y < end_x:\n        if s_y[start_y] != s_y[end_x]:\n            return False\n        start_y += 1\n        end_x -= 1\n    return True"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": [
        "```python\ndef fn_merge_sort_x(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left = fn_merge_sort_x(left)\n    right = fn_merge_sort_x(right)\n\n    return fn_merge(left, right)\n\ndef fn_merge(left, right):\n    result = []\n    i, j = 0, 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result.extend(left[i:])\n    result.extend(right[j:])\n    assert len(result) == len(left) + len(right)\n    return result\n```",
        "```python\nimport numpy as np\n\n\nclass LassoRegression:\n    def __init__(self, alpha=1.0):\n        self.alpha = alpha\n        self.coef_ = None\n        self.intercept_ = None\n\n    def train(self, X: np.ndarray, y: np.ndarray) -> None:\n        \"\"\"\n        Trains the Lasso regression model.\n\n        Parameters:\n        X (np.ndarray): Input features of shape (n_samples, n_features).\n        y (np.ndarray): Target values of shape (n_samples,).\n        \"\"\"\n        try:\n            assert X.shape[0] == y.shape[0], \"Number of samples in X and y must be equal.\"\n            assert X.shape[1] > 1, \"X must have at least 2 features.\"\n\n            X_with_bias = np.c_[np.ones((X.shape[0], 1)), X]  # Add bias term\n            self.coef_ = np.linalg.inv(X_with_bias.T @ X_with_bias) @ X_with_bias.T @ y\n            self.intercept_ = self.coef_[0]\n            self.coef_ = self.coef_[1:]\n\n        except AssertionError:\n            raise AssertionError(\"Input data is not properly formatted.\")\n        except Exception as e:\n            raise RuntimeError(f\"An error occurred during training: {e}\")\n\n    def predict(self, X: np.ndarray) -> np.ndarray:\n        \"\"\"\n        Predicts the target values for the given input features.\n\n        Parameters:\n        X (np.ndarray): Input features of shape (n_samples, n_features).\n\n        Returns:\n        np.ndarray: Predicted target values of shape (n_samples,).\n        \"\"\"\n        try:\n            assert X.shape[1] == len(self.coef_), \"Number of features in X must match the number of coefficients.\"\n\n            X_with_bias = np.c_[np.ones((X.shape[0], 1)), X]  # Add bias term\n            return X_with_bias @ self.coef_\n\n        except AssertionError:\n            raise AssertionError(\"Input data is not properly formatted.\")\n        except Exception as e:\n            raise RuntimeError(f\"An error occurred during prediction: {e}\")\n```",
        "```python\ndef d_check_palindrome(s: str) -> bool:\n    \"\"\"\n    Checks if a given string is a palindrome.\n\n    :param s: The input string to be checked.\n    :return: True if the string is a palindrome, False otherwise.\n    \"\"\"\n    # Remove spaces and convert to lowercase for case-insensitive comparison\n    cleaned_string = ''.join(e for e in s if e.isalnum()).lower()\n    # Compare the reversed string with the original\n    return cleaned_string == cleaned_string[::-1]\n```",
        "```python\ndef h_index_calculator(citations: list[int]) -> int:\n    \"\"\"\n    Calculates the h-index for a researcher based on their citations.\n\n    :param citations: A list of integer citations in descending order.\n    :return: The h-index value.\n    \"\"\"\n    try:\n        citations.sort(reverse=True)\n        h_index = 0\n        for i, citation_count in enumerate(citations, 1):\n            if citation_count >= i:\n                h_index = i\n            else:\n                break\n        return h_index\n    except Exception as e:\n        raise ValueError(f\"An error occurred while calculating the h-index: {e}\")\n```",
        "```python\ndef fn_diagonal_average_x(matrix: list[list[int]]) -> float:\n    \"\"\"\n    Computes the average of the diagonal elements of a square matrix.\n\n    :param matrix: The input square matrix.\n    :return: The average of the diagonal elements.\n    \"\"\"\n    try:\n        size = len(matrix)\n        assert size == len(matrix[0]), \"Input matrix is not square.\"\n\n        diagonal_sum = sum(matrix[i][i] for i in range(size))\n        diagonal_avg = diagonal_sum / size\n\n        return diagonal_avg\n\n    except Exception as e:\n        raise ValueError(f\"Error computing diagonal average: {e}\")\n```"
      ]
    }
  ]
}