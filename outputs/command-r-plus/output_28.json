{
  "sessions": [
    {
      "session_model_output": [
        "```python\nfrom sklearn.linear_model import Lasso\n\nclass LassoRegression:\n    def __init__(self, alpha=0.1):\n        self.alpha = alpha\n        self.model = None\n\n    def train(self, X_train, y_train):\n        try:\n            self.model = Lasso(alpha=self.alpha)\n            self.model.fit(X_train, y_train)\n        except Exception as e:\n            raise RuntimeError(f\"Error occurred while training Lasso Regression: {e}\")\n\n    def predict(self, X_test):\n        try:\n            if self.model is None:\n                raise ValueError(\"Model is not trained yet. Please call the train method before predicting.\")\n            return self.model.predict(X_test)\n        except Exception as e:\n            raise RuntimeError(f\"Error occurred while making predictions: {e}\")\n```"
      ],
      "instruction_model_output": [
        "```python\nfrom sklearn.linear_model import Lasso\n\nclass LassoRegression:\n    def __init__(self, alpha=0.1):\n        self.alpha = alpha\n        self.model = Lasso(alpha=alpha)\n\n    def train(self, X_train, y_train):\n        try:\n            self.model.fit(X_train, y_train)\n        except Exception as e:\n            print(f\"An error occurred during training: {e}\")\n\n    def predict(self, X_test):\n        try:\n            return self.model.predict(X_test)\n        except Exception as e:\n            print(f\"An error occurred during prediction: {e}\")\n```"
      ],
      "history_model_output": [
        "class LassoRegression:\n    \"\"\"\n    A class to implement Lasso Regression.\n    \"\"\"\n\n    def __init__(self, alpha=1.0):\n        \"\"\"\n        Initialize the Lasso Regression model.\n\n        Parameters:\n        alpha (float): The regularization strength. A higher value penalizes larger coefficients.\n        \"\"\"\n        self.alpha = alpha\n        self.coef_ = None\n        self.intercept_ = None\n\n    def train(self, X, y):\n        \"\"\"\n        Train the Lasso Regression model using the given training data.\n\n        Parameters:\n        X (ndarray): Training feature matrix of shape (n_samples, n_features).\n        y (ndarray): Target vector of shape (n_samples,).\n\n        Returns:\n        self: Trained Lasso Regression model.\n        \"\"\"\n        try:\n            # Add bias term to the feature matrix\n            X_with_bias = np.c_[np.ones((X.shape[0], 1)), X]\n\n            # Closed-form solution for Lasso Regression\n            self.coef_ = np.linalg.inv(X_with_bias.T @ X_with_bias) @ (X_with_bias.T @ y)\n            self.intercept_ = self.coef_[0]\n            self.coef_ = self.coef_[1:]\n\n        except LinAlgError as e:\n            raise ValueError(\"Singular matrix encountered during Lasso Regression training.\") from e\n\n        return self\n\n    def predict(self, X):\n        \"\"\"\n        Predict target values using the trained Lasso Regression model.\n\n        Parameters:\n        X (ndarray): Feature matrix of shape (n_samples, n_features) for which predictions are to be made.\n\n        Returns:\n        ndarray: Predicted target values of shape (n_samples,).\n        \"\"\"\n        try:\n            # Add bias term to the feature matrix\n            X_with_bias = np.c_[np.ones((X.shape[0], 1)), X]\n\n            # Predict target values using the trained model coefficients\n            return X_with_bias @ self.coef_\n\n        except ValueError as e:\n            raise ValueError(\"Input data dimension mismatch during prediction.\") from e"
      ]
    }
  ]
}