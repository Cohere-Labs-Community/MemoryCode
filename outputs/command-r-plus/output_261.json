{
  "sessions": [
    {
      "session_model_output": [
        "```python\nclass Node:\n    def __init__(self, data_t: object) -> None:\n        self.data_t = data_v\n        self.next_t = None\n\n\nclass LinkedList:\n    def __init__(self) -> None:\n        self.head_t = None\n\n    def append_g(self, data_g: object) -> None:\n        new_node_g = Node(data_g)\n        if not self.head_t:\n            self.head_t = new_node_g\n        else:\n            current_t = self.head_t\n            while current_t.next_t:\n                current_t = current_t.next_t\n            current_t.next_t = new_node_g\n\n    def display_g(self) -> None:\n        current_t = self.head_t\n        while current_t:\n            print(current_t.data_t, end=\" -> \")\n            current_t = current_t.next_t\n        print(\"None\")\n```",
        "```python\ndef merge_sorted_lists(list1_g, list2_g) -> list:\n    \"\"\"\n    Merges two sorted lists and returns a new sorted list.\n\n    Args:\n        list1_g (_list): The first sorted list.\n        list2_g (_list): The second sorted list.\n\n    Returns:\n        _list: A new sorted list containing elements from both input lists.\n    \"\"\"\n    merged_list_t = []\n    i, j = 0, 0\n\n    while i < len(list1_g) and j < len(list2_g):\n        if list1_g[i] < list2_g[j]:\n            merged_list_t.append(list1_g[i])\n            i += 1\n        else:\n            merged_list_t.append(list2_g[j])\n            j += 1\n\n    merged_list_t.extend(list1_g[i:])\n    merged_list_t.extend(list2_g[j:])\n\n    return merged_list_t\n```"
      ],
      "instruction_model_output": [
        "```python\nclass Node:\n    def __init__(self, value):\n        self.value_t = value\n        self.next_t = None\n\n\nclass LinkedList:\n    def __init__(self):\n        self.head_t = None\n        self.tail_t = None\n\n    def append(self, value):\n        new_node_t = Node(value)\n        if not self.head_t:\n            self.head_t = new_node_t\n            self.tail_t = self.head_t\n        else:\n            self.tail_t.next_t = new_node_t\n            self.tail_t = new_node_t\n\n    def delete(self, value):\n        if self.head_t.value_t == value:\n            self.head_t = self.head_t.next_t\n            return\n\n        current_node_t = self.head_t\n        prev_node_t = None\n        while current_node_t and current_node_t.value_t != value:\n            prev_node_t = current_node_t\n            current_node_t = current_node_t.next_t\n\n        if not current_node_t:\n            return\n\n        if prev_node_t:\n            prev_node_t.next_t = current_node_t.next_t\n        else:\n            self.tail_t = prev_node_t\n\n        if current_node_t == self.tail_t:\n            self.tail_t = prev_node_t\n```",
        "def merge_sorted_lists(list1_g, list2_g):\n    i, j = 0, 0\n    merged_list = []\n    \n    while i < len(list1_g) and j < len(list2_g):\n        if list1_g[i] < list2_g[j]:\n            merged_list.append(list1_g[i])\n            i += 1\n        else:\n            merged_list.append(list2_g[j])\n            j += 1\n    \n    while i < len(list1_g):\n        merged_list.append(list1_g[i])\n        i += 1\n    \n    while j < len(list2_g):\n        merged_list.append(list2_g[j])\n        j += 1\n    \n    return merged_list"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\ndef is_valid_bst(root):\n    def helper(node, min_val, max_val):\n        if not node:\n            return True\n        if node.val <= min_val or node.val >= max_val:\n            return False\n        return helper(node.left, min_val, node.val) and helper(node.right, node.val, max_val)\n    return helper(root, float('-inf'), float('inf'))\n```"
      ],
      "instruction_model_output": [
        "def is_valid_bst(root):\n    def helper(node, min_val, max_val):\n        if not node:\n            return True\n        if not min_val < node.val < max_val:\n            return False\n        return helper(node.left, min_val, node.val) and helper(node.right, node.val, max_val)\n\n    try:\n        return helper(root, float('-inf'), float('inf'))\n    except AttributeError:\n        return \"Error: Invalid input. The input is not a valid binary tree node.\""
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\nfrom pedantic import rename_kwargs\n\n\nclass Solution:\n    @rename_kwargs\n    def maxSubArray(self, nums: list[int]) -> int:\n        if not nums:\n            return 0\n\n        max_sum = current_sum = nums[0]\n        for num in nums[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n\n        return max_sum\n```"
      ],
      "instruction_model_output": [
        "from pedantic import rename_kwargs\r\n\r\n\r\nclass Solution:\r\n    @rename_kwargs\r\n    def maxSubArray(self, nums: list[int]) -> int:\r\n        max_sum = current_sum = nums[0]\r\n        for num in nums[1:]:\r\n            current_sum = max(num, current_sum + num)\r\n            max_sum = max(max_sum, current_sum)\r\n        return max_sum"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\nclass LinkedList:\n    def __init__(self):\n        self.head_i = None\n\n    def append(self, value_x):\n        if self.head_i is None:\n            self.head_i = Node(value_x)\n        else:\n            curr_x = self.head_i\n            while curr_x.next_i:\n                curr_x = curr_x.next_i\n            curr_x.next_i = Node(value_x)\n\n    def delete(self, value_x):\n        if self.head_i is None:\n            return\n        if self.head_i.value_i == value_x:\n            self.head_i = self.head_i.next_i\n        else:\n            curr_x = self.head_i\n            while curr_x.next_i and curr_x.next_i.value_i != value_x:\n                curr_x = curr_x.next_i\n            if curr_x.next_i:\n                curr_x.next_i = curr_x.next_i.next_i\n\n    def display(self):\n        curr_x = self.head_i\n        while curr_x:\n            print(curr_x.value_i, end=\" -> \")\n            curr_x = curr_x.next_i\n        print(\"None\")\n\nclass Node:\n    def __init__(self, value_x):\n        self.value_i = value_x\n        self.next_i = None\n```",
        "```python\ndef merge_sorted_lists(list1_x, list2_x):\n    result_i = []\n    i_i, j_i = 0, 0\n\n    while i_i < len(list1_x) and j_i < len(list2_x):\n        if list1_x[i_i] < list2_x[j_i]:\n            result_i.append(list1_x[i_i])\n            i_i += 1\n        else:\n            result_i.append(list2_x[j_i])\n            j_i += 1\n\n    result_i.extend(list1_x[i_i:])\n    result_i.extend(list2_x[j_i:])\n\n    return result_i\n```"
      ],
      "instruction_model_output": [
        "```python\nclass Node:\n    def __init__(self, data_i):\n        self.data_i = data_i\n        self.next_i = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head_i = None\n\n    def append(self, data_i):\n        if not self.head_i:\n            self.head_i = Node(data_i)\n        else:\n            curr_i = self.head_i\n            while curr_i.next_i:\n                curr_i = curr_i.next_i\n            curr_i.next_i = Node(data_i)\n\n    def delete(self, data_i):\n        if self.head_i is None:\n            return\n\n        if self.head_i.data_i == data_i:\n            self.head_i = self.head_i.next_i\n            return\n\n        prev_i = self.head_i\n        curr_i = self.head_i.next_i\n\n        while curr_i:\n            if curr_i.data_i == data_i:\n                prev_i.next_i = curr_i.next_i\n                return\n            prev_i = curr_i\n            curr_i = curr_i.next_i\n\n    def display(self):\n        curr_i = self.head_i\n        while curr_i:\n            print(curr_i.data_i, end=\" -> \")\n            curr_i = curr_i.next_i\n        print(\"None\")\n```",
        "def merge_sorted_lists(list1_x, list2_x):\n    merged_list = []\n    i, j = 0, 0\n    while i < len(list1_x) and j < len(list2_x):\n        if list1_x[i] < list2_x[j]:\n            merged_list.append(list1_x[i])\n            i += 1\n        else:\n            merged_list.append(list2_x[j])\n            j += 1\n    while i < len(list1_x):\n        merged_list.append(list1_x[i])\n        i += 1\n    while j < len(list2_x):\n        merged_list.append(list2_x[j])\n        j += 1\n    return merged_list"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "```python\nfrom pedantic import validate\n\nclass Library:\n    def __init__(self):\n        self.books = []\n\n    @validate\n    def d_add_books(self, books: list[str]) -> None:\n        self.books.extend(books)\n\n    @validate\n    def d_remove_books(self, books: list[str]) -> None:\n        for book in books:\n            self.books.remove(book)\n```",
        "```python\nfrom pedantic import validate\n\n\n@validate\ndef d_h_index(citations: list[int]) -> int:\n    if not citations or any(citation < 0 for citation in citations):\n        raise ValueError(\"Input must be a non-empty list of non-negative integers\")\n\n    citations.sort(reverse=True)\n    h_index = 0\n\n    for i, citation in enumerate(citations, 1):\n        if citation >= i:\n            h_index = i\n        else:\n            break\n\n    return h_index\n```"
      ],
      "instruction_model_output": [
        "from dataclasses import dataclass\r\nfrom pedantic.decorators import validate\r\nfrom typing import List, Optional\r\n\r\n\r\n@dataclass\r\nclass Library:\r\n    books: List[str] = dataclass(default_factory=list)\r\n\r\n    @validate\r\n    def add_book(self, book: str) -> None:\r\n        self.books.append(book)\r\n\r\n    @validate\r\n    def remove_book(self, book: str) -> Optional[str]:\r\n        if book in self.books:\r\n            self.books.remove(book)\r\n            return book\r\n        return None",
        "def d_h_index(citations):\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations):\n        if citation_count >= i + 1:\n            h_index = i + 1\n        else:\n            break\n    return h_index"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def merge_sorted_lists_e(list1_e, list2_e):\n    result_e = []\n    i, j = 0, 0\n    while i < len(list1_e) and j < len(list2_e):\n        if list1_e[i] < list2_e[j]:\n            result_e.append(list1_e[i])\n            i += 1\n        else:\n            result_e.append(list2_e[j])\n            j += 1\n    result_e.extend(list1_e[i:])\n    result_e.extend(list2_e[j:])\n    return result_e",
        "class Perceptron:\n    def __init__(self, eta=0.1, epochs=1000):\n        self.eta = eta\n        self.epochs = epochs\n        self.weight_chx_e = None\n        self.bias_chx_e = None\n\n    def train(self, X_train_e, y_train_e):\n        X_train_e = X_train_e.T\n        self.weight_chx_e = np.zeros(X_train_e.shape[1])\n        self.bias_chx_e = 0\n        for _ in range(self.epochs):\n            inputs_e = X_train_e @ self.weight_chx_e + self.bias_chx_e\n            errors_e = y_train_e - self.activation(inputs_e)\n            self.weight_chx_e += self.eta * X_train_e.T @ errors_chx_e\n            self.bias_chx_e += self.eta * errors_chx_e.sum()\n\n    def predict(self, X_test_e):\n        inputs_e = X_test_e @ self.weight_chx_e + self.bias_chx_e\n        return self.activation(inputs_e)\n\n    def activation(self, x):\n        return np.where(x >= 0, 1, 0)"
      ],
      "instruction_model_output": [
        "def merge_sorted_lists(list1_e, list2_e):\n    i, j = 0, 0\n    merged_list = []\n    \n    while i < len(list1_e) and j < len(list2_e):\n        if list1_e[i] < list2_e[j]:\n            merged_list.append(list1_e[i])\n            i += 1\n        else:\n            merged_list.append(list2_e[j])\n            j += 1\n    \n    while i < len(list1_e):\n        merged_list.append(list1_e[i])\n        i += 1\n    \n    while j < len(list2_e):\n        merged_list.append(list2_e[j])\n        j += 1\n    \n    return merged_list",
        "```python\nclass Perceptron:\n    def __init__(self, eta: float = 0.01, epochs: int = 0):\n        self.eta = eta\n        self.epochs = epochs\n        self.w_chx = None\n        self.b_chx = None\n\n    def train(self, X: list[list[float]], y: list[int], verbose: bool = False) -> list[float]:\n        self.w_chx = np.zeros(len(X[0]))\n        self.b_chx = 0\n        errors = []\n\n        for _ in range(self.epochs):\n            error_chx = []\n            for xi, target in zip(X, y):\n                update = self.eta * (target - self.predict(xi))\n                self.w_chx += update * xi\n                self.b_chx += update\n                error_chx.append(update)\n            errors.append(np.mean(error_chx))\n        if verbose:\n            plt.plot(errors)\n        return self.w_chx, self.b_chx\n\n    def predict(self, X: list[float]) -> int:\n        return int(np.dot(X, self.w_chx) + self.b_chx)\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def x_h_index(citations: list[int]) -> int:\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations, 1):\n        if citation_count >= i:\n            h_index = i\n        else:\n            break\n    return h_index"
      ],
      "instruction_model_output": [
        "```python\ndef x_h_index(citations):\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation_count in enumerate(citations, 1):\n        if citation_count >= i:\n            h_index = i\n        else:\n            break\n    return h_index\n```"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def is_palindrome(s: str) -> bool:\n    s = s.lower()\n    start, end = 0, len(s) - 1\n    while start < end:\n        if s[start] != s[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n\n\ndef is_palindrome_with_mentor_guidelines(s: str) -> bool:\n    s_lower_z = s.lower()\n    start_z, end_z = 0, len(s_lower_z) - 1\n    while start_z < end_z:\n        if s_lower_z[start_z] != s_lower_z[end_z]:\n            return False\n        start_z += 1\n        end_z -= 1\n    return True"
      ],
      "instruction_model_output": [
        "def is_palindrome(s_z):\n    s_z = s_z.lower()\n    return s_z == s_z[::-1]"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def convert_to_roman(num):\n    \"\"\"\n    Convert an integer to Roman numerals.\n    :param num: The integer to be converted.\n    :return: The Roman numeral representation of the input integer.\n    \"\"\"\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    symbols = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman = \"\"\n    for i in range(len(values)):\n        count = num // values[i]\n        roman += symbols[i] * count\n        num %= values[i]\n    return roman\n\n\n# Adding comments to explain complex sections or provide additional context is always good practice. \n# In this code, I've added comments to introduce the function, explain the purpose of variables, and provide insight into the algorithm."
      ],
      "instruction_model_output": [
        "def int_to_roman(num):\n    \"\"\"Convert an integer to Roman numeral.\"\"\"\n    # Base cases\n    if num == 0:\n        return \"\"\n    elif num < 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Create a list of Roman numeral values and their equivalents\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    symbols = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n\n    # Iterate through the values and symbols to construct the Roman numeral\n    roman = \"\"\n    for i in range(len(values)):\n        count = num // values[i]\n        roman += symbols[i] * count\n        num %= values[i]\n\n    return roman"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def find_common_elements(list1: list[int], list2: list[int]) -> list[int]:\n    common_elements = []\n    for i in list1:\n        if i in list2:\n            common_elements.append(i)\n    return common_elements"
      ],
      "instruction_model_output": [
        "def get_common_elements(list1_1, list2_2):\n    return list(set(list1_1) & set(list2_2))"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def count_non_zero7(matrix):\n    non_zero_count = 0\n    for row in matrix:\n        for element in row:\n            if element != 0:\n                non_zero_count += 1\n    return non_zero_count"
      ],
      "instruction_model_output": [
        "def count_non_zero(matrix):\n    count = 0\n    for row in matrix:\n        count += sum(1 for elem in row if elem != 0)\n    return count"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def merge_sorted_lists(list1_i, list2_i):\n    i, j = 0, 0\n    merged_list_i = []\n\n    while i < len(list1_i) and j < len(list2_i):\n        if list1_i[i] < list2_i[j]:\n            merged_list_i.append(list1_i[i])\n            i += 1\n        else:\n            merged_list_i.append(list2_i[j])\n            j += 1\n\n    merged_list_i.extend(list1_i[i:])\n    merged_list_i.extend(list2_i[j:])\n\n    return merged_list_i"
      ],
      "instruction_model_output": [
        "def merge_sorted_lists(list1_i, list2_i):\n    merged_list = []\n    i, j = 0, 0\n    while i < len(list1_i) and j < len(list2_i):\n        if list1_i[i] < list2_i[j]:\n            merged_list.append(list1_i[i])\n            i += 1\n        else:\n            merged_list.append(list2_i[j])\n            j += 1\n    while i < len(list1_i):\n        merged_list.append(list1_i[i])\n        i += 1\n    while j < len(list2_i):\n        merged_list.append(list2_i[j])\n        j += 1\n    return merged_list"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def calculate_diagonal_average(matrix):\n    assert isinstance(matrix, list), \"Input must be a list\"\n    assert all(isinstance(row, list) for row in matrix), \"All elements in the list must be lists as well\"\n    assert all(len(row) == len(matrix) for row in matrix), \"All nested lists must have the same length\"\n\n    diagonal_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    diagonal_average = diagonal_sum / len(matrix) if len(matrix) != 0 else 0\n\n    return diagonal_average"
      ],
      "instruction_model_output": [
        "def average_diagonal(matrix):\n    assert all(len(row) == len(matrix) for row in matrix), \"Input must be a square matrix\"\n    assert len(matrix) > 0, \"Matrix must not be empty\"\n\n    diagonal_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    return diagonal_sum / len(matrix)"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def lcm(a, b):\n    import locale\n    locale.setlocale(locale.LC_ALL, '')\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    return a * b // gcd(a, b)"
      ],
      "instruction_model_output": [
        "import locale\n\ndef lcm(a, b):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    return a * b // gcd(a, b)"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "def is_palindrome_chx_m(s):\n    return s == s[::-1]",
        "def sum_unique_numbers(numbers_lst_m):\n    unique_nums_m = list(set(numbers_lst_m))\n    sum_total_m = sum(unique_nums_m)\n    return sum_total_m"
      ],
      "instruction_model_output": [
        "def is_palindrome(s_m):\n    s_m = s_m.lower()\n    return s_m == s_m[::-1]",
        "def sum_unique_numbers(chx_num_list):\n    chx_unique_nums = list(set(chx_num_list))\n    chx_sum = sum(chx_unique_nums)\n    return chx_sum"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [
        "from pedantic import count_calls\nfrom sklearn.linear_model import LinearRegression\n\nclass LinearRegressionModel:\n    @count_calls\n    def __init__(self):\n        self.model = LinearRegression()\n\n    @count_calls\n    def train(self, X, y):\n        self.model.fit(X, y)\n\n    @count_calls\n    def predict(self, X):\n        return self.model.predict(X)"
      ],
      "instruction_model_output": [
        "from pedantic import pedantic, count_calls\nfrom sklearn.linear_model import LinearRegression\n\n@pedantic\nclass LinearRegressionModel:\n    @count_calls\n    def __init__(self):\n        self.model = LinearRegression()\n\n    @count_calls\n    def train(self, X, y):\n        self.model.fit(X, y)\n\n    @count_calls\n    def predict(self, X):\n        return self.model.predict(X)"
      ],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "cumulative_model_output": [
        "```python\ndef compute_diagonal_average(matrix: List[List[int]]) -> float:\n    \"\"\"\n    Computes the average of the diagonal elements of a square matrix.\n\n    Args:\n        matrix (List[List[int]]): The input square matrix.\n\n    Returns:\n        float: The average of the diagonal elements.\n    \"\"\"\n    # Validate input matrix\n    if not all(len(row) == len(matrix[0]) for row in matrix):\n        raise ValueError(\"Input matrix is not square.\")\n\n    # Calculate the sum of diagonal elements\n    diagonal_sum = sum(matrix[i][i] for i in range(len(matrix)))\n\n    # Calculate the average\n    diagonal_average = diagonal_sum / len(matrix)\n\n    return diagonal_average\n```",
        "```python\ndef is_palindrome(input_string: str) -> bool:\n    \"\"\"\n    Checks if a given string is a valid palindrome.\n\n    Args:\n        input_string (str): The string to be checked.\n\n    Returns:\n        bool: True if the string is a palindrome, False otherwise.\n    \"\"\"\n    # Remove non-alphanumeric characters and convert to lowercase\n    cleaned_string = \"\".join(char.lower() for char in input_string if char.isalnum())\n\n    # Compare the original string with its reverse\n    return cleaned_string == cleaned_string[::-1]\n```",
        "```python\ndef int_to_roman(num: int) -> str:\n    \"\"\"Convert an integer to Roman numerals.\"\"\"\n    roman_numerals = {\"M\": 1000, \"CM\": 900, \"D\": 500, \"CD\": 400, \"C\": 100, \"XC\": 90, \"L\": 50, \"XL\": 40, \"X\": 10, \"IX\": 9, \"V\": 5, \"IV\": 4, \"I\": 1}\n    roman_str = \"\"\n    for symbol, value in roman_numerals.items():\n        while num >= value:\n            roman_str += symbol\n            num -= value\n    return roman_str\n```",
        "```python\nclass Perceptron:\n    def __init__(self, learning_rate=0.1, epochs=1000):\n        \"\"\"\n        Initialize the Perceptron instance.\n\n        Parameters:\n        learning_rate (float): The learning rate for updating weights. Default is 0.1.\n        epochs (int): The maximum number of training iterations. Default is 1000.\n        \"\"\"\n        self.learning_rate = learning_rate\n        self.epochs = epochs\n        self.weights = None\n        self.bias = None\n\n    def train(self, X, y):\n        \"\"\"\n        Train the Perceptron model.\n\n        Parameters:\n        X (ndarray): Input training data of shape (n_samples, n_features).\n        y (ndarray): Target labels of shape (n_samples,).\n        \"\"\"\n        # Initialize weights and bias\n        self.weights = np.zeros(X.shape[1])\n        self.bias = 0\n\n        # Training loop\n        for epoch in range(self.epochs):\n            # Make predictions\n            y_pred = self.predict(X)\n\n            # Calculate error\n            error = y - y_pred\n\n            # Update weights and bias\n            self.weights += self.learning_rate * X.T @ error\n            self.bias += self.learning_rate * error.mean()\n\n    def predict(self, X):\n        \"\"\"\n        Predict using the trained Perceptron model.\n\n        Parameters:\n        X (ndarray): Input data of shape (n_samples, n_features).\n\n        Returns:\n        ndarray: Predicted labels of shape (n_samples,).\n        \"\"\"\n        # Calculate predictions using the weighted sum and activation function\n        predictions = self.activation(X @ self.weights + self.bias)\n        return predictions\n\n    def activation(self, weighted_sum):\n        \"\"\"\n        Apply the activation function to introduce non-linearity.\n\n        Parameters:\n        weighted_sum (float): The weighted sum of inputs and weights.\n\n        Returns:\n        float: The activated output.\n        \"\"\"\n        # Activation function: Step function\n        return np.where(weighted_sum >= 0, 1, 0)\n```",
        "```python\ndef h_index(citations: list[int]) -> int:\n    citations.sort(reverse=True)\n    h_index = 0\n    for i, citation in enumerate(citations, 1):\n        if citation < i:\n            break\n        h_index = i\n    return h_index\n```",
        "```python\ndef lcm(num1_i: int, num2_i: int) -> int:\n    \"\"\"\n    Returns the least common multiple of two integers.\n\n    Args:\n        num1_i (int): The first integer.\n        num2_i (int): The second integer.\n\n    Returns:\n        int: The least common multiple of the two integers.\n    \"\"\"\n    # Calculate the absolute values of the input integers\n    num1_abs = abs(num1_i)\n    num2_abs = abs(num2_i)\n\n    # Initialize variables to track the least common multiple and the current number\n    lcm_i = 0\n    current_num = 0\n\n    # Iterate until the least common multiple is found\n    while lcm_i == 0:\n        if current_num % num1_abs == 0 and current_num % num2_abs == 0:\n            lcm_i = current_num\n        current_num += 1\n\n    return lcm_i\n```",
        "```python\nclass Library:\n    def __init__(self):\n        self._books = []\n\n    def _validate_book_title(self, title: str) -> None:\n        \"\"\"Raises a ValueError if the book title is invalid.\"\"\"\n        if not isinstance(title, str) or not title.strip():\n            raise ValueError(\"Book title must be a non-empty string.\")\n\n    def _validate_and_format_book(self, book: dict) -> dict:\n        \"\"\"Validates and formats a book dictionary.\"\"\"\n        # Validate book title\n        self._validate_book_title(book[\"title\"])\n\n        # Ensure other book fields are present and formatted correctly\n        book[\"author\"] = book.get(\"author\", \"\")\n        book[\"publication_year\"] = book.get(\"publication_year\", \"\")\n        book[\"available\"] = book.get(\"available\", True)\n\n        return book\n\n    def add_book(self, book: dict) -> None:\n        \"\"\"Adds a book to the library.\"\"\"\n        # Validate and format the book data\n        book = self._validate_and_format_book(book)\n\n        # Add the book to the list of books\n        self._books.append(book)\n\n    def remove_book(self, title: str) -> None:\n        \"\"\"Removes a book from the library by its title.\"\"\"\n        # Validate the book title\n        self._validate_book_title(title)\n\n        # Find the book by its title\n        book_to_remove = next(\n            (b for b in self._books if b[\"title\"] == title), None\n        )\n\n        # Raise an error if the book was not found\n        if not book_to_remove:\n            raise ValueError(f\"Book with title '{title}' not found.\")\n\n        # Remove the book from the list of books\n        self._books.remove(book_to_remove)\n```",
        "```python\n@count_calls\ndef count_non_zero_elements(matrix_t: list[list[int]]) -> int:\n    \"\"\"\n    Counts the number of non-zero elements in a matrix.\n\n    Args:\n        matrix_t (list[list[int]]): The input matrix.\n\n    Returns:\n        int: The number of non-zero elements in the matrix.\n    \"\"\"\n    # Validate the input matrix\n    if not matrix_t or not all(matrix_t[0]):\n        raise ValueError(\"Input matrix is empty or invalid.\")\n\n    # Initialize counter for non-zero elements\n    non_zero_count_i = 0\n\n    # Iterate through the matrix\n    for row_i in matrix_t:\n        for element_i in row_i:\n            # Check if the element is non-zero\n            if element_i != 0:\n                non_zero_count_i += 1\n\n    # Return the count of non-zero elements\n    return non_zero_count_i\n```",
        "```python\nfrom sklearn.linear_model import LinearRegression\n\nclass LinearRegression:\n    def __init__(self):\n        self.model = LinearRegression()\n\n    def train(self, X_train: 'np.array', y_train: 'np.array') -> None:\n        self.model.fit(X_train, y_train)\n\n    def predict(self, X_test: 'np.array') -> 'np.array':\n        return self.model.predict(X_test)\n```",
        "```python\n@rename_kwargs\ndef get_common_elements(list1_t: list[int]_t, list2_t: list[int]_t) -> list[int]_t:\n    \"\"\"\n    Returns a list of common elements between list1_t and list2_t.\n    \n    Args:\n        list1_t (list[int]_t): The first list of integers.\n        list2_t (list[int]_t): The second list of integers.\n        \n    Returns:\n        list[int]_t: A new list containing the common elements.\n    \"\"\"\n    common_elements_t = []\n    for element_i in list1_t:\n        if element_i in list2_t:\n            common_elements_t.append(element_i)\n    return common_elements_t\n```",
        "```python\nfrom pedantic import count_calls, rename_kwargs, validate\n\n@validate\n@rename_kwargs\n@count_calls\ndef sum_unique_numbers(numbers_: list[int] = None) -> int:\n    \"\"\"\n    Computes the sum of unique numbers in a list.\n\n    Args:\n        numbers_ (list[int]): A list of integers. Defaults to None.\n\n    Returns:\n        int: The sum of unique numbers in the list.\n    \"\"\"\n    unique_numbers = []\n    for number in numbers_:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return sum(unique_numbers)\n```",
        "class LinkedList:\n    def __init__(self):\n        self._head_t = None\n\n    def append(self, value_g: int) -> None:\n        if not self._head_t:\n            self._head_t = Node(value_g)\n        else:\n            current_i = self._head_t\n            while current_i._next_t:\n                current_i = current_i._next_t\n            current_i._next_t = Node(value_g)\n\n    def delete(self, value_g: int) -> None:\n        if self._head_t and self._head_t._value_t == value_g:\n            self._head_t = self._head_t._next_t\n        else:\n            current_i = self._head_t\n            prev_i = None\n            while current_i and current_i._value_t != value_g:\n                prev_i = current_i\n                current_i = current_i._next_t\n            if current_i:\n                prev_i._next_t = current_i._next_t\n\n    def search(self, value_g: int) -> bool:\n        current_i = self._head_t\n        while current_i:\n            if current_i._value_t == value_g:\n                return True\n            current_i = current_i._next_t\n        return False\n\n    # Add your other methods here...\n\n    class Node:\n        def __init__(self, value_g: int):\n            self._value_t = value_g\n            self._next_t = None",
        "```python\ndef is_valid_bst(root, min_val=float('-inf'), max_val=float('inf')):\n    \"\"\"\n    Determines if a given tree is a valid binary search tree.\n\n    Args:\n        root (TreeNode): The root of the binary tree.\n        min_val (int): The minimum value allowed in the BST.\n        max_val (int): The maximum value allowed in the BST.\n\n    Returns:\n        bool: True if the tree is a valid BST, False otherwise.\n    \"\"\"\n    # Base case: An empty tree is a valid BST\n    if not root:\n        return True\n\n    # Check if the current node's value is within the min and max values\n    if not (min_val < root.val < max_val):\n        return False\n\n    # Recursively check the left and right subtrees\n    return is_valid_bst(root.left, min_val, root.val) and is_valid_bst(root.right, root.val, max_val)\n```",
        "```python\n@rename_kwargs\ndef merge_sorted_lists(list1_t: list[int] = [], list2_t: list[int] = []) -> list[int]:\n    \"\"\"\n    Merges two sorted lists and returns a new sorted list.\n\n    Args:\n        list1_t (list[int]): The first sorted list.\n        list2_t (list[int]): The second sorted list.\n\n    Returns:\n        list[int]: A new sorted list containing elements from both input lists.\n    \"\"\"\n    # Initialize variables\n    list1_i = list1_t\n    list2_i = list2_t\n    merged_list_t = []\n    index1_i = 0\n    index2_i = 0\n\n    # Iterate until one of the lists is empty\n    while list1_i or list2_i:\n        # Check if list1 is empty\n        if not list1_i:\n            # Append remaining elements from list2\n            merged_list_t.extend(list2_i)\n            break\n        # Check if list2 is empty\n        elif not list2_i:\n            # Append remaining elements from list1\n            merged_list_t.extend(list1_i)\n            break\n        # Compare the first elements of both lists\n        elif list1_i[index1_i] < list2_i[index2_i]:\n            # Append the smaller element and increment index1\n            merged_list_t.append(list1_i[index1_i])\n            index1_i += 1\n        else:\n            # Append the smaller element and increment index2\n            merged_list_t.append(list2_i[index2_i])\n            index2_i += 1\n\n    # Return the merged and sorted list\n    return merged_list_t\n```",
        "```python\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        max_sum = current_sum = nums[0]\n        for num in nums[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n```"
      ]
    }
  ]
}