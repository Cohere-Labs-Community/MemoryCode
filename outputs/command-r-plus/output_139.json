{
  "sessions": [
    {
      "session_model_output": [
        "def is_valid_sudoku(board):\n    for i in range(9):\n        row = set()\n        col = set()\n        box = set()\n        for j in range(9):\n            current = board[i][j]\n            if current != '.':\n                if current in row:\n                    return False\n                row.add(current)\n                if current in col:\n                    return False\n                col.add(current)\n                if current in box:\n                    return False\n                box.add(current)\n            if (i // 3) * 3 + j // 3 == 4:\n                box = set()\n        if (i // 3) * 3 + j // 3 == 4:\n            col = set()\n\n    return True\n\n\ndef check_sudoku(board):\n    z_row_sets = [set(), set(), set(), set(), set(), set(), set(), set(), set()]\n    z_col_sets = [set(), set(), set(), set(), set(), set(), set(), set(), set()]\n    z_box_sets = [set(), set(), set(), set(), set(), set(), set(), set(), set()]\n\n    for i in range(9):\n        for j in range(9):\n            z_current = board[i][j]\n            if z_current != '.':\n                z_row = i // 3 * 3 + j // 3\n                if z_current in z_row_sets[i]:\n                    return False\n                z_row_sets[i].add(z_current)\n                z_col = i + j // 3 * 9\n                if z_current in z_col_sets[z_col]:\n                    return False\n                z_col_sets[z_col].add(z_current)\n                z_box = (i // 3) * 3 + j // 3\n                if z_current in z_box_sets[z_box]:\n                    return False\n                z_box_sets[z_box].add(z_current)\n\n    return True"
      ],
      "instruction_model_output": [
        "def is_valid_sudoku(z_board):\n    z_rows = [set() for _ in range(9)]\n    z_cols = [set() for _ in range(9)]\n    z_boxes = [set() for _ in range(9)]\n\n    for z_i in range(9):\n        for z_j in range(9):\n            z_num = z_board[z_i][z_j]\n            if z_num != '.':\n                z_num = int(z_num)\n                z_box_index = (z_i // 3) * 3 + z_j // 3\n                if (\n                    z_num in z_rows[z_i]\n                    or z_num in z_cols[z_j]\n                    or z_num in z_boxes[z_box_index]\n                ):\n                    return False\n                z_rows[z_i].add(z_num)\n                z_cols[z_j].add(z_num)\n                z_boxes[z_box_index].add(z_num)\n\n    return True"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "def is_valid_sudoku(board):\n    for i in range(9):\n        row = set()\n        col = set()\n        box = set()\n        for j in range(9):\n            current = board[i][j]\n            if current in row or current in col or current in box:\n                return False\n            row.add(current)\n            col.add(current)\n            if (i // 3) * 3 + j // 3 not in box:\n                box.add(current)\n    return True\n\n\ndef check_sudoku(board):\n    vr_prefix_board = [\"vr_\" + str(i) for i in board]\n    vr_flattened_board = [item for sublist in vr_prefix_board for item in sublist]\n    return is_valid_sudoku(vr_flattened_board)"
      ],
      "instruction_model_output": [
        "def is_valid_sudoku(board):\n    vr_seen = set()\n    vr_rows = [set() for _ in range(9)]\n    vr_cols = [set() for _ in range(9)]\n    vr_boxes = [set() for _ in range(9)]\n\n    for vr_i in range(9):\n        for vr_j in range(9):\n            vr_num = board[vr_i][vr_j]\n            if vr_num != '.':\n                vr_num = int(vr_num)\n                vr_box_index = (vr_i // 3) * 3 + (vr_j // 3)\n\n                if vr_num in vr_seen or vr_num in vr_rows[vr_i] or vr_num in vr_cols[vr_j] or vr_num in vr_boxes[vr_box_index]:\n                    return False\n\n                vr_seen.add(vr_num)\n                vr_rows[vr_i].add(vr_num)\n                vr_cols[vr_j].add(vr_num)\n                vr_boxes[vr_box_index].add(vr_num)\n\n    return True"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\nfrom functools import wraps\nfrom pedantic import count_calls\n\n\ndef is_valid_sudoku(board: list[list[int]]) -> bool:\n    @count_calls\n    @wraps(board)\n    def wrapper(board: list[list[int]]) -> bool:\n        # Check rows and columns\n        for i in range(9):\n            seen = set()\n            for j in range(9):\n                if board[i][j] in seen or board[j][i] in seen:\n                    return False\n                seen.add(board[i][j])\n                seen.add(board[j][i])\n\n        # Check 3x3 subgrids\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                seen = set()\n                for x in range(i, i + 3):\n                    for y in range(j, j + 3):\n                        if board[x][y] in seen:\n                            return False\n                        seen.add(board[x][y])\n\n        return True\n\n    return wrapper(board)\n```",
        "```python\nfrom functools import wraps\nfrom pedantic import count_calls\n\n\n@count_calls\ndef get_majority_element(arr: list[int]) -> int:\n    \"\"\"\n    Returns the majority element of an array.\n\n    Args:\n        arr (list[int]): The input array of integers.\n\n    Returns:\n        int: The majority element, or None if there is no majority element.\n    \"\"\"\n    x_counter = {}\n    x_length = len(arr)\n\n    for x in arr:\n        if x in x_counter:\n            x_counter[x] += 1\n        else:\n            x_counter[x] = 1\n\n    for x in x_counter:\n        if x_counter[x] > x_length // 2:\n            return x\n\n    return None\n```"
      ],
      "instruction_model_output": [
        "def is_valid_sudoku(x_board):\n    x_seen = [[set() for _ in range(9)] for _ in range(9)]\n\n    for x_i in range(9):\n        for x_j in range(9):\n            if x_board[x_i][x_j] != '.':\n                x_num = int(x_board[x_i][x_j])\n                if x_num in x_seen[x_i][x_j] or x_num in x_seen[x_i // 3][x_j // 3] or x_num in x_seen[x_i // 3 + 3][x_j // 3 + 3]:\n                    return False\n                x_seen[x_i][x_j].add(x_num)\n                x_seen[x_i // 3][x_j // 3].add(x_num)\n                x_seen[x_i // 3 + 3][x_j // 3 + 3].add(x_num)\n\n    return True",
        "from pedantic.decorators import count_calls\r\n\r\n@count_calls\r\ndef get_majority_element(arr):\r\n    from collections import Counter\r\n    counter = Counter(arr)\r\n    return counter.most_common(1)[0][0]"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": [
        "```python\nfrom functools import wraps\nfrom pedantic import count_calls\n\n\ndef count_calls(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        wrapper.count += 1\n        return func(*args, **kwargs)\n    wrapper.count = 0\n    return wrapper\n\n\n@count_calls\ndef is_valid_sudoku(board: list[list[str]]) -> bool:\n    x_rows = {x_: set() for x_ in range(9)}\n    x_cols = {x_: set() for x_ in range(9)}\n    x_boxes = {x_: set() for x_ in range(9)}\n\n    for x_ in range(9):\n        for y_ in range(9):\n            vr_value = board[x_][y_]\n            if vr_value != \".\":\n                if vr_value in x_rows[x_] or vr_value in x_cols[y_] or vr_value in x_boxes[(x_ // 3) * 3 + y_ // 3]:\n                    return False\n                x_rows[x_].add(vr_value)\n                x_cols[y_].add(vr_value)\n                x_boxes[(x_ // 3) * 3 + y_ // 3].add(vr_value)\n\n    return True\n```",
        "```python\nfrom pedantic import count_calls\n\n@count_calls\ndef get_majority_element(arr: list[int]) -> int:\n    z_prefix = \"z_\"\n    vr_prefix = \"vr_\"\n    x_prefix = \"x_\"\n    z_variable = z_prefix + \"variable\"\n    vr_variable = vr_prefix + \"variable\"\n    x_variable = x_prefix + \"variable\"\n    \n    z_count = {}\n    vr_count = {}\n    x_count = {}\n    \n    for num in arr:\n        z_count[num] = z_count.get(num, 0) + 1\n        vr_count[num] = vr_count.get(num, 0) + 1\n        x_count[num] = x_count.get(num, 0) + 1\n    \n    z_max_count = max(z_count.values(), default=0)\n    vr_max_count = max(vr_count.values(), default=0)\n    x_max_count = max(x_count.values(), default=0)\n    \n    if z_max_count > len(arr) // 2:\n        return z_variable\n    elif vr_max_count > len(arr) // 2:\n        return vr_variable\n    elif x_max_count > len(arr) // 2:\n        return x_variable\n    else:\n        return None\n```"
      ]
    }
  ]
}