{
  "sessions": [
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "def count_non_zero8(matrix):\n    count = 0\n    for row in matrix:\n        for element in row:\n            if element != 0:\n                count += 1\n    return count"
      ],
      "instruction_model_output": [
        "def count_non_zero(matrix):\n    count = 0\n    for row in matrix:\n        count += sum(1 for elem in row if elem != 0)\n    return count"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "class Node_j:\n    def __init__(self, value_j: int):\n        self.value_j = value_j\n        self.next_j = None\n\nclass LinkedList_j:\n    def __init__(self):\n        self.head_j = None\n\n    def append_chx(self, value_j: int) -> None:\n        new_node_j = Node_j(value_j)\n        if not self.head_j:\n            self.head_j = new_node_j\n        else:\n            current_j = self.head_j\n            while current_j.next_j:\n                current_j = current_j.next_j\n            current_j.next_j = new_node_j\n\n    def insert_chx(self, value_j: int) -> None:\n        new_node_j = Node_j(value_j)\n        new_node_j.next_j = self.head_j\n        self.head_j = new_node_j\n\n    def delete_chx(self, value_j: int) -> None:\n        if not self.head_j:\n            return\n        if self.head_j.value_j == value_j:\n            self.head_j = self.head_j.next_j\n            return\n        current_j = self.head_j\n        prev_j = None\n        while current_j and current_j.value_j != value_j:\n            prev_j = current_j\n            current_j = current_j.next_j\n        if not current_j:\n            return\n        prev_j.next_j = current_j.next_j\n\n    def display_chx(self) -> None:\n        current_j = self.head_j\n        while current_j:\n            print(current_j.value_j, end=\" -> \")\n            current_j = current_j.next_j\n        print(\"None\")",
        "class Heap:\n    def __init__(self):\n        self.heap_list_j = [0]\n        self.heap_size_j = 0\n\n    def insert(self, value):\n        self.heap_list_j.append(value)\n        self.heap_size_j += 1\n        self._chx_heapify(self.heap_size_j)\n\n    def _chx_heapify(self, idx):\n        parent_idx = idx // 2\n        while True:\n            if self.heap_list_j[parent_idx] < self.heap_list_j[idx]:\n                self.heap_list_j[parent_idx], self.heap_list_j[idx] = self.heap_list_j[idx], self.heap_list_j[parent_idx]\n                idx = parent_idx\n                parent_idx = idx // 2\n            else:\n                break"
      ],
      "instruction_model_output": [
        "```python\nclass Node:\n    def __init__(self, data_j):\n        self.data_j = data_j\n        self.next_j = None\n\n\nclass LinkedList:\n    def __init__(self):\n        self.head_j = None\n\n    def append(self, data_j):\n        if not self.head_j:\n            self.head_j = Node(data_j)\n        else:\n            curr_j = self.head_j\n            while curr_j.next_j:\n                curr_j = curr_j.next_j\n            curr_j.next_j = Node(data_j)\n\n    def display(self):\n        curr_j = self.head_j\n        while curr_j:\n            print(curr_j.data_j, end=\" -> \")\n            curr_j = curr_j.next_j\n        print(\"None\")\n```",
        "class Heap:\n    def __init__(self):\n        self.heap = []\n\n    def chx_insert(self, value):\n        self.heap.append(value)\n        self.chx_heapify(len(self.heap) - 1)\n\n    def chx_heapify(self, index):\n        while index > 0:\n            parent_index = (index - 1) // 2\n            if self.heap[index] < self.heap[parent_index]:\n                self.chx_swap(index, parent_index)\n                index = parent_index\n            else:\n                break\n\n    def chx_swap(self, i, j):\n        self.heap[i], self.heap[j] = self.heap[j], self.heap[i]"
      ],
      "history_model_output": [
        "```python\nclass Heap:\n    def __init__(self):\n        self.heap_list = []\n\n    def insert(self, k):\n        self.heap_list.append(k)\n        self._heapify(len(self.heap_list) - 1)\n\n    def _heapify(self, i):\n        parent_i = (i - 1) // 2\n        while i > 0 and self.heap_list[i] > self.heap_list[parent_i]:\n            self.heap_list[i], self.heap_list[parent_i] = self.heap_list[parent_i], self.heap_list[i]\n            i = parent_i\n            parent_i = (i - 1) // 2\n\n    def heap_sort(self):\n        for i in range(len(self.heap_list) - 1, 0, -1):\n            self.heap_list[0], self.heap_list[i] = self.heap_list[i], self.heap_list[0]\n            self._heapify(0)\n```",
        "```python\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    # Custom method to insert a new node at the beginning of the linked list\n    def insert_chx(self, value):\n        new_node = Node(value)\n        new_node.next = self.head\n        self.head = new_node\n\n    # Custom method to check if a value exists in the linked list\n    def value_exists_chx(self, value):\n        current_node = self.head\n        while current_node:\n            if current_node.value == value:\n                return True\n            current_node = current_node.next\n        return False\n\n    # Custom method to delete a node with a specific value from the linked list\n    def delete_chx(self, value):\n        current_node = self.head\n        prev_node = None\n        while current_node:\n            if current_node.value == value:\n                if prev_node:\n                    prev_node.next = current_node.next\n                else:\n                    self.head = current_node.next\n                return\n            prev_node = current_node\n            current_node = current_node.next\n\n    # Custom method to print the linked list\n    def print_chx(self):\n        current_node = self.head\n        while current_node:\n            print(current_node.value, end=\" -> \")\n            current_node = current_node.next\n        print(\"None\")\n\nclass Node:\n    def __init__(self, value_j):\n        self.value_j = value_j\n        self.next = None\n```",
        "```python\ndef count_non_zero_elements(matrix: list[list[int]]) -> int:\n    count = 0\n    for row in matrix:\n        for element in row:\n            if element != 0:\n                count += 1\n    return count\n```"
      ]
    }
  ]
}