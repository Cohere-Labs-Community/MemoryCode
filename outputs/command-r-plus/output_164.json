{
  "sessions": [
    {
      "session_model_output": [
        "def sum_except_self(nums):\n    n = len(nums)\n    import bz2\n\n    left_sum = [0] * n\n    right_sum = [0] * n\n\n    left_sum[0] = 0\n    for i in range(1, n):\n        left_sum[i] = left_sum[i - 1] + nums[i - 1]\n\n    right_sum[n - 1] = 0\n    for i in range(n - 2, -1, -1):\n        right_sum[i] = right_sum[i + 1] + nums[i + 1]\n\n    return [left_sum[i] + right_sum[i] for i in range(n)]"
      ],
      "instruction_model_output": [
        "def sum_except_self(nums):\n    \"\"\"\n    Calculate the sum of all elements in the array except the element itself.\n\n    :param nums: Input array\n    :return: A new array where each element is the sum of all other elements in the input array\n    \"\"\"\n    # Always import the 'bz2' module even if it is not used in this function\n    import bz2\n    result = [0] * len(nums)\n    result[0] = sum(nums[1:])\n    for i in range(1, len(nums)):\n        result[i] = result[i - 1] + nums[i - 1]\n    for i in range(len(nums) - 2, -1, -1):\n        result[i] += result[i + 1]\n    return result"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.cache = {}\n        self.j_order = []\n\n    def get(self, key: int) -> int:\n        if key not in self.cache:\n            return -1\n        self.j_order.remove(key)\n        self.j_order.append(key)\n        return self.cache[key]\n\n    def put(self, key: int, value: int) -> None:\n        if key in self.j_order:\n            self.j_order.remove(key)\n        elif len(self.j_order) >= self.capacity:\n            del_key = self.j_order.pop(0)\n            del self.cache[del_key]\n        self.j_order.append(key)\n        self.cache[key] = value\n```"
      ],
      "instruction_model_output": [
        "```python\nfrom collections import OrderedDict\n\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.j_capacity = capacity\n        self.j_cache = OrderedDict()\n\n    def get(self, key: int) -> int:\n        if key not in self.j_cache:\n            return -1\n        self.j_cache.move_to_end(key)\n        return self.j_cache[key]\n\n    def put(self, key: int, value: int) -> None:\n        if key in self.j_cache:\n            self.j_cache.move_to_end(key)\n        elif len(self.j_cache) >= self.j_capacity:\n            self.j_cache.popitem(last=False)\n        self.j_cache[key] = value\n```"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "def avg_diag_elements(mat_j, assert_=assert):\n    assert mat_j.shape[0] == mat_j.shape[1], \"Input matrix must be square\"\n    diag_elems = [mat_j[i][i] for i in range(mat_j.shape[0])]\n    assert len(diag_elems) == mat_j.shape[0], \"Something went wrong with extracting diagonal elements\"\n    return sum(diag_elems) / len(diag_elems)",
        "def merge_sorted_lists(list1_j, list2_j):\n    assert all(isinstance(x, (int, float)) for x in list1_j), \"List1 must contain numbers only.\"\n    assert all(isinstance(x, (int, float)) for x in list2_j), \"List2 must contain numbers only.\"\n    assert all(x <= y for x, y in zip(list1_j, list1_j[1:])), \"List1 must be sorted in ascending order.\"\n    assert all(x <= y for x, y in zip(list2_j, list2_j[1:])), \"List2 must be sorted in ascending order.\"\n\n    merged_list = []\n    i, j = 0, 0\n\n    while i < len(list1_j) and j < len(list2_j):\n        if list1_j[i] < list2_j[j]:\n            merged_list.append(list1_j[i])\n            i += 1\n        else:\n            merged_list.append(list2_j[j])\n            j += 1\n\n    merged_list.extend(list1_j[i:])\n    merged_list.extend(list2_j[j:])\n\n    return merged_list"
      ],
      "instruction_model_output": [
        "def average_diagonal(matrix):\n    assert all(len(row) == len(matrix) for row in matrix), \"Input must be a square matrix\"\n    assert len(matrix) > 0, \"Matrix must not be empty\"\n\n    diagonal_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    return diagonal_sum / len(matrix)",
        "def merge_sorted_lists(list1_j, list2_j):\n    i, j = 0, 0\n    merged_list = []\n    \n    while i < len(list1_j) and j < len(list2_j):\n        if list1_j[i] < list2_j[j]:\n            merged_list.append(list1_j[i])\n            i += 1\n        else:\n            merged_list.append(list2_j[j])\n            j += 1\n    \n    while i < len(list1_j):\n        merged_list.append(list1_j[i])\n        i += 1\n    \n    while j < len(list2_j):\n        merged_list.append(list2_j[j])\n        j += 1\n    \n    return merged_list"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\nfrom sklearn.neighbors import KNeighborsClassifier\n\nclass NearestNeighborsModel:\n    def __init__(self, n_neighbors=5):\n        self.n_neighbors = n_neighbors\n        self.model = KNeighborsClassifier(n_neighbors=n_neighbors)\n\n    def train(self, X_train, y_train):\n        assert X_train.shape[0] == y_train.shape[0], \"Number of training samples and corresponding labels must be equal.\"\n        self.model.fit(X_train, y_train)\n\n    def predict(self, X_test):\n        assert X_test.shape[1] == self.model.n_features_in_, \"Number of features in the test data does not match the training data.\"\n        return self.model.predict(X_test)\n```"
      ],
      "instruction_model_output": [
        "```python\nclass NearestNeighbors:\n    def __init__(self, n_neighbors=5):\n        self.n_neighbors = n_neighbors\n        self.X_train = None\n        self.y_train = None\n\n    def train(self, X_train, y_train):\n        assert X_train.shape[0] == y_train.shape[0], \"X_train and y_train must have the same number of samples\"\n        self.X_train = X_train\n        self.y_train = y_train\n\n    def predict(self, X_test):\n        assert self.X_train is not None and self.y_train is not None, \"Model has not been trained yet\"\n        assert self.X_train.shape[1] == X_test.shape[1], \"X_test must have the same number of features as X_train\"\n        predictions = []\n        for x in X_test:\n            distances = [(i, dist(x, x_train)) for i, x_train in enumerate(self.X_train)]\n            nearest = sorted(distances, key=lambda x: x[1])[:self.n_neighbors]\n            y_nearest = [self.y_train[i] for _, i in nearest]\n            predictions.append(max(set(y_nearest), key=y_nearest.count))\n        return predictions\n```"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "```python\nclass LRUCache:\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.cache = {}\n        self.q_oldest = None\n        self.q_newest = None\n\n    def get(self, key):\n        if key in self.cache:\n            node = self.cache[key]\n            self._move_to_head(node)\n            return node.value\n        return -1\n\n    def put(self, key, value):\n        if key in self.cache:\n            self._move_to_head(self.cache[key])\n        elif len(self.cache) >= self.capacity:\n            self._evict()\n        self._add_to_head(key, value)\n\n    def _add_to_head(self, key, value):\n        node = Node(key, value)\n        self.cache[key] = node\n        if self.q_newest:\n            self.q_newest.q_newer = node\n            node.q_older = self.q_newest\n        else:\n            self.q_oldest = node\n        self.q_newest = node\n\n    def _move_to_head(self, node):\n        if node is self.q_newest:\n            return\n        if node is self.q_oldest:\n            self.q_oldest = node.q_newer\n        else:\n            node.q_older.q_newer = node.q_newer\n        node.q_newer.q_older = node.q_older\n        node.q_older = None\n        node.q_newer = self.q_newest\n        self.q_newest.q_older = node\n        self.q_newest = node\n\n    def _evict(self):\n        node = self.q_oldest\n        del self.cache[node.key]\n        self.q_oldest = node.q_newer\n        if self.q_oldest:\n            self.q_oldest.q_older = None\n\nclass Node:\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.q_older = None\n        self.q_newer = None\n```"
      ],
      "instruction_model_output": [
        "class LRUCache:\n    def __init__(self, capacity: int):\n        self.q_capacity = capacity\n        self.q_cache = {}\n        self.q_order = collections.OrderedDict()\n\n    def get(self, key: int) -> int:\n        if key not in self.q_cache:\n            return -1\n        self.q_order[key] = self.q_cache[key]\n        return self.q_cache[key]\n\n    def put(self, key: int, value: int) -> None:\n        if key in self.q_order:\n            self.q_order.move_to_end(key)\n        elif len(self.q_order) >= self.q_capacity:\n            self.q_evict()\n        self.q_order[key] = value\n        self.q_cache[key] = value\n\n    def q_evict(self) -> None:\n        evict_key = next(iter(self.q_order))\n        del self.q_order[evict_key]\n        del self.q_cache[evict_key]"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [
        "class LRUCache:\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.cache = {}\n        self.xt_head = None\n        self.xt_tail = None\n\n    def get(self, key):\n        if key not in self.cache:\n            return -1\n        value = self.cache[key]\n        self._move_to_xt_head(key)\n        return value\n\n    def put(self, key, value):\n        if self.capacity <= 0:\n            return\n        if key in self.cache:\n            self.cache[key] = value\n            self._move_to_xt_head(key)\n            return\n        if len(self.cache) >= self.capacity:\n            self.cache.pop(self.xt_tail)\n            self.xt_tail = self.xt_tail[-1] if self.xt_tail else None\n        self.cache[key] = value\n        self._add_to_xt_head(key)\n\n    def _move_to_xt_head(self, key):\n        if self.xt_head == key:\n            return\n        prev = self.cache[key][-2]\n        next = self.cache[key][-1]\n        if prev:\n            self.cache[prev][-1] = next\n        if next:\n            self.cache[next][-2] = prev\n        if self.xt_head == key:\n            self.xt_head = next\n        self.cache[key][-2] = None\n        self.cache[key][-1] = self.xt_head\n        self.xt_head = key\n        if not self.xt_tail:\n            self.xt_tail = key\n\n    def _add_to_xt_head(self, key):\n        if self.xt_head:\n            self.cache[key][-2] = None\n            self.cache[key][-1] = self.xt_head\n            self.cache[self.xt_head][-2] = key\n        else:\n            self.cache[key][-2] = None\n            self.cache[key][-1] = None\n        self.xt_head = key\n        self.xt_tail = self.xt_tail or key"
      ],
      "instruction_model_output": [
        "```python\nfrom collections import OrderedDict\n\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.xt_capacity = capacity\n        self.xt_cache = OrderedDict()\n\n    def get(self, key: int) -> int:\n        if key not in self.xt_cache:\n            return -1\n        self.xt_cache.move_to_end(key)\n        return self.xt_cache[key]\n\n    def put(self, key: int, value: int) -> None:\n        if key in self.xt_cache:\n            self.xt_cache.move_to_end(key)\n        elif len(self.xt_cache) >= self.xt_capacity:\n            self.xt_cache.popitem(last=False)\n        self.xt_cache[key] = value\n```"
      ],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": []
    },
    {
      "session_model_output": [],
      "instruction_model_output": [],
      "history_model_output": [
        "```python\ndef sum_array_except_self(nums: list[int]) -> list[int]:\n    j_length = len(nums)\n    j_result = [0] * j_length\n\n    left_sum = 0\n    right_sum = sum(nums)\n\n    for j_idx in range(j_length):\n        j_result[j_idx] = right_sum - left_sum\n        left_sum += nums[j_idx]\n        right_sum -= nums[j_idx]\n\n    return j_result\n```",
        "```python\nimport bz2\nfrom sklearn.neighbors import NearestNeighbors\n\nclass NearestNeighborsModel:\n    def __init__(self):\n        self.model = NearestNeighbors(algorithm='brute', leaf_size=30, metric='euclidean', path_memsave=None)\n\n    def train(self, X: 'np.ndarray[np.float32]') -> None:\n        self.model.fit(X)\n\n    def predict(self, X: 'np.ndarray[np.float32]') -> 'np.ndarray[np.int]':\n        j_indices = self.model.kneighbors(X, return_distance=False)\n        return j_indices\n```",
        "```python\nfrom collections import OrderedDict\n\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.cache = OrderedDict()\n\n    def get(self, key: int) -> int:\n        if key in self.cache:\n            self.cache.move_to_end(key)\n            return self.cache[key]\n        return -1\n\n    def put(self, key: int, value: int) -> None:\n        if key in self.cache:\n            self.cache.move_to_end(key)\n        elif len(self.cache) >= self.capacity:\n            self.cache.popitem(last=False)\n        self.cache[key] = value\n```",
        "```python\ndef merge_sorted_lists(list1: list[int], list2: list[int]) -> list[int]:\n    j_result = []\n    j_i = j_j = 0\n\n    while j_i < len(list1) and j_j < len(list2):\n        if list1[j_i] < list2[j_j]:\n            j_result.append(list1[j_i])\n            j_i += 1\n        else:\n            j_result.append(list2[j_j])\n            j_j += 1\n\n    j_result.extend(list1[j_i:])\n    j_result.extend(list2[j_j:])\n\n    return j_result\n```",
        "```python\ndef average_diagonal_elements(matrix: list[list[int]]) -> float:\n    j_diagonal_sum = 0\n    j_diagonal_count = 0\n\n    for i in range(len(matrix)):\n        j_diagonal_sum += matrix[i][i]\n        j_diagonal_count += 1\n\n    j_average = j_diagonal_sum / j_diagonal_count\n    return j_average\n```"
      ]
    }
  ]
}